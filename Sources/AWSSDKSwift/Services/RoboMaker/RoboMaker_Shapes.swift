// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RoboMaker {

    public struct RobotApplicationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "launchConfig", required: true, type: .structure), 
            AWSShapeMember(label: "applicationVersion", required: false, type: .string)
        ]
        /// The application information for the robot application.
        public let application: String
        /// The launch configuration for the robot application.
        public let launchConfig: LaunchConfig
        /// The version of the robot application.
        public let applicationVersion: String?

        public init(application: String, launchConfig: LaunchConfig, applicationVersion: String? = nil) {
            self.application = application
            self.launchConfig = launchConfig
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case launchConfig = "launchConfig"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct ListDeploymentJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// Optional filters to limit results.
        public let filters: [Filter]?
        /// The nextToken value returned from a previous paginated ListDeploymentJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The maximum number of deployment job results returned by ListDeploymentJobs in paginated output. When this parameter is used, ListDeploymentJobs only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListDeploymentJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListDeploymentJobs returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?

        public init(filters: [Filter]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct SimulationApplicationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp)
        ]
        /// The version of the simulation application.
        public let version: String?
        /// The name of the simulation application.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?

        public init(version: String? = nil, name: String? = nil, arn: String? = nil, lastUpdatedAt: TimeStamp? = nil) {
            self.version = version
            self.name = name
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case name = "name"
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
        }
    }

    public struct DeleteRobotResponse: AWSShape {

    }

    public struct DescribeSimulationApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "simulationSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "renderingEngine", required: false, type: .structure)
        ]
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The name of the simulation application.
        public let name: String?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the robot simulation application.
        public let arn: String?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The version of the simulation application.
        public let version: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?

        public init(simulationSoftwareSuite: SimulationSoftwareSuite? = nil, name: String? = nil, sources: [Source]? = nil, lastUpdatedAt: TimeStamp? = nil, arn: String? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, version: String? = nil, renderingEngine: RenderingEngine? = nil) {
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.name = name
            self.sources = sources
            self.lastUpdatedAt = lastUpdatedAt
            self.arn = arn
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.version = version
            self.renderingEngine = renderingEngine
        }

        private enum CodingKeys: String, CodingKey {
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case name = "name"
            case sources = "sources"
            case lastUpdatedAt = "lastUpdatedAt"
            case arn = "arn"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case version = "version"
            case renderingEngine = "renderingEngine"
        }
    }

    public struct DescribeSimulationApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "applicationVersion", required: false, type: .string)
        ]
        /// The application information for the simulation application.
        public let application: String
        /// The version of the simulation application to describe.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct RenderingEngine: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The name of the rendering engine.
        public let name: RenderingEngineType?
        /// The version of the rendering engine.
        public let version: String?

        public init(name: RenderingEngineType? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Prefix", required: false, type: .string), 
            AWSShapeMember(label: "s3Bucket", required: false, type: .string)
        ]
        /// The S3 folder in the s3Bucket where output files will be placed.
        public let s3Prefix: String?
        /// The S3 bucket for output.
        public let s3Bucket: String?

        public init(s3Prefix: String? = nil, s3Bucket: String? = nil) {
            self.s3Prefix = s3Prefix
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Prefix = "s3Prefix"
            case s3Bucket = "s3Bucket"
        }
    }

    public struct RegisterRobotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: true, type: .string), 
            AWSShapeMember(label: "robot", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String

        public init(fleet: String, robot: String) {
            self.fleet = fleet
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct DeploymentApplicationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "launchConfig", required: true, type: .structure), 
            AWSShapeMember(label: "applicationVersion", required: true, type: .string)
        ]
        /// The application.
        public let application: String
        /// The launch configuration, usually roslaunch.
        public let launchConfig: DeploymentLaunchConfig
        /// The version of the application.
        public let applicationVersion: String

        public init(application: String, launchConfig: DeploymentLaunchConfig, applicationVersion: String) {
            self.application = application
            self.launchConfig = launchConfig
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case launchConfig = "launchConfig"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct CreateSimulationApplicationVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "renderingEngine", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "simulationSoftwareSuite", required: false, type: .structure)
        ]
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The revision ID of the simulation application.
        public let revisionId: String?
        /// The version of the simulation application.
        public let version: String?
        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?

        public init(sources: [Source]? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, revisionId: String? = nil, version: String? = nil, arn: String? = nil, renderingEngine: RenderingEngine? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil) {
            self.sources = sources
            self.robotSoftwareSuite = robotSoftwareSuite
            self.revisionId = revisionId
            self.version = version
            self.arn = arn
            self.renderingEngine = renderingEngine
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.simulationSoftwareSuite = simulationSoftwareSuite
        }

        private enum CodingKeys: String, CodingKey {
            case sources = "sources"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case revisionId = "revisionId"
            case version = "version"
            case arn = "arn"
            case renderingEngine = "renderingEngine"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
        }
    }

    public enum RobotSoftwareSuiteType: String, CustomStringConvertible, Codable {
        case ros = "ROS"
        public var description: String { return self.rawValue }
    }

    public struct UpdateRobotApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "robotSoftwareSuite", required: true, type: .structure), 
            AWSShapeMember(label: "sources", required: true, type: .list), 
            AWSShapeMember(label: "currentRevisionId", required: false, type: .string)
        ]
        /// The application information for the robot application.
        public let application: String
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The sources of the robot application.
        public let sources: [SourceConfig]
        /// The revision id for the robot application.
        public let currentRevisionId: String?

        public init(application: String, robotSoftwareSuite: RobotSoftwareSuite, sources: [SourceConfig], currentRevisionId: String? = nil) {
            self.application = application
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.currentRevisionId = currentRevisionId
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case currentRevisionId = "currentRevisionId"
        }
    }

    public struct DeleteSimulationApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationVersion", required: false, type: .string), 
            AWSShapeMember(label: "application", required: true, type: .string)
        ]
        /// The version of the simulation application to delete.
        public let applicationVersion: String?
        /// The application information for the simulation application to delete.
        public let application: String

        public init(applicationVersion: String? = nil, application: String) {
            self.applicationVersion = applicationVersion
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersion = "applicationVersion"
            case application = "application"
        }
    }

    public struct CreateRobotApplicationVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The version of the robot application.
        public let version: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The name of the robot application.
        public let name: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?

        public init(arn: String? = nil, sources: [Source]? = nil, version: String? = nil, revisionId: String? = nil, name: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, lastUpdatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.sources = sources
            self.version = version
            self.revisionId = revisionId
            self.name = name
            self.robotSoftwareSuite = robotSoftwareSuite
            self.lastUpdatedAt = lastUpdatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case sources = "sources"
            case version = "version"
            case revisionId = "revisionId"
            case name = "name"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case lastUpdatedAt = "lastUpdatedAt"
        }
    }

    public struct VPCConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subnets", required: true, type: .list), 
            AWSShapeMember(label: "assignPublicIp", required: false, type: .boolean), 
            AWSShapeMember(label: "securityGroups", required: false, type: .list)
        ]
        /// A list of one or more subnet IDs in your VPC.
        public let subnets: [String]
        /// A boolean indicating whether to assign a public IP address.
        public let assignPublicIp: Bool?
        /// A list of one or more security groups IDs in your VPC.
        public let securityGroups: [String]?

        public init(subnets: [String], assignPublicIp: Bool? = nil, securityGroups: [String]? = nil) {
            self.subnets = subnets
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "subnets"
            case assignPublicIp = "assignPublicIp"
            case securityGroups = "securityGroups"
        }
    }

    public struct DescribeDeploymentJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentApplicationConfigs", required: false, type: .list), 
            AWSShapeMember(label: "deploymentConfig", required: false, type: .structure), 
            AWSShapeMember(label: "robotDeploymentSummary", required: false, type: .list), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "failureReason", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "fleet", required: false, type: .string)
        ]
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// A list of robot deployment summaries.
        public let robotDeploymentSummary: [RobotDeployment]?
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The deployment job failure code.
        public let failureCode: DeploymentJobErrorCode?
        /// A short description of the reason why the deployment job failed.
        public let failureReason: String?
        /// The time, in milliseconds since the epoch, when the deployment job was created.
        public let createdAt: TimeStamp?
        /// The status of the deployment job.
        public let status: DeploymentStatus?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?

        public init(deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, deploymentConfig: DeploymentConfig? = nil, robotDeploymentSummary: [RobotDeployment]? = nil, arn: String? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, createdAt: TimeStamp? = nil, status: DeploymentStatus? = nil, fleet: String? = nil) {
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.robotDeploymentSummary = robotDeploymentSummary
            self.arn = arn
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.createdAt = createdAt
            self.status = status
            self.fleet = fleet
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case robotDeploymentSummary = "robotDeploymentSummary"
            case arn = "arn"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case createdAt = "createdAt"
            case status = "status"
            case fleet = "fleet"
        }
    }

    public struct RestartSimulationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the simulation job.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct CreateDeploymentJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "failureReason", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfig", required: false, type: .structure), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "fleet", required: false, type: .string), 
            AWSShapeMember(label: "deploymentApplicationConfigs", required: false, type: .list)
        ]
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The status of the deployment job.
        public let status: DeploymentStatus?
        /// The failure reason of the deployment job if it failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The failure code of the deployment job if it failed.
        public let failureCode: DeploymentJobErrorCode?
        /// The target fleet for the deployment job.
        public let fleet: String?
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?

        public init(createdAt: TimeStamp? = nil, status: DeploymentStatus? = nil, failureReason: String? = nil, arn: String? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil, fleet: String? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil) {
            self.createdAt = createdAt
            self.status = status
            self.failureReason = failureReason
            self.arn = arn
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
            self.fleet = fleet
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case status = "status"
            case failureReason = "failureReason"
            case arn = "arn"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
            case fleet = "fleet"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
        }
    }

    public struct DescribeFleetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "lastDeploymentJob", required: false, type: .string), 
            AWSShapeMember(label: "lastDeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "robots", required: false, type: .list), 
            AWSShapeMember(label: "lastDeploymentStatus", required: false, type: .enum)
        ]
        /// The name of the fleet.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// A list of robots.
        public let robots: [Robot]?
        /// The status of the last deployment.
        public let lastDeploymentStatus: DeploymentStatus?

        public init(name: String? = nil, arn: String? = nil, lastDeploymentJob: String? = nil, lastDeploymentTime: TimeStamp? = nil, createdAt: TimeStamp? = nil, robots: [Robot]? = nil, lastDeploymentStatus: DeploymentStatus? = nil) {
            self.name = name
            self.arn = arn
            self.lastDeploymentJob = lastDeploymentJob
            self.lastDeploymentTime = lastDeploymentTime
            self.createdAt = createdAt
            self.robots = robots
            self.lastDeploymentStatus = lastDeploymentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
            case lastDeploymentJob = "lastDeploymentJob"
            case lastDeploymentTime = "lastDeploymentTime"
            case createdAt = "createdAt"
            case robots = "robots"
            case lastDeploymentStatus = "lastDeploymentStatus"
        }
    }

    public struct SourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "s3Key", required: false, type: .string), 
            AWSShapeMember(label: "architecture", required: false, type: .enum)
        ]
        /// The Amazon S3 bucket name.
        public let s3Bucket: String?
        /// The s3 object key.
        public let s3Key: String?
        /// The target processor architecture for the application.
        public let architecture: Architecture?

        public init(s3Bucket: String? = nil, s3Key: String? = nil, architecture: Architecture? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.architecture = architecture
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
            case architecture = "architecture"
        }
    }

    public enum SimulationJobStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case preparing = "Preparing"
        case running = "Running"
        case restarting = "Restarting"
        case completed = "Completed"
        case failed = "Failed"
        case runningfailed = "RunningFailed"
        case terminating = "Terminating"
        case terminated = "Terminated"
        case canceled = "Canceled"
        public var description: String { return self.rawValue }
    }

    public struct DeregisterRobotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robot", required: true, type: .string), 
            AWSShapeMember(label: "fleet", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String

        public init(robot: String, fleet: String) {
            self.robot = robot
            self.fleet = fleet
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
            case fleet = "fleet"
        }
    }

    public struct CancelSimulationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: true, type: .string)
        ]
        /// The simulation job ARN to cancel.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct DeploymentJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "fleet", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentApplicationConfigs", required: false, type: .list), 
            AWSShapeMember(label: "failureReason", required: false, type: .string), 
            AWSShapeMember(label: "deploymentConfig", required: false, type: .structure), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the deployment job was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The status of the deployment job.
        public let status: DeploymentStatus?
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// A short description of the reason why the deployment job failed.
        public let failureReason: String?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The deployment job failure code.
        public let failureCode: DeploymentJobErrorCode?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, fleet: String? = nil, status: DeploymentStatus? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, failureReason: String? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.fleet = fleet
            self.status = status
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.failureReason = failureReason
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case fleet = "fleet"
            case status = "status"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case failureReason = "failureReason"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
        }
    }

    public struct CreateSimulationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "simulationApplications", required: false, type: .list), 
            AWSShapeMember(label: "failureBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "iamRole", required: true, type: .string), 
            AWSShapeMember(label: "maxJobDurationInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "outputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "robotApplications", required: false, type: .list)
        ]
        /// If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID. 
        public let vpcConfig: VPCConfig?
        /// The simulation application to use in the simulation job.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// The failure behavior the simulation job.  Continue  Restart the simulation job in the same host instance.  Fail  Stop the simulation job and terminate the instance.  
        public let failureBehavior: FailureBehavior?
        /// The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. See how to specify AWS security credentials for your application. 
        public let iamRole: String
        /// The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When maxJobDurationInSeconds is reached, the simulation job will status will transition to Completed.
        public let maxJobDurationInSeconds: Int64
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// The robot application to use in the simulation job.
        public let robotApplications: [RobotApplicationConfig]?

        public init(vpcConfig: VPCConfig? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, failureBehavior: FailureBehavior? = nil, iamRole: String, maxJobDurationInSeconds: Int64, clientRequestToken: String? = nil, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil) {
            self.vpcConfig = vpcConfig
            self.simulationApplications = simulationApplications
            self.failureBehavior = failureBehavior
            self.iamRole = iamRole
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.clientRequestToken = clientRequestToken
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
        }

        private enum CodingKeys: String, CodingKey {
            case vpcConfig = "vpcConfig"
            case simulationApplications = "simulationApplications"
            case failureBehavior = "failureBehavior"
            case iamRole = "iamRole"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case clientRequestToken = "clientRequestToken"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
        }
    }

    public struct SimulationJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "failureBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "iamRole", required: false, type: .string), 
            AWSShapeMember(label: "simulationTimeMillis", required: false, type: .long), 
            AWSShapeMember(label: "robotApplications", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "simulationApplications", required: false, type: .list), 
            AWSShapeMember(label: "outputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "maxJobDurationInSeconds", required: false, type: .long)
        ]
        /// A unique identifier for this SimulationJob request.
        public let clientRequestToken: String?
        /// The failure behavior the simulation job.  Continue  Restart the simulation job in the same host instance.  Fail  Stop the simulation job and terminate the instance.  
        public let failureBehavior: FailureBehavior?
        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// The name of the simulation job.
        public let name: String?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The failure code of the simulation job if it failed.
        public let failureCode: SimulationJobErrorCode?
        /// The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. See how to specify AWS security credentials for your application. 
        public let iamRole: String?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// A list of robot applications.
        public let robotApplications: [RobotApplicationConfig]?
        /// Status of the simulation job.
        public let status: SimulationJobStatus?
        /// VPC configuration information.
        public let vpcConfig: VPCConfigResponse?
        /// A list of simulation applications.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.
        public let maxJobDurationInSeconds: Int64?

        public init(clientRequestToken: String? = nil, failureBehavior: FailureBehavior? = nil, arn: String? = nil, name: String? = nil, lastUpdatedAt: TimeStamp? = nil, failureCode: SimulationJobErrorCode? = nil, iamRole: String? = nil, simulationTimeMillis: Int64? = nil, robotApplications: [RobotApplicationConfig]? = nil, status: SimulationJobStatus? = nil, vpcConfig: VPCConfigResponse? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, outputLocation: OutputLocation? = nil, maxJobDurationInSeconds: Int64? = nil) {
            self.clientRequestToken = clientRequestToken
            self.failureBehavior = failureBehavior
            self.arn = arn
            self.name = name
            self.lastUpdatedAt = lastUpdatedAt
            self.failureCode = failureCode
            self.iamRole = iamRole
            self.simulationTimeMillis = simulationTimeMillis
            self.robotApplications = robotApplications
            self.status = status
            self.vpcConfig = vpcConfig
            self.simulationApplications = simulationApplications
            self.outputLocation = outputLocation
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case failureBehavior = "failureBehavior"
            case arn = "arn"
            case name = "name"
            case lastUpdatedAt = "lastUpdatedAt"
            case failureCode = "failureCode"
            case iamRole = "iamRole"
            case simulationTimeMillis = "simulationTimeMillis"
            case robotApplications = "robotApplications"
            case status = "status"
            case vpcConfig = "vpcConfig"
            case simulationApplications = "simulationApplications"
            case outputLocation = "outputLocation"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
        }
    }

    public struct ListFleetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of deployment job results returned by ListFleets in paginated output. When this parameter is used, ListFleets only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListFleets returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?
        /// Optional filters to limit results.
        public let filters: [Filter]?
        /// The nextToken value returned from a previous paginated ListFleets request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [Filter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filters = "filters"
            case nextToken = "nextToken"
        }
    }

    public struct ListSimulationJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// The nextToken value returned from a previous paginated ListSimulationJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The maximum number of deployment job results returned by ListSimulationJobs in paginated output. When this parameter is used, ListSimulationJobs only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListSimulationJobs returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?
        /// Optional filters to limit results.
        public let filters: [Filter]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filters: [Filter]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case filters = "filters"
        }
    }

    public struct BatchDescribeSimulationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobs", required: true, type: .list)
        ]
        /// A list of Amazon Resource Names (ARNs) of simulation jobs to describe.
        public let jobs: [String]

        public init(jobs: [String]) {
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
        }
    }

    public struct UpdateSimulationApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sources", required: true, type: .list), 
            AWSShapeMember(label: "robotSoftwareSuite", required: true, type: .structure), 
            AWSShapeMember(label: "currentRevisionId", required: false, type: .string), 
            AWSShapeMember(label: "renderingEngine", required: true, type: .structure), 
            AWSShapeMember(label: "simulationSoftwareSuite", required: true, type: .structure), 
            AWSShapeMember(label: "application", required: true, type: .string)
        ]
        /// The sources of the simulation application.
        public let sources: [SourceConfig]
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The revision id for the robot application.
        public let currentRevisionId: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite
        /// The application information for the simulation application.
        public let application: String

        public init(sources: [SourceConfig], robotSoftwareSuite: RobotSoftwareSuite, currentRevisionId: String? = nil, renderingEngine: RenderingEngine, simulationSoftwareSuite: SimulationSoftwareSuite, application: String) {
            self.sources = sources
            self.robotSoftwareSuite = robotSoftwareSuite
            self.currentRevisionId = currentRevisionId
            self.renderingEngine = renderingEngine
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case sources = "sources"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case currentRevisionId = "currentRevisionId"
            case renderingEngine = "renderingEngine"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case application = "application"
        }
    }

    public struct Robot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "architecture", required: false, type: .enum), 
            AWSShapeMember(label: "lastDeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "greenGrassGroupId", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "fleetArn", required: false, type: .string), 
            AWSShapeMember(label: "lastDeploymentJob", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The name of the robot.
        public let name: String?
        /// The architecture of the robot.
        public let architecture: Architecture?
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The Greengrass group associated with the robot.
        public let greenGrassGroupId: String?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleetArn: String?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The status of the robot.
        public let status: RobotStatus?

        public init(name: String? = nil, architecture: Architecture? = nil, lastDeploymentTime: TimeStamp? = nil, greenGrassGroupId: String? = nil, createdAt: TimeStamp? = nil, arn: String? = nil, fleetArn: String? = nil, lastDeploymentJob: String? = nil, status: RobotStatus? = nil) {
            self.name = name
            self.architecture = architecture
            self.lastDeploymentTime = lastDeploymentTime
            self.greenGrassGroupId = greenGrassGroupId
            self.createdAt = createdAt
            self.arn = arn
            self.fleetArn = fleetArn
            self.lastDeploymentJob = lastDeploymentJob
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case architecture = "architecture"
            case lastDeploymentTime = "lastDeploymentTime"
            case greenGrassGroupId = "greenGrassGroupId"
            case createdAt = "createdAt"
            case arn = "arn"
            case fleetArn = "fleetArn"
            case lastDeploymentJob = "lastDeploymentJob"
            case status = "status"
        }
    }

    public struct DescribeRobotApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The name of the robot application.
        public let name: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The version of the robot application.
        public let version: String?

        public init(name: String? = nil, revisionId: String? = nil, arn: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, lastUpdatedAt: TimeStamp? = nil, sources: [Source]? = nil, version: String? = nil) {
            self.name = name
            self.revisionId = revisionId
            self.arn = arn
            self.robotSoftwareSuite = robotSoftwareSuite
            self.lastUpdatedAt = lastUpdatedAt
            self.sources = sources
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case revisionId = "revisionId"
            case arn = "arn"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case lastUpdatedAt = "lastUpdatedAt"
            case sources = "sources"
            case version = "version"
        }
    }

    public enum RobotSoftwareSuiteVersionType: String, CustomStringConvertible, Codable {
        case kinetic = "Kinetic"
        public var description: String { return self.rawValue }
    }

    public struct CreateSimulationApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "sources", required: true, type: .list), 
            AWSShapeMember(label: "simulationSoftwareSuite", required: true, type: .structure), 
            AWSShapeMember(label: "renderingEngine", required: true, type: .structure), 
            AWSShapeMember(label: "robotSoftwareSuite", required: true, type: .structure)
        ]
        /// The name of the simulation application.
        public let name: String
        /// The sources of the simulation application.
        public let sources: [SourceConfig]
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine
        /// The robot software suite of the simulation application.
        public let robotSoftwareSuite: RobotSoftwareSuite

        public init(name: String, sources: [SourceConfig], simulationSoftwareSuite: SimulationSoftwareSuite, renderingEngine: RenderingEngine, robotSoftwareSuite: RobotSoftwareSuite) {
            self.name = name
            self.sources = sources
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.renderingEngine = renderingEngine
            self.robotSoftwareSuite = robotSoftwareSuite
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case sources = "sources"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case renderingEngine = "renderingEngine"
            case robotSoftwareSuite = "robotSoftwareSuite"
        }
    }

    public struct ListSimulationApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "versionQualifier", required: false, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// The nextToken value returned from a previous paginated ListSimulationApplications request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The maximum number of deployment job results returned by ListSimulationApplications in paginated output. When this parameter is used, ListSimulationApplications only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListSimulationApplications returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?
        /// The version qualifier of the simulation application.
        public let versionQualifier: String?
        /// Optional list of filters to limit results. The only valid filter name is name.
        public let filters: [Filter]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, versionQualifier: String? = nil, filters: [Filter]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.versionQualifier = versionQualifier
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case versionQualifier = "versionQualifier"
            case filters = "filters"
        }
    }

    public struct DescribeSimulationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the simulation job to be described.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "values", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// A list of values.
        public let values: [String]?
        /// The name of the filter.
        public let name: String?

        public init(values: [String]? = nil, name: String? = nil) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "values"
            case name = "name"
        }
    }

    public struct CreateSimulationApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "renderingEngine", required: false, type: .structure), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "simulationSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The version of the simulation application.
        public let version: String?
        /// The name of the simulation application.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?

        public init(renderingEngine: RenderingEngine? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, sources: [Source]? = nil, revisionId: String? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, lastUpdatedAt: TimeStamp? = nil, version: String? = nil, name: String? = nil, arn: String? = nil) {
            self.renderingEngine = renderingEngine
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.revisionId = revisionId
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.lastUpdatedAt = lastUpdatedAt
            self.version = version
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case renderingEngine = "renderingEngine"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case revisionId = "revisionId"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case lastUpdatedAt = "lastUpdatedAt"
            case version = "version"
            case name = "name"
            case arn = "arn"
        }
    }

    public struct SyncDeploymentJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: true, type: .string)
        ]
        /// The target fleet for the synchronization.
        public let fleet: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String

        public init(fleet: String, clientRequestToken: String) {
            self.fleet = fleet
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case clientRequestToken = "clientRequestToken"
        }
    }

    public struct RobotApplicationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The version of the robot application.
        public let version: String?
        /// The name of the robot application.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?

        public init(lastUpdatedAt: TimeStamp? = nil, version: String? = nil, name: String? = nil, arn: String? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.version = version
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case version = "version"
            case name = "name"
            case arn = "arn"
        }
    }

    public struct DeleteSimulationApplicationResponse: AWSShape {

    }

    public struct CreateRobotApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robotSoftwareSuite", required: true, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "sources", required: true, type: .list)
        ]
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The name of the robot application.
        public let name: String
        /// The sources of the robot application.
        public let sources: [SourceConfig]

        public init(robotSoftwareSuite: RobotSoftwareSuite, name: String, sources: [SourceConfig]) {
            self.robotSoftwareSuite = robotSoftwareSuite
            self.name = name
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case robotSoftwareSuite = "robotSoftwareSuite"
            case name = "name"
            case sources = "sources"
        }
    }

    public enum SimulationJobErrorCode: String, CustomStringConvertible, Codable {
        case internalserviceerror = "InternalServiceError"
        case robotapplicationcrash = "RobotApplicationCrash"
        case simulationapplicationcrash = "SimulationApplicationCrash"
        case badpermissionsrobotapplication = "BadPermissionsRobotApplication"
        case badpermissionssimulationapplication = "BadPermissionsSimulationApplication"
        case badpermissionss3output = "BadPermissionsS3Output"
        case badpermissionscloudwatchlogs = "BadPermissionsCloudwatchLogs"
        case subnetiplimitexceeded = "SubnetIpLimitExceeded"
        case enilimitexceeded = "ENILimitExceeded"
        case badpermissionsusercredentials = "BadPermissionsUserCredentials"
        case invalidbundlerobotapplication = "InvalidBundleRobotApplication"
        case invalidbundlesimulationapplication = "InvalidBundleSimulationApplication"
        case robotapplicationversionmismatchedetag = "RobotApplicationVersionMismatchedEtag"
        case simulationapplicationversionmismatchedetag = "SimulationApplicationVersionMismatchedEtag"
        public var description: String { return self.rawValue }
    }

    public struct BatchDescribeSimulationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobs", required: false, type: .list), 
            AWSShapeMember(label: "unprocessedJobs", required: false, type: .list)
        ]
        /// A list of simulation jobs.
        public let jobs: [SimulationJob]?
        /// A list of unprocessed simulation job Amazon Resource Names (ARNs).
        public let unprocessedJobs: [String]?

        public init(jobs: [SimulationJob]? = nil, unprocessedJobs: [String]? = nil) {
            self.jobs = jobs
            self.unprocessedJobs = unprocessedJobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
            case unprocessedJobs = "unprocessedJobs"
        }
    }

    public enum FailureBehavior: String, CustomStringConvertible, Codable {
        case fail = "Fail"
        case `continue` = "Continue"
        public var description: String { return self.rawValue }
    }

    public enum Architecture: String, CustomStringConvertible, Codable {
        case x8664 = "X86_64"
        case arm64 = "ARM64"
        case armhf = "ARMHF"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDeploymentJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct ProgressDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "currentProgress", required: false, type: .string), 
            AWSShapeMember(label: "targetResource", required: false, type: .string)
        ]
        /// The current progress status.
        public let currentProgress: String?
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let targetResource: String?

        public init(currentProgress: String? = nil, targetResource: String? = nil) {
            self.currentProgress = currentProgress
            self.targetResource = targetResource
        }

        private enum CodingKeys: String, CodingKey {
            case currentProgress = "currentProgress"
            case targetResource = "targetResource"
        }
    }

    public struct DeploymentConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureThresholdPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "concurrentDeploymentPercentage", required: false, type: .integer)
        ]
        /// The percentage of deployments that need to fail before stopping deployment.
        public let failureThresholdPercentage: Int32?
        /// The percentage of robots receiving the deployment at the same time.
        public let concurrentDeploymentPercentage: Int32?

        public init(failureThresholdPercentage: Int32? = nil, concurrentDeploymentPercentage: Int32? = nil) {
            self.failureThresholdPercentage = failureThresholdPercentage
            self.concurrentDeploymentPercentage = concurrentDeploymentPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case failureThresholdPercentage = "failureThresholdPercentage"
            case concurrentDeploymentPercentage = "concurrentDeploymentPercentage"
        }
    }

    public struct CreateRobotApplicationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "currentRevisionId", required: false, type: .string)
        ]
        /// The application information for the robot application.
        public let application: String
        /// The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.
        public let currentRevisionId: String?

        public init(application: String, currentRevisionId: String? = nil) {
            self.application = application
            self.currentRevisionId = currentRevisionId
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
        }
    }

    public struct ListDeploymentJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "deploymentJobs", required: false, type: .list)
        ]
        /// The nextToken value to include in a future ListDeploymentJobs request. When the results of a ListDeploymentJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// A list of deployment jobs that meet the criteria of the request.
        public let deploymentJobs: [DeploymentJob]?

        public init(nextToken: String? = nil, deploymentJobs: [DeploymentJob]? = nil) {
            self.nextToken = nextToken
            self.deploymentJobs = deploymentJobs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case deploymentJobs = "deploymentJobs"
        }
    }

    public enum RobotStatus: String, CustomStringConvertible, Codable {
        case available = "Available"
        case registered = "Registered"
        case pendingnewdeployment = "PendingNewDeployment"
        case deploying = "Deploying"
        case failed = "Failed"
        case insync = "InSync"
        case noresponse = "NoResponse"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: true, type: .string), 
            AWSShapeMember(label: "deploymentApplicationConfigs", required: true, type: .list), 
            AWSShapeMember(label: "clientRequestToken", required: true, type: .string), 
            AWSShapeMember(label: "deploymentConfig", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the fleet to deploy.
        public let fleet: String
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String
        /// The requested deployment configuration.
        public let deploymentConfig: DeploymentConfig?

        public init(fleet: String, deploymentApplicationConfigs: [DeploymentApplicationConfig], clientRequestToken: String, deploymentConfig: DeploymentConfig? = nil) {
            self.fleet = fleet
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.clientRequestToken = clientRequestToken
            self.deploymentConfig = deploymentConfig
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case clientRequestToken = "clientRequestToken"
            case deploymentConfig = "deploymentConfig"
        }
    }

    public struct DeleteRobotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robot", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String

        public init(robot: String) {
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
        }
    }

    public struct ListSimulationApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "simulationApplicationSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of simulation application summaries that meet the criteria of the request.
        public let simulationApplicationSummaries: [SimulationApplicationSummary]?
        /// The nextToken value to include in a future ListSimulationApplications request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(simulationApplicationSummaries: [SimulationApplicationSummary]? = nil, nextToken: String? = nil) {
            self.simulationApplicationSummaries = simulationApplicationSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case simulationApplicationSummaries = "simulationApplicationSummaries"
            case nextToken = "nextToken"
        }
    }

    public enum SimulationSoftwareSuiteType: String, CustomStringConvertible, Codable {
        case gazebo = "Gazebo"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String

        public init(fleet: String) {
            self.fleet = fleet
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
        }
    }

    public struct CreateRobotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "greengrassGroupId", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "architecture", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Greengrass group associated with the robot.
        public let greengrassGroupId: String?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The target architecture of the robot.
        public let architecture: Architecture?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The name of the robot.
        public let name: String?

        public init(greengrassGroupId: String? = nil, arn: String? = nil, architecture: Architecture? = nil, createdAt: TimeStamp? = nil, name: String? = nil) {
            self.greengrassGroupId = greengrassGroupId
            self.arn = arn
            self.architecture = architecture
            self.createdAt = createdAt
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case greengrassGroupId = "greengrassGroupId"
            case arn = "arn"
            case architecture = "architecture"
            case createdAt = "createdAt"
            case name = "name"
        }
    }

    public struct ListRobotsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robots", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of robots that meet the criteria of the request.
        public let robots: [Robot]?
        /// The nextToken value to include in a future ListRobots request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(robots: [Robot]? = nil, nextToken: String? = nil) {
            self.robots = robots
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case robots = "robots"
            case nextToken = "nextToken"
        }
    }

    public enum RenderingEngineType: String, CustomStringConvertible, Codable {
        case ogre = "OGRE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRobotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "lastDeploymentJob", required: false, type: .string), 
            AWSShapeMember(label: "architecture", required: false, type: .enum), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "fleetArn", required: false, type: .string), 
            AWSShapeMember(label: "lastDeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "greengrassGroupId", required: false, type: .string)
        ]
        /// The name of the robot.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The target architecture of the robot application.
        public let architecture: Architecture?
        /// The status of the fleet.
        public let status: RobotStatus?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleetArn: String?
        /// The time of the last deployment job.
        public let lastDeploymentTime: TimeStamp?
        /// The Greengrass group id.
        public let greengrassGroupId: String?

        public init(name: String? = nil, arn: String? = nil, lastDeploymentJob: String? = nil, architecture: Architecture? = nil, status: RobotStatus? = nil, createdAt: TimeStamp? = nil, fleetArn: String? = nil, lastDeploymentTime: TimeStamp? = nil, greengrassGroupId: String? = nil) {
            self.name = name
            self.arn = arn
            self.lastDeploymentJob = lastDeploymentJob
            self.architecture = architecture
            self.status = status
            self.createdAt = createdAt
            self.fleetArn = fleetArn
            self.lastDeploymentTime = lastDeploymentTime
            self.greengrassGroupId = greengrassGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
            case lastDeploymentJob = "lastDeploymentJob"
            case architecture = "architecture"
            case status = "status"
            case createdAt = "createdAt"
            case fleetArn = "fleetArn"
            case lastDeploymentTime = "lastDeploymentTime"
            case greengrassGroupId = "greengrassGroupId"
        }
    }

    public struct SyncDeploymentJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentApplicationConfigs", required: false, type: .list), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentConfig", required: false, type: .structure), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "fleet", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "failureReason", required: false, type: .string)
        ]
        /// Information about the deployment application configurations.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// The failure code if the job fails.
        public let failureCode: DeploymentJobErrorCode?
        /// The status of the synchronization job.
        public let status: DeploymentStatus?
        /// Information about the deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The Amazon Resource Name (ARN) of the synchronization request.
        public let arn: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The failure reason if the job fails.
        public let failureReason: String?

        public init(deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, failureCode: DeploymentJobErrorCode? = nil, status: DeploymentStatus? = nil, deploymentConfig: DeploymentConfig? = nil, arn: String? = nil, fleet: String? = nil, createdAt: TimeStamp? = nil, failureReason: String? = nil) {
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.failureCode = failureCode
            self.status = status
            self.deploymentConfig = deploymentConfig
            self.arn = arn
            self.fleet = fleet
            self.createdAt = createdAt
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case failureCode = "failureCode"
            case status = "status"
            case deploymentConfig = "deploymentConfig"
            case arn = "arn"
            case fleet = "fleet"
            case createdAt = "createdAt"
            case failureReason = "failureReason"
        }
    }

    public struct CreateRobotApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The name of the robot application.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The version of the robot application.
        public let version: String?

        public init(lastUpdatedAt: TimeStamp? = nil, sources: [Source]? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, revisionId: String? = nil, name: String? = nil, arn: String? = nil, version: String? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.sources = sources
            self.robotSoftwareSuite = robotSoftwareSuite
            self.revisionId = revisionId
            self.name = name
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case sources = "sources"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case revisionId = "revisionId"
            case name = "name"
            case arn = "arn"
            case version = "version"
        }
    }

    public struct CreateRobotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "greengrassGroupId", required: true, type: .string), 
            AWSShapeMember(label: "architecture", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The Greengrass group id.
        public let greengrassGroupId: String
        /// The target architecture of the robot.
        public let architecture: Architecture
        /// The name for the robot.
        public let name: String

        public init(greengrassGroupId: String, architecture: Architecture, name: String) {
            self.greengrassGroupId = greengrassGroupId
            self.architecture = architecture
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case greengrassGroupId = "greengrassGroupId"
            case architecture = "architecture"
            case name = "name"
        }
    }

    public struct ListRobotApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionQualifier", required: false, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The version qualifier of the robot application.
        public let versionQualifier: String?
        /// Optional filters to limit results.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListRobotApplications in paginated output. When this parameter is used, ListRobotApplications only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListRobotApplications returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?
        /// The nextToken value returned from a previous paginated ListRobotApplications request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(versionQualifier: String? = nil, filters: [Filter]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.versionQualifier = versionQualifier
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case versionQualifier = "versionQualifier"
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct VPCConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assignPublicIp", required: false, type: .boolean), 
            AWSShapeMember(label: "vpcId", required: false, type: .string), 
            AWSShapeMember(label: "subnets", required: false, type: .list), 
            AWSShapeMember(label: "securityGroups", required: false, type: .list)
        ]
        /// A boolean indicating if a public IP was assigned.
        public let assignPublicIp: Bool?
        /// The VPC ID associated with your simulation job.
        public let vpcId: String?
        /// A list of subnet IDs associated with the simulation job.
        public let subnets: [String]?
        /// A list of security group IDs associated with the simulation job.
        public let securityGroups: [String]?

        public init(assignPublicIp: Bool? = nil, vpcId: String? = nil, subnets: [String]? = nil, securityGroups: [String]? = nil) {
            self.assignPublicIp = assignPublicIp
            self.vpcId = vpcId
            self.subnets = subnets
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
            case vpcId = "vpcId"
            case subnets = "subnets"
            case securityGroups = "securityGroups"
        }
    }

    public struct DescribeRobotApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "applicationVersion", required: false, type: .string), 
            AWSShapeMember(label: "application", required: true, type: .string)
        ]
        /// The version of the robot application to describe.
        public let applicationVersion: String?
        /// The Amazon Resource Name (ARN) of the robot application.
        public let application: String

        public init(applicationVersion: String? = nil, application: String) {
            self.applicationVersion = applicationVersion
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersion = "applicationVersion"
            case application = "application"
        }
    }

    public struct DescribeFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String

        public init(fleet: String) {
            self.fleet = fleet
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
        }
    }

    public struct DeleteFleetResponse: AWSShape {

    }

    public struct SimulationJobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "robotApplicationNames", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "simulationApplicationNames", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The name of the simulation job.
        public let name: String?
        /// A list of simulation job robot application names.
        public let robotApplicationNames: [String]?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// A list of simulation job simulation application names.
        public let simulationApplicationNames: [String]?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?
        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?

        public init(name: String? = nil, robotApplicationNames: [String]? = nil, lastUpdatedAt: TimeStamp? = nil, simulationApplicationNames: [String]? = nil, status: SimulationJobStatus? = nil, arn: String? = nil) {
            self.name = name
            self.robotApplicationNames = robotApplicationNames
            self.lastUpdatedAt = lastUpdatedAt
            self.simulationApplicationNames = simulationApplicationNames
            self.status = status
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case robotApplicationNames = "robotApplicationNames"
            case lastUpdatedAt = "lastUpdatedAt"
            case simulationApplicationNames = "simulationApplicationNames"
            case status = "status"
            case arn = "arn"
        }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case preparing = "Preparing"
        case inprogress = "InProgress"
        case failed = "Failed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct CreateFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the fleet.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct SimulationSoftwareSuite: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The name of the simulation software suite.
        public let name: SimulationSoftwareSuiteType?
        /// The version of the simulation software suite.
        public let version: String?

        public init(name: SimulationSoftwareSuiteType? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct ListSimulationJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "simulationJobSummaries", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of simulation job summaries that meet the criteria of the request.
        public let simulationJobSummaries: [SimulationJobSummary]
        /// The nextToken value to include in a future ListSimulationJobs request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(simulationJobSummaries: [SimulationJobSummary], nextToken: String? = nil) {
            self.simulationJobSummaries = simulationJobSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case simulationJobSummaries = "simulationJobSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteRobotApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "applicationVersion", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the the robot application.
        public let application: String
        /// The version of the robot application to delete.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public enum DeploymentJobErrorCode: String, CustomStringConvertible, Codable {
        case resourcenotfound = "ResourceNotFound"
        case failurethresholdbreached = "FailureThresholdBreached"
        case robotdeploymentnoresponse = "RobotDeploymentNoResponse"
        case greengrassdeploymentfailed = "GreengrassDeploymentFailed"
        case missingrobotarchitecture = "MissingRobotArchitecture"
        case missingrobotapplicationarchitecture = "MissingRobotApplicationArchitecture"
        case missingrobotdeploymentresource = "MissingRobotDeploymentResource"
        case greengrassgroupversiondoesnotexist = "GreengrassGroupVersionDoesNotExist"
        case extractingbundlefailure = "ExtractingBundleFailure"
        case prelaunchfilefailure = "PreLaunchFileFailure"
        case postlaunchfilefailure = "PostLaunchFileFailure"
        case badpermissionerror = "BadPermissionError"
        case internalservererror = "InternalServerError"
        public var description: String { return self.rawValue }
    }

    public struct LaunchConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "environmentVariables", required: false, type: .map), 
            AWSShapeMember(label: "launchFile", required: true, type: .string), 
            AWSShapeMember(label: "packageName", required: true, type: .string)
        ]
        /// The environment variables for the application launch.
        public let environmentVariables: [String: String]?
        /// The launch file.
        public let launchFile: String
        /// The package name.
        public let packageName: String

        public init(environmentVariables: [String: String]? = nil, launchFile: String, packageName: String) {
            self.environmentVariables = environmentVariables
            self.launchFile = launchFile
            self.packageName = packageName
        }

        private enum CodingKeys: String, CodingKey {
            case environmentVariables = "environmentVariables"
            case launchFile = "launchFile"
            case packageName = "packageName"
        }
    }

    public struct RobotDeployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "progressDetail", required: false, type: .structure), 
            AWSShapeMember(label: "deploymentStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "failureReason", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentFinishTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum)
        ]
        /// Information about how the deployment is progressing.
        public let progressDetail: ProgressDetail?
        /// The time, in milliseconds since the epoch, when the deployment was started.
        public let deploymentStartTime: TimeStamp?
        /// The robot deployment Amazon Resource Name (ARN).
        public let arn: String?
        /// A short description of the reason why the robot deployment failed.
        public let failureReason: String?
        /// The status of the robot deployment.
        public let status: RobotStatus?
        /// The time, in milliseconds since the epoch, when the deployment finished.
        public let deploymentFinishTime: TimeStamp?
        /// The robot deployment failure code.
        public let failureCode: DeploymentJobErrorCode?

        public init(progressDetail: ProgressDetail? = nil, deploymentStartTime: TimeStamp? = nil, arn: String? = nil, failureReason: String? = nil, status: RobotStatus? = nil, deploymentFinishTime: TimeStamp? = nil, failureCode: DeploymentJobErrorCode? = nil) {
            self.progressDetail = progressDetail
            self.deploymentStartTime = deploymentStartTime
            self.arn = arn
            self.failureReason = failureReason
            self.status = status
            self.deploymentFinishTime = deploymentFinishTime
            self.failureCode = failureCode
        }

        private enum CodingKeys: String, CodingKey {
            case progressDetail = "progressDetail"
            case deploymentStartTime = "deploymentStartTime"
            case arn = "arn"
            case failureReason = "failureReason"
            case status = "status"
            case deploymentFinishTime = "deploymentFinishTime"
            case failureCode = "failureCode"
        }
    }

    public struct Fleet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastDeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastDeploymentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "lastDeploymentJob", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The status of the last fleet deployment.
        public let lastDeploymentStatus: DeploymentStatus?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The name of the fleet.
        public let name: String?

        public init(lastDeploymentTime: TimeStamp? = nil, createdAt: TimeStamp? = nil, lastDeploymentStatus: DeploymentStatus? = nil, lastDeploymentJob: String? = nil, arn: String? = nil, name: String? = nil) {
            self.lastDeploymentTime = lastDeploymentTime
            self.createdAt = createdAt
            self.lastDeploymentStatus = lastDeploymentStatus
            self.lastDeploymentJob = lastDeploymentJob
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastDeploymentTime = "lastDeploymentTime"
            case createdAt = "createdAt"
            case lastDeploymentStatus = "lastDeploymentStatus"
            case lastDeploymentJob = "lastDeploymentJob"
            case arn = "arn"
            case name = "name"
        }
    }

    public struct UpdateRobotApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The Amazon Resource Name (ARN) of the updated robot application.
        public let arn: String?
        /// The name of the robot application.
        public let name: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The version of the robot application.
        public let version: String?

        public init(lastUpdatedAt: TimeStamp? = nil, sources: [Source]? = nil, arn: String? = nil, name: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, revisionId: String? = nil, version: String? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.sources = sources
            self.arn = arn
            self.name = name
            self.robotSoftwareSuite = robotSoftwareSuite
            self.revisionId = revisionId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case sources = "sources"
            case arn = "arn"
            case name = "name"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case revisionId = "revisionId"
            case version = "version"
        }
    }

    public struct ListRobotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of deployment job results returned by ListRobots in paginated output. When this parameter is used, ListRobots only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListRobots returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int32?
        /// Optional filters to limit results.
        public let filters: [Filter]?
        /// The nextToken value returned from a previous paginated ListRobots request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, filters: [Filter]? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filters = "filters"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeRobotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robot", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the robot to be described.
        public let robot: String

        public init(robot: String) {
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
        }
    }

    public struct UpdateSimulationApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robotSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "simulationSoftwareSuite", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "sources", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "renderingEngine", required: false, type: .structure), 
            AWSShapeMember(label: "revisionId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The name of the simulation application.
        public let name: String?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the updated simulation application.
        public let arn: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// The version of the robot application.
        public let version: String?

        public init(robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, name: String? = nil, sources: [Source]? = nil, lastUpdatedAt: TimeStamp? = nil, arn: String? = nil, renderingEngine: RenderingEngine? = nil, revisionId: String? = nil, version: String? = nil) {
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.name = name
            self.sources = sources
            self.lastUpdatedAt = lastUpdatedAt
            self.arn = arn
            self.renderingEngine = renderingEngine
            self.revisionId = revisionId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case name = "name"
            case sources = "sources"
            case lastUpdatedAt = "lastUpdatedAt"
            case arn = "arn"
            case renderingEngine = "renderingEngine"
            case revisionId = "revisionId"
            case version = "version"
        }
    }

    public struct RestartSimulationJobResponse: AWSShape {

    }

    public struct CancelSimulationJobResponse: AWSShape {

    }

    public struct DeploymentLaunchConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "postLaunchFile", required: false, type: .string), 
            AWSShapeMember(label: "launchFile", required: true, type: .string), 
            AWSShapeMember(label: "packageName", required: true, type: .string), 
            AWSShapeMember(label: "environmentVariables", required: false, type: .map), 
            AWSShapeMember(label: "preLaunchFile", required: false, type: .string)
        ]
        /// The deployment post-launch file. This file will be executed after the deployment launch file.
        public let postLaunchFile: String?
        /// The deployment launch file.
        public let launchFile: String
        /// The package name.
        public let packageName: String
        /// An array of key/value pairs specifying environment variables for the deployment application.
        public let environmentVariables: [String: String]?
        /// The deployment pre-launch file. This file will be executed prior to the deployment launch file.
        public let preLaunchFile: String?

        public init(postLaunchFile: String? = nil, launchFile: String, packageName: String, environmentVariables: [String: String]? = nil, preLaunchFile: String? = nil) {
            self.postLaunchFile = postLaunchFile
            self.launchFile = launchFile
            self.packageName = packageName
            self.environmentVariables = environmentVariables
            self.preLaunchFile = preLaunchFile
        }

        private enum CodingKeys: String, CodingKey {
            case postLaunchFile = "postLaunchFile"
            case launchFile = "launchFile"
            case packageName = "packageName"
            case environmentVariables = "environmentVariables"
            case preLaunchFile = "preLaunchFile"
        }
    }

    public struct CreateSimulationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxJobDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "simulationTimeMillis", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "outputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "robotApplications", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "failureBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "iamRole", required: false, type: .string), 
            AWSShapeMember(label: "simulationApplications", required: false, type: .list)
        ]
        /// The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less. 
        public let maxJobDurationInSeconds: Int64?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?
        /// Simulation job output files location.
        public let outputLocation: OutputLocation?
        /// The robot application used by the simulation job.
        public let robotApplications: [RobotApplicationConfig]?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// the failure behavior for the simulation job.
        public let failureBehavior: FailureBehavior?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// Information about the vpc configuration.
        public let vpcConfig: VPCConfigResponse?
        /// The failure code of the simulation job if it failed.
        public let failureCode: SimulationJobErrorCode?
        /// The IAM role that allows the simulation job to call the AWS APIs that are specified in its associated policies on your behalf.
        public let iamRole: String?
        /// The simulation application used by the simulation job.
        public let simulationApplications: [SimulationApplicationConfig]?

        public init(maxJobDurationInSeconds: Int64? = nil, simulationTimeMillis: Int64? = nil, status: SimulationJobStatus? = nil, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil, lastUpdatedAt: TimeStamp? = nil, arn: String? = nil, failureBehavior: FailureBehavior? = nil, clientRequestToken: String? = nil, vpcConfig: VPCConfigResponse? = nil, failureCode: SimulationJobErrorCode? = nil, iamRole: String? = nil, simulationApplications: [SimulationApplicationConfig]? = nil) {
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.simulationTimeMillis = simulationTimeMillis
            self.status = status
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
            self.lastUpdatedAt = lastUpdatedAt
            self.arn = arn
            self.failureBehavior = failureBehavior
            self.clientRequestToken = clientRequestToken
            self.vpcConfig = vpcConfig
            self.failureCode = failureCode
            self.iamRole = iamRole
            self.simulationApplications = simulationApplications
        }

        private enum CodingKeys: String, CodingKey {
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case simulationTimeMillis = "simulationTimeMillis"
            case status = "status"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
            case lastUpdatedAt = "lastUpdatedAt"
            case arn = "arn"
            case failureBehavior = "failureBehavior"
            case clientRequestToken = "clientRequestToken"
            case vpcConfig = "vpcConfig"
            case failureCode = "failureCode"
            case iamRole = "iamRole"
            case simulationApplications = "simulationApplications"
        }
    }

    public struct RobotSoftwareSuite: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .enum)
        ]
        /// The version of the robot software suite.
        public let version: RobotSoftwareSuiteVersionType?
        /// The name of the robot software suite.
        public let name: RobotSoftwareSuiteType?

        public init(version: RobotSoftwareSuiteVersionType? = nil, name: RobotSoftwareSuiteType? = nil) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case name = "name"
        }
    }

    public struct DeleteRobotApplicationResponse: AWSShape {

    }

    public struct Source: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "architecture", required: false, type: .enum), 
            AWSShapeMember(label: "s3Key", required: false, type: .string), 
            AWSShapeMember(label: "s3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "etag", required: false, type: .string)
        ]
        /// The taget processor architecture for the application.
        public let architecture: Architecture?
        /// The s3 object key.
        public let s3Key: String?
        /// The s3 bucket name.
        public let s3Bucket: String?
        /// A hash of the object specified by s3Bucket and s3Key.
        public let etag: String?

        public init(architecture: Architecture? = nil, s3Key: String? = nil, s3Bucket: String? = nil, etag: String? = nil) {
            self.architecture = architecture
            self.s3Key = s3Key
            self.s3Bucket = s3Bucket
            self.etag = etag
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case s3Key = "s3Key"
            case s3Bucket = "s3Bucket"
            case etag = "etag"
        }
    }

    public struct CreateFleetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The name of the fleet.
        public let name: String?

        public init(createdAt: TimeStamp? = nil, arn: String? = nil, name: String? = nil) {
            self.createdAt = createdAt
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case arn = "arn"
            case name = "name"
        }
    }

    public struct DeregisterRobotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleet", required: false, type: .string), 
            AWSShapeMember(label: "robot", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String?

        public init(fleet: String? = nil, robot: String? = nil) {
            self.fleet = fleet
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct DescribeSimulationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "outputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "failureCode", required: false, type: .enum), 
            AWSShapeMember(label: "simulationApplications", required: false, type: .list), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "failureBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "iamRole", required: false, type: .string), 
            AWSShapeMember(label: "simulationTimeMillis", required: false, type: .long), 
            AWSShapeMember(label: "robotApplications", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "maxJobDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "vpcConfig", required: false, type: .structure)
        ]
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// The failure code of the simulation job if it failed:  InternalServiceError  Internal service error  RobotApplicationCrash  Robot application exited abnormally (segfault, etc.)  SimulationApplicationCrash   Simulation application exited abnormally (segfault, etc.)  BadPermissionsRobotApplication  Robot application bundle could not be downloaded  BadPermissionsSimulationApplication  Simulation application bundle could not be downloaded  BadPermissionsS3Output  Unable to publish outputs to customer-provided S3 bucket  BadPermissionsCloudwatchLogs  Unable to publish logs to customer-provided CloudWatch Logs resource  SubnetIpLimitExceeded  Subnet IP limit exceeded  ENILimitExceeded  ENI limit exceeded  BadPermissionsUserCredentials  Unable to use the Role provided  InvalidBundleRobotApplication  Robot bundle cannot be extracted (invalid format, bundling error, etc.)  InvalidBundleSimulationApplication  Simulation bundle cannot be extracted (invalid format, bundling error, etc.)  RobotApplicationVersionMismatchedEtag  Etag for RobotApplication does not match value during version creation  SimulationApplicationVersionMismatchedEtag  Etag for SimulationApplication does not match value during version creation  
        public let failureCode: SimulationJobErrorCode?
        /// A list of simulation applications.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The failure behavior for the simulation job.
        public let failureBehavior: FailureBehavior?
        /// The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf.
        public let iamRole: String?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// A list of robot applications.
        public let robotApplications: [RobotApplicationConfig]?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?
        /// The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or less.
        public let maxJobDurationInSeconds: Int64?
        /// The name of the simulation job.
        public let name: String?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// The VPC configuration.
        public let vpcConfig: VPCConfigResponse?

        public init(outputLocation: OutputLocation? = nil, failureCode: SimulationJobErrorCode? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, clientRequestToken: String? = nil, failureBehavior: FailureBehavior? = nil, iamRole: String? = nil, simulationTimeMillis: Int64? = nil, robotApplications: [RobotApplicationConfig]? = nil, status: SimulationJobStatus? = nil, maxJobDurationInSeconds: Int64? = nil, name: String? = nil, lastUpdatedAt: TimeStamp? = nil, arn: String? = nil, vpcConfig: VPCConfigResponse? = nil) {
            self.outputLocation = outputLocation
            self.failureCode = failureCode
            self.simulationApplications = simulationApplications
            self.clientRequestToken = clientRequestToken
            self.failureBehavior = failureBehavior
            self.iamRole = iamRole
            self.simulationTimeMillis = simulationTimeMillis
            self.robotApplications = robotApplications
            self.status = status
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.name = name
            self.lastUpdatedAt = lastUpdatedAt
            self.arn = arn
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case outputLocation = "outputLocation"
            case failureCode = "failureCode"
            case simulationApplications = "simulationApplications"
            case clientRequestToken = "clientRequestToken"
            case failureBehavior = "failureBehavior"
            case iamRole = "iamRole"
            case simulationTimeMillis = "simulationTimeMillis"
            case robotApplications = "robotApplications"
            case status = "status"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case name = "name"
            case lastUpdatedAt = "lastUpdatedAt"
            case arn = "arn"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct CreateSimulationApplicationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "currentRevisionId", required: false, type: .string)
        ]
        /// The application information for the simulation application.
        public let application: String
        /// The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.
        public let currentRevisionId: String?

        public init(application: String, currentRevisionId: String? = nil) {
            self.application = application
            self.currentRevisionId = currentRevisionId
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
        }
    }

    public struct SimulationApplicationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "launchConfig", required: true, type: .structure), 
            AWSShapeMember(label: "application", required: true, type: .string), 
            AWSShapeMember(label: "applicationVersion", required: false, type: .string)
        ]
        /// The launch configuration for the simulation application.
        public let launchConfig: LaunchConfig
        /// The application information for the simulation application.
        public let application: String
        /// The version of the simulation application.
        public let applicationVersion: String?

        public init(launchConfig: LaunchConfig, application: String, applicationVersion: String? = nil) {
            self.launchConfig = launchConfig
            self.application = application
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfig = "launchConfig"
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct ListRobotApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robotApplicationSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of robot application summaries that meet the criteria of the request.
        public let robotApplicationSummaries: [RobotApplicationSummary]?
        /// The nextToken value to include in a future ListRobotApplications request. When the results of a ListRobotApplications request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(robotApplicationSummaries: [RobotApplicationSummary]? = nil, nextToken: String? = nil) {
            self.robotApplicationSummaries = robotApplicationSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case robotApplicationSummaries = "robotApplicationSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct RegisterRobotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "robot", required: false, type: .string), 
            AWSShapeMember(label: "fleet", required: false, type: .string)
        ]
        /// Information about the robot registration.
        public let robot: String?
        /// The Amazon Resource Name (ARN) of the fleet that the robot will join.
        public let fleet: String?

        public init(robot: String? = nil, fleet: String? = nil) {
            self.robot = robot
            self.fleet = fleet
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
            case fleet = "fleet"
        }
    }

    public struct ListFleetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fleetDetails", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of fleet details meeting the request criteria.
        public let fleetDetails: [Fleet]?
        /// The nextToken value to include in a future ListDeploymentJobs request. When the results of a ListFleets request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(fleetDetails: [Fleet]? = nil, nextToken: String? = nil) {
            self.fleetDetails = fleetDetails
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetDetails = "fleetDetails"
            case nextToken = "nextToken"
        }
    }

}