// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Snowball {

    public struct S3Resource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For export jobs, you can provide an optional KeyRange within a specific Amazon S3 bucket. The length of the range is defined at job creation, and has either an inclusive BeginMarker, an inclusive EndMarker, or both. Ranges are UTF-8 binary sorted.
        public let keyRange: KeyRange?
        /// The Amazon Resource Name (ARN) of an Amazon S3 bucket.
        public let bucketArn: String?

        public init(keyRange: KeyRange? = nil, bucketArn: String? = nil) {
            self.keyRange = keyRange
            self.bucketArn = bucketArn
        }

        public init(dictionary: [String: Any]) throws {
            if let keyRange = dictionary["KeyRange"] as? [String: Any] { self.keyRange = try Snowball.KeyRange(dictionary: keyRange) } else { self.keyRange = nil }
            self.bucketArn = dictionary["BucketArn"] as? String
        }
    }

    public struct UpdateJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The updated shipping option value of this job's ShippingDetails object.
        public let shippingOption: ShippingOption?
        /// The updated SnowballCapacityPreference of this job's JobMetadata object. The 50 TB Snowballs are only available in the US regions.
        public let snowballCapacityPreference: SnowballCapacity?
        /// The ID of the updated Address object.
        public let addressId: String?
        /// The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the CreateRole AWS Identity and Access Management (IAM) API action.
        public let roleARN: String?
        /// The new or updated Notification object.
        public let notification: Notification?
        /// The updated S3Resource object (for a single Amazon S3 bucket or key range), or the updated JobResource object (for multiple buckets or key ranges). 
        public let resources: JobResource?
        /// The job ID of the job that you want to update, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String
        /// The updated description of this job's JobMetadata object.
        public let description: String?

        public init(shippingOption: ShippingOption? = nil, snowballCapacityPreference: SnowballCapacity? = nil, addressId: String? = nil, roleARN: String? = nil, notification: Notification? = nil, resources: JobResource? = nil, jobId: String, description: String? = nil) {
            self.shippingOption = shippingOption
            self.snowballCapacityPreference = snowballCapacityPreference
            self.addressId = addressId
            self.roleARN = roleARN
            self.notification = notification
            self.resources = resources
            self.jobId = jobId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let shippingOption = dictionary["ShippingOption"] as? String { self.shippingOption = ShippingOption(rawValue: shippingOption) } else { self.shippingOption = nil }
            if let snowballCapacityPreference = dictionary["SnowballCapacityPreference"] as? String { self.snowballCapacityPreference = SnowballCapacity(rawValue: snowballCapacityPreference) } else { self.snowballCapacityPreference = nil }
            self.addressId = dictionary["AddressId"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            if let resources = dictionary["Resources"] as? [String: Any] { self.resources = try Snowball.JobResource(dictionary: resources) } else { self.resources = nil }
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
            self.description = dictionary["Description"] as? String
        }
    }

    public enum SnowballCapacity: String, CustomStringConvertible {
        case t50 = "T50"
        case t80 = "T80"
        case t100 = "T100"
        case nopreference = "NoPreference"
        public var description: String { return self.rawValue }
    }

    public struct JobResource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of S3Resource objects.
        public let s3Resources: [S3Resource]?
        /// The Python-language Lambda functions for this job.
        public let lambdaResources: [LambdaResource]?

        public init(s3Resources: [S3Resource]? = nil, lambdaResources: [LambdaResource]? = nil) {
            self.s3Resources = s3Resources
            self.lambdaResources = lambdaResources
        }

        public init(dictionary: [String: Any]) throws {
            if let s3Resources = dictionary["S3Resources"] as? [[String: Any]] {
                self.s3Resources = try s3Resources.map({ try S3Resource(dictionary: $0) })
            } else { 
                self.s3Resources = nil
            }
            if let lambdaResources = dictionary["LambdaResources"] as? [[String: Any]] {
                self.lambdaResources = try lambdaResources.map({ try LambdaResource(dictionary: $0) })
            } else { 
                self.lambdaResources = nil
            }
        }
    }

    public struct CancelClusterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The 39-character ID for the cluster that you want to cancel, for example CID123e4567-e89b-12d3-a456-426655440000.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterId = dictionary["ClusterId"] as? String else { throw InitializableError.missingRequiredParam("ClusterId") }
            self.clusterId = clusterId
        }
    }

    public struct ShippingDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The shipping speed for a particular job. This speed doesn't dictate how soon you'll get the Snowball from the job's creation date. This speed represents how quickly it moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowballs are delivered in one to seven days.   In the United States of America (US), you have access to one-day shipping and two-day shipping.  
        public let shippingOption: ShippingOption?
        /// The Status and TrackingNumber values for a Snowball being delivered to the address that you specified for a particular job.
        public let inboundShipment: Shipment?
        /// The Status and TrackingNumber values for a Snowball being returned to AWS for a particular job.
        public let outboundShipment: Shipment?

        public init(shippingOption: ShippingOption? = nil, inboundShipment: Shipment? = nil, outboundShipment: Shipment? = nil) {
            self.shippingOption = shippingOption
            self.inboundShipment = inboundShipment
            self.outboundShipment = outboundShipment
        }

        public init(dictionary: [String: Any]) throws {
            if let shippingOption = dictionary["ShippingOption"] as? String { self.shippingOption = ShippingOption(rawValue: shippingOption) } else { self.shippingOption = nil }
            if let inboundShipment = dictionary["InboundShipment"] as? [String: Any] { self.inboundShipment = try Snowball.Shipment(dictionary: inboundShipment) } else { self.inboundShipment = nil }
            if let outboundShipment = dictionary["OutboundShipment"] as? [String: Any] { self.outboundShipment = try Snowball.Shipment(dictionary: outboundShipment) } else { self.outboundShipment = nil }
        }
    }

    public struct ListClusterJobsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. To identify what object comes "next" in the list of JobListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        public let nextToken: String?
        /// The 39-character ID for the cluster that you want to list, for example CID123e4567-e89b-12d3-a456-426655440000.
        public let clusterId: String
        /// The number of JobListEntry objects to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, clusterId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.clusterId = clusterId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let clusterId = dictionary["ClusterId"] as? String else { throw InitializableError.missingRequiredParam("ClusterId") }
            self.clusterId = clusterId
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct UpdateJobResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct EventTriggerDefinition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) for any local Amazon S3 resource that is an AWS Lambda function's event trigger associated with this job.
        public let eventResourceARN: String?

        public init(eventResourceARN: String? = nil) {
            self.eventResourceARN = eventResourceARN
        }

        public init(dictionary: [String: Any]) throws {
            self.eventResourceARN = dictionary["EventResourceARN"] as? String
        }
    }

    public struct GetJobUnlockCodeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID for the job that you want to get the UnlockCode value for, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
        }
    }

    public struct KeyRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The key that starts an optional key range for an export job. Ranges are inclusive and UTF-8 binary sorted.
        public let beginMarker: String?
        /// The key that ends an optional key range for an export job. Ranges are inclusive and UTF-8 binary sorted.
        public let endMarker: String?

        public init(beginMarker: String? = nil, endMarker: String? = nil) {
            self.beginMarker = beginMarker
            self.endMarker = endMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.beginMarker = dictionary["BeginMarker"] as? String
            self.endMarker = dictionary["EndMarker"] as? String
        }
    }

    public enum SnowballType: String, CustomStringConvertible {
        case standard = "STANDARD"
        case edge = "EDGE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about a specific cluster, including shipping information, cluster status, and other important metadata.
        public let clusterMetadata: ClusterMetadata?

        public init(clusterMetadata: ClusterMetadata? = nil) {
            self.clusterMetadata = clusterMetadata
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterMetadata = dictionary["ClusterMetadata"] as? [String: Any] { self.clusterMetadata = try Snowball.ClusterMetadata(dictionary: clusterMetadata) } else { self.clusterMetadata = nil }
        }
    }

    public struct Address: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The landmark identifying the address that the appliance will be shipped to.
        public let landmark: String?
        /// The phone number associated with an address that a Snowball is to be delivered to.
        public let phoneNumber: String?
        /// The country in an address that a Snowball is to be delivered to.
        public let country: String?
        /// The first line in a street address that a Snowball is to be delivered to.
        public let street1: String?
        /// The postal code in an address that a Snowball is to be delivered to.
        public let postalCode: String?
        /// The second line in a street address that a Snowball is to be delivered to.
        public let street2: String?
        /// The state or province in an address that a Snowball is to be delivered to.
        public let stateOrProvince: String?
        /// The prefecture or district that the appliance will be shipped to.
        public let prefectureOrDistrict: String?
        /// The unique ID for an address.
        public let addressId: String?
        /// The name of a person to receive a Snowball at an address.
        public let name: String?
        /// The city in an address that a Snowball is to be delivered to.
        public let city: String?
        /// The third line in a street address that a Snowball is to be delivered to.
        public let street3: String?
        /// The name of the company to receive a Snowball at an address.
        public let company: String?

        public init(landmark: String? = nil, phoneNumber: String? = nil, country: String? = nil, street1: String? = nil, postalCode: String? = nil, street2: String? = nil, stateOrProvince: String? = nil, prefectureOrDistrict: String? = nil, addressId: String? = nil, name: String? = nil, city: String? = nil, street3: String? = nil, company: String? = nil) {
            self.landmark = landmark
            self.phoneNumber = phoneNumber
            self.country = country
            self.street1 = street1
            self.postalCode = postalCode
            self.street2 = street2
            self.stateOrProvince = stateOrProvince
            self.prefectureOrDistrict = prefectureOrDistrict
            self.addressId = addressId
            self.name = name
            self.city = city
            self.street3 = street3
            self.company = company
        }

        public init(dictionary: [String: Any]) throws {
            self.landmark = dictionary["Landmark"] as? String
            self.phoneNumber = dictionary["PhoneNumber"] as? String
            self.country = dictionary["Country"] as? String
            self.street1 = dictionary["Street1"] as? String
            self.postalCode = dictionary["PostalCode"] as? String
            self.street2 = dictionary["Street2"] as? String
            self.stateOrProvince = dictionary["StateOrProvince"] as? String
            self.prefectureOrDistrict = dictionary["PrefectureOrDistrict"] as? String
            self.addressId = dictionary["AddressId"] as? String
            self.name = dictionary["Name"] as? String
            self.city = dictionary["City"] as? String
            self.street3 = dictionary["Street3"] as? String
            self.company = dictionary["Company"] as? String
        }
    }

    public enum ClusterState: String, CustomStringConvertible {
        case awaitingquorum = "AwaitingQuorum"
        case pending = "Pending"
        case inuse = "InUse"
        case complete = "Complete"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct ListClustersResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Each ClusterListEntry object contains a cluster's state, a cluster's ID, and other important status information.
        public let clusterListEntries: [ClusterListEntry]?
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next ClusterListEntry call, your list of returned clusters will start from this point in the array.
        public let nextToken: String?

        public init(clusterListEntries: [ClusterListEntry]? = nil, nextToken: String? = nil) {
            self.clusterListEntries = clusterListEntries
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterListEntries = dictionary["ClusterListEntries"] as? [[String: Any]] {
                self.clusterListEntries = try clusterListEntries.map({ try ClusterListEntry(dictionary: $0) })
            } else { 
                self.clusterListEntries = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetSnowballUsageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CancelJobResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum JobState: String, CustomStringConvertible {
        case new = "New"
        case preparingappliance = "PreparingAppliance"
        case preparingshipment = "PreparingShipment"
        case intransittocustomer = "InTransitToCustomer"
        case withcustomer = "WithCustomer"
        case intransittoaws = "InTransitToAWS"
        case withaws = "WithAWS"
        case inprogress = "InProgress"
        case complete = "Complete"
        case cancelled = "Cancelled"
        case listing = "Listing"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public struct CreateClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a cluster.
        public let clusterId: String?

        public init(clusterId: String? = nil) {
            self.clusterId = clusterId
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterId = dictionary["ClusterId"] as? String
        }
    }

    public struct CreateClusterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The shipping speed for each node in this cluster. This speed doesn't dictate how soon you'll get each Snowball Edge appliance, rather it represents how quickly each appliance moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, appliances shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowball Edges shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowball Edges are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        public let shippingOption: ShippingOption
        /// The ID for the address that you want the cluster shipped to.&gt;
        public let addressId: String
        /// The KmsKeyARN value that you want to associate with this cluster. KmsKeyARN values are created by using the CreateKey API action in AWS Key Management Service (AWS KMS). 
        public let kmsKeyARN: String?
        /// The type of job for this cluster. Currently, the only job type supported for clusters is LOCAL_USE.
        public let jobType: JobType
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings for this cluster.
        public let notification: Notification?
        /// The RoleARN that you want to associate with this cluster. RoleArn values are created by using the CreateRole API action in AWS Identity and Access Management (IAM).
        public let roleARN: String
        /// The type of AWS Snowball appliance to use for this cluster. Currently, the only supported appliance type for cluster jobs is EDGE.
        public let snowballType: SnowballType?
        /// The resources associated with the cluster job. These resources include Amazon S3 buckets and optional AWS Lambda functions written in the Python language. 
        public let resources: JobResource
        /// An optional description of this specific cluster, for example Environmental Data Cluster-01.
        public let description: String?

        public init(shippingOption: ShippingOption, addressId: String, kmsKeyARN: String? = nil, jobType: JobType, notification: Notification? = nil, roleARN: String, snowballType: SnowballType? = nil, resources: JobResource, description: String? = nil) {
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.kmsKeyARN = kmsKeyARN
            self.jobType = jobType
            self.notification = notification
            self.roleARN = roleARN
            self.snowballType = snowballType
            self.resources = resources
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawShippingOption = dictionary["ShippingOption"] as? String, let shippingOption = ShippingOption(rawValue: rawShippingOption) else { throw InitializableError.missingRequiredParam("ShippingOption") }
            self.shippingOption = shippingOption
            guard let addressId = dictionary["AddressId"] as? String else { throw InitializableError.missingRequiredParam("AddressId") }
            self.addressId = addressId
            self.kmsKeyARN = dictionary["KmsKeyARN"] as? String
            guard let rawJobType = dictionary["JobType"] as? String, let jobType = JobType(rawValue: rawJobType) else { throw InitializableError.missingRequiredParam("JobType") }
            self.jobType = jobType
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let snowballType = dictionary["SnowballType"] as? String { self.snowballType = SnowballType(rawValue: snowballType) } else { self.snowballType = nil }
            guard let resources = dictionary["Resources"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Resources") }
            self.resources = try Snowball.JobResource(dictionary: resources)
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeClusterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a cluster.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterId = dictionary["ClusterId"] as? String else { throw InitializableError.missingRequiredParam("ClusterId") }
            self.clusterId = clusterId
        }
    }

    public struct ListClustersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. To identify what object comes "next" in the list of ClusterListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        public let nextToken: String?
        /// The number of ClusterListEntry objects to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct CreateAddressRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The address that you want the Snowball shipped to.
        public let address: Address

        public init(address: Address) {
            self.address = address
        }

        public init(dictionary: [String: Any]) throws {
            guard let address = dictionary["Address"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Address") }
            self.address = try Snowball.Address(dictionary: address)
        }
    }

    public struct DescribeAddressesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next DescribeAddresses call, your list of returned addresses will start from this point in the array.
        public let nextToken: String?
        /// The Snowball shipping addresses that were created for this account.
        public let addresses: [Address]?

        public init(nextToken: String? = nil, addresses: [Address]? = nil) {
            self.nextToken = nextToken
            self.addresses = addresses
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let addresses = dictionary["Addresses"] as? [[String: Any]] {
                self.addresses = try addresses.map({ try Address(dictionary: $0) })
            } else { 
                self.addresses = nil
            }
        }
    }

    public struct UpdateClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetJobUnlockCodeResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The UnlockCode value for the specified job. The UnlockCode value can be accessed for up to 90 days after the job has been created.
        public let unlockCode: String?

        public init(unlockCode: String? = nil) {
            self.unlockCode = unlockCode
        }

        public init(dictionary: [String: Any]) throws {
            self.unlockCode = dictionary["UnlockCode"] as? String
        }
    }

    public struct DataTransfer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of objects transferred between a Snowball and Amazon S3.
        public let objectsTransferred: Int64?
        /// The number of bytes transferred between a Snowball and Amazon S3.
        public let bytesTransferred: Int64?
        /// The total bytes of data for a transfer between a Snowball and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.
        public let totalBytes: Int64?
        /// The total number of objects for a transfer between a Snowball and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.
        public let totalObjects: Int64?

        public init(objectsTransferred: Int64? = nil, bytesTransferred: Int64? = nil, totalBytes: Int64? = nil, totalObjects: Int64? = nil) {
            self.objectsTransferred = objectsTransferred
            self.bytesTransferred = bytesTransferred
            self.totalBytes = totalBytes
            self.totalObjects = totalObjects
        }

        public init(dictionary: [String: Any]) throws {
            self.objectsTransferred = dictionary["ObjectsTransferred"] as? Int64
            self.bytesTransferred = dictionary["BytesTransferred"] as? Int64
            self.totalBytes = dictionary["TotalBytes"] as? Int64
            self.totalObjects = dictionary["TotalObjects"] as? Int64
        }
    }

    public enum ShippingOption: String, CustomStringConvertible {
        case second_day = "SECOND_DAY"
        case next_day = "NEXT_DAY"
        case express = "EXPRESS"
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public struct GetJobManifestRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID for a job that you want to get the manifest file for, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
        }
    }

    public struct DescribeAddressRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a specific address.
        public let addressId: String

        public init(addressId: String) {
            self.addressId = addressId
        }

        public init(dictionary: [String: Any]) throws {
            guard let addressId = dictionary["AddressId"] as? String else { throw InitializableError.missingRequiredParam("AddressId") }
            self.addressId = addressId
        }
    }

    public struct DescribeJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
        }
    }

    public struct ListJobsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. If you use this automatically generated NextToken value in your next ListJobs call, your returned JobListEntry objects will start from this point in the array.
        public let nextToken: String?
        /// Each JobListEntry object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. 
        public let jobListEntries: [JobListEntry]?

        public init(nextToken: String? = nil, jobListEntries: [JobListEntry]? = nil) {
            self.nextToken = nextToken
            self.jobListEntries = jobListEntries
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let jobListEntries = dictionary["JobListEntries"] as? [[String: Any]] {
                self.jobListEntries = try jobListEntries.map({ try JobListEntry(dictionary: $0) })
            } else { 
                self.jobListEntries = nil
            }
        }
    }

    public struct CreateJobResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String?

        public init(jobId: String? = nil) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            self.jobId = dictionary["JobId"] as? String
        }
    }

    public struct DescribeAddressResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The address that you want the Snowball or Snowballs associated with a specific job to be shipped to.
        public let address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(dictionary: [String: Any]) throws {
            if let address = dictionary["Address"] as? [String: Any] { self.address = try Snowball.Address(dictionary: address) } else { self.address = nil }
        }
    }

    public struct CancelClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct LambdaResource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An Amazon Resource Name (ARN) that represents an AWS Lambda function to be triggered by PUT object actions on the associated local Amazon S3 resource.
        public let lambdaArn: String?
        /// The array of ARNs for S3Resource objects to trigger the LambdaResource objects associated with this job.
        public let eventTriggers: [EventTriggerDefinition]?

        public init(lambdaArn: String? = nil, eventTriggers: [EventTriggerDefinition]? = nil) {
            self.lambdaArn = lambdaArn
            self.eventTriggers = eventTriggers
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaArn = dictionary["LambdaArn"] as? String
            if let eventTriggers = dictionary["EventTriggers"] as? [[String: Any]] {
                self.eventTriggers = try eventTriggers.map({ try EventTriggerDefinition(dictionary: $0) })
            } else { 
                self.eventTriggers = nil
            }
        }
    }

    public struct ClusterMetadata: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current status of the cluster.
        public let clusterState: ClusterState?
        /// The shipping speed for each node in this cluster. This speed doesn't dictate how soon you'll get each Snowball Edge appliance, rather it represents how quickly each appliance moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, appliances shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowball Edges shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowball Edges are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        public let shippingOption: ShippingOption?
        /// The automatically generated ID for a specific address.
        public let addressId: String?
        /// The role ARN associated with this cluster. This ARN was created using the CreateRole API action in AWS Identity and Access Management (IAM).
        public let roleARN: String?
        /// The type of job for this cluster. Currently, the only job type supported for clusters is LOCAL_USE.
        public let jobType: JobType?
        /// The KmsKeyARN Amazon Resource Name (ARN) associated with this cluster. This ARN was created using the CreateKey API action in AWS Key Management Service (AWS KMS).
        public let kmsKeyARN: String?
        /// The creation date for this cluster.
        public let creationDate: Date?
        /// The type of AWS Snowball appliance to use for this cluster. Currently, the only supported appliance type for cluster jobs is EDGE.
        public let snowballType: SnowballType?
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings for this cluster.
        public let notification: Notification?
        /// The automatically generated ID for a cluster.
        public let clusterId: String?
        /// The arrays of JobResource objects that can include updated S3Resource objects or LambdaResource objects.
        public let resources: JobResource?
        /// The optional description of the cluster.
        public let description: String?

        public init(clusterState: ClusterState? = nil, shippingOption: ShippingOption? = nil, addressId: String? = nil, roleARN: String? = nil, jobType: JobType? = nil, kmsKeyARN: String? = nil, creationDate: Date? = nil, snowballType: SnowballType? = nil, notification: Notification? = nil, clusterId: String? = nil, resources: JobResource? = nil, description: String? = nil) {
            self.clusterState = clusterState
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.roleARN = roleARN
            self.jobType = jobType
            self.kmsKeyARN = kmsKeyARN
            self.creationDate = creationDate
            self.snowballType = snowballType
            self.notification = notification
            self.clusterId = clusterId
            self.resources = resources
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterState = dictionary["ClusterState"] as? String { self.clusterState = ClusterState(rawValue: clusterState) } else { self.clusterState = nil }
            if let shippingOption = dictionary["ShippingOption"] as? String { self.shippingOption = ShippingOption(rawValue: shippingOption) } else { self.shippingOption = nil }
            self.addressId = dictionary["AddressId"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let jobType = dictionary["JobType"] as? String { self.jobType = JobType(rawValue: jobType) } else { self.jobType = nil }
            self.kmsKeyARN = dictionary["KmsKeyARN"] as? String
            self.creationDate = dictionary["CreationDate"] as? Date
            if let snowballType = dictionary["SnowballType"] as? String { self.snowballType = SnowballType(rawValue: snowballType) } else { self.snowballType = nil }
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            self.clusterId = dictionary["ClusterId"] as? String
            if let resources = dictionary["Resources"] as? [String: Any] { self.resources = try Snowball.JobResource(dictionary: resources) } else { self.resources = nil }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct Notification: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Any change in job state will trigger a notification for this job.
        public let notifyAll: Bool?
        /// The list of job states that will trigger a notification for this job.
        public let jobStatesToNotify: [JobState]?
        /// The new SNS TopicArn that you want to associate with this job. You can create Amazon Resource Names (ARNs) for topics by using the CreateTopic Amazon SNS API action. You can subscribe email addresses to an Amazon SNS topic through the AWS Management Console, or by using the Subscribe AWS Simple Notification Service (SNS) API action.
        public let snsTopicARN: String?

        public init(notifyAll: Bool? = nil, jobStatesToNotify: [JobState]? = nil, snsTopicARN: String? = nil) {
            self.notifyAll = notifyAll
            self.jobStatesToNotify = jobStatesToNotify
            self.snsTopicARN = snsTopicARN
        }

        public init(dictionary: [String: Any]) throws {
            self.notifyAll = dictionary["NotifyAll"] as? Bool
            if let jobStatesToNotify = dictionary["JobStatesToNotify"] as? [String] { self.jobStatesToNotify = jobStatesToNotify.flatMap({ JobState(rawValue: $0)}) } else { self.jobStatesToNotify = nil }
            self.snsTopicARN = dictionary["SnsTopicARN"] as? String
        }
    }

    public enum JobType: String, CustomStringConvertible {
        case `import` = "IMPORT"
        case export = "EXPORT"
        case local_use = "LOCAL_USE"
        public var description: String { return self.rawValue }
    }

    public struct ListJobsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. To identify what object comes "next" in the list of JobListEntry objects, you have the option of specifying NextToken as the starting point for your returned list.
        public let nextToken: String?
        /// The number of JobListEntry objects to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct Shipment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Status information for a shipment. Valid statuses include NEW, IN_TRANSIT, and DELIVERED.
        public let status: String?
        /// The tracking number for this job. Using this tracking number with your region's carrier's website, you can track a Snowball as the carrier transports it. For India, the carrier is Amazon Logistics. For all other regions, UPS is the carrier.
        public let trackingNumber: String?

        public init(status: String? = nil, trackingNumber: String? = nil) {
            self.status = status
            self.trackingNumber = trackingNumber
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.trackingNumber = dictionary["TrackingNumber"] as? String
        }
    }

    public struct DescribeAddressesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. To identify what object comes "next" in the list of ADDRESS objects, you have the option of specifying a value for NextToken as the starting point for your list of returned addresses.
        public let nextToken: String?
        /// The number of ADDRESS objects to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct UpdateClusterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The updated shipping option value of this cluster's ShippingDetails object.
        public let shippingOption: ShippingOption?
        /// The ID of the updated Address object.
        public let addressId: String?
        /// The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the CreateRole API action in AWS Identity and Access Management (IAM).
        public let roleARN: String?
        /// The new or updated Notification object.
        public let notification: Notification?
        /// The updated arrays of JobResource objects that can include updated S3Resource objects or LambdaResource objects.
        public let resources: JobResource?
        /// The cluster ID of the cluster that you want to update, for example CID123e4567-e89b-12d3-a456-426655440000.
        public let clusterId: String
        /// The updated description of this cluster.
        public let description: String?

        public init(shippingOption: ShippingOption? = nil, addressId: String? = nil, roleARN: String? = nil, notification: Notification? = nil, resources: JobResource? = nil, clusterId: String, description: String? = nil) {
            self.shippingOption = shippingOption
            self.addressId = addressId
            self.roleARN = roleARN
            self.notification = notification
            self.resources = resources
            self.clusterId = clusterId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let shippingOption = dictionary["ShippingOption"] as? String { self.shippingOption = ShippingOption(rawValue: shippingOption) } else { self.shippingOption = nil }
            self.addressId = dictionary["AddressId"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            if let resources = dictionary["Resources"] as? [String: Any] { self.resources = try Snowball.JobResource(dictionary: resources) } else { self.resources = nil }
            guard let clusterId = dictionary["ClusterId"] as? String else { throw InitializableError.missingRequiredParam("ClusterId") }
            self.clusterId = clusterId
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeJobResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about a specific job, including shipping information, job status, and other important metadata.
        public let jobMetadata: JobMetadata?
        /// Information about a specific job part (in the case of an export job), including shipping information, job status, and other important metadata.
        public let subJobMetadata: [JobMetadata]?

        public init(jobMetadata: JobMetadata? = nil, subJobMetadata: [JobMetadata]? = nil) {
            self.jobMetadata = jobMetadata
            self.subJobMetadata = subJobMetadata
        }

        public init(dictionary: [String: Any]) throws {
            if let jobMetadata = dictionary["JobMetadata"] as? [String: Any] { self.jobMetadata = try Snowball.JobMetadata(dictionary: jobMetadata) } else { self.jobMetadata = nil }
            if let subJobMetadata = dictionary["SubJobMetadata"] as? [[String: Any]] {
                self.subJobMetadata = try subJobMetadata.map({ try JobMetadata(dictionary: $0) })
            } else { 
                self.subJobMetadata = nil
            }
        }
    }

    public struct JobListEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates that this job is a master job. A master job represents a successful request to create an export job. Master jobs aren't associated with any Snowballs. Instead, each master job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular master job are listed, because they are created after the master job is created.
        public let isMaster: Bool?
        /// The type of job.
        public let jobType: JobType?
        /// The current state of this job.
        public let jobState: JobState?
        /// The creation date for this job.
        public let creationDate: Date?
        /// The type of appliance used with this job.
        public let snowballType: SnowballType?
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String?
        /// The optional description of this specific job, for example Important Photos 2016-08-11.
        public let description: String?

        public init(isMaster: Bool? = nil, jobType: JobType? = nil, jobState: JobState? = nil, creationDate: Date? = nil, snowballType: SnowballType? = nil, jobId: String? = nil, description: String? = nil) {
            self.isMaster = isMaster
            self.jobType = jobType
            self.jobState = jobState
            self.creationDate = creationDate
            self.snowballType = snowballType
            self.jobId = jobId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.isMaster = dictionary["IsMaster"] as? Bool
            if let jobType = dictionary["JobType"] as? String { self.jobType = JobType(rawValue: jobType) } else { self.jobType = nil }
            if let jobState = dictionary["JobState"] as? String { self.jobState = JobState(rawValue: jobState) } else { self.jobState = nil }
            self.creationDate = dictionary["CreationDate"] as? Date
            if let snowballType = dictionary["SnowballType"] as? String { self.snowballType = SnowballType(rawValue: snowballType) } else { self.snowballType = nil }
            self.jobId = dictionary["JobId"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ListClusterJobsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// HTTP requests are stateless. If you use the automatically generated NextToken value in your next ListClusterJobsResult call, your list of returned jobs will start from this point in the array.
        public let nextToken: String?
        /// Each JobListEntry object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. 
        public let jobListEntries: [JobListEntry]?

        public init(nextToken: String? = nil, jobListEntries: [JobListEntry]? = nil) {
            self.nextToken = nextToken
            self.jobListEntries = jobListEntries
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let jobListEntries = dictionary["JobListEntries"] as? [[String: Any]] {
                self.jobListEntries = try jobListEntries.map({ try JobListEntry(dictionary: $0) })
            } else { 
                self.jobListEntries = nil
            }
        }
    }

    public struct CreateAddressResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The automatically generated ID for a specific address. You'll use this ID when you create a job to specify which address you want the Snowball for that job shipped to.
        public let addressId: String?

        public init(addressId: String? = nil) {
            self.addressId = addressId
        }

        public init(dictionary: [String: Any]) throws {
            self.addressId = dictionary["AddressId"] as? String
        }
    }

    public struct CancelJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The 39-character job ID for the job that you want to cancel, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
        }
    }

    public struct ClusterListEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current state of this cluster. For information about the state of a specific node, see JobListEntry$JobState.
        public let clusterState: ClusterState?
        /// The creation date for this cluster.
        public let creationDate: Date?
        /// The 39-character ID for the cluster that you want to list, for example CID123e4567-e89b-12d3-a456-426655440000.
        public let clusterId: String?
        /// Defines an optional description of the cluster, for example Environmental Data Cluster-01.
        public let description: String?

        public init(clusterState: ClusterState? = nil, creationDate: Date? = nil, clusterId: String? = nil, description: String? = nil) {
            self.clusterState = clusterState
            self.creationDate = creationDate
            self.clusterId = clusterId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterState = dictionary["ClusterState"] as? String { self.clusterState = ClusterState(rawValue: clusterState) } else { self.clusterState = nil }
            self.creationDate = dictionary["CreationDate"] as? Date
            self.clusterId = dictionary["ClusterId"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct JobMetadata: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that defines the real-time status of a Snowball's data transfer while the appliance is at AWS. This data is only available while a job has a JobState value of InProgress, for both import and export jobs.
        public let dataTransferProgress: DataTransfer?
        /// The Snowball capacity preference for this job, specified at job creation. In US regions, you can choose between 50 TB and 80 TB Snowballs. All other regions use 80 TB capacity Snowballs.
        public let snowballCapacityPreference: SnowballCapacity?
        /// The role ARN associated with this job. This ARN was created using the CreateRole API action in AWS Identity and Access Management (IAM).
        public let roleARN: String?
        /// The current status of the jobs.
        public let jobState: JobState?
        /// The Amazon Resource Name (ARN) for the AWS Key Management Service (AWS KMS) key associated with this job. This ARN was created using the CreateKey API action in AWS KMS.
        public let kmsKeyARN: String?
        /// The creation date for this job.
        public let creationDate: Date?
        /// The automatically generated ID for a job, for example JID123e4567-e89b-12d3-a456-426655440000.
        public let jobId: String?
        /// The description of the job, provided at job creation.
        public let description: String?
        /// A job's shipping information, including inbound and outbound tracking numbers and shipping speed options.
        public let shippingDetails: ShippingDetails?
        /// The ID for the address that you want the Snowball shipped to.
        public let addressId: String?
        /// The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The Notification object is returned as a part of the response syntax of the DescribeJob action in the JobMetadata data type.
        public let notification: Notification?
        /// The type of job.
        public let jobType: JobType?
        /// The type of appliance used with this job.
        public let snowballType: SnowballType?
        /// Links to Amazon S3 presigned URLs for the job report and logs. For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snowball for your job part is being delivered to you.
        public let jobLogInfo: JobLogs?
        /// The 39-character ID for the cluster, for example CID123e4567-e89b-12d3-a456-426655440000.
        public let clusterId: String?
        /// An array of S3Resource objects. Each S3Resource object represents an Amazon S3 bucket that your transferred data will be exported from or imported into.
        public let resources: JobResource?

        public init(dataTransferProgress: DataTransfer? = nil, snowballCapacityPreference: SnowballCapacity? = nil, roleARN: String? = nil, jobState: JobState? = nil, kmsKeyARN: String? = nil, creationDate: Date? = nil, jobId: String? = nil, description: String? = nil, shippingDetails: ShippingDetails? = nil, addressId: String? = nil, notification: Notification? = nil, jobType: JobType? = nil, snowballType: SnowballType? = nil, jobLogInfo: JobLogs? = nil, clusterId: String? = nil, resources: JobResource? = nil) {
            self.dataTransferProgress = dataTransferProgress
            self.snowballCapacityPreference = snowballCapacityPreference
            self.roleARN = roleARN
            self.jobState = jobState
            self.kmsKeyARN = kmsKeyARN
            self.creationDate = creationDate
            self.jobId = jobId
            self.description = description
            self.shippingDetails = shippingDetails
            self.addressId = addressId
            self.notification = notification
            self.jobType = jobType
            self.snowballType = snowballType
            self.jobLogInfo = jobLogInfo
            self.clusterId = clusterId
            self.resources = resources
        }

        public init(dictionary: [String: Any]) throws {
            if let dataTransferProgress = dictionary["DataTransferProgress"] as? [String: Any] { self.dataTransferProgress = try Snowball.DataTransfer(dictionary: dataTransferProgress) } else { self.dataTransferProgress = nil }
            if let snowballCapacityPreference = dictionary["SnowballCapacityPreference"] as? String { self.snowballCapacityPreference = SnowballCapacity(rawValue: snowballCapacityPreference) } else { self.snowballCapacityPreference = nil }
            self.roleARN = dictionary["RoleARN"] as? String
            if let jobState = dictionary["JobState"] as? String { self.jobState = JobState(rawValue: jobState) } else { self.jobState = nil }
            self.kmsKeyARN = dictionary["KmsKeyARN"] as? String
            self.creationDate = dictionary["CreationDate"] as? Date
            self.jobId = dictionary["JobId"] as? String
            self.description = dictionary["Description"] as? String
            if let shippingDetails = dictionary["ShippingDetails"] as? [String: Any] { self.shippingDetails = try Snowball.ShippingDetails(dictionary: shippingDetails) } else { self.shippingDetails = nil }
            self.addressId = dictionary["AddressId"] as? String
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            if let jobType = dictionary["JobType"] as? String { self.jobType = JobType(rawValue: jobType) } else { self.jobType = nil }
            if let snowballType = dictionary["SnowballType"] as? String { self.snowballType = SnowballType(rawValue: snowballType) } else { self.snowballType = nil }
            if let jobLogInfo = dictionary["JobLogInfo"] as? [String: Any] { self.jobLogInfo = try Snowball.JobLogs(dictionary: jobLogInfo) } else { self.jobLogInfo = nil }
            self.clusterId = dictionary["ClusterId"] as? String
            if let resources = dictionary["Resources"] as? [String: Any] { self.resources = try Snowball.JobResource(dictionary: resources) } else { self.resources = nil }
        }
    }

    public struct JobLogs: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A link to an Amazon S3 presigned URL where the job failure log is located.
        public let jobFailureLogURI: String?
        /// A link to an Amazon S3 presigned URL where the job success log is located.
        public let jobSuccessLogURI: String?
        /// A link to an Amazon S3 presigned URL where the job completion report is located.
        public let jobCompletionReportURI: String?

        public init(jobFailureLogURI: String? = nil, jobSuccessLogURI: String? = nil, jobCompletionReportURI: String? = nil) {
            self.jobFailureLogURI = jobFailureLogURI
            self.jobSuccessLogURI = jobSuccessLogURI
            self.jobCompletionReportURI = jobCompletionReportURI
        }

        public init(dictionary: [String: Any]) throws {
            self.jobFailureLogURI = dictionary["JobFailureLogURI"] as? String
            self.jobSuccessLogURI = dictionary["JobSuccessLogURI"] as? String
            self.jobCompletionReportURI = dictionary["JobCompletionReportURI"] as? String
        }
    }

    public struct GetSnowballUsageResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The service limit for number of Snowballs this account can have at once. The default service limit is 1 (one).
        public let snowballLimit: Int32?
        /// The number of Snowballs that this account is currently using.
        public let snowballsInUse: Int32?

        public init(snowballLimit: Int32? = nil, snowballsInUse: Int32? = nil) {
            self.snowballLimit = snowballLimit
            self.snowballsInUse = snowballsInUse
        }

        public init(dictionary: [String: Any]) throws {
            self.snowballLimit = dictionary["SnowballLimit"] as? Int32
            self.snowballsInUse = dictionary["SnowballsInUse"] as? Int32
        }
    }

    public struct CreateJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The shipping speed for this job. This speed doesn't dictate how soon you'll get the Snowball, rather it represents how quickly the Snowball moves to its destination while in transit. Regional shipping speeds are as follows:   In Australia, you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day.   In the European Union (EU), you have access to express shipping. Typically, Snowballs shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.   In India, Snowballs are delivered in one to seven days.   In the US, you have access to one-day shipping and two-day shipping.  
        public let shippingOption: ShippingOption?
        /// If your job is being created in one of the US regions, you have the option of specifying what size Snowball you'd like for this job. In all other regions, Snowballs come with 80 TB in storage capacity.
        public let snowballCapacityPreference: SnowballCapacity?
        /// The ID for the address that you want the Snowball shipped to.
        public let addressId: String?
        /// The RoleARN that you want to associate with this job. RoleArns are created using the CreateRole AWS Identity and Access Management (IAM) API action.
        public let roleARN: String?
        /// Defines the type of job that you're creating. 
        public let jobType: JobType?
        /// Defines the Amazon Simple Notification Service (Amazon SNS) notification settings for this job.
        public let notification: Notification?
        /// The KmsKeyARN that you want to associate with this job. KmsKeyARNs are created using the CreateKey AWS Key Management Service (KMS) API action.
        public let kmsKeyARN: String?
        /// The type of AWS Snowball appliance to use for this job. Currently, the only supported appliance type for cluster jobs is EDGE.
        public let snowballType: SnowballType?
        /// Defines the Amazon S3 buckets associated with this job. With IMPORT jobs, you specify the bucket or buckets that your transferred data will be imported into. With EXPORT jobs, you specify the bucket or buckets that your transferred data will be exported from. Optionally, you can also specify a KeyRange value. If you choose to export a range, you define the length of the range by providing either an inclusive BeginMarker value, an inclusive EndMarker value, or both. Ranges are UTF-8 binary sorted.
        public let resources: JobResource?
        /// The ID of a cluster. If you're creating a job for a node in a cluster, you need to provide only this clusterId value. The other job attributes are inherited from the cluster.
        public let clusterId: String?
        /// Defines an optional description of this specific job, for example Important Photos 2016-08-11.
        public let description: String?

        public init(shippingOption: ShippingOption? = nil, snowballCapacityPreference: SnowballCapacity? = nil, addressId: String? = nil, roleARN: String? = nil, jobType: JobType? = nil, notification: Notification? = nil, kmsKeyARN: String? = nil, snowballType: SnowballType? = nil, resources: JobResource? = nil, clusterId: String? = nil, description: String? = nil) {
            self.shippingOption = shippingOption
            self.snowballCapacityPreference = snowballCapacityPreference
            self.addressId = addressId
            self.roleARN = roleARN
            self.jobType = jobType
            self.notification = notification
            self.kmsKeyARN = kmsKeyARN
            self.snowballType = snowballType
            self.resources = resources
            self.clusterId = clusterId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let shippingOption = dictionary["ShippingOption"] as? String { self.shippingOption = ShippingOption(rawValue: shippingOption) } else { self.shippingOption = nil }
            if let snowballCapacityPreference = dictionary["SnowballCapacityPreference"] as? String { self.snowballCapacityPreference = SnowballCapacity(rawValue: snowballCapacityPreference) } else { self.snowballCapacityPreference = nil }
            self.addressId = dictionary["AddressId"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let jobType = dictionary["JobType"] as? String { self.jobType = JobType(rawValue: jobType) } else { self.jobType = nil }
            if let notification = dictionary["Notification"] as? [String: Any] { self.notification = try Snowball.Notification(dictionary: notification) } else { self.notification = nil }
            self.kmsKeyARN = dictionary["KmsKeyARN"] as? String
            if let snowballType = dictionary["SnowballType"] as? String { self.snowballType = SnowballType(rawValue: snowballType) } else { self.snowballType = nil }
            if let resources = dictionary["Resources"] as? [String: Any] { self.resources = try Snowball.JobResource(dictionary: resources) } else { self.resources = nil }
            self.clusterId = dictionary["ClusterId"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct GetJobManifestResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon S3 presigned URL for the manifest file associated with the specified JobId value.
        public let manifestURI: String?

        public init(manifestURI: String? = nil) {
            self.manifestURI = manifestURI
        }

        public init(dictionary: [String: Any]) throws {
            self.manifestURI = dictionary["ManifestURI"] as? String
        }
    }

}