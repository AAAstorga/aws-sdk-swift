// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudHSM {

    public struct CreateLunaClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: false, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public struct DescribeHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmSerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter must be specified.
        public let hsmSerialNumber: String?
        /// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be specified.
        public let hsmArn: String?

        public init(hsmSerialNumber: String? = nil, hsmArn: String? = nil) {
            self.hsmSerialNumber = hsmSerialNumber
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmSerialNumber = "HsmSerialNumber"
            case hsmArn = "HsmArn"
        }
    }

    public struct ModifyHapgRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: true, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "PartitionSerialList", required: false, type: .list)
        ]
        /// The ARN of the high-availability partition group to modify.
        public let hapgArn: String
        /// The new label for the high-availability partition group.
        public let label: String?
        /// The list of partition serial numbers to make members of the high-availability partition group.
        public let partitionSerialList: [String]?

        public init(hapgArn: String, label: String? = nil, partitionSerialList: [String]? = nil) {
            self.hapgArn = hapgArn
            self.label = label
            self.partitionSerialList = partitionSerialList
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
            case label = "Label"
            case partitionSerialList = "PartitionSerialList"
        }
    }

    public struct DeleteHapgRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: true, type: .string)
        ]
        /// The ARN of the high-availability partition group to delete.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DescribeHapgResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmsLastActionFailed", required: false, type: .list), 
            AWSShapeMember(label: "HapgSerial", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "HsmsPendingDeletion", required: false, type: .list), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "HsmsPendingRegistration", required: false, type: .list), 
            AWSShapeMember(label: "HapgArn", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "PartitionSerialList", required: false, type: .list)
        ]
        public let hsmsLastActionFailed: [String]?
        /// The serial number of the high-availability partition group.
        public let hapgSerial: String?
        /// The label for the high-availability partition group.
        public let label: String?
        public let hsmsPendingDeletion: [String]?
        /// The state of the high-availability partition group.
        public let state: CloudHsmObjectState?
        public let hsmsPendingRegistration: [String]?
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?
        /// The date and time the high-availability partition group was last modified.
        public let lastModifiedTimestamp: String?
        /// The list of partition serial numbers that belong to the high-availability partition group.
        public let partitionSerialList: [String]?

        public init(hsmsLastActionFailed: [String]? = nil, hapgSerial: String? = nil, label: String? = nil, hsmsPendingDeletion: [String]? = nil, state: CloudHsmObjectState? = nil, hsmsPendingRegistration: [String]? = nil, hapgArn: String? = nil, lastModifiedTimestamp: String? = nil, partitionSerialList: [String]? = nil) {
            self.hsmsLastActionFailed = hsmsLastActionFailed
            self.hapgSerial = hapgSerial
            self.label = label
            self.hsmsPendingDeletion = hsmsPendingDeletion
            self.state = state
            self.hsmsPendingRegistration = hsmsPendingRegistration
            self.hapgArn = hapgArn
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.partitionSerialList = partitionSerialList
        }

        private enum CodingKeys: String, CodingKey {
            case hsmsLastActionFailed = "HsmsLastActionFailed"
            case hapgSerial = "HapgSerial"
            case label = "Label"
            case hsmsPendingDeletion = "HsmsPendingDeletion"
            case state = "State"
            case hsmsPendingRegistration = "HsmsPendingRegistration"
            case hapgArn = "HapgArn"
            case lastModifiedTimestamp = "LastModifiedTimestamp"
            case partitionSerialList = "PartitionSerialList"
        }
    }

    public struct DeleteLunaClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: true, type: .string)
        ]
        /// The ARN of the client to delete.
        public let clientArn: String

        public init(clientArn: String) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case production = "PRODUCTION"
        public var description: String { return self.rawValue }
    }

    public struct ListAvailableZonesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AZList", required: false, type: .list)
        ]
        /// The list of Availability Zones that have available AWS CloudHSM capacity.
        public let aZList: [String]?

        public init(aZList: [String]? = nil) {
            self.aZList = aZList
        }

        private enum CodingKeys: String, CodingKey {
            case aZList = "AZList"
        }
    }

    public struct CreateLunaClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: true, type: .string)
        ]
        /// The label for the client.
        public let label: String?
        /// The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this client.
        public let certificate: String

        public init(label: String? = nil, certificate: String) {
            self.label = label
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case certificate = "Certificate"
        }
    }

    public struct DeleteHapgResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ListLunaClientsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListLunaClients. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct DescribeHapgRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: true, type: .string)
        ]
        /// The ARN of the high-availability partition group to describe.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public enum ClientVersion: String, CustomStringConvertible, Codable {
        case clientVersion51 = "5.1"
        case clientVersion53 = "5.3"
        public var description: String { return self.rawValue }
    }

    public struct ModifyLunaClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: false, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String
        /// The key of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct CreateHapgRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: true, type: .string)
        ]
        /// The label of the new high-availability partition group.
        public let label: String

        public init(label: String) {
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
        }
    }

    public struct DeleteHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", location: .body(locationName: "HsmArn"), required: true, type: .string)
        ]
        /// The ARN of the HSM to delete.
        public let hsmArn: String

        public init(hsmArn: String) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public enum CloudHsmObjectState: String, CustomStringConvertible, Codable {
        case ready = "READY"
        case updating = "UPDATING"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// One or more tags.
        public let tagList: [Tag]

        public init(tagList: [Tag]) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public enum HsmStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case running = "RUNNING"
        case updating = "UPDATING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeLunaClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateFingerprint", required: false, type: .string), 
            AWSShapeMember(label: "ClientArn", required: false, type: .string)
        ]
        /// The certificate fingerprint.
        public let certificateFingerprint: String?
        /// The ARN of the client.
        public let clientArn: String?

        public init(certificateFingerprint: String? = nil, clientArn: String? = nil) {
            self.certificateFingerprint = certificateFingerprint
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateFingerprint = "CertificateFingerprint"
            case clientArn = "ClientArn"
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeyList", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The tag key or keys to remove. Specify only the tag key to remove (not the value). To overwrite the value for an existing tag, use AddTagsToResource.
        public let tagKeyList: [String]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(tagKeyList: [String], resourceArn: String) {
            self.tagKeyList = tagKeyList
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeyList = "TagKeyList"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListHsmsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListHsms. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListAvailableZonesRequest: AWSShape {

    }

    public struct DeleteHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ListHapgsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "HapgList", required: true, type: .list)
        ]
        /// If not null, more results are available. Pass this value to ListHapgs to retrieve the next set of items.
        public let nextToken: String?
        /// The list of high-availability partition groups.
        public let hapgList: [String]

        public init(nextToken: String? = nil, hapgList: [String]) {
            self.nextToken = nextToken
            self.hapgList = hapgList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case hapgList = "HapgList"
        }
    }

    public struct ModifyHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SyslogIp", location: .body(locationName: "SyslogIp"), required: false, type: .string), 
            AWSShapeMember(label: "ExternalId", location: .body(locationName: "ExternalId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "SubnetId"), required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", location: .body(locationName: "HsmArn"), required: true, type: .string), 
            AWSShapeMember(label: "EniIp", location: .body(locationName: "EniIp"), required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", location: .body(locationName: "IamRoleArn"), required: false, type: .string)
        ]
        /// The new IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// The new external ID.
        public let externalId: String?
        /// The new identifier of the subnet that the HSM is in. The new subnet must be in the same Availability Zone as the current subnet.
        public let subnetId: String?
        /// The ARN of the HSM to modify.
        public let hsmArn: String
        /// The new IP address for the elastic network interface (ENI) attached to the HSM. If the HSM is moved to a different subnet, and an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the new subnet.
        public let eniIp: String?
        /// The new IAM role ARN.
        public let iamRoleArn: String?

        public init(syslogIp: String? = nil, externalId: String? = nil, subnetId: String? = nil, hsmArn: String, eniIp: String? = nil, iamRoleArn: String? = nil) {
            self.syslogIp = syslogIp
            self.externalId = externalId
            self.subnetId = subnetId
            self.hsmArn = hsmArn
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case syslogIp = "SyslogIp"
            case externalId = "ExternalId"
            case subnetId = "SubnetId"
            case hsmArn = "HsmArn"
            case eniIp = "EniIp"
            case iamRoleArn = "IamRoleArn"
        }
    }

    public struct ModifyHapgResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: false, type: .string)
        ]
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct DeleteLunaClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ModifyLunaClientRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: true, type: .string), 
            AWSShapeMember(label: "Certificate", required: true, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String
        /// The new certificate for the client.
        public let certificate: String

        public init(clientArn: String, certificate: String) {
            self.clientArn = clientArn
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
            case certificate = "Certificate"
        }
    }

    public struct ModifyHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public struct ListHapgsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListHapgs. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource to tag.
        public let resourceArn: String
        /// One or more tags.
        public let tagList: [Tag]

        public init(resourceArn: String, tagList: [Tag]) {
            self.resourceArn = resourceArn
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagList = "TagList"
        }
    }

    public struct GetConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVersion", required: true, type: .enum), 
            AWSShapeMember(label: "HapgList", required: true, type: .list), 
            AWSShapeMember(label: "ClientArn", required: true, type: .string)
        ]
        /// The client version.
        public let clientVersion: ClientVersion
        /// A list of ARNs that identify the high-availability partition groups that are associated with the client.
        public let hapgList: [String]
        /// The ARN of the client.
        public let clientArn: String

        public init(clientVersion: ClientVersion, hapgList: [String], clientArn: String) {
            self.clientVersion = clientVersion
            self.hapgList = hapgList
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientVersion = "ClientVersion"
            case hapgList = "HapgList"
            case clientArn = "ClientArn"
        }
    }

    public struct ListLunaClientsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientList", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of clients.
        public let clientList: [String]
        /// If not null, more results are available. Pass this to ListLunaClients to retrieve the next set of items.
        public let nextToken: String?

        public init(clientList: [String], nextToken: String? = nil) {
            self.clientList = clientList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientList = "ClientList"
            case nextToken = "NextToken"
        }
    }

    public struct CreateHapgResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: false, type: .string)
        ]
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct CreateHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public struct GetConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigType", required: false, type: .string), 
            AWSShapeMember(label: "ConfigCred", required: false, type: .string), 
            AWSShapeMember(label: "ConfigFile", required: false, type: .string)
        ]
        /// The type of credentials.
        public let configType: String?
        /// The certificate file containing the server.pem files of the HSMs.
        public let configCred: String?
        /// The chrystoki.conf configuration file.
        public let configFile: String?

        public init(configType: String? = nil, configCred: String? = nil, configFile: String? = nil) {
            self.configType = configType
            self.configCred = configCred
            self.configFile = configFile
        }

        private enum CodingKeys: String, CodingKey {
            case configType = "ConfigType"
            case configCred = "ConfigCred"
            case configFile = "ConfigFile"
        }
    }

    public struct DescribeHsmResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerCertUri", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "SshPublicKey", required: false, type: .string), 
            AWSShapeMember(label: "VendorName", required: false, type: .string), 
            AWSShapeMember(label: "SoftwareVersion", required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", required: false, type: .string), 
            AWSShapeMember(label: "SshKeyLastUpdated", required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionStartDate", required: false, type: .string), 
            AWSShapeMember(label: "Partitions", required: false, type: .list), 
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: false, type: .enum), 
            AWSShapeMember(label: "ServerCertLastUpdated", required: false, type: .string), 
            AWSShapeMember(label: "SerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "HsmType", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionEndDate", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The URI of the certificate server.
        public let serverCertUri: String?
        /// The identifier of the subnet that the HSM is in.
        public let subnetId: String?
        /// The public SSH key.
        public let sshPublicKey: String?
        /// The name of the HSM vendor.
        public let vendorName: String?
        /// The HSM software version.
        public let softwareVersion: String?
        /// The ARN of the HSM.
        public let hsmArn: String?
        /// The date and time that the SSH key was last updated.
        public let sshKeyLastUpdated: String?
        /// The ARN of the IAM role assigned to the HSM.
        public let iamRoleArn: String?
        /// The subscription start date.
        public let subscriptionStartDate: String?
        /// The list of partitions on the HSM.
        public let partitions: [String]?
        /// Contains additional information about the status of the HSM.
        public let statusDetails: String?
        /// The IP address assigned to the HSM's ENI.
        public let eniIp: String?
        public let subscriptionType: SubscriptionType?
        /// The date and time that the server certificate was last updated.
        public let serverCertLastUpdated: String?
        /// The serial number of the HSM.
        public let serialNumber: String?
        /// The identifier of the VPC that the HSM is in.
        public let vpcId: String?
        /// The identifier of the elastic network interface (ENI) attached to the HSM.
        public let eniId: String?
        /// The HSM model type.
        public let hsmType: String?
        /// The subscription end date.
        public let subscriptionEndDate: String?
        /// The Availability Zone that the HSM is in.
        public let availabilityZone: String?
        /// The status of the HSM.
        public let status: HsmStatus?

        public init(serverCertUri: String? = nil, subnetId: String? = nil, sshPublicKey: String? = nil, vendorName: String? = nil, softwareVersion: String? = nil, hsmArn: String? = nil, sshKeyLastUpdated: String? = nil, iamRoleArn: String? = nil, subscriptionStartDate: String? = nil, partitions: [String]? = nil, statusDetails: String? = nil, eniIp: String? = nil, subscriptionType: SubscriptionType? = nil, serverCertLastUpdated: String? = nil, serialNumber: String? = nil, vpcId: String? = nil, eniId: String? = nil, hsmType: String? = nil, subscriptionEndDate: String? = nil, availabilityZone: String? = nil, status: HsmStatus? = nil) {
            self.serverCertUri = serverCertUri
            self.subnetId = subnetId
            self.sshPublicKey = sshPublicKey
            self.vendorName = vendorName
            self.softwareVersion = softwareVersion
            self.hsmArn = hsmArn
            self.sshKeyLastUpdated = sshKeyLastUpdated
            self.iamRoleArn = iamRoleArn
            self.subscriptionStartDate = subscriptionStartDate
            self.partitions = partitions
            self.statusDetails = statusDetails
            self.eniIp = eniIp
            self.subscriptionType = subscriptionType
            self.serverCertLastUpdated = serverCertLastUpdated
            self.serialNumber = serialNumber
            self.vpcId = vpcId
            self.eniId = eniId
            self.hsmType = hsmType
            self.subscriptionEndDate = subscriptionEndDate
            self.availabilityZone = availabilityZone
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case serverCertUri = "ServerCertUri"
            case subnetId = "SubnetId"
            case sshPublicKey = "SshPublicKey"
            case vendorName = "VendorName"
            case softwareVersion = "SoftwareVersion"
            case hsmArn = "HsmArn"
            case sshKeyLastUpdated = "SshKeyLastUpdated"
            case iamRoleArn = "IamRoleArn"
            case subscriptionStartDate = "SubscriptionStartDate"
            case partitions = "Partitions"
            case statusDetails = "StatusDetails"
            case eniIp = "EniIp"
            case subscriptionType = "SubscriptionType"
            case serverCertLastUpdated = "ServerCertLastUpdated"
            case serialNumber = "SerialNumber"
            case vpcId = "VpcId"
            case eniId = "EniId"
            case hsmType = "HsmType"
            case subscriptionEndDate = "SubscriptionEndDate"
            case availabilityZone = "AvailabilityZone"
            case status = "Status"
        }
    }

    public struct CreateHsmRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "SubnetId"), required: true, type: .string), 
            AWSShapeMember(label: "ExternalId", location: .body(locationName: "ExternalId"), required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", location: .body(locationName: "IamRoleArn"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", location: .body(locationName: "SubscriptionType"), required: true, type: .enum), 
            AWSShapeMember(label: "EniIp", location: .body(locationName: "EniIp"), required: false, type: .string), 
            AWSShapeMember(label: "SshKey", location: .body(locationName: "SshKey"), required: true, type: .string), 
            AWSShapeMember(label: "SyslogIp", location: .body(locationName: "SyslogIp"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "ClientToken"), required: false, type: .string)
        ]
        /// The identifier of the subnet in your VPC in which to place the HSM.
        public let subnetId: String
        /// The external ID from IamRoleArn, if present.
        public let externalId: String?
        /// The ARN of an IAM role to enable the AWS CloudHSM service to allocate an ENI on your behalf.
        public let iamRoleArn: String
        public let subscriptionType: SubscriptionType
        /// The IP address to assign to the HSM's ENI. If an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the subnet.
        public let eniIp: String?
        /// The SSH public key to install on the HSM.
        public let sshKey: String
        /// The IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// A user-defined token to ensure idempotence. Subsequent calls to this operation with the same token will be ignored.
        public let clientToken: String?

        public init(subnetId: String, externalId: String? = nil, iamRoleArn: String, subscriptionType: SubscriptionType, eniIp: String? = nil, sshKey: String, syslogIp: String? = nil, clientToken: String? = nil) {
            self.subnetId = subnetId
            self.externalId = externalId
            self.iamRoleArn = iamRoleArn
            self.subscriptionType = subscriptionType
            self.eniIp = eniIp
            self.sshKey = sshKey
            self.syslogIp = syslogIp
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case externalId = "ExternalId"
            case iamRoleArn = "IamRoleArn"
            case subscriptionType = "SubscriptionType"
            case eniIp = "EniIp"
            case sshKey = "SshKey"
            case syslogIp = "SyslogIp"
            case clientToken = "ClientToken"
        }
    }

    public struct ListHsmsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "HsmList", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value to ListHsms to retrieve the next set of items.
        public let nextToken: String?
        /// The list of ARNs that identify the HSMs.
        public let hsmList: [String]?

        public init(nextToken: String? = nil, hsmList: [String]? = nil) {
            self.nextToken = nextToken
            self.hsmList = hsmList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case hsmList = "HsmList"
        }
    }

    public struct DescribeLunaClientResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "ClientArn", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "CertificateFingerprint", required: false, type: .string)
        ]
        /// The certificate installed on the HSMs used by this client.
        public let certificate: String?
        /// The ARN of the client.
        public let clientArn: String?
        /// The date and time the client was last modified.
        public let lastModifiedTimestamp: String?
        /// The label of the client.
        public let label: String?
        /// The certificate fingerprint.
        public let certificateFingerprint: String?

        public init(certificate: String? = nil, clientArn: String? = nil, lastModifiedTimestamp: String? = nil, label: String? = nil, certificateFingerprint: String? = nil) {
            self.certificate = certificate
            self.clientArn = clientArn
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.label = label
            self.certificateFingerprint = certificateFingerprint
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case clientArn = "ClientArn"
            case lastModifiedTimestamp = "LastModifiedTimestamp"
            case label = "Label"
            case certificateFingerprint = "CertificateFingerprint"
        }
    }

}