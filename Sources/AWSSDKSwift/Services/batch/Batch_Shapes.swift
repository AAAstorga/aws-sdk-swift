// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Batch {

    public struct RegisterJobDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The revision of the job definition.
        public let revision: Int32
        /// The Amazon Resource Name (ARN) of the job definition. 
        public let jobDefinitionArn: String
        /// The name of the job definition. 
        public let jobDefinitionName: String

        public init(revision: Int32, jobDefinitionArn: String, jobDefinitionName: String) {
            self.revision = revision
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
        }

        public init(dictionary: [String: Any]) throws {
            guard let revision = dictionary["revision"] as? Int32 else { throw InitializableError.missingRequiredParam("revision") }
            self.revision = revision
            guard let jobDefinitionArn = dictionary["jobDefinitionArn"] as? String else { throw InitializableError.missingRequiredParam("jobDefinitionArn") }
            self.jobDefinitionArn = jobDefinitionArn
            guard let jobDefinitionName = dictionary["jobDefinitionName"] as? String else { throw InitializableError.missingRequiredParam("jobDefinitionName") }
            self.jobDefinitionName = jobDefinitionName
        }
    }

    public struct TerminateJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Job IDs to be terminated. Up to 100 jobs can be specified.
        public let jobId: String
        /// A message to attach to the job that explains the reason for cancelling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the AWS Batch activity logs. 
        public let reason: String

        public init(jobId: String, reason: String) {
            self.jobId = jobId
            self.reason = reason
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["jobId"] as? String else { throw InitializableError.missingRequiredParam("jobId") }
            self.jobId = jobId
            guard let reason = dictionary["reason"] as? String else { throw InitializableError.missingRequiredParam("reason") }
            self.reason = reason
        }
    }

    public enum JobStatus: String, CustomStringConvertible {
        case submitted = "SUBMITTED"
        case pending = "PENDING"
        case runnable = "RUNNABLE"
        case starting = "STARTING"
        case running = "RUNNING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct JobSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the job.
        public let jobId: String
        /// The name of the job.
        public let jobName: String

        public init(jobId: String, jobName: String) {
            self.jobId = jobId
            self.jobName = jobName
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["jobId"] as? String else { throw InitializableError.missingRequiredParam("jobId") }
            self.jobId = jobId
            guard let jobName = dictionary["jobName"] as? String else { throw InitializableError.missingRequiredParam("jobName") }
            self.jobName = jobName
        }
    }

    public enum JQState: String, CustomStringConvertible {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct DeregisterJobDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct JobQueueDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes the ability of the queue to accept new jobs.
        public let state: JQState
        /// The status of the job queue (for example, CREATING or VALID).
        public let status: JQStatus?
        /// The compute environments that are attached to the job queue and the order in which job placement is preferred. Compute environments are selected for job placement in ascending order.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String
        /// A short, human-readable string to provide additional details about the current status of the job queue.
        public let statusReason: String?
        /// The name of the job queue.
        public let jobQueueName: String
        /// The priority of the job queue. 
        public let priority: Int32

        public init(state: JQState, status: JQStatus? = nil, computeEnvironmentOrder: [ComputeEnvironmentOrder], jobQueueArn: String, statusReason: String? = nil, jobQueueName: String, priority: Int32) {
            self.state = state
            self.status = status
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.statusReason = statusReason
            self.jobQueueName = jobQueueName
            self.priority = priority
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawstate = dictionary["state"] as? String, let state = JQState(rawValue: rawstate) else { throw InitializableError.missingRequiredParam("state") }
            self.state = state
            if let status = dictionary["status"] as? String { self.status = JQStatus(rawValue: status) } else { self.status = nil }
            guard let computeEnvironmentOrder = dictionary["computeEnvironmentOrder"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("computeEnvironmentOrder") }
            self.computeEnvironmentOrder = try computeEnvironmentOrder.map({ try ComputeEnvironmentOrder(dictionary: $0) })
            guard let jobQueueArn = dictionary["jobQueueArn"] as? String else { throw InitializableError.missingRequiredParam("jobQueueArn") }
            self.jobQueueArn = jobQueueArn
            self.statusReason = dictionary["statusReason"] as? String
            guard let jobQueueName = dictionary["jobQueueName"] as? String else { throw InitializableError.missingRequiredParam("jobQueueName") }
            self.jobQueueName = jobQueueName
            guard let priority = dictionary["priority"] as? Int32 else { throw InitializableError.missingRequiredParam("priority") }
            self.priority = priority
        }
    }

    public struct SubmitJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the job. 
        public let jobName: String
        /// The unique identifier for the job.
        public let jobId: String

        public init(jobName: String, jobId: String) {
            self.jobName = jobName
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobName = dictionary["jobName"] as? String else { throw InitializableError.missingRequiredParam("jobName") }
            self.jobName = jobName
            guard let jobId = dictionary["jobId"] as? String else { throw InitializableError.missingRequiredParam("jobId") }
            self.jobId = jobId
        }
    }

    public struct ContainerProperties: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
        public let user: String?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.
        public let readonlyRootFilesystem: Bool?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run.
        public let mountPoints: [MountPoint]?
        /// The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with  repository-url/image:tag . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of docker run.   Images in Amazon ECR repositories use the full registry and repository URI (for example, 012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;).    Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).   Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).   Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).  
        public let image: String
        /// A list of data volumes used in a job.
        public let volumes: [Volume]?
        /// The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. Each vCPU is equivalent to 1,024 CPU shares.
        public let vcpus: Int32
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run.
        public let privileged: Bool?
        /// The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.  We do not recommend using plain text environment variables for sensitive information, such as credential data. 
        public let environment: [KeyValuePair]?
        /// The command that is passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd.
        public let command: [String]?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
        public let jobRoleArn: String?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run.
        public let ulimits: [Ulimit]?
        /// The hard limit (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run.
        public let memory: Int32

        public init(user: String? = nil, readonlyRootFilesystem: Bool? = nil, mountPoints: [MountPoint]? = nil, image: String, volumes: [Volume]? = nil, vcpus: Int32, privileged: Bool? = nil, environment: [KeyValuePair]? = nil, command: [String]? = nil, jobRoleArn: String? = nil, ulimits: [Ulimit]? = nil, memory: Int32) {
            self.user = user
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.mountPoints = mountPoints
            self.image = image
            self.volumes = volumes
            self.vcpus = vcpus
            self.privileged = privileged
            self.environment = environment
            self.command = command
            self.jobRoleArn = jobRoleArn
            self.ulimits = ulimits
            self.memory = memory
        }

        public init(dictionary: [String: Any]) throws {
            self.user = dictionary["user"] as? String
            self.readonlyRootFilesystem = dictionary["readonlyRootFilesystem"] as? Bool
            if let mountPoints = dictionary["mountPoints"] as? [[String: Any]] {
                self.mountPoints = try mountPoints.map({ try MountPoint(dictionary: $0) })
            } else { 
                self.mountPoints = nil
            }
            guard let image = dictionary["image"] as? String else { throw InitializableError.missingRequiredParam("image") }
            self.image = image
            if let volumes = dictionary["volumes"] as? [[String: Any]] {
                self.volumes = try volumes.map({ try Volume(dictionary: $0) })
            } else { 
                self.volumes = nil
            }
            guard let vcpus = dictionary["vcpus"] as? Int32 else { throw InitializableError.missingRequiredParam("vcpus") }
            self.vcpus = vcpus
            self.privileged = dictionary["privileged"] as? Bool
            if let environment = dictionary["environment"] as? [[String: Any]] {
                self.environment = try environment.map({ try KeyValuePair(dictionary: $0) })
            } else { 
                self.environment = nil
            }
            self.command = dictionary["command"] as? [String]
            self.jobRoleArn = dictionary["jobRoleArn"] as? String
            if let ulimits = dictionary["ulimits"] as? [[String: Any]] {
                self.ulimits = try ulimits.map({ try Ulimit(dictionary: $0) })
            } else { 
                self.ulimits = nil
            }
            guard let memory = dictionary["memory"] as? Int32 else { throw InitializableError.missingRequiredParam("memory") }
            self.memory = memory
        }
    }

    public enum JobDefinitionType: String, CustomStringConvertible {
        case container = "container"
        public var description: String { return self.rawValue }
    }

    public struct ComputeResource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The EC2 key pair that is used for instances launched in the compute environment.
        public let ec2KeyPair: String?
        /// The minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20%, then the Spot price must be below 20% of the current On-Demand price for that EC2 instance.
        public let bidPercentage: Int32?
        /// The VPC subnets into which the compute resources are launched. 
        public let subnets: [String]
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment.
        public let spotIamFleetRole: String?
        /// The instances types that may launched.
        public let instanceTypes: [String]
        /// The maximum number of EC2 vCPUs that an environment can reach. 
        public let maxvCpus: Int32
        /// The EC2 security group that is associated with instances launched in the compute environment. 
        public let securityGroupIds: [String]
        /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        public let instanceRole: String
        /// Key-value pair tags to be applied to resources that are launched in the compute environment. 
        public let tags: [String: String]?
        /// The minimum number of EC2 vCPUs that an environment should maintain. 
        public let minvCpus: Int32
        /// The type of compute environment.
        public let `type`: CRType
        /// The desired number of EC2 vCPUS in the compute environment. 
        public let desiredvCpus: Int32?

        public init(ec2KeyPair: String? = nil, bidPercentage: Int32? = nil, subnets: [String], spotIamFleetRole: String? = nil, instanceTypes: [String], maxvCpus: Int32, securityGroupIds: [String], instanceRole: String, tags: [String: String]? = nil, minvCpus: Int32, type: CRType, desiredvCpus: Int32? = nil) {
            self.ec2KeyPair = ec2KeyPair
            self.bidPercentage = bidPercentage
            self.subnets = subnets
            self.spotIamFleetRole = spotIamFleetRole
            self.instanceTypes = instanceTypes
            self.maxvCpus = maxvCpus
            self.securityGroupIds = securityGroupIds
            self.instanceRole = instanceRole
            self.tags = tags
            self.minvCpus = minvCpus
            self.`type` = `type`
            self.desiredvCpus = desiredvCpus
        }

        public init(dictionary: [String: Any]) throws {
            self.ec2KeyPair = dictionary["ec2KeyPair"] as? String
            self.bidPercentage = dictionary["bidPercentage"] as? Int32
            guard let subnets = dictionary["subnets"] as? [String] else { throw InitializableError.missingRequiredParam("subnets") }
            self.subnets = subnets
            self.spotIamFleetRole = dictionary["spotIamFleetRole"] as? String
            guard let instanceTypes = dictionary["instanceTypes"] as? [String] else { throw InitializableError.missingRequiredParam("instanceTypes") }
            self.instanceTypes = instanceTypes
            guard let maxvCpus = dictionary["maxvCpus"] as? Int32 else { throw InitializableError.missingRequiredParam("maxvCpus") }
            self.maxvCpus = maxvCpus
            guard let securityGroupIds = dictionary["securityGroupIds"] as? [String] else { throw InitializableError.missingRequiredParam("securityGroupIds") }
            self.securityGroupIds = securityGroupIds
            guard let instanceRole = dictionary["instanceRole"] as? String else { throw InitializableError.missingRequiredParam("instanceRole") }
            self.instanceRole = instanceRole
            if let tags = dictionary["tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
            guard let minvCpus = dictionary["minvCpus"] as? Int32 else { throw InitializableError.missingRequiredParam("minvCpus") }
            self.minvCpus = minvCpus
            guard let rawtype = dictionary["type"] as? String, let `type` = CRType(rawValue: rawtype) else { throw InitializableError.missingRequiredParam("type") }
            self.`type` = `type`
            self.desiredvCpus = dictionary["desiredvCpus"] as? Int32
        }
    }

    public struct ComputeEnvironmentDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The state of the compute environment. The valid values are ENABLED or DISABLED. An ENABLED state indicates that you can register instances with the compute environment and that the associated instances can accept jobs. 
        public let state: CEState?
        /// The current status of the compute environment (for example, CREATING or VALID).
        public let status: CEStatus?
        /// The Amazon Resource Name (ARN) of the compute environment. 
        public let computeEnvironmentArn: String
        /// The name of the compute environment. 
        public let computeEnvironmentName: String
        /// A short, human-readable string to provide additional details about the current status of the compute environment.
        public let statusReason: String?
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment. 
        public let ecsClusterArn: String
        /// The compute resources defined for the compute environment. 
        public let computeResources: ComputeResource?
        /// The type of the compute environment.
        public let `type`: CEType?
        /// The service role associated with the compute environment that allows AWS Batch to make calls to AWS API operations on your behalf.
        public let serviceRole: String?

        public init(state: CEState? = nil, status: CEStatus? = nil, computeEnvironmentArn: String, computeEnvironmentName: String, statusReason: String? = nil, ecsClusterArn: String, computeResources: ComputeResource? = nil, type: CEType? = nil, serviceRole: String? = nil) {
            self.state = state
            self.status = status
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.statusReason = statusReason
            self.ecsClusterArn = ecsClusterArn
            self.computeResources = computeResources
            self.`type` = `type`
            self.serviceRole = serviceRole
        }

        public init(dictionary: [String: Any]) throws {
            if let state = dictionary["state"] as? String { self.state = CEState(rawValue: state) } else { self.state = nil }
            if let status = dictionary["status"] as? String { self.status = CEStatus(rawValue: status) } else { self.status = nil }
            guard let computeEnvironmentArn = dictionary["computeEnvironmentArn"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironmentArn") }
            self.computeEnvironmentArn = computeEnvironmentArn
            guard let computeEnvironmentName = dictionary["computeEnvironmentName"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironmentName") }
            self.computeEnvironmentName = computeEnvironmentName
            self.statusReason = dictionary["statusReason"] as? String
            guard let ecsClusterArn = dictionary["ecsClusterArn"] as? String else { throw InitializableError.missingRequiredParam("ecsClusterArn") }
            self.ecsClusterArn = ecsClusterArn
            if let computeResources = dictionary["computeResources"] as? [String: Any] { self.computeResources = try Batch.ComputeResource(dictionary: computeResources) } else { self.computeResources = nil }
            if let `type` = dictionary["type"] as? String { self.`type` = CEType(rawValue: `type`) } else { self.`type` = nil }
            self.serviceRole = dictionary["serviceRole"] as? String
        }
    }

    public enum JQStatus: String, CustomStringConvertible {
        case creating = "CREATING"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case valid = "VALID"
        case invalid = "INVALID"
        public var description: String { return self.rawValue }
    }

    public struct DeleteJobQueueResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateComputeEnvironmentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of compute environment.
        public let computeEnvironmentName: String?
        /// The Amazon Resource Name (ARN) of the compute environment. 
        public let computeEnvironmentArn: String?

        public init(computeEnvironmentName: String? = nil, computeEnvironmentArn: String? = nil) {
            self.computeEnvironmentName = computeEnvironmentName
            self.computeEnvironmentArn = computeEnvironmentArn
        }

        public init(dictionary: [String: Any]) throws {
            self.computeEnvironmentName = dictionary["computeEnvironmentName"] as? String
            self.computeEnvironmentArn = dictionary["computeEnvironmentArn"] as? String
        }
    }

    public struct UpdateJobQueueRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes the queue's ability to accept new jobs.
        public let state: JQState?
        /// The name or the Amazon Resource Name (ARN) of the job queue.
        public let jobQueue: String
        /// Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment should execute a given job. 
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
        /// The priority of the job queue. Job queues with a higher priority (or a lower integer value for the priority parameter) are evaluated first when associated with same compute environment. Priority is determined in ascending order, for example, a job queue with a priority value of 1 is given scheduling preference over a job queue with a priority value of 10.
        public let priority: Int32?

        public init(state: JQState? = nil, jobQueue: String, computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil, priority: Int32? = nil) {
            self.state = state
            self.jobQueue = jobQueue
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.priority = priority
        }

        public init(dictionary: [String: Any]) throws {
            if let state = dictionary["state"] as? String { self.state = JQState(rawValue: state) } else { self.state = nil }
            guard let jobQueue = dictionary["jobQueue"] as? String else { throw InitializableError.missingRequiredParam("jobQueue") }
            self.jobQueue = jobQueue
            if let computeEnvironmentOrder = dictionary["computeEnvironmentOrder"] as? [[String: Any]] {
                self.computeEnvironmentOrder = try computeEnvironmentOrder.map({ try ComputeEnvironmentOrder(dictionary: $0) })
            } else { 
                self.computeEnvironmentOrder = nil
            }
            self.priority = dictionary["priority"] as? Int32
        }
    }

    public struct CreateComputeEnvironmentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
        public let state: CEState?
        /// The type of the compute environment. 
        public let `type`: CEType
        /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf. 
        public let serviceRole: String
        /// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed.
        public let computeEnvironmentName: String
        /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.
        public let computeResources: ComputeResource?

        public init(state: CEState? = nil, type: CEType, serviceRole: String, computeEnvironmentName: String, computeResources: ComputeResource? = nil) {
            self.state = state
            self.`type` = `type`
            self.serviceRole = serviceRole
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
        }

        public init(dictionary: [String: Any]) throws {
            if let state = dictionary["state"] as? String { self.state = CEState(rawValue: state) } else { self.state = nil }
            guard let rawtype = dictionary["type"] as? String, let `type` = CEType(rawValue: rawtype) else { throw InitializableError.missingRequiredParam("type") }
            self.`type` = `type`
            guard let serviceRole = dictionary["serviceRole"] as? String else { throw InitializableError.missingRequiredParam("serviceRole") }
            self.serviceRole = serviceRole
            guard let computeEnvironmentName = dictionary["computeEnvironmentName"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironmentName") }
            self.computeEnvironmentName = computeEnvironmentName
            if let computeResources = dictionary["computeResources"] as? [String: Any] { self.computeResources = try Batch.ComputeResource(dictionary: computeResources) } else { self.computeResources = nil }
        }
    }

    public struct TerminateJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeComputeEnvironmentsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries. 
        public let computeEnvironments: [String]?
        /// The maximum number of cluster results returned by DescribeComputeEnvironments in paginated output. When this parameter is used, DescribeComputeEnvironments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeComputeEnvironments request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then DescribeComputeEnvironments returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int32?
        /// The nextToken value returned from a previous paginated DescribeComputeEnvironments request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(computeEnvironments: [String]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.computeEnvironments = dictionary["computeEnvironments"] as? [String]
            self.maxResults = dictionary["maxResults"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeleteComputeEnvironmentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name or Amazon Resource Name (ARN) of the compute environment to delete. 
        public let computeEnvironment: String

        public init(computeEnvironment: String) {
            self.computeEnvironment = computeEnvironment
        }

        public init(dictionary: [String: Any]) throws {
            guard let computeEnvironment = dictionary["computeEnvironment"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironment") }
            self.computeEnvironment = computeEnvironment
        }
    }

    public struct DescribeComputeEnvironmentsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of compute environments.
        public let computeEnvironments: [ComputeEnvironmentDetail]?
        /// The nextToken value to include in a future DescribeComputeEnvironments request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(computeEnvironments: [ComputeEnvironmentDetail]? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let computeEnvironments = dictionary["computeEnvironments"] as? [[String: Any]] {
                self.computeEnvironments = try computeEnvironments.map({ try ComputeEnvironmentDetail(dictionary: $0) })
            } else { 
                self.computeEnvironments = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeregisterJobDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name and revision (name:revision) or full Amazon Resource Name (ARN) of the job definition to deregister. 
        public let jobDefinition: String

        public init(jobDefinition: String) {
            self.jobDefinition = jobDefinition
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobDefinition = dictionary["jobDefinition"] as? String else { throw InitializableError.missingRequiredParam("jobDefinition") }
            self.jobDefinition = jobDefinition
        }
    }

    public struct CancelJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ContainerDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public let reason: String?
        /// When this parameter is true, the container is given read-only access to its root file system.
        public let readonlyRootFilesystem: Bool?
        /// The mount points for data volumes in your container.
        public let mountPoints: [MountPoint]?
        /// The user name to use inside the container.
        public let user: String?
        /// The number of VCPUs allocated for the job. 
        public let vcpus: Int32?
        /// A list of ulimit values to set in the container.
        public let ulimits: [Ulimit]?
        /// The number of MiB of memory reserved for the job.
        public let memory: Int32?
        /// The environment variables to pass to a container.
        public let environment: [KeyValuePair]?
        /// The Amazon Resource Name (ARN) of the container instance on which the container is running.
        public let containerInstanceArn: String?
        /// The image used to start the container.
        public let image: String?
        /// A list of volumes associated with the job.
        public let volumes: [Volume]?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user).
        public let privileged: Bool?
        /// The exit code to return upon completion.
        public let exitCode: Int32?
        /// The command that is passed to the container. 
        public let command: [String]?
        /// The Amazon Resource Name (ARN) associated with the job upon execution. 
        public let jobRoleArn: String?

        public init(reason: String? = nil, readonlyRootFilesystem: Bool? = nil, mountPoints: [MountPoint]? = nil, user: String? = nil, vcpus: Int32? = nil, ulimits: [Ulimit]? = nil, memory: Int32? = nil, environment: [KeyValuePair]? = nil, containerInstanceArn: String? = nil, image: String? = nil, volumes: [Volume]? = nil, privileged: Bool? = nil, exitCode: Int32? = nil, command: [String]? = nil, jobRoleArn: String? = nil) {
            self.reason = reason
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.mountPoints = mountPoints
            self.user = user
            self.vcpus = vcpus
            self.ulimits = ulimits
            self.memory = memory
            self.environment = environment
            self.containerInstanceArn = containerInstanceArn
            self.image = image
            self.volumes = volumes
            self.privileged = privileged
            self.exitCode = exitCode
            self.command = command
            self.jobRoleArn = jobRoleArn
        }

        public init(dictionary: [String: Any]) throws {
            self.reason = dictionary["reason"] as? String
            self.readonlyRootFilesystem = dictionary["readonlyRootFilesystem"] as? Bool
            if let mountPoints = dictionary["mountPoints"] as? [[String: Any]] {
                self.mountPoints = try mountPoints.map({ try MountPoint(dictionary: $0) })
            } else { 
                self.mountPoints = nil
            }
            self.user = dictionary["user"] as? String
            self.vcpus = dictionary["vcpus"] as? Int32
            if let ulimits = dictionary["ulimits"] as? [[String: Any]] {
                self.ulimits = try ulimits.map({ try Ulimit(dictionary: $0) })
            } else { 
                self.ulimits = nil
            }
            self.memory = dictionary["memory"] as? Int32
            if let environment = dictionary["environment"] as? [[String: Any]] {
                self.environment = try environment.map({ try KeyValuePair(dictionary: $0) })
            } else { 
                self.environment = nil
            }
            self.containerInstanceArn = dictionary["containerInstanceArn"] as? String
            self.image = dictionary["image"] as? String
            if let volumes = dictionary["volumes"] as? [[String: Any]] {
                self.volumes = try volumes.map({ try Volume(dictionary: $0) })
            } else { 
                self.volumes = nil
            }
            self.privileged = dictionary["privileged"] as? Bool
            self.exitCode = dictionary["exitCode"] as? Int32
            self.command = dictionary["command"] as? [String]
            self.jobRoleArn = dictionary["jobRoleArn"] as? String
        }
    }

    public struct MountPoint: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the volume to mount.
        public let sourceVolume: String?
        /// If this value is true, the container has read-only access to the volume; otherwise, the container can write to the volume. The default value is false.
        public let readOnly: Bool?
        /// The path on the container at which to mount the host volume.
        public let containerPath: String?

        public init(sourceVolume: String? = nil, readOnly: Bool? = nil, containerPath: String? = nil) {
            self.sourceVolume = sourceVolume
            self.readOnly = readOnly
            self.containerPath = containerPath
        }

        public init(dictionary: [String: Any]) throws {
            self.sourceVolume = dictionary["sourceVolume"] as? String
            self.readOnly = dictionary["readOnly"] as? Bool
            self.containerPath = dictionary["containerPath"] as? String
        }
    }

    public struct UpdateComputeEnvironmentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The state of the compute environment. Compute environments in the ENABLED state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues.
        public let state: CEState?
        /// The name or full Amazon Resource Name (ARN) of the compute environment to update.
        public let computeEnvironment: String
        /// Details of the compute resources managed by the compute environment. Required for a managed compute environment.
        public let computeResources: ComputeResourceUpdate?
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to ECS, Auto Scaling, and EC2 on your behalf.
        public let serviceRole: String?

        public init(state: CEState? = nil, computeEnvironment: String, computeResources: ComputeResourceUpdate? = nil, serviceRole: String? = nil) {
            self.state = state
            self.computeEnvironment = computeEnvironment
            self.computeResources = computeResources
            self.serviceRole = serviceRole
        }

        public init(dictionary: [String: Any]) throws {
            if let state = dictionary["state"] as? String { self.state = CEState(rawValue: state) } else { self.state = nil }
            guard let computeEnvironment = dictionary["computeEnvironment"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironment") }
            self.computeEnvironment = computeEnvironment
            if let computeResources = dictionary["computeResources"] as? [String: Any] { self.computeResources = try Batch.ComputeResourceUpdate(dictionary: computeResources) } else { self.computeResources = nil }
            self.serviceRole = dictionary["serviceRole"] as? String
        }
    }

    public struct CreateJobQueueResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the job queue.
        public let jobQueueName: String
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String

        public init(jobQueueName: String, jobQueueArn: String) {
            self.jobQueueName = jobQueueName
            self.jobQueueArn = jobQueueArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobQueueName = dictionary["jobQueueName"] as? String else { throw InitializableError.missingRequiredParam("jobQueueName") }
            self.jobQueueName = jobQueueName
            guard let jobQueueArn = dictionary["jobQueueArn"] as? String else { throw InitializableError.missingRequiredParam("jobQueueArn") }
            self.jobQueueArn = jobQueueArn
        }
    }

    public enum CEState: String, CustomStringConvertible {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct Host: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The path on the host container instance that is presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the host parameter contains a sourcePath file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the sourcePath value does not exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
        public let sourcePath: String?

        public init(sourcePath: String? = nil) {
            self.sourcePath = sourcePath
        }

        public init(dictionary: [String: Any]) throws {
            self.sourcePath = dictionary["sourcePath"] as? String
        }
    }

    public struct DescribeJobsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A space-separated list of up to 100 job IDs.
        public let jobs: [String]

        public init(jobs: [String]) {
            self.jobs = jobs
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobs = dictionary["jobs"] as? [String] else { throw InitializableError.missingRequiredParam("jobs") }
            self.jobs = jobs
        }
    }

    public struct ContainerOverrides: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of vCPUs to reserve for the container. This value overrides the value set in the job definition.
        public let vcpus: Int32?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.
        public let environment: [KeyValuePair]?
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public let command: [String]?
        /// The number of MiB of memory reserved for the job. This value overrides the value set in the job definition.
        public let memory: Int32?

        public init(vcpus: Int32? = nil, environment: [KeyValuePair]? = nil, command: [String]? = nil, memory: Int32? = nil) {
            self.vcpus = vcpus
            self.environment = environment
            self.command = command
            self.memory = memory
        }

        public init(dictionary: [String: Any]) throws {
            self.vcpus = dictionary["vcpus"] as? Int32
            if let environment = dictionary["environment"] as? [[String: Any]] {
                self.environment = try environment.map({ try KeyValuePair(dictionary: $0) })
            } else { 
                self.environment = nil
            }
            self.command = dictionary["command"] as? [String]
            self.memory = dictionary["memory"] as? Int32
        }
    }

    public struct JobDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the job queue with which the job is associated.
        public let jobQueue: String
        /// The current status for the job.
        public let status: JobStatus
        /// The name of the job.
        public let jobName: String
        /// The Unix timestamp for when the job was created (when the task entered the PENDING state). 
        public let createdAt: Int64?
        /// The Unix timestamp for when the job was stopped (when the task transitioned from the RUNNING state to the STOPPED state).
        public let stoppedAt: Int64?
        /// Additional parameters passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition. 
        public let parameters: [String: String]?
        /// The Unix timestamp for when the job was started (when the task transitioned from the PENDING state to the RUNNING state). 
        public let startedAt: Int64
        /// An object representing the details of the container that is associated with the job.
        public let container: ContainerDetail?
        /// A short, human-readable string to provide additional details about the current status of the job. 
        public let statusReason: String?
        /// The job definition that is used by this job.
        public let jobDefinition: String
        /// A list of job names or IDs on which this job depends.
        public let dependsOn: [JobDependency]?
        /// The ID for the job.
        public let jobId: String

        public init(jobQueue: String, status: JobStatus, jobName: String, createdAt: Int64? = nil, stoppedAt: Int64? = nil, parameters: [String: String]? = nil, startedAt: Int64, container: ContainerDetail? = nil, statusReason: String? = nil, jobDefinition: String, dependsOn: [JobDependency]? = nil, jobId: String) {
            self.jobQueue = jobQueue
            self.status = status
            self.jobName = jobName
            self.createdAt = createdAt
            self.stoppedAt = stoppedAt
            self.parameters = parameters
            self.startedAt = startedAt
            self.container = container
            self.statusReason = statusReason
            self.jobDefinition = jobDefinition
            self.dependsOn = dependsOn
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobQueue = dictionary["jobQueue"] as? String else { throw InitializableError.missingRequiredParam("jobQueue") }
            self.jobQueue = jobQueue
            guard let rawstatus = dictionary["status"] as? String, let status = JobStatus(rawValue: rawstatus) else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            guard let jobName = dictionary["jobName"] as? String else { throw InitializableError.missingRequiredParam("jobName") }
            self.jobName = jobName
            self.createdAt = dictionary["createdAt"] as? Int64
            self.stoppedAt = dictionary["stoppedAt"] as? Int64
            if let parameters = dictionary["parameters"] as? [String: String] {
                self.parameters = parameters
            } else { 
                self.parameters = nil
            }
            guard let startedAt = dictionary["startedAt"] as? Int64 else { throw InitializableError.missingRequiredParam("startedAt") }
            self.startedAt = startedAt
            if let container = dictionary["container"] as? [String: Any] { self.container = try Batch.ContainerDetail(dictionary: container) } else { self.container = nil }
            self.statusReason = dictionary["statusReason"] as? String
            guard let jobDefinition = dictionary["jobDefinition"] as? String else { throw InitializableError.missingRequiredParam("jobDefinition") }
            self.jobDefinition = jobDefinition
            if let dependsOn = dictionary["dependsOn"] as? [[String: Any]] {
                self.dependsOn = try dependsOn.map({ try JobDependency(dictionary: $0) })
            } else { 
                self.dependsOn = nil
            }
            guard let jobId = dictionary["jobId"] as? String else { throw InitializableError.missingRequiredParam("jobId") }
            self.jobId = jobId
        }
    }

    public struct SubmitJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job queue into which the job will be submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue. 
        public let jobQueue: String
        /// The name of the job.
        public let jobName: String
        /// The job definition used by this job. This value can be either a name:revision or the Amazon Resource Name (ARN) for the job definition.
        public let jobDefinition: String
        /// A list of job names or IDs on which this job depends. A job can depend upon a maximum of 100 jobs. 
        public let dependsOn: [JobDependency]?
        /// A list of container overrides in JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container (that is specified in the job definition or the Docker image) with a command override. You can also override existing environment variables (that are specified in the job definition or Docker image) on a container or add new environment variables to it with an environment override.
        public let containerOverrides: ContainerOverrides?
        /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?

        public init(jobQueue: String, jobName: String, jobDefinition: String, dependsOn: [JobDependency]? = nil, containerOverrides: ContainerOverrides? = nil, parameters: [String: String]? = nil) {
            self.jobQueue = jobQueue
            self.jobName = jobName
            self.jobDefinition = jobDefinition
            self.dependsOn = dependsOn
            self.containerOverrides = containerOverrides
            self.parameters = parameters
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobQueue = dictionary["jobQueue"] as? String else { throw InitializableError.missingRequiredParam("jobQueue") }
            self.jobQueue = jobQueue
            guard let jobName = dictionary["jobName"] as? String else { throw InitializableError.missingRequiredParam("jobName") }
            self.jobName = jobName
            guard let jobDefinition = dictionary["jobDefinition"] as? String else { throw InitializableError.missingRequiredParam("jobDefinition") }
            self.jobDefinition = jobDefinition
            if let dependsOn = dictionary["dependsOn"] as? [[String: Any]] {
                self.dependsOn = try dependsOn.map({ try JobDependency(dictionary: $0) })
            } else { 
                self.dependsOn = nil
            }
            if let containerOverrides = dictionary["containerOverrides"] as? [String: Any] { self.containerOverrides = try Batch.ContainerOverrides(dictionary: containerOverrides) } else { self.containerOverrides = nil }
            if let parameters = dictionary["parameters"] as? [String: String] {
                self.parameters = parameters
            } else { 
                self.parameters = nil
            }
        }
    }

    public struct DescribeJobsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of jobs. 
        public let jobs: [JobDetail]?

        public init(jobs: [JobDetail]? = nil) {
            self.jobs = jobs
        }

        public init(dictionary: [String: Any]) throws {
            if let jobs = dictionary["jobs"] as? [[String: Any]] {
                self.jobs = try jobs.map({ try JobDetail(dictionary: $0) })
            } else { 
                self.jobs = nil
            }
        }
    }

    public enum CEType: String, CustomStringConvertible {
        case managed = "MANAGED"
        case unmanaged = "UNMANAGED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteComputeEnvironmentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListJobsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The nextToken value to include in a future ListJobs request. When the results of a ListJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of job summaries that match the request.
        public let jobSummaryList: [JobSummary]

        public init(nextToken: String? = nil, jobSummaryList: [JobSummary]) {
            self.nextToken = nextToken
            self.jobSummaryList = jobSummaryList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let jobSummaryList = dictionary["jobSummaryList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("jobSummaryList") }
            self.jobSummaryList = try jobSummaryList.map({ try JobSummary(dictionary: $0) })
        }
    }

    public struct DescribeJobDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the job definition to describe.
        public let jobDefinitionName: String?
        /// The status with which to filter job definitions.
        public let status: String?
        /// The maximum number of results returned by DescribeJobDefinitions in paginated output. When this parameter is used, DescribeJobDefinitions only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then DescribeJobDefinitions returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int32?
        /// The nextToken value returned from a previous paginated DescribeJobDefinitions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// A space-separated list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.
        public let jobDefinitions: [String]?

        public init(jobDefinitionName: String? = nil, status: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, jobDefinitions: [String]? = nil) {
            self.jobDefinitionName = jobDefinitionName
            self.status = status
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.jobDefinitions = jobDefinitions
        }

        public init(dictionary: [String: Any]) throws {
            self.jobDefinitionName = dictionary["jobDefinitionName"] as? String
            self.status = dictionary["status"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
            self.jobDefinitions = dictionary["jobDefinitions"] as? [String]
        }
    }

    public struct RegisterJobDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the job definition to register. 
        public let jobDefinitionName: String
        /// The type of job definition.
        public let `type`: JobDefinitionType
        /// An object with various properties specific for container-based jobs. This parameter is required if the type parameter is container.
        public let containerProperties: ContainerProperties?
        /// Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?

        public init(jobDefinitionName: String, type: JobDefinitionType, containerProperties: ContainerProperties? = nil, parameters: [String: String]? = nil) {
            self.jobDefinitionName = jobDefinitionName
            self.`type` = `type`
            self.containerProperties = containerProperties
            self.parameters = parameters
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobDefinitionName = dictionary["jobDefinitionName"] as? String else { throw InitializableError.missingRequiredParam("jobDefinitionName") }
            self.jobDefinitionName = jobDefinitionName
            guard let rawtype = dictionary["type"] as? String, let `type` = JobDefinitionType(rawValue: rawtype) else { throw InitializableError.missingRequiredParam("type") }
            self.`type` = `type`
            if let containerProperties = dictionary["containerProperties"] as? [String: Any] { self.containerProperties = try Batch.ContainerProperties(dictionary: containerProperties) } else { self.containerProperties = nil }
            if let parameters = dictionary["parameters"] as? [String: String] {
                self.parameters = parameters
            } else { 
                self.parameters = nil
            }
        }
    }

    public struct ListJobsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name or full Amazon Resource Name (ARN) of the job queue with which to list jobs.
        public let jobQueue: String
        /// The nextToken value returned from a previous paginated ListJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The maximum number of results returned by ListJobs in paginated output. When this parameter is used, ListJobs only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListJobs returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int32?
        /// The job status with which to filter jobs in the specified queue.
        public let jobStatus: JobStatus?

        public init(jobQueue: String, nextToken: String? = nil, maxResults: Int32? = nil, jobStatus: JobStatus? = nil) {
            self.jobQueue = jobQueue
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.jobStatus = jobStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobQueue = dictionary["jobQueue"] as? String else { throw InitializableError.missingRequiredParam("jobQueue") }
            self.jobQueue = jobQueue
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
            if let jobStatus = dictionary["jobStatus"] as? String { self.jobStatus = JobStatus(rawValue: jobStatus) } else { self.jobStatus = nil }
        }
    }

    public struct DescribeJobQueuesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
        public let jobQueues: [String]?
        /// The maximum number of results returned by DescribeJobQueues in paginated output. When this parameter is used, DescribeJobQueues only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobQueues request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then DescribeJobQueues returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int32?
        /// The nextToken value returned from a previous paginated DescribeJobQueues request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(jobQueues: [String]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.jobQueues = dictionary["jobQueues"] as? [String]
            self.maxResults = dictionary["maxResults"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeJobQueuesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of job queues. 
        public let jobQueues: [JobQueueDetail]?
        /// The nextToken value to include in a future DescribeJobQueues request. When the results of a DescribeJobQueues request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobQueues: [JobQueueDetail]? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let jobQueues = dictionary["jobQueues"] as? [[String: Any]] {
                self.jobQueues = try jobQueues.map({ try JobQueueDetail(dictionary: $0) })
            } else { 
                self.jobQueues = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeJobDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The nextToken value to include in a future DescribeJobDefinitions request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of job definitions. 
        public let jobDefinitions: [JobDefinition]?

        public init(nextToken: String? = nil, jobDefinitions: [JobDefinition]? = nil) {
            self.nextToken = nextToken
            self.jobDefinitions = jobDefinitions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let jobDefinitions = dictionary["jobDefinitions"] as? [[String: Any]] {
                self.jobDefinitions = try jobDefinitions.map({ try JobDefinition(dictionary: $0) })
            } else { 
                self.jobDefinitions = nil
            }
        }
    }

    public struct DeleteJobQueueRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The short name or full Amazon Resource Name (ARN) of the queue to delete. 
        public let jobQueue: String

        public init(jobQueue: String) {
            self.jobQueue = jobQueue
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobQueue = dictionary["jobQueue"] as? String else { throw InitializableError.missingRequiredParam("jobQueue") }
            self.jobQueue = jobQueue
        }
    }

    public struct JobDefinition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The revision of the job definition.
        public let revision: Int32
        /// The status of the job definition.
        public let status: String?
        /// The name of the job definition. 
        public let jobDefinitionName: String
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// The Amazon Resource Name (ARN) for the job definition. 
        public let jobDefinitionArn: String
        /// The type of job definition.
        public let `type`: String
        /// An object with various properties specific to container-based jobs. 
        public let containerProperties: ContainerProperties?

        public init(revision: Int32, status: String? = nil, jobDefinitionName: String, parameters: [String: String]? = nil, jobDefinitionArn: String, type: String, containerProperties: ContainerProperties? = nil) {
            self.revision = revision
            self.status = status
            self.jobDefinitionName = jobDefinitionName
            self.parameters = parameters
            self.jobDefinitionArn = jobDefinitionArn
            self.`type` = `type`
            self.containerProperties = containerProperties
        }

        public init(dictionary: [String: Any]) throws {
            guard let revision = dictionary["revision"] as? Int32 else { throw InitializableError.missingRequiredParam("revision") }
            self.revision = revision
            self.status = dictionary["status"] as? String
            guard let jobDefinitionName = dictionary["jobDefinitionName"] as? String else { throw InitializableError.missingRequiredParam("jobDefinitionName") }
            self.jobDefinitionName = jobDefinitionName
            if let parameters = dictionary["parameters"] as? [String: String] {
                self.parameters = parameters
            } else { 
                self.parameters = nil
            }
            guard let jobDefinitionArn = dictionary["jobDefinitionArn"] as? String else { throw InitializableError.missingRequiredParam("jobDefinitionArn") }
            self.jobDefinitionArn = jobDefinitionArn
            guard let `type` = dictionary["type"] as? String else { throw InitializableError.missingRequiredParam("type") }
            self.`type` = `type`
            if let containerProperties = dictionary["containerProperties"] as? [String: Any] { self.containerProperties = try Batch.ContainerProperties(dictionary: containerProperties) } else { self.containerProperties = nil }
        }
    }

    public struct KeyValuePair: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the key value pair. For environment variables, this is the name of the environment variable.
        public let name: String?
        /// The value of the key value pair. For environment variables, this is the value of the environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.value = dictionary["value"] as? String
        }
    }

    public struct CreateJobQueueRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs.
        public let state: JQState?
        /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should execute a given job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to 3 compute environments with a job queue.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]
        /// The priority of the job queue. Job queues with a higher priority (or a lower integer value for the priority parameter) are evaluated first when associated with same compute environment. Priority is determined in ascending order, for example, a job queue with a priority value of 1 is given scheduling preference over a job queue with a priority value of 10.
        public let priority: Int32
        /// The name of the job queue.
        public let jobQueueName: String

        public init(state: JQState? = nil, computeEnvironmentOrder: [ComputeEnvironmentOrder], priority: Int32, jobQueueName: String) {
            self.state = state
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.priority = priority
            self.jobQueueName = jobQueueName
        }

        public init(dictionary: [String: Any]) throws {
            if let state = dictionary["state"] as? String { self.state = JQState(rawValue: state) } else { self.state = nil }
            guard let computeEnvironmentOrder = dictionary["computeEnvironmentOrder"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("computeEnvironmentOrder") }
            self.computeEnvironmentOrder = try computeEnvironmentOrder.map({ try ComputeEnvironmentOrder(dictionary: $0) })
            guard let priority = dictionary["priority"] as? Int32 else { throw InitializableError.missingRequiredParam("priority") }
            self.priority = priority
            guard let jobQueueName = dictionary["jobQueueName"] as? String else { throw InitializableError.missingRequiredParam("jobQueueName") }
            self.jobQueueName = jobQueueName
        }
    }

    public struct CancelJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of up to 100 job IDs to cancel.
        public let jobId: String
        /// A message to attach to the job that explains the reason for cancelling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the AWS Batch activity logs. 
        public let reason: String

        public init(jobId: String, reason: String) {
            self.jobId = jobId
            self.reason = reason
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["jobId"] as? String else { throw InitializableError.missingRequiredParam("jobId") }
            self.jobId = jobId
            guard let reason = dictionary["reason"] as? String else { throw InitializableError.missingRequiredParam("reason") }
            self.reason = reason
        }
    }

    public struct CreateComputeEnvironmentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the compute environment.
        public let computeEnvironmentName: String?
        /// The Amazon Resource Name (ARN) of the compute environment. 
        public let computeEnvironmentArn: String?

        public init(computeEnvironmentName: String? = nil, computeEnvironmentArn: String? = nil) {
            self.computeEnvironmentName = computeEnvironmentName
            self.computeEnvironmentArn = computeEnvironmentArn
        }

        public init(dictionary: [String: Any]) throws {
            self.computeEnvironmentName = dictionary["computeEnvironmentName"] as? String
            self.computeEnvironmentArn = dictionary["computeEnvironmentArn"] as? String
        }
    }

    public enum CEStatus: String, CustomStringConvertible {
        case creating = "CREATING"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case valid = "VALID"
        case invalid = "INVALID"
        public var description: String { return self.rawValue }
    }

    public enum CRType: String, CustomStringConvertible {
        case ec2 = "EC2"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public struct UpdateJobQueueResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the job queue.
        public let jobQueueName: String?
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String?

        public init(jobQueueName: String? = nil, jobQueueArn: String? = nil) {
            self.jobQueueName = jobQueueName
            self.jobQueueArn = jobQueueArn
        }

        public init(dictionary: [String: Any]) throws {
            self.jobQueueName = dictionary["jobQueueName"] as? String
            self.jobQueueArn = dictionary["jobQueueArn"] as? String
        }
    }

    public struct Volume: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public let name: String?
        /// The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume, but the data is not guaranteed to persist after the containers associated with it stop running.
        public let host: Host?

        public init(name: String? = nil, host: Host? = nil) {
            self.name = name
            self.host = host
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            if let host = dictionary["host"] as? [String: Any] { self.host = try Batch.Host(dictionary: host) } else { self.host = nil }
        }
    }

    public struct ComputeResourceUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of EC2 vCPUs that an environment can reach.
        public let maxvCpus: Int32?
        /// The minimum number of EC2 vCPUs that an environment should maintain.
        public let minvCpus: Int32?
        /// The desired number of EC2 vCPUS in the compute environment.
        public let desiredvCpus: Int32?

        public init(maxvCpus: Int32? = nil, minvCpus: Int32? = nil, desiredvCpus: Int32? = nil) {
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.desiredvCpus = desiredvCpus
        }

        public init(dictionary: [String: Any]) throws {
            self.maxvCpus = dictionary["maxvCpus"] as? Int32
            self.minvCpus = dictionary["minvCpus"] as? Int32
            self.desiredvCpus = dictionary["desiredvCpus"] as? Int32
        }
    }

    public struct JobDependency: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job ID of the AWS Batch job associated with this dependency.
        public let jobId: String?

        public init(jobId: String? = nil) {
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            self.jobId = dictionary["jobId"] as? String
        }
    }

    public struct Ulimit: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The soft limit for the ulimit type.
        public let softLimit: Int32
        /// The type of the ulimit.
        public let name: String
        /// The hard limit for the ulimit type.
        public let hardLimit: Int32

        public init(softLimit: Int32, name: String, hardLimit: Int32) {
            self.softLimit = softLimit
            self.name = name
            self.hardLimit = hardLimit
        }

        public init(dictionary: [String: Any]) throws {
            guard let softLimit = dictionary["softLimit"] as? Int32 else { throw InitializableError.missingRequiredParam("softLimit") }
            self.softLimit = softLimit
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let hardLimit = dictionary["hardLimit"] as? Int32 else { throw InitializableError.missingRequiredParam("hardLimit") }
            self.hardLimit = hardLimit
        }
    }

    public struct ComputeEnvironmentOrder: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironment: String
        /// The order of the compute environment.
        public let order: Int32

        public init(computeEnvironment: String, order: Int32) {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }

        public init(dictionary: [String: Any]) throws {
            guard let computeEnvironment = dictionary["computeEnvironment"] as? String else { throw InitializableError.missingRequiredParam("computeEnvironment") }
            self.computeEnvironment = computeEnvironment
            guard let order = dictionary["order"] as? Int32 else { throw InitializableError.missingRequiredParam("order") }
            self.order = order
        }
    }

}