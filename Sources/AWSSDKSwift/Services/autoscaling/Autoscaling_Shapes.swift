// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Autoscaling {

    public struct LaunchConfigurationsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The launch configurations.
        public let launchConfigurations: [LaunchConfiguration]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(launchConfigurations: [LaunchConfiguration], nextToken: String? = nil) {
            self.launchConfigurations = launchConfigurations
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let launchConfigurations = dictionary["LaunchConfigurations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("LaunchConfigurations") }
            self.launchConfigurations = try launchConfigurations.map({ try LaunchConfiguration(dictionary: $0) })
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ActivityType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A scaling activity.
        public let activity: Activity?

        public init(activity: Activity? = nil) {
            self.activity = activity
        }

        public init(dictionary: [String: Any]) throws {
            if let activity = dictionary["Activity"] as? [String: Any] { self.activity = try Autoscaling.Activity(dictionary: activity) } else { self.activity = nil }
        }
    }

    public struct ProcessType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One of the following processes:    Launch     Terminate     AddToLoadBalancer     AlarmNotification     AZRebalance     HealthCheck     ReplaceUnhealthy     ScheduledActions   
        public let processName: String

        public init(processName: String) {
            self.processName = processName
        }

        public init(dictionary: [String: Any]) throws {
            guard let processName = dictionary["ProcessName"] as? String else { throw InitializableError.missingRequiredParam("ProcessName") }
            self.processName = processName
        }
    }

    public struct DeleteLifecycleHookAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PutLifecycleHookType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key/value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Auto Scaling sends it a test message. Test messages contains the following additional key/value pair: "Event": "autoscaling:TEST_NOTIFICATION".
        public let notificationTargetARN: String?
        /// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either CONTINUE or ABANDON. The default value is ABANDON.
        public let defaultResult: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let roleARN: String?
        /// The amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat. The default is 3600 seconds (1 hour).
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group to which you want to assign the lifecycle hook.
        public let autoScalingGroupName: String
        /// The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see DescribeLifecycleHookTypes. This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let lifecycleTransition: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(notificationTargetARN: String? = nil, notificationMetadata: String? = nil, defaultResult: String? = nil, roleARN: String? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String, lifecycleTransition: String? = nil, lifecycleHookName: String) {
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
            self.defaultResult = defaultResult
            self.roleARN = roleARN
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleTransition = lifecycleTransition
            self.lifecycleHookName = lifecycleHookName
        }

        public init(dictionary: [String: Any]) throws {
            self.notificationTargetARN = dictionary["NotificationTargetARN"] as? String
            self.notificationMetadata = dictionary["NotificationMetadata"] as? String
            self.defaultResult = dictionary["DefaultResult"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            self.heartbeatTimeout = dictionary["HeartbeatTimeout"] as? Int32
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleTransition = dictionary["LifecycleTransition"] as? String
            guard let lifecycleHookName = dictionary["LifecycleHookName"] as? String else { throw InitializableError.missingRequiredParam("LifecycleHookName") }
            self.lifecycleHookName = lifecycleHookName
        }
    }

    public struct LaunchConfigurationNamesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call. The default is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The launch configuration names. If you omit this parameter, all launch configurations are described.
        public let launchConfigurationNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, launchConfigurationNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.launchConfigurationNames = launchConfigurationNames
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.launchConfigurationNames = dictionary["LaunchConfigurationNames"] as? [String]
        }
    }

    public struct DescribeNotificationConfigurationsAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The notification configurations.
        public let notificationConfigurations: [NotificationConfiguration]

        public init(nextToken: String? = nil, notificationConfigurations: [NotificationConfiguration]) {
            self.nextToken = nextToken
            self.notificationConfigurations = notificationConfigurations
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let notificationConfigurations = dictionary["NotificationConfigurations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("NotificationConfigurations") }
            self.notificationConfigurations = try notificationConfigurations.map({ try NotificationConfiguration(dictionary: $0) })
        }
    }

    public struct ScalingPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?
        /// The policy type. Valid values are SimpleScaling and StepScaling.
        public let policyType: String?
        /// The adjustment type, which specifies how ScalingAdjustment is interpreted. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start.
        public let cooldown: Int32?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError.
        public let minAdjustmentMagnitude: Int32?
        /// The name of the scaling policy.
        public let policyName: String?
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average.
        public let metricAggregationType: String?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?
        /// The name of the Auto Scaling group associated with this scaling policy.
        public let autoScalingGroupName: String?
        /// The CloudWatch alarms related to the policy.
        public let alarms: [Alarm]?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public let estimatedInstanceWarmup: Int32?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public let stepAdjustments: [StepAdjustment]?

        public init(minAdjustmentStep: Int32? = nil, policyType: String? = nil, adjustmentType: String? = nil, cooldown: Int32? = nil, minAdjustmentMagnitude: Int32? = nil, policyName: String? = nil, metricAggregationType: String? = nil, scalingAdjustment: Int32? = nil, policyARN: String? = nil, autoScalingGroupName: String? = nil, alarms: [Alarm]? = nil, estimatedInstanceWarmup: Int32? = nil, stepAdjustments: [StepAdjustment]? = nil) {
            self.minAdjustmentStep = minAdjustmentStep
            self.policyType = policyType
            self.adjustmentType = adjustmentType
            self.cooldown = cooldown
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.policyName = policyName
            self.metricAggregationType = metricAggregationType
            self.scalingAdjustment = scalingAdjustment
            self.policyARN = policyARN
            self.autoScalingGroupName = autoScalingGroupName
            self.alarms = alarms
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.stepAdjustments = stepAdjustments
        }

        public init(dictionary: [String: Any]) throws {
            self.minAdjustmentStep = dictionary["MinAdjustmentStep"] as? Int32
            self.policyType = dictionary["PolicyType"] as? String
            self.adjustmentType = dictionary["AdjustmentType"] as? String
            self.cooldown = dictionary["Cooldown"] as? Int32
            self.minAdjustmentMagnitude = dictionary["MinAdjustmentMagnitude"] as? Int32
            self.policyName = dictionary["PolicyName"] as? String
            self.metricAggregationType = dictionary["MetricAggregationType"] as? String
            self.scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32
            self.policyARN = dictionary["PolicyARN"] as? String
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            if let alarms = dictionary["Alarms"] as? [[String: Any]] {
                self.alarms = try alarms.map({ try Alarm(dictionary: $0) })
            } else { 
                self.alarms = nil
            }
            self.estimatedInstanceWarmup = dictionary["EstimatedInstanceWarmup"] as? Int32
            if let stepAdjustments = dictionary["StepAdjustments"] as? [[String: Any]] {
                self.stepAdjustments = try stepAdjustments.map({ try StepAdjustment(dictionary: $0) })
            } else { 
                self.stepAdjustments = nil
            }
        }
    }

    public struct DetachLoadBalancersType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more load balancer names.
        public let loadBalancerNames: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(loadBalancerNames: [String], autoScalingGroupName: String) {
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let loadBalancerNames = dictionary["LoadBalancerNames"] as? [String] else { throw InitializableError.missingRequiredParam("LoadBalancerNames") }
            self.loadBalancerNames = loadBalancerNames
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct AdjustmentType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?

        public init(adjustmentType: String? = nil) {
            self.adjustmentType = adjustmentType
        }

        public init(dictionary: [String: Any]) throws {
            self.adjustmentType = dictionary["AdjustmentType"] as? String
        }
    }

    public struct AutoScalingInstanceDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The launch configuration associated with the instance.
        public let launchConfigurationName: String
        /// The lifecycle state for the instance. For more information, see Auto Scaling Lifecycle in the Auto Scaling User Guide.
        public let lifecycleState: String
        /// The ID of the instance.
        public let instanceId: String
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The last reported health status of this instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The name of the Auto Scaling group associated with the instance.
        public let autoScalingGroupName: String
        /// The Availability Zone for the instance.
        public let availabilityZone: String

        public init(launchConfigurationName: String, lifecycleState: String, instanceId: String, protectedFromScaleIn: Bool, healthStatus: String, autoScalingGroupName: String, availabilityZone: String) {
            self.launchConfigurationName = launchConfigurationName
            self.lifecycleState = lifecycleState
            self.instanceId = instanceId
            self.protectedFromScaleIn = protectedFromScaleIn
            self.healthStatus = healthStatus
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZone = availabilityZone
        }

        public init(dictionary: [String: Any]) throws {
            guard let launchConfigurationName = dictionary["LaunchConfigurationName"] as? String else { throw InitializableError.missingRequiredParam("LaunchConfigurationName") }
            self.launchConfigurationName = launchConfigurationName
            guard let lifecycleState = dictionary["LifecycleState"] as? String else { throw InitializableError.missingRequiredParam("LifecycleState") }
            self.lifecycleState = lifecycleState
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let protectedFromScaleIn = dictionary["ProtectedFromScaleIn"] as? Bool else { throw InitializableError.missingRequiredParam("ProtectedFromScaleIn") }
            self.protectedFromScaleIn = protectedFromScaleIn
            guard let healthStatus = dictionary["HealthStatus"] as? String else { throw InitializableError.missingRequiredParam("HealthStatus") }
            self.healthStatus = healthStatus
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            guard let availabilityZone = dictionary["AvailabilityZone"] as? String else { throw InitializableError.missingRequiredParam("AvailabilityZone") }
            self.availabilityZone = availabilityZone
        }
    }

    public struct PutScheduledUpdateGroupActionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z). If you specify Recurrence and StartTime, Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule your action in the past, Auto Scaling returns an error message.
        public let startTime: Date?
        /// The minimum size for the Auto Scaling group.
        public let minSize: Int32?
        /// This parameter is deprecated.
        public let time: Date?
        /// The maximum size for the Auto Scaling group.
        public let maxSize: Int32?
        /// The number of EC2 instances that should be running in the group.
        public let desiredCapacity: Int32?
        /// The time for the recurring schedule to end. Auto Scaling does not perform the action after this time.
        public let endTime: Date?
        /// The name of this scaling action.
        public let scheduledActionName: String
        /// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The recurring schedule for this action, in Unix cron syntax format. For more information, see Cron in Wikipedia.
        public let recurrence: String?

        public init(startTime: Date? = nil, minSize: Int32? = nil, time: Date? = nil, maxSize: Int32? = nil, desiredCapacity: Int32? = nil, endTime: Date? = nil, scheduledActionName: String, autoScalingGroupName: String, recurrence: String? = nil) {
            self.startTime = startTime
            self.minSize = minSize
            self.time = time
            self.maxSize = maxSize
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
            self.recurrence = recurrence
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.minSize = dictionary["MinSize"] as? Int32
            self.time = dictionary["Time"] as? Date
            self.maxSize = dictionary["MaxSize"] as? Int32
            self.desiredCapacity = dictionary["DesiredCapacity"] as? Int32
            self.endTime = dictionary["EndTime"] as? Date
            guard let scheduledActionName = dictionary["ScheduledActionName"] as? String else { throw InitializableError.missingRequiredParam("ScheduledActionName") }
            self.scheduledActionName = scheduledActionName
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.recurrence = dictionary["Recurrence"] as? String
        }
    }

    public struct AutoScalingGroupNamesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The group names. If you omit this parameter, all Auto Scaling groups are described.
        public let autoScalingGroupNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupNames = autoScalingGroupNames
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.autoScalingGroupNames = dictionary["AutoScalingGroupNames"] as? [String]
        }
    }

    public struct DescribeScheduledActionsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let startTime: Date?
        /// Describes one or more scheduled actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error. You can describe up to a maximum of 50 instances with a single call. If there are more items to return, the call returns a token. To get the next set of items, repeat the call with the returned token.
        public let scheduledActionNames: [String]?
        /// The name of the group.
        public let autoScalingGroupName: String?
        /// The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let endTime: Date?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, startTime: Date? = nil, scheduledActionNames: [String]? = nil, autoScalingGroupName: String? = nil, endTime: Date? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.startTime = startTime
            self.scheduledActionNames = scheduledActionNames
            self.autoScalingGroupName = autoScalingGroupName
            self.endTime = endTime
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.startTime = dictionary["StartTime"] as? Date
            self.scheduledActionNames = dictionary["ScheduledActionNames"] as? [String]
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.endTime = dictionary["EndTime"] as? Date
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct LoadBalancerState: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// One of the following load balancer states:    Adding - The instances in the group are being registered with the load balancer.    Added - All instances in the group are registered with the load balancer.    InService - At least one instance in the group passed an ELB health check.    Removing - The instances in the group are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All instances in the group are deregistered from the load balancer.  
        public let state: String?

        public init(loadBalancerName: String? = nil, state: String? = nil) {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }

        public init(dictionary: [String: Any]) throws {
            self.loadBalancerName = dictionary["LoadBalancerName"] as? String
            self.state = dictionary["State"] as? String
        }
    }

    public struct ExecutePolicyType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name or ARN of the policy.
        public let policyName: String
        /// The breach threshold for the alarm. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let breachThreshold: Double?
        /// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// If this parameter is true, Auto Scaling waits for the cooldown period to complete before executing the policy. Otherwise, Auto Scaling executes the policy without waiting for the cooldown period to complete. This parameter is not supported if the policy type is StepScaling. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let honorCooldown: Bool?
        /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let metricValue: Double?

        public init(policyName: String, breachThreshold: Double? = nil, autoScalingGroupName: String? = nil, honorCooldown: Bool? = nil, metricValue: Double? = nil) {
            self.policyName = policyName
            self.breachThreshold = breachThreshold
            self.autoScalingGroupName = autoScalingGroupName
            self.honorCooldown = honorCooldown
            self.metricValue = metricValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
            self.breachThreshold = dictionary["BreachThreshold"] as? Double
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.honorCooldown = dictionary["HonorCooldown"] as? Bool
            self.metricValue = dictionary["MetricValue"] as? Double
        }
    }

    public struct DisableMetricsCollectionQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more of the following metrics. If you omit this parameter, all metrics are disabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?
        /// The name or Amazon Resource Name (ARN) of the group.
        public let autoScalingGroupName: String

        public init(metrics: [String]? = nil, autoScalingGroupName: String) {
            self.metrics = metrics
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.metrics = dictionary["Metrics"] as? [String]
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct DescribeAutoScalingNotificationTypesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The notification types.
        public let autoScalingNotificationTypes: [String]?

        public init(autoScalingNotificationTypes: [String]? = nil) {
            self.autoScalingNotificationTypes = autoScalingNotificationTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.autoScalingNotificationTypes = dictionary["AutoScalingNotificationTypes"] as? [String]
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag key.
        public let key: String
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The tag value.
        public let value: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The name of the group.
        public let resourceId: String?

        public init(key: String, propagateAtLaunch: Bool? = nil, value: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.value = value
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            self.propagateAtLaunch = dictionary["PropagateAtLaunch"] as? Bool
            self.value = dictionary["Value"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.resourceId = dictionary["ResourceId"] as? String
        }
    }

    public struct AttachLoadBalancersType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more load balancer names.
        public let loadBalancerNames: [String]
        /// The name of the group.
        public let autoScalingGroupName: String

        public init(loadBalancerNames: [String], autoScalingGroupName: String) {
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let loadBalancerNames = dictionary["LoadBalancerNames"] as? [String] else { throw InitializableError.missingRequiredParam("LoadBalancerNames") }
            self.loadBalancerNames = loadBalancerNames
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct LoadBalancerTargetGroupState: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the target group.
        public let loadBalancerTargetGroupARN: String?
        /// The state of the target group.    Adding - The Auto Scaling instances are being registered with the target group.    Added - All Auto Scaling instances are registered with the target group.    InService - At least one Auto Scaling instance passed an ELB health check.    Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All Auto Scaling instances are deregistered from the target group.  
        public let state: String?

        public init(loadBalancerTargetGroupARN: String? = nil, state: String? = nil) {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }

        public init(dictionary: [String: Any]) throws {
            self.loadBalancerTargetGroupARN = dictionary["LoadBalancerTargetGroupARN"] as? String
            self.state = dictionary["State"] as? String
        }
    }

    public struct TagDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag key.
        public let key: String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The tag value.
        public let value: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The name of the group.
        public let resourceId: String?

        public init(key: String? = nil, propagateAtLaunch: Bool? = nil, value: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.value = value
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? String
            self.propagateAtLaunch = dictionary["PropagateAtLaunch"] as? Bool
            self.value = dictionary["Value"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
            self.resourceId = dictionary["ResourceId"] as? String
        }
    }

    public struct CompleteLifecycleActionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the group for the lifecycle hook.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The action for the group to take. This parameter can be either CONTINUE or ABANDON.
        public let lifecycleActionResult: String
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoScalingGroupName: String, lifecycleHookName: String, lifecycleActionToken: String? = nil, lifecycleActionResult: String, instanceId: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = lifecycleActionToken
            self.lifecycleActionResult = lifecycleActionResult
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            guard let lifecycleHookName = dictionary["LifecycleHookName"] as? String else { throw InitializableError.missingRequiredParam("LifecycleHookName") }
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = dictionary["LifecycleActionToken"] as? String
            guard let lifecycleActionResult = dictionary["LifecycleActionResult"] as? String else { throw InitializableError.missingRequiredParam("LifecycleActionResult") }
            self.lifecycleActionResult = lifecycleActionResult
            self.instanceId = dictionary["InstanceId"] as? String
        }
    }

    public struct StepAdjustment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?

        public init(scalingAdjustment: Int32, metricIntervalUpperBound: Double? = nil, metricIntervalLowerBound: Double? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.metricIntervalLowerBound = metricIntervalLowerBound
        }

        public init(dictionary: [String: Any]) throws {
            guard let scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32 else { throw InitializableError.missingRequiredParam("ScalingAdjustment") }
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = dictionary["MetricIntervalUpperBound"] as? Double
            self.metricIntervalLowerBound = dictionary["MetricIntervalLowerBound"] as? Double
        }
    }

    public struct SetInstanceProtectionAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Alarm: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the alarm.
        public let alarmName: String?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String?

        public init(alarmName: String? = nil, alarmARN: String? = nil) {
            self.alarmName = alarmName
            self.alarmARN = alarmARN
        }

        public init(dictionary: [String: Any]) throws {
            self.alarmName = dictionary["AlarmName"] as? String
            self.alarmARN = dictionary["AlarmARN"] as? String
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The last reported health status of the instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The launch configuration associated with the instance.
        public let launchConfigurationName: String
        /// A description of the current lifecycle state. Note that the Quarantined state is not used.
        public let lifecycleState: LifecycleState
        /// The ID of the instance.
        public let instanceId: String
        /// The Availability Zone in which the instance is running.
        public let availabilityZone: String

        public init(protectedFromScaleIn: Bool, healthStatus: String, launchConfigurationName: String, lifecycleState: LifecycleState, instanceId: String, availabilityZone: String) {
            self.protectedFromScaleIn = protectedFromScaleIn
            self.healthStatus = healthStatus
            self.launchConfigurationName = launchConfigurationName
            self.lifecycleState = lifecycleState
            self.instanceId = instanceId
            self.availabilityZone = availabilityZone
        }

        public init(dictionary: [String: Any]) throws {
            guard let protectedFromScaleIn = dictionary["ProtectedFromScaleIn"] as? Bool else { throw InitializableError.missingRequiredParam("ProtectedFromScaleIn") }
            self.protectedFromScaleIn = protectedFromScaleIn
            guard let healthStatus = dictionary["HealthStatus"] as? String else { throw InitializableError.missingRequiredParam("HealthStatus") }
            self.healthStatus = healthStatus
            guard let launchConfigurationName = dictionary["LaunchConfigurationName"] as? String else { throw InitializableError.missingRequiredParam("LaunchConfigurationName") }
            self.launchConfigurationName = launchConfigurationName
            guard let rawLifecycleState = dictionary["LifecycleState"] as? String, let lifecycleState = LifecycleState(rawValue: rawLifecycleState) else { throw InitializableError.missingRequiredParam("LifecycleState") }
            self.lifecycleState = lifecycleState
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let availabilityZone = dictionary["AvailabilityZone"] as? String else { throw InitializableError.missingRequiredParam("AvailabilityZone") }
            self.availabilityZone = availabilityZone
        }
    }

    public struct ScalingProcessQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following processes. If you omit this parameter, all processes are specified.    Launch     Terminate     HealthCheck     ReplaceUnhealthy     AZRebalance     AlarmNotification     ScheduledActions     AddToLoadBalancer   
        public let scalingProcesses: [String]?

        public init(autoScalingGroupName: String, scalingProcesses: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scalingProcesses = scalingProcesses
        }

        public init(dictionary: [String: Any]) throws {
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.scalingProcesses = dictionary["ScalingProcesses"] as? [String]
        }
    }

    public struct ExitStandbyQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more instance IDs. You must specify at least one instance ID.
        public let instanceIds: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(instanceIds: [String]? = nil, autoScalingGroupName: String) {
            self.instanceIds = instanceIds
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceIds = dictionary["InstanceIds"] as? [String]
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct CreateAutoScalingGroupType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets.
        public let availabilityZones: [String]?
        /// The name of the launch configuration. Alternatively, specify an EC2 instance instead of a launch configuration.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// A comma-separated list of subnet identifiers for your virtual private cloud (VPC). If you specify subnets and Availability Zones with this call, ensure that the subnets' Availability Zones match the Availability Zones specified. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// One or more tags. For more information, see Tagging Auto Scaling Groups and Instances in the Auto Scaling User Guide.
        public let tags: [Tag]?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]?
        /// The minimum size of the group.
        public let minSize: Int32
        /// The number of EC2 instances that should be running in the group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
        public let desiredCapacity: Int32?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The ID of the instance used to create a launch configuration for the group. Alternatively, specify a launch configuration instead of an EC2 instance. When you specify an ID of an instance, Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, with the exception of the block device mapping. For more information, see Create an Auto Scaling Group Using an EC2 Instance in the Auto Scaling User Guide.
        public let instanceId: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The name of the group. This name must be unique within the scope of your AWS account.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default is 0. This parameter is required if you are adding an ELB health check. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// One or more Classic load balancers. To specify an Application load balancer, use TargetGroupARNs instead. For more information, see Using a Load Balancer With an Auto Scaling Group in the Auto Scaling User Guide.
        public let loadBalancerNames: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB. By default, health checks use Amazon EC2 instance status checks to determine the health of an instance. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckType: String?

        public init(availabilityZones: [String]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, vPCZoneIdentifier: String? = nil, tags: [Tag]? = nil, maxSize: Int32, targetGroupARNs: [String]? = nil, minSize: Int32, desiredCapacity: Int32? = nil, placementGroup: String? = nil, instanceId: String? = nil, defaultCooldown: Int32? = nil, autoScalingGroupName: String, healthCheckGracePeriod: Int32? = nil, terminationPolicies: [String]? = nil, loadBalancerNames: [String]? = nil, healthCheckType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.tags = tags
            self.maxSize = maxSize
            self.targetGroupARNs = targetGroupARNs
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.placementGroup = placementGroup
            self.instanceId = instanceId
            self.defaultCooldown = defaultCooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.terminationPolicies = terminationPolicies
            self.loadBalancerNames = loadBalancerNames
            self.healthCheckType = healthCheckType
        }

        public init(dictionary: [String: Any]) throws {
            self.availabilityZones = dictionary["AvailabilityZones"] as? [String]
            self.launchConfigurationName = dictionary["LaunchConfigurationName"] as? String
            self.newInstancesProtectedFromScaleIn = dictionary["NewInstancesProtectedFromScaleIn"] as? Bool
            self.vPCZoneIdentifier = dictionary["VPCZoneIdentifier"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let maxSize = dictionary["MaxSize"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxSize") }
            self.maxSize = maxSize
            self.targetGroupARNs = dictionary["TargetGroupARNs"] as? [String]
            guard let minSize = dictionary["MinSize"] as? Int32 else { throw InitializableError.missingRequiredParam("MinSize") }
            self.minSize = minSize
            self.desiredCapacity = dictionary["DesiredCapacity"] as? Int32
            self.placementGroup = dictionary["PlacementGroup"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.defaultCooldown = dictionary["DefaultCooldown"] as? Int32
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = dictionary["HealthCheckGracePeriod"] as? Int32
            self.terminationPolicies = dictionary["TerminationPolicies"] as? [String]
            self.loadBalancerNames = dictionary["LoadBalancerNames"] as? [String]
            self.healthCheckType = dictionary["HealthCheckType"] as? String
        }
    }

    public struct TagsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// One or more tags.
        public let tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try TagDescription(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct PutNotificationConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of event that will cause the notification to be sent. For details about notification types supported by Auto Scaling, see DescribeAutoScalingNotificationTypes.
        public let notificationTypes: [String]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(notificationTypes: [String], topicARN: String, autoScalingGroupName: String) {
            self.notificationTypes = notificationTypes
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let notificationTypes = dictionary["NotificationTypes"] as? [String] else { throw InitializableError.missingRequiredParam("NotificationTypes") }
            self.notificationTypes = notificationTypes
            guard let topicARN = dictionary["TopicARN"] as? String else { throw InitializableError.missingRequiredParam("TopicARN") }
            self.topicARN = topicARN
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct EnabledMetric: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The granularity of the metric. The only valid value is 1Minute.
        public let granularity: String?
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(granularity: String? = nil, metric: String? = nil) {
            self.granularity = granularity
            self.metric = metric
        }

        public init(dictionary: [String: Any]) throws {
            self.granularity = dictionary["Granularity"] as? String
            self.metric = dictionary["Metric"] as? String
        }
    }

    public struct MetricGranularityType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The granularity. The only valid value is 1Minute.
        public let granularity: String?

        public init(granularity: String? = nil) {
            self.granularity = granularity
        }

        public init(dictionary: [String: Any]) throws {
            self.granularity = dictionary["Granularity"] as? String
        }
    }

    public struct ScheduledUpdateGroupAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date and time that the action is scheduled to begin. This date and time can be up to one month in the future. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action will start and stop.
        public let startTime: Date?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public let scheduledActionARN: String?
        /// This parameter is deprecated.
        public let time: Date?
        /// The minimum size of the group.
        public let minSize: Int32?
        /// The maximum size of the group.
        public let maxSize: Int32?
        /// The number of instances you prefer to maintain in the group.
        public let desiredCapacity: Int32?
        /// The date and time that the action is scheduled to end. This date and time can be up to one month in the future.
        public let endTime: Date?
        /// The name of the scheduled action.
        public let scheduledActionName: String?
        /// The name of the group.
        public let autoScalingGroupName: String?
        /// The recurring schedule for the action.
        public let recurrence: String?

        public init(startTime: Date? = nil, scheduledActionARN: String? = nil, time: Date? = nil, minSize: Int32? = nil, maxSize: Int32? = nil, desiredCapacity: Int32? = nil, endTime: Date? = nil, scheduledActionName: String? = nil, autoScalingGroupName: String? = nil, recurrence: String? = nil) {
            self.startTime = startTime
            self.scheduledActionARN = scheduledActionARN
            self.time = time
            self.minSize = minSize
            self.maxSize = maxSize
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
            self.recurrence = recurrence
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.scheduledActionARN = dictionary["ScheduledActionARN"] as? String
            self.time = dictionary["Time"] as? Date
            self.minSize = dictionary["MinSize"] as? Int32
            self.maxSize = dictionary["MaxSize"] as? Int32
            self.desiredCapacity = dictionary["DesiredCapacity"] as? Int32
            self.endTime = dictionary["EndTime"] as? Date
            self.scheduledActionName = dictionary["ScheduledActionName"] as? String
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.recurrence = dictionary["Recurrence"] as? String
        }
    }

    public struct DeletePolicyType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The name or Amazon Resource Name (ARN) of the policy.
        public let policyName: String

        public init(autoScalingGroupName: String? = nil, policyName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.policyName = policyName
        }

        public init(dictionary: [String: Any]) throws {
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
        }
    }

    public struct ProcessesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the process types.
        public let processes: [ProcessType]?

        public init(processes: [ProcessType]? = nil) {
            self.processes = processes
        }

        public init(dictionary: [String: Any]) throws {
            if let processes = dictionary["Processes"] as? [[String: Any]] {
                self.processes = try processes.map({ try ProcessType(dictionary: $0) })
            } else { 
                self.processes = nil
            }
        }
    }

    public struct AttachInstancesQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more instance IDs.
        public let instanceIds: [String]?
        /// The name of the group.
        public let autoScalingGroupName: String

        public init(instanceIds: [String]? = nil, autoScalingGroupName: String) {
            self.instanceIds = instanceIds
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceIds = dictionary["InstanceIds"] as? [String]
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct AutoScalingGroupsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The groups.
        public let autoScalingGroups: [AutoScalingGroup]

        public init(nextToken: String? = nil, autoScalingGroups: [AutoScalingGroup]) {
            self.nextToken = nextToken
            self.autoScalingGroups = autoScalingGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let autoScalingGroups = dictionary["AutoScalingGroups"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("AutoScalingGroups") }
            self.autoScalingGroups = try autoScalingGroups.map({ try AutoScalingGroup(dictionary: $0) })
        }
    }

    public struct AutoScalingGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]
        /// The metrics enabled for the group.
        public let enabledMetrics: [EnabledMetric]?
        /// The name of the associated launch configuration.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// One or more subnet IDs, if applicable, separated by commas. If you specify VPCZoneIdentifier and AvailabilityZones, ensure that the Availability Zones of the subnets match the values for AvailabilityZones.
        public let vPCZoneIdentifier: String?
        /// The tags for the group.
        public let tags: [TagDescription]?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// The suspended processes associated with the group.
        public let suspendedProcesses: [SuspendedProcess]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public let targetGroupARNs: [String]?
        /// The date and time the group was created.
        public let createdTime: Date
        /// The current state of the group when DeleteAutoScalingGroup is in progress.
        public let status: String?
        /// The minimum size of the group.
        public let minSize: Int32
        /// The desired size of the group.
        public let desiredCapacity: Int32
        /// The Amazon Resource Name (ARN) of the group.
        public let autoScalingGroupARN: String?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
        public let defaultCooldown: Int32
        /// The EC2 instances associated with the group.
        public let instances: [Instance]?
        /// The termination policies for the group.
        public let terminationPolicies: [String]?
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
        public let healthCheckGracePeriod: Int32?
        /// The name of the group.
        public let autoScalingGroupName: String
        /// One or more load balancers associated with the group.
        public let loadBalancerNames: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String

        public init(availabilityZones: [String], enabledMetrics: [EnabledMetric]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, vPCZoneIdentifier: String? = nil, tags: [TagDescription]? = nil, maxSize: Int32, suspendedProcesses: [SuspendedProcess]? = nil, targetGroupARNs: [String]? = nil, createdTime: Date, status: String? = nil, minSize: Int32, desiredCapacity: Int32, autoScalingGroupARN: String? = nil, placementGroup: String? = nil, defaultCooldown: Int32, instances: [Instance]? = nil, terminationPolicies: [String]? = nil, healthCheckGracePeriod: Int32? = nil, autoScalingGroupName: String, loadBalancerNames: [String]? = nil, healthCheckType: String) {
            self.availabilityZones = availabilityZones
            self.enabledMetrics = enabledMetrics
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.tags = tags
            self.maxSize = maxSize
            self.suspendedProcesses = suspendedProcesses
            self.targetGroupARNs = targetGroupARNs
            self.createdTime = createdTime
            self.status = status
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.autoScalingGroupARN = autoScalingGroupARN
            self.placementGroup = placementGroup
            self.defaultCooldown = defaultCooldown
            self.instances = instances
            self.terminationPolicies = terminationPolicies
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.autoScalingGroupName = autoScalingGroupName
            self.loadBalancerNames = loadBalancerNames
            self.healthCheckType = healthCheckType
        }

        public init(dictionary: [String: Any]) throws {
            guard let availabilityZones = dictionary["AvailabilityZones"] as? [String] else { throw InitializableError.missingRequiredParam("AvailabilityZones") }
            self.availabilityZones = availabilityZones
            if let enabledMetrics = dictionary["EnabledMetrics"] as? [[String: Any]] {
                self.enabledMetrics = try enabledMetrics.map({ try EnabledMetric(dictionary: $0) })
            } else { 
                self.enabledMetrics = nil
            }
            self.launchConfigurationName = dictionary["LaunchConfigurationName"] as? String
            self.newInstancesProtectedFromScaleIn = dictionary["NewInstancesProtectedFromScaleIn"] as? Bool
            self.vPCZoneIdentifier = dictionary["VPCZoneIdentifier"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try TagDescription(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let maxSize = dictionary["MaxSize"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxSize") }
            self.maxSize = maxSize
            if let suspendedProcesses = dictionary["SuspendedProcesses"] as? [[String: Any]] {
                self.suspendedProcesses = try suspendedProcesses.map({ try SuspendedProcess(dictionary: $0) })
            } else { 
                self.suspendedProcesses = nil
            }
            self.targetGroupARNs = dictionary["TargetGroupARNs"] as? [String]
            guard let createdTime = dictionary["CreatedTime"] as? Date else { throw InitializableError.missingRequiredParam("CreatedTime") }
            self.createdTime = createdTime
            self.status = dictionary["Status"] as? String
            guard let minSize = dictionary["MinSize"] as? Int32 else { throw InitializableError.missingRequiredParam("MinSize") }
            self.minSize = minSize
            guard let desiredCapacity = dictionary["DesiredCapacity"] as? Int32 else { throw InitializableError.missingRequiredParam("DesiredCapacity") }
            self.desiredCapacity = desiredCapacity
            self.autoScalingGroupARN = dictionary["AutoScalingGroupARN"] as? String
            self.placementGroup = dictionary["PlacementGroup"] as? String
            guard let defaultCooldown = dictionary["DefaultCooldown"] as? Int32 else { throw InitializableError.missingRequiredParam("DefaultCooldown") }
            self.defaultCooldown = defaultCooldown
            if let instances = dictionary["Instances"] as? [[String: Any]] {
                self.instances = try instances.map({ try Instance(dictionary: $0) })
            } else { 
                self.instances = nil
            }
            self.terminationPolicies = dictionary["TerminationPolicies"] as? [String]
            self.healthCheckGracePeriod = dictionary["HealthCheckGracePeriod"] as? Int32
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.loadBalancerNames = dictionary["LoadBalancerNames"] as? [String]
            guard let healthCheckType = dictionary["HealthCheckType"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckType") }
            self.healthCheckType = healthCheckType
        }
    }

    public struct DescribeLifecycleHookTypesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The lifecycle hook types.
        public let lifecycleHookTypes: [String]?

        public init(lifecycleHookTypes: [String]? = nil) {
            self.lifecycleHookTypes = lifecycleHookTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.lifecycleHookTypes = dictionary["LifecycleHookTypes"] as? [String]
        }
    }

    public struct DescribeNotificationConfigurationsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the group.
        public let autoScalingGroupNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupNames = autoScalingGroupNames
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.autoScalingGroupNames = dictionary["AutoScalingGroupNames"] as? [String]
        }
    }

    public struct Ebs: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the volume is deleted on instance termination. Default: true 
        public let deleteOnTermination: Bool?
        /// The volume type. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Valid values: standard | io1 | gp2  Default: standard 
        public let volumeType: String?
        /// The volume size, in GiB. For standard volumes, specify a value from 1 to 1,024. For io1 volumes, specify a value from 4 to 16,384. For gp2 volumes, specify a value from 1 to 16,384. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you create a volume from a snapshot and you don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The number of I/O operations per second (IOPS) to provision for the volume. Constraint: Required when the volume type is io1.
        public let iops: Int32?
        /// Indicates whether the volume should be encrypted. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or an unencrypted volume from an encrypted snapshot. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeType: String? = nil, volumeSize: Int32? = nil, iops: Int32? = nil, encrypted: Bool? = nil) {
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.iops = iops
            self.encrypted = encrypted
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
            self.deleteOnTermination = dictionary["DeleteOnTermination"] as? Bool
            self.volumeType = dictionary["VolumeType"] as? String
            self.volumeSize = dictionary["VolumeSize"] as? Int32
            self.iops = dictionary["Iops"] as? Int32
            self.encrypted = dictionary["Encrypted"] as? Bool
        }
    }

    public struct DescribeLoadBalancerTargetGroupsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupName: String) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible {
        case pendingspotbidplacement = "PendingSpotBidPlacement"
        case waitingforspotinstancerequestid = "WaitingForSpotInstanceRequestId"
        case waitingforspotinstanceid = "WaitingForSpotInstanceId"
        case waitingforinstanceid = "WaitingForInstanceId"
        case preinservice = "PreInService"
        case inprogress = "InProgress"
        case waitingforelbconnectiondraining = "WaitingForELBConnectionDraining"
        case midlifecycleaction = "MidLifecycleAction"
        case waitingforinstancewarmup = "WaitingForInstanceWarmup"
        case successful = "Successful"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingActivitiesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The name of the group.
        public let autoScalingGroupName: String?
        /// The activity IDs of the desired scaling activities. If you omit this parameter, all activities for the past six weeks are described. If you specify an Auto Scaling group, the results are limited to that group. The list of requested activities cannot contain more than 50 items. If unknown activities are requested, they are ignored with no error.
        public let activityIds: [String]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, autoScalingGroupName: String? = nil, activityIds: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.autoScalingGroupName = autoScalingGroupName
            self.activityIds = activityIds
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.activityIds = dictionary["ActivityIds"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DetachInstancesQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If True, the Auto Scaling group decrements the desired capacity value by the number of instances detached.
        public let shouldDecrementDesiredCapacity: Bool
        /// The name of the group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]?

        public init(shouldDecrementDesiredCapacity: Bool, autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let shouldDecrementDesiredCapacity = dictionary["ShouldDecrementDesiredCapacity"] as? Bool else { throw InitializableError.missingRequiredParam("ShouldDecrementDesiredCapacity") }
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = dictionary["InstanceIds"] as? [String]
        }
    }

    public struct DescribePoliciesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to be returned with each call.
        public let maxRecords: Int32?
        /// The name of the group.
        public let autoScalingGroupName: String?
        /// One or more policy types. Valid values are SimpleScaling and StepScaling.
        public let policyTypes: [String]?
        /// One or more policy names or policy ARNs to be described. If you omit this parameter, all policy names are described. If an group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
        public let policyNames: [String]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, autoScalingGroupName: String? = nil, policyTypes: [String]? = nil, policyNames: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.autoScalingGroupName = autoScalingGroupName
            self.policyTypes = policyTypes
            self.policyNames = policyNames
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.policyTypes = dictionary["PolicyTypes"] as? [String]
            self.policyNames = dictionary["PolicyNames"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeleteNotificationConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(topicARN: String, autoScalingGroupName: String) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let topicARN = dictionary["TopicARN"] as? String else { throw InitializableError.missingRequiredParam("TopicARN") }
            self.topicARN = topicARN
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct PoliciesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let scalingPolicies = dictionary["ScalingPolicies"] as? [[String: Any]] {
                self.scalingPolicies = try scalingPolicies.map({ try ScalingPolicy(dictionary: $0) })
            } else { 
                self.scalingPolicies = nil
            }
        }
    }

    public struct PutLifecycleHookAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct LaunchConfigurationNameType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the launch configuration.
        public let launchConfigurationName: String

        public init(launchConfigurationName: String) {
            self.launchConfigurationName = launchConfigurationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let launchConfigurationName = dictionary["LaunchConfigurationName"] as? String else { throw InitializableError.missingRequiredParam("LaunchConfigurationName") }
            self.launchConfigurationName = launchConfigurationName
        }
    }

    public struct DescribeAccountLimitsAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of launch configurations allowed for your AWS account. The default limit is 100 per region.
        public let maxNumberOfLaunchConfigurations: Int32?
        /// The current number of launch configurations for your AWS account.
        public let numberOfLaunchConfigurations: Int32?
        /// The current number of groups for your AWS account.
        public let numberOfAutoScalingGroups: Int32?
        /// The maximum number of groups allowed for your AWS account. The default limit is 20 per region.
        public let maxNumberOfAutoScalingGroups: Int32?

        public init(maxNumberOfLaunchConfigurations: Int32? = nil, numberOfLaunchConfigurations: Int32? = nil, numberOfAutoScalingGroups: Int32? = nil, maxNumberOfAutoScalingGroups: Int32? = nil) {
            self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
            self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
            self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.maxNumberOfLaunchConfigurations = dictionary["MaxNumberOfLaunchConfigurations"] as? Int32
            self.numberOfLaunchConfigurations = dictionary["NumberOfLaunchConfigurations"] as? Int32
            self.numberOfAutoScalingGroups = dictionary["NumberOfAutoScalingGroups"] as? Int32
            self.maxNumberOfAutoScalingGroups = dictionary["MaxNumberOfAutoScalingGroups"] as? Int32
        }
    }

    public struct CompleteLifecycleActionAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PolicyARNType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?

        public init(policyARN: String? = nil) {
            self.policyARN = policyARN
        }

        public init(dictionary: [String: Any]) throws {
            self.policyARN = dictionary["PolicyARN"] as? String
        }
    }

    public struct SuspendedProcess: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the suspended process.
        public let processName: String?
        /// The reason that the process was suspended.
        public let suspensionReason: String?

        public init(processName: String? = nil, suspensionReason: String? = nil) {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }

        public init(dictionary: [String: Any]) throws {
            self.processName = dictionary["ProcessName"] as? String
            self.suspensionReason = dictionary["SuspensionReason"] as? String
        }
    }

    public struct CreateLaunchConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more mappings that specify how block devices are exposed to the instance. For more information, see Block Device Mapping in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The name of the launch configuration. This name must be unique within the scope of your AWS account.
        public let launchConfigurationName: String
        /// The user data to make available to the launched EC2 instances. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let userData: String?
        /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. This parameter is required if you specify a ClassicLink-enabled VPC, and is not supported otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. By default, the instance is not optimized for EBS I/O. The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional usage charges apply. For more information, see Amazon EBS-Optimized Instances in the Amazon Elastic Compute Cloud User Guide.
        public let ebsOptimized: Bool?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see Launching Spot Instances in Your Auto Scaling Group in the Auto Scaling User Guide.
        public let spotPrice: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// Enables detailed monitoring (true) or basic monitoring (false) for the Auto Scaling instances.
        public let instanceMonitoring: InstanceMonitoring?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter is supported only if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The instance type of the EC2 instance. For information about available instance types, see  Available Instance Types in the Amazon Elastic Compute Cloud User Guide. 
        public let instanceType: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched into a VPC. You must set the value of this parameter to dedicated if want to launch Dedicated Instances into a shared tenancy VPC (VPC with instance placement tenancy attribute set to default). If you specify this parameter, be sure to specify at least one subnet when you create your group. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide. Valid values: default | dedicated 
        public let placementTenancy: String?
        /// One or more security groups with which to associate the instances. If your instances are launched in EC2-Classic, you can either specify security group names or the security group IDs. For more information about security groups for EC2-Classic, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide. If your instances are launched into a VPC, specify security group IDs. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let securityGroups: [String]?
        /// The name of the key pair. For more information, see Amazon EC2 Key Pairs in the Amazon Elastic Compute Cloud User Guide.
        public let keyName: String?
        /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, with the exception of the block device mapping. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see Create a Launch Configuration Using an EC2 Instance in the Auto Scaling User Guide.
        public let instanceId: String?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. EC2 instances launched with an IAM role will automatically have AWS security credentials available. You can use IAM roles with Auto Scaling to automatically enable applications running on your EC2 instances to securely access other AWS resources. For more information, see Launch Auto Scaling Instances with an IAM Role in the Auto Scaling User Guide.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more information, see Finding an AMI in the Amazon Elastic Compute Cloud User Guide.
        public let imageId: String?
        /// Used for groups that launch instances into a virtual private cloud (VPC). Specifies whether to assign a public IP address to each instance. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide. If you specify this parameter, be sure to specify at least one subnet when you create your group. Default: If the instance is launched into a default subnet, the default is true. If the instance is launched into a nondefault subnet, the default is false. For more information, see Supported Platforms in the Amazon Elastic Compute Cloud User Guide.
        public let associatePublicIpAddress: Bool?
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, launchConfigurationName: String, userData: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, ebsOptimized: Bool? = nil, spotPrice: String? = nil, kernelId: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, classicLinkVPCId: String? = nil, instanceType: String? = nil, placementTenancy: String? = nil, securityGroups: [String]? = nil, keyName: String? = nil, instanceId: String? = nil, iamInstanceProfile: String? = nil, imageId: String? = nil, associatePublicIpAddress: Bool? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.launchConfigurationName = launchConfigurationName
            self.userData = userData
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.ebsOptimized = ebsOptimized
            self.spotPrice = spotPrice
            self.kernelId = kernelId
            self.instanceMonitoring = instanceMonitoring
            self.classicLinkVPCId = classicLinkVPCId
            self.instanceType = instanceType
            self.placementTenancy = placementTenancy
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.instanceId = instanceId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ramdiskId = ramdiskId
        }

        public init(dictionary: [String: Any]) throws {
            if let blockDeviceMappings = dictionary["BlockDeviceMappings"] as? [[String: Any]] {
                self.blockDeviceMappings = try blockDeviceMappings.map({ try BlockDeviceMapping(dictionary: $0) })
            } else { 
                self.blockDeviceMappings = nil
            }
            guard let launchConfigurationName = dictionary["LaunchConfigurationName"] as? String else { throw InitializableError.missingRequiredParam("LaunchConfigurationName") }
            self.launchConfigurationName = launchConfigurationName
            self.userData = dictionary["UserData"] as? String
            self.classicLinkVPCSecurityGroups = dictionary["ClassicLinkVPCSecurityGroups"] as? [String]
            self.ebsOptimized = dictionary["EbsOptimized"] as? Bool
            self.spotPrice = dictionary["SpotPrice"] as? String
            self.kernelId = dictionary["KernelId"] as? String
            if let instanceMonitoring = dictionary["InstanceMonitoring"] as? [String: Any] { self.instanceMonitoring = try Autoscaling.InstanceMonitoring(dictionary: instanceMonitoring) } else { self.instanceMonitoring = nil }
            self.classicLinkVPCId = dictionary["ClassicLinkVPCId"] as? String
            self.instanceType = dictionary["InstanceType"] as? String
            self.placementTenancy = dictionary["PlacementTenancy"] as? String
            self.securityGroups = dictionary["SecurityGroups"] as? [String]
            self.keyName = dictionary["KeyName"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.iamInstanceProfile = dictionary["IamInstanceProfile"] as? String
            self.imageId = dictionary["ImageId"] as? String
            self.associatePublicIpAddress = dictionary["AssociatePublicIpAddress"] as? Bool
            self.ramdiskId = dictionary["RamdiskId"] as? String
        }
    }

    public struct DescribeLifecycleHooksAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The lifecycle hooks for the specified group.
        public let lifecycleHooks: [LifecycleHook]?

        public init(lifecycleHooks: [LifecycleHook]? = nil) {
            self.lifecycleHooks = lifecycleHooks
        }

        public init(dictionary: [String: Any]) throws {
            if let lifecycleHooks = dictionary["LifecycleHooks"] as? [[String: Any]] {
                self.lifecycleHooks = try lifecycleHooks.map({ try LifecycleHook(dictionary: $0) })
            } else { 
                self.lifecycleHooks = nil
            }
        }
    }

    public struct DescribeAutoScalingInstancesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instances to describe; up to 50 instance IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
        public let instanceIds: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, instanceIds: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.instanceIds = dictionary["InstanceIds"] as? [String]
        }
    }

    public struct AutoScalingInstancesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The instances.
        public let autoScalingInstances: [AutoScalingInstanceDetails]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(autoScalingInstances: [AutoScalingInstanceDetails]? = nil, nextToken: String? = nil) {
            self.autoScalingInstances = autoScalingInstances
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let autoScalingInstances = dictionary["AutoScalingInstances"] as? [[String: Any]] {
                self.autoScalingInstances = try autoScalingInstances.map({ try AutoScalingInstanceDetails(dictionary: $0) })
            } else { 
                self.autoScalingInstances = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct NotificationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String?
        /// The name of the group.
        public let autoScalingGroupName: String?
        /// One of the following event notification types:    autoscaling:EC2_INSTANCE_LAUNCH     autoscaling:EC2_INSTANCE_LAUNCH_ERROR     autoscaling:EC2_INSTANCE_TERMINATE     autoscaling:EC2_INSTANCE_TERMINATE_ERROR     autoscaling:TEST_NOTIFICATION   
        public let notificationType: String?

        public init(topicARN: String? = nil, autoScalingGroupName: String? = nil, notificationType: String? = nil) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
        }

        public init(dictionary: [String: Any]) throws {
            self.topicARN = dictionary["TopicARN"] as? String
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.notificationType = dictionary["NotificationType"] as? String
        }
    }

    public struct DescribeMetricCollectionTypesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The granularities for the metrics.
        public let granularities: [MetricGranularityType]?
        /// One or more metrics.
        public let metrics: [MetricCollectionType]?

        public init(granularities: [MetricGranularityType]? = nil, metrics: [MetricCollectionType]? = nil) {
            self.granularities = granularities
            self.metrics = metrics
        }

        public init(dictionary: [String: Any]) throws {
            if let granularities = dictionary["Granularities"] as? [[String: Any]] {
                self.granularities = try granularities.map({ try MetricGranularityType(dictionary: $0) })
            } else { 
                self.granularities = nil
            }
            if let metrics = dictionary["Metrics"] as? [[String: Any]] {
                self.metrics = try metrics.map({ try MetricCollectionType(dictionary: $0) })
            } else { 
                self.metrics = nil
            }
        }
    }

    public struct DetachInstancesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activities related to detaching the instances from the Auto Scaling group.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        public init(dictionary: [String: Any]) throws {
            if let activities = dictionary["Activities"] as? [[String: Any]] {
                self.activities = try activities.map({ try Activity(dictionary: $0) })
            } else { 
                self.activities = nil
            }
        }
    }

    public struct DetachLoadBalancerTargetGroupsResultType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AttachLoadBalancerTargetGroupsResultType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct InstanceMonitoring: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If True, instance monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            self.enabled = dictionary["Enabled"] as? Bool
        }
    }

    public struct ExitStandbyAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activities related to moving instances out of Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        public init(dictionary: [String: Any]) throws {
            if let activities = dictionary["Activities"] as? [[String: Any]] {
                self.activities = try activities.map({ try Activity(dictionary: $0) })
            } else { 
                self.activities = nil
            }
        }
    }

    public struct TerminateInstanceInAutoScalingGroupType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If true, terminating the instance also decrements the size of the Auto Scaling group.
        public let shouldDecrementDesiredCapacity: Bool
        /// The ID of the instance.
        public let instanceId: String

        public init(shouldDecrementDesiredCapacity: Bool, instanceId: String) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let shouldDecrementDesiredCapacity = dictionary["ShouldDecrementDesiredCapacity"] as? Bool else { throw InitializableError.missingRequiredParam("ShouldDecrementDesiredCapacity") }
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public struct SetDesiredCapacityType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of EC2 instances that should be running in the Auto Scaling group.
        public let desiredCapacity: Int32
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// By default, SetDesiredCapacity overrides any cooldown period associated with the Auto Scaling group. Specify True to make Auto Scaling to wait for the cool-down period associated with the Auto Scaling group to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity.
        public let honorCooldown: Bool?

        public init(desiredCapacity: Int32, autoScalingGroupName: String, honorCooldown: Bool? = nil) {
            self.desiredCapacity = desiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.honorCooldown = honorCooldown
        }

        public init(dictionary: [String: Any]) throws {
            guard let desiredCapacity = dictionary["DesiredCapacity"] as? Int32 else { throw InitializableError.missingRequiredParam("DesiredCapacity") }
            self.desiredCapacity = desiredCapacity
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.honorCooldown = dictionary["HonorCooldown"] as? Bool
        }
    }

    public struct DescribeTerminationPolicyTypesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The termination policies supported by Auto Scaling (OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, and Default).
        public let terminationPolicyTypes: [String]?

        public init(terminationPolicyTypes: [String]? = nil) {
            self.terminationPolicyTypes = terminationPolicyTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.terminationPolicyTypes = dictionary["TerminationPolicyTypes"] as? [String]
        }
    }

    public struct RecordLifecycleActionHeartbeatAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Activity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The start time of the activity.
        public let startTime: Date
        /// The details about the activity.
        public let details: String?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public let progress: Int32?
        /// The reason the activity began.
        public let cause: String
        /// The end time of the activity.
        public let endTime: Date?
        /// The current status of the activity.
        public let statusCode: ScalingActivityStatusCode
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The ID of the activity.
        public let activityId: String
        /// A friendly, more verbose description of the activity status.
        public let statusMessage: String?
        /// A friendly, more verbose description of the activity.
        public let description: String?

        public init(startTime: Date, details: String? = nil, progress: Int32? = nil, cause: String, endTime: Date? = nil, statusCode: ScalingActivityStatusCode, autoScalingGroupName: String, activityId: String, statusMessage: String? = nil, description: String? = nil) {
            self.startTime = startTime
            self.details = details
            self.progress = progress
            self.cause = cause
            self.endTime = endTime
            self.statusCode = statusCode
            self.autoScalingGroupName = autoScalingGroupName
            self.activityId = activityId
            self.statusMessage = statusMessage
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let startTime = dictionary["StartTime"] as? Date else { throw InitializableError.missingRequiredParam("StartTime") }
            self.startTime = startTime
            self.details = dictionary["Details"] as? String
            self.progress = dictionary["Progress"] as? Int32
            guard let cause = dictionary["Cause"] as? String else { throw InitializableError.missingRequiredParam("Cause") }
            self.cause = cause
            self.endTime = dictionary["EndTime"] as? Date
            guard let rawStatusCode = dictionary["StatusCode"] as? String, let statusCode = ScalingActivityStatusCode(rawValue: rawStatusCode) else { throw InitializableError.missingRequiredParam("StatusCode") }
            self.statusCode = statusCode
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            guard let activityId = dictionary["ActivityId"] as? String else { throw InitializableError.missingRequiredParam("ActivityId") }
            self.activityId = activityId
            self.statusMessage = dictionary["StatusMessage"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct SetInstanceHealthQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the instance.
        public let instanceId: String
        /// The health status of the instance. Set to Healthy if you want the instance to remain in service. Set to Unhealthy if you want the instance to be out of service. Auto Scaling will terminate and replace the unhealthy instance.
        public let healthStatus: String
        /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call will respect the grace period. Set this to False, if you do not want the call to respect the grace period associated with the group. For more information, see the description of the health check grace period for CreateAutoScalingGroup.
        public let shouldRespectGracePeriod: Bool?

        public init(instanceId: String, healthStatus: String, shouldRespectGracePeriod: Bool? = nil) {
            self.instanceId = instanceId
            self.healthStatus = healthStatus
            self.shouldRespectGracePeriod = shouldRespectGracePeriod
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
            guard let healthStatus = dictionary["HealthStatus"] as? String else { throw InitializableError.missingRequiredParam("HealthStatus") }
            self.healthStatus = healthStatus
            self.shouldRespectGracePeriod = dictionary["ShouldRespectGracePeriod"] as? Bool
        }
    }

    public struct DescribeAdjustmentTypesAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The policy adjustment types.
        public let adjustmentTypes: [AdjustmentType]?

        public init(adjustmentTypes: [AdjustmentType]? = nil) {
            self.adjustmentTypes = adjustmentTypes
        }

        public init(dictionary: [String: Any]) throws {
            if let adjustmentTypes = dictionary["AdjustmentTypes"] as? [[String: Any]] {
                self.adjustmentTypes = try adjustmentTypes.map({ try AdjustmentType(dictionary: $0) })
            } else { 
                self.adjustmentTypes = nil
            }
        }
    }

    public struct ScheduledActionsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scheduled actions.
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?

        public init(nextToken: String? = nil, scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]? = nil) {
            self.nextToken = nextToken
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let scheduledUpdateGroupActions = dictionary["ScheduledUpdateGroupActions"] as? [[String: Any]] {
                self.scheduledUpdateGroupActions = try scheduledUpdateGroupActions.map({ try ScheduledUpdateGroupAction(dictionary: $0) })
            } else { 
                self.scheduledUpdateGroupActions = nil
            }
        }
    }

    public struct ActivitiesType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
        public let activities: [Activity]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(activities: [Activity], nextToken: String? = nil) {
            self.activities = activities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let activities = dictionary["Activities"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Activities") }
            self.activities = try activities.map({ try Activity(dictionary: $0) })
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct EnterStandbyAnswer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activities related to moving instances into Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        public init(dictionary: [String: Any]) throws {
            if let activities = dictionary["Activities"] as? [[String: Any]] {
                self.activities = try activities.map({ try Activity(dictionary: $0) })
            } else { 
                self.activities = nil
            }
        }
    }

    public struct MetricCollectionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(metric: String? = nil) {
            self.metric = metric
        }

        public init(dictionary: [String: Any]) throws {
            self.metric = dictionary["Metric"] as? String
        }
    }

    public struct UpdateAutoScalingGroupType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]?
        /// The name of the launch configuration.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The ID of the subnet, if you are launching into a VPC. You can specify several subnets in a comma-separated list. When you specify VPCZoneIdentifier with AvailabilityZones, ensure that the subnets' Availability Zones match the values you specify for AvailabilityZones. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// The maximum size of the Auto Scaling group.
        public let maxSize: Int32?
        /// The minimum size of the Auto Scaling group.
        public let minSize: Int32?
        /// The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
        public let desiredCapacity: Int32?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default is 0. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String?

        public init(availabilityZones: [String]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, vPCZoneIdentifier: String? = nil, maxSize: Int32? = nil, minSize: Int32? = nil, desiredCapacity: Int32? = nil, placementGroup: String? = nil, defaultCooldown: Int32? = nil, autoScalingGroupName: String, healthCheckGracePeriod: Int32? = nil, terminationPolicies: [String]? = nil, healthCheckType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.maxSize = maxSize
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.placementGroup = placementGroup
            self.defaultCooldown = defaultCooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.terminationPolicies = terminationPolicies
            self.healthCheckType = healthCheckType
        }

        public init(dictionary: [String: Any]) throws {
            self.availabilityZones = dictionary["AvailabilityZones"] as? [String]
            self.launchConfigurationName = dictionary["LaunchConfigurationName"] as? String
            self.newInstancesProtectedFromScaleIn = dictionary["NewInstancesProtectedFromScaleIn"] as? Bool
            self.vPCZoneIdentifier = dictionary["VPCZoneIdentifier"] as? String
            self.maxSize = dictionary["MaxSize"] as? Int32
            self.minSize = dictionary["MinSize"] as? Int32
            self.desiredCapacity = dictionary["DesiredCapacity"] as? Int32
            self.placementGroup = dictionary["PlacementGroup"] as? String
            self.defaultCooldown = dictionary["DefaultCooldown"] as? Int32
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = dictionary["HealthCheckGracePeriod"] as? Int32
            self.terminationPolicies = dictionary["TerminationPolicies"] as? [String]
            self.healthCheckType = dictionary["HealthCheckType"] as? String
        }
    }

    public struct DeleteLifecycleHookType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The name of the Auto Scaling group for the lifecycle hook.
        public let autoScalingGroupName: String

        public init(lifecycleHookName: String, autoScalingGroupName: String) {
            self.lifecycleHookName = lifecycleHookName
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let lifecycleHookName = dictionary["LifecycleHookName"] as? String else { throw InitializableError.missingRequiredParam("LifecycleHookName") }
            self.lifecycleHookName = lifecycleHookName
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct DescribeLoadBalancersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The load balancers.
        public let loadBalancers: [LoadBalancerState]?

        public init(nextToken: String? = nil, loadBalancers: [LoadBalancerState]? = nil) {
            self.nextToken = nextToken
            self.loadBalancers = loadBalancers
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let loadBalancers = dictionary["LoadBalancers"] as? [[String: Any]] {
                self.loadBalancers = try loadBalancers.map({ try LoadBalancerState(dictionary: $0) })
            } else { 
                self.loadBalancers = nil
            }
        }
    }

    public struct DeleteTagsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct DescribeLoadBalancerTargetGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the target groups.
        public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(loadBalancerTargetGroups: [LoadBalancerTargetGroupState]? = nil, nextToken: String? = nil) {
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let loadBalancerTargetGroups = dictionary["LoadBalancerTargetGroups"] as? [[String: Any]] {
                self.loadBalancerTargetGroups = try loadBalancerTargetGroups.map({ try LoadBalancerTargetGroupState(dictionary: $0) })
            } else { 
                self.loadBalancerTargetGroups = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DetachLoadBalancersResultType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct EnterStandbyQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether the instances moved to Standby mode count as part of the Auto Scaling group's desired capacity. If set, the desired capacity for the Auto Scaling group decrements by the number of instances moved to Standby mode.
        public let shouldDecrementDesiredCapacity: Bool
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instances to move into Standby mode. You must specify at least one instance ID.
        public let instanceIds: [String]?

        public init(shouldDecrementDesiredCapacity: Bool, autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let shouldDecrementDesiredCapacity = dictionary["ShouldDecrementDesiredCapacity"] as? Bool else { throw InitializableError.missingRequiredParam("ShouldDecrementDesiredCapacity") }
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = dictionary["InstanceIds"] as? [String]
        }
    }

    public struct DetachLoadBalancerTargetGroupsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetGroupARNs = dictionary["TargetGroupARNs"] as? [String] else { throw InitializableError.missingRequiredParam("TargetGroupARNs") }
            self.targetGroupARNs = targetGroupARNs
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct AttachLoadBalancerTargetGroupsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetGroupARNs = dictionary["TargetGroupARNs"] as? [String] else { throw InitializableError.missingRequiredParam("TargetGroupARNs") }
            self.targetGroupARNs = targetGroupARNs
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct DeleteScheduledActionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the action to delete.
        public let scheduledActionName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(scheduledActionName: String, autoScalingGroupName: String) {
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledActionName = dictionary["ScheduledActionName"] as? String else { throw InitializableError.missingRequiredParam("ScheduledActionName") }
            self.scheduledActionName = scheduledActionName
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public enum LifecycleState: String, CustomStringConvertible {
        case pending = "Pending"
        case pending_wait = "Pending:Wait"
        case pending_proceed = "Pending:Proceed"
        case quarantined = "Quarantined"
        case inservice = "InService"
        case terminating = "Terminating"
        case terminating_wait = "Terminating:Wait"
        case terminating_proceed = "Terminating:Proceed"
        case terminated = "Terminated"
        case detaching = "Detaching"
        case detached = "Detached"
        case enteringstandby = "EnteringStandby"
        case standby = "Standby"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleHook: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the notification target that Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic. The notification message sent to the target includes the following:   Lifecycle action token   User account ID   Name of the Auto Scaling group   Lifecycle hook name   EC2 instance ID   Lifecycle transition   Notification metadata  
        public let notificationTargetARN: String?
        /// Additional information that you want to include any time Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON. The default value is CONTINUE.
        public let defaultResult: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The default is 3600 seconds (1 hour). When the lifecycle hook times out, Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group for the lifecycle hook.
        public let autoScalingGroupName: String?
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see DescribeLifecycleHookTypes.
        public let lifecycleTransition: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String?
        /// The maximum time, in seconds, that an instance can remain in a Pending:Wait or Terminating:Wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public let globalTimeout: Int32?

        public init(notificationTargetARN: String? = nil, notificationMetadata: String? = nil, defaultResult: String? = nil, roleARN: String? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String? = nil, lifecycleTransition: String? = nil, lifecycleHookName: String? = nil, globalTimeout: Int32? = nil) {
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
            self.defaultResult = defaultResult
            self.roleARN = roleARN
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleTransition = lifecycleTransition
            self.lifecycleHookName = lifecycleHookName
            self.globalTimeout = globalTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.notificationTargetARN = dictionary["NotificationTargetARN"] as? String
            self.notificationMetadata = dictionary["NotificationMetadata"] as? String
            self.defaultResult = dictionary["DefaultResult"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            self.heartbeatTimeout = dictionary["HeartbeatTimeout"] as? Int32
            self.autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String
            self.lifecycleTransition = dictionary["LifecycleTransition"] as? String
            self.lifecycleHookName = dictionary["LifecycleHookName"] as? String
            self.globalTimeout = dictionary["GlobalTimeout"] as? Int32
        }
    }

    public struct EnableMetricsCollectionQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The granularity to associate with the metrics to collect. The only valid value is 1Minute.
        public let granularity: String
        /// The name or ARN of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following metrics. If you omit this parameter, all metrics are enabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?

        public init(granularity: String, autoScalingGroupName: String, metrics: [String]? = nil) {
            self.granularity = granularity
            self.autoScalingGroupName = autoScalingGroupName
            self.metrics = metrics
        }

        public init(dictionary: [String: Any]) throws {
            guard let granularity = dictionary["Granularity"] as? String else { throw InitializableError.missingRequiredParam("Granularity") }
            self.granularity = granularity
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.metrics = dictionary["Metrics"] as? [String]
        }
    }

    public struct LaunchConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public let launchConfigurationARN: String?
        /// The name of the launch configuration.
        public let launchConfigurationName: String
        /// The user data available to the instances.
        public let userData: String?
        /// The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId. This parameter is required if you specify a ClassicLink-enabled VPC, and cannot be used otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// A block device mapping, which specifies the block devices for the instance.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Controls whether the instance is optimized for EBS I/O (true) or not (false).
        public let ebsOptimized: Bool?
        /// The price to bid when launching Spot Instances.
        public let spotPrice: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        public let instanceMonitoring: InstanceMonitoring?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter can only be used if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The instance type for the instances.
        public let instanceType: String
        /// The creation date and time for the launch configuration.
        public let createdTime: Date
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs in an isolated, single-tenant hardware and can only be launched into a VPC.
        public let placementTenancy: String?
        /// The security groups to associate with the instances.
        public let securityGroups: [String]?
        /// The name of the key pair.
        public let keyName: String?
        /// The name or Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?
        /// [EC2-VPC] Indicates whether to assign a public IP address to each instance.
        public let associatePublicIpAddress: Bool?

        public init(launchConfigurationARN: String? = nil, launchConfigurationName: String, userData: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, spotPrice: String? = nil, kernelId: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, classicLinkVPCId: String? = nil, instanceType: String, createdTime: Date, placementTenancy: String? = nil, securityGroups: [String]? = nil, keyName: String? = nil, iamInstanceProfile: String? = nil, imageId: String, ramdiskId: String? = nil, associatePublicIpAddress: Bool? = nil) {
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.userData = userData
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.spotPrice = spotPrice
            self.kernelId = kernelId
            self.instanceMonitoring = instanceMonitoring
            self.classicLinkVPCId = classicLinkVPCId
            self.instanceType = instanceType
            self.createdTime = createdTime
            self.placementTenancy = placementTenancy
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.ramdiskId = ramdiskId
            self.associatePublicIpAddress = associatePublicIpAddress
        }

        public init(dictionary: [String: Any]) throws {
            self.launchConfigurationARN = dictionary["LaunchConfigurationARN"] as? String
            guard let launchConfigurationName = dictionary["LaunchConfigurationName"] as? String else { throw InitializableError.missingRequiredParam("LaunchConfigurationName") }
            self.launchConfigurationName = launchConfigurationName
            self.userData = dictionary["UserData"] as? String
            self.classicLinkVPCSecurityGroups = dictionary["ClassicLinkVPCSecurityGroups"] as? [String]
            if let blockDeviceMappings = dictionary["BlockDeviceMappings"] as? [[String: Any]] {
                self.blockDeviceMappings = try blockDeviceMappings.map({ try BlockDeviceMapping(dictionary: $0) })
            } else { 
                self.blockDeviceMappings = nil
            }
            self.ebsOptimized = dictionary["EbsOptimized"] as? Bool
            self.spotPrice = dictionary["SpotPrice"] as? String
            self.kernelId = dictionary["KernelId"] as? String
            if let instanceMonitoring = dictionary["InstanceMonitoring"] as? [String: Any] { self.instanceMonitoring = try Autoscaling.InstanceMonitoring(dictionary: instanceMonitoring) } else { self.instanceMonitoring = nil }
            self.classicLinkVPCId = dictionary["ClassicLinkVPCId"] as? String
            guard let instanceType = dictionary["InstanceType"] as? String else { throw InitializableError.missingRequiredParam("InstanceType") }
            self.instanceType = instanceType
            guard let createdTime = dictionary["CreatedTime"] as? Date else { throw InitializableError.missingRequiredParam("CreatedTime") }
            self.createdTime = createdTime
            self.placementTenancy = dictionary["PlacementTenancy"] as? String
            self.securityGroups = dictionary["SecurityGroups"] as? [String]
            self.keyName = dictionary["KeyName"] as? String
            self.iamInstanceProfile = dictionary["IamInstanceProfile"] as? String
            guard let imageId = dictionary["ImageId"] as? String else { throw InitializableError.missingRequiredParam("ImageId") }
            self.imageId = imageId
            self.ramdiskId = dictionary["RamdiskId"] as? String
            self.associatePublicIpAddress = dictionary["AssociatePublicIpAddress"] as? Bool
        }
    }

    public struct DescribeTagsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// A filter used to scope the tags to return.
        public let filters: [Filter]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try Filter(dictionary: $0) })
            } else { 
                self.filters = nil
            }
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Suppresses a device mapping. If this parameter is true for the root device, the instance might fail the EC2 health check. Auto Scaling launches a replacement instance if the instance fails the health check.
        public let noDevice: Bool?
        /// The name of the virtual device (for example, ephemeral0).
        public let virtualName: String?
        /// The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh).
        public let deviceName: String
        /// The information about the Amazon EBS volume.
        public let ebs: Ebs?

        public init(noDevice: Bool? = nil, virtualName: String? = nil, deviceName: String, ebs: Ebs? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

        public init(dictionary: [String: Any]) throws {
            self.noDevice = dictionary["NoDevice"] as? Bool
            self.virtualName = dictionary["VirtualName"] as? String
            guard let deviceName = dictionary["DeviceName"] as? String else { throw InitializableError.missingRequiredParam("DeviceName") }
            self.deviceName = deviceName
            if let ebs = dictionary["Ebs"] as? [String: Any] { self.ebs = try Autoscaling.Ebs(dictionary: ebs) } else { self.ebs = nil }
        }
    }

    public struct DeleteAutoScalingGroupType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies that the group will be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
        public let forceDelete: Bool?
        /// The name of the group to delete.
        public let autoScalingGroupName: String

        public init(forceDelete: Bool? = nil, autoScalingGroupName: String) {
            self.forceDelete = forceDelete
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.forceDelete = dictionary["ForceDelete"] as? Bool
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct RecordLifecycleActionHeartbeatType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the Auto Scaling group for the hook.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// A token that uniquely identifies a specific lifecycle action associated with an instance. Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoScalingGroupName: String, lifecycleHookName: String, lifecycleActionToken: String? = nil, instanceId: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = lifecycleActionToken
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            guard let lifecycleHookName = dictionary["LifecycleHookName"] as? String else { throw InitializableError.missingRequiredParam("LifecycleHookName") }
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = dictionary["LifecycleActionToken"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
        }
    }

    public struct DescribeLoadBalancersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return with this call.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the group.
        public let autoScalingGroupName: String

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupName: String) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct PutScalingPolicyType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. This parameter is not supported if the policy type is SimpleScaling.
        public let metricAggregationType: String?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let stepAdjustments: [StepAdjustment]?
        /// The policy type. Valid values are SimpleScaling and StepScaling. If the policy type is null, the value is treated as SimpleScaling.
        public let policyType: String?
        /// The adjustment type. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. For more information, see Dynamic Scaling in the Auto Scaling User Guide.
        public let adjustmentType: String
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. This parameter is required if the policy type is SimpleScaling and not supported otherwise.
        public let scalingAdjustment: Int32?
        /// The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies. This parameter is not supported unless the policy type is SimpleScaling. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let cooldown: Int32?
        /// The name or ARN of the group.
        public let autoScalingGroupName: String
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError.
        public let minAdjustmentMagnitude: Int32?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group. This parameter is not supported if the policy type is SimpleScaling.
        public let estimatedInstanceWarmup: Int32?
        /// The name of the policy.
        public let policyName: String

        public init(minAdjustmentStep: Int32? = nil, metricAggregationType: String? = nil, stepAdjustments: [StepAdjustment]? = nil, policyType: String? = nil, adjustmentType: String, scalingAdjustment: Int32? = nil, cooldown: Int32? = nil, autoScalingGroupName: String, minAdjustmentMagnitude: Int32? = nil, estimatedInstanceWarmup: Int32? = nil, policyName: String) {
            self.minAdjustmentStep = minAdjustmentStep
            self.metricAggregationType = metricAggregationType
            self.stepAdjustments = stepAdjustments
            self.policyType = policyType
            self.adjustmentType = adjustmentType
            self.scalingAdjustment = scalingAdjustment
            self.cooldown = cooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.policyName = policyName
        }

        public init(dictionary: [String: Any]) throws {
            self.minAdjustmentStep = dictionary["MinAdjustmentStep"] as? Int32
            self.metricAggregationType = dictionary["MetricAggregationType"] as? String
            if let stepAdjustments = dictionary["StepAdjustments"] as? [[String: Any]] {
                self.stepAdjustments = try stepAdjustments.map({ try StepAdjustment(dictionary: $0) })
            } else { 
                self.stepAdjustments = nil
            }
            self.policyType = dictionary["PolicyType"] as? String
            guard let adjustmentType = dictionary["AdjustmentType"] as? String else { throw InitializableError.missingRequiredParam("AdjustmentType") }
            self.adjustmentType = adjustmentType
            self.scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32
            self.cooldown = dictionary["Cooldown"] as? Int32
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            self.minAdjustmentMagnitude = dictionary["MinAdjustmentMagnitude"] as? Int32
            self.estimatedInstanceWarmup = dictionary["EstimatedInstanceWarmup"] as? Int32
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
        }
    }

    public struct SetInstanceProtectionQuery: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The name of the group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]

        public init(protectedFromScaleIn: Bool, autoScalingGroupName: String, instanceIds: [String]) {
            self.protectedFromScaleIn = protectedFromScaleIn
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let protectedFromScaleIn = dictionary["ProtectedFromScaleIn"] as? Bool else { throw InitializableError.missingRequiredParam("ProtectedFromScaleIn") }
            self.protectedFromScaleIn = protectedFromScaleIn
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
            guard let instanceIds = dictionary["InstanceIds"] as? [String] else { throw InitializableError.missingRequiredParam("InstanceIds") }
            self.instanceIds = instanceIds
        }
    }

    public struct AttachLoadBalancersResultType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Filter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the filter. The valid values are: "auto-scaling-group", "key", "value", and "propagate-at-launch".
        public let name: String?
        /// The value of the filter.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.values = dictionary["Values"] as? [String]
        }
    }

    public struct DescribeLifecycleHooksType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
        public let lifecycleHookNames: [String]?
        /// The name of the group.
        public let autoScalingGroupName: String

        public init(lifecycleHookNames: [String]? = nil, autoScalingGroupName: String) {
            self.lifecycleHookNames = lifecycleHookNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.lifecycleHookNames = dictionary["LifecycleHookNames"] as? [String]
            guard let autoScalingGroupName = dictionary["AutoScalingGroupName"] as? String else { throw InitializableError.missingRequiredParam("AutoScalingGroupName") }
            self.autoScalingGroupName = autoScalingGroupName
        }
    }

    public struct CreateOrUpdateTagsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

}