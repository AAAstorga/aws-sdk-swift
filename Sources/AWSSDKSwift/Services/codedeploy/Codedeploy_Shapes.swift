// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Codedeploy {

    public struct RevisionLocation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the location of application artifacts stored in Amazon S3. 
        public let s3Location: S3Location?
        /// Information about the location of application artifacts stored in GitHub.
        public let gitHubLocation: GitHubLocation?
        /// The type of application revision:   S3: An application revision stored in Amazon S3.   GitHub: An application revision stored in GitHub.  
        public let revisionType: RevisionLocationType?

        public init(s3Location: S3Location? = nil, gitHubLocation: GitHubLocation? = nil, revisionType: RevisionLocationType? = nil) {
            self.s3Location = s3Location
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
        }

        public init(dictionary: [String: Any]) throws {
            if let s3Location = dictionary["s3Location"] as? [String: Any] { self.s3Location = try Codedeploy.S3Location(dictionary: s3Location) } else { self.s3Location = nil }
            if let gitHubLocation = dictionary["gitHubLocation"] as? [String: Any] { self.gitHubLocation = try Codedeploy.GitHubLocation(dictionary: gitHubLocation) } else { self.gitHubLocation = nil }
            if let revisionType = dictionary["revisionType"] as? String { self.revisionType = RevisionLocationType(rawValue: revisionType) } else { self.revisionType = nil }
        }
    }

    public struct GetDeploymentConfigOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the deployment configuration.
        public let deploymentConfigInfo: DeploymentConfigInfo?

        public init(deploymentConfigInfo: DeploymentConfigInfo? = nil) {
            self.deploymentConfigInfo = deploymentConfigInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentConfigInfo = dictionary["deploymentConfigInfo"] as? [String: Any] { self.deploymentConfigInfo = try Codedeploy.DeploymentConfigInfo(dictionary: deploymentConfigInfo) } else { self.deploymentConfigInfo = nil }
        }
    }

    public enum RegistrationStatus: String, CustomStringConvertible {
        case registered = "Registered"
        case deregistered = "Deregistered"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeploymentOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique deployment ID.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["deploymentId"] as? String
        }
    }

    public struct SkipWaitTimeForInstanceTerminationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the blue/green deployment for which you want to skip the instance termination wait time.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["deploymentId"] as? String
        }
    }

    public struct GetDeploymentOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the deployment.
        public let deploymentInfo: DeploymentInfo?

        public init(deploymentInfo: DeploymentInfo? = nil) {
            self.deploymentInfo = deploymentInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentInfo = dictionary["deploymentInfo"] as? [String: Any] { self.deploymentInfo = try Codedeploy.DeploymentInfo(dictionary: deploymentInfo) } else { self.deploymentInfo = nil }
        }
    }

    public struct BatchGetDeploymentInstancesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the instance.
        public let instancesSummary: [InstanceSummary]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(instancesSummary: [InstanceSummary]? = nil, errorMessage: String? = nil) {
            self.instancesSummary = instancesSummary
            self.errorMessage = errorMessage
        }

        public init(dictionary: [String: Any]) throws {
            if let instancesSummary = dictionary["instancesSummary"] as? [[String: Any]] {
                self.instancesSummary = try instancesSummary.map({ try InstanceSummary(dictionary: $0) })
            } else { 
                self.instancesSummary = nil
            }
            self.errorMessage = dictionary["errorMessage"] as? String
        }
    }

    public struct GetDeploymentInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A deployment ID associated with the applicable IAM user or AWS account.
        public let deploymentId: String

        public init(deploymentId: String) {
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentId = dictionary["deploymentId"] as? String else { throw InitializableError.missingRequiredParam("deploymentId") }
            self.deploymentId = deploymentId
        }
    }

    public struct DeploymentStyle: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether to run a standard deployment or a blue/green deployment.
        public let deploymentType: DeploymentType?
        /// Indicates whether to route deployment traffic behind a load balancer.
        public let deploymentOption: DeploymentOption?

        public init(deploymentType: DeploymentType? = nil, deploymentOption: DeploymentOption? = nil) {
            self.deploymentType = deploymentType
            self.deploymentOption = deploymentOption
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentType = dictionary["deploymentType"] as? String { self.deploymentType = DeploymentType(rawValue: deploymentType) } else { self.deploymentType = nil }
            if let deploymentOption = dictionary["deploymentOption"] as? String { self.deploymentOption = DeploymentOption(rawValue: deploymentOption) } else { self.deploymentOption = nil }
        }
    }

    public struct DeploymentInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        public let targetInstances: TargetInstances?
        /// A timestamp indicating when the deployment was complete.
        public let completeTime: Date?
        /// The deployment group name.
        public let deploymentGroupName: String?
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified; otherwise, 'true' as soon as the termination wait period starts.
        public let instanceTerminationWaitTimeStarted: Bool?
        /// Information about a deployment rollback.
        public let rollbackInfo: RollbackInfo?
        /// A comment about the deployment.
        public let description: String?
        /// If true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        public let ignoreApplicationStopFailures: Bool?
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        public let additionalDeploymentStatusInfo: String?
        /// The means by which the deployment was created:   user: A user created the deployment.   autoscaling: Auto Scaling created the deployment.   codeDeployRollback: A rollback process created the deployment.  
        public let creator: DeploymentCreator?
        /// Information about the load balancer used in this blue/green deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information about blue/green deployment options for this deployment.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// The application name.
        public let applicationName: String?
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        public let updateOutdatedInstancesOnly: Bool?
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        public let revision: RevisionLocation?
        /// The current state of the deployment as a whole.
        public let status: DeploymentStatus?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The deployment ID.
        public let deploymentId: String?
        /// Information about any error associated with this deployment.
        public let errorInformation: ErrorInformation?
        /// Information about the automatic rollback configuration associated with the deployment.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// A summary of the deployment status of the instances in the deployment.
        public let deploymentOverview: DeploymentOverview?
        /// A timestamp indicating when the deployment was created.
        public let createTime: Date?
        /// A timestamp indicating when the deployment was deployed to the deployment group. In some cases, the reported value of the start time may be later than the complete time. This is due to differences in the clock settings of back-end servers that participate in the deployment process.
        public let startTime: Date?

        public init(targetInstances: TargetInstances? = nil, completeTime: Date? = nil, deploymentGroupName: String? = nil, instanceTerminationWaitTimeStarted: Bool? = nil, rollbackInfo: RollbackInfo? = nil, description: String? = nil, ignoreApplicationStopFailures: Bool? = nil, additionalDeploymentStatusInfo: String? = nil, creator: DeploymentCreator? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil, revision: RevisionLocation? = nil, status: DeploymentStatus? = nil, deploymentConfigName: String? = nil, deploymentStyle: DeploymentStyle? = nil, deploymentId: String? = nil, errorInformation: ErrorInformation? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, deploymentOverview: DeploymentOverview? = nil, createTime: Date? = nil, startTime: Date? = nil) {
            self.targetInstances = targetInstances
            self.completeTime = completeTime
            self.deploymentGroupName = deploymentGroupName
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.rollbackInfo = rollbackInfo
            self.description = description
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.creator = creator
            self.loadBalancerInfo = loadBalancerInfo
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.revision = revision
            self.status = status
            self.deploymentConfigName = deploymentConfigName
            self.deploymentStyle = deploymentStyle
            self.deploymentId = deploymentId
            self.errorInformation = errorInformation
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.deploymentOverview = deploymentOverview
            self.createTime = createTime
            self.startTime = startTime
        }

        public init(dictionary: [String: Any]) throws {
            if let targetInstances = dictionary["targetInstances"] as? [String: Any] { self.targetInstances = try Codedeploy.TargetInstances(dictionary: targetInstances) } else { self.targetInstances = nil }
            self.completeTime = dictionary["completeTime"] as? Date
            self.deploymentGroupName = dictionary["deploymentGroupName"] as? String
            self.instanceTerminationWaitTimeStarted = dictionary["instanceTerminationWaitTimeStarted"] as? Bool
            if let rollbackInfo = dictionary["rollbackInfo"] as? [String: Any] { self.rollbackInfo = try Codedeploy.RollbackInfo(dictionary: rollbackInfo) } else { self.rollbackInfo = nil }
            self.description = dictionary["description"] as? String
            self.ignoreApplicationStopFailures = dictionary["ignoreApplicationStopFailures"] as? Bool
            self.additionalDeploymentStatusInfo = dictionary["additionalDeploymentStatusInfo"] as? String
            if let creator = dictionary["creator"] as? String { self.creator = DeploymentCreator(rawValue: creator) } else { self.creator = nil }
            if let loadBalancerInfo = dictionary["loadBalancerInfo"] as? [String: Any] { self.loadBalancerInfo = try Codedeploy.LoadBalancerInfo(dictionary: loadBalancerInfo) } else { self.loadBalancerInfo = nil }
            if let blueGreenDeploymentConfiguration = dictionary["blueGreenDeploymentConfiguration"] as? [String: Any] { self.blueGreenDeploymentConfiguration = try Codedeploy.BlueGreenDeploymentConfiguration(dictionary: blueGreenDeploymentConfiguration) } else { self.blueGreenDeploymentConfiguration = nil }
            self.applicationName = dictionary["applicationName"] as? String
            self.updateOutdatedInstancesOnly = dictionary["updateOutdatedInstancesOnly"] as? Bool
            if let revision = dictionary["revision"] as? [String: Any] { self.revision = try Codedeploy.RevisionLocation(dictionary: revision) } else { self.revision = nil }
            if let status = dictionary["status"] as? String { self.status = DeploymentStatus(rawValue: status) } else { self.status = nil }
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let deploymentStyle = dictionary["deploymentStyle"] as? [String: Any] { self.deploymentStyle = try Codedeploy.DeploymentStyle(dictionary: deploymentStyle) } else { self.deploymentStyle = nil }
            self.deploymentId = dictionary["deploymentId"] as? String
            if let errorInformation = dictionary["errorInformation"] as? [String: Any] { self.errorInformation = try Codedeploy.ErrorInformation(dictionary: errorInformation) } else { self.errorInformation = nil }
            if let autoRollbackConfiguration = dictionary["autoRollbackConfiguration"] as? [String: Any] { self.autoRollbackConfiguration = try Codedeploy.AutoRollbackConfiguration(dictionary: autoRollbackConfiguration) } else { self.autoRollbackConfiguration = nil }
            if let deploymentOverview = dictionary["deploymentOverview"] as? [String: Any] { self.deploymentOverview = try Codedeploy.DeploymentOverview(dictionary: deploymentOverview) } else { self.deploymentOverview = nil }
            self.createTime = dictionary["createTime"] as? Date
            self.startTime = dictionary["startTime"] as? Date
        }
    }

    public enum GreenFleetProvisioningAction: String, CustomStringConvertible {
        case discover_existing = "DISCOVER_EXISTING"
        case copy_auto_scaling_group = "COPY_AUTO_SCALING_GROUP"
        public var description: String { return self.rawValue }
    }

    public enum AutoRollbackEvent: String, CustomStringConvertible {
        case deployment_failure = "DEPLOYMENT_FAILURE"
        case deployment_stop_on_alarm = "DEPLOYMENT_STOP_ON_ALARM"
        case deployment_stop_on_request = "DEPLOYMENT_STOP_ON_REQUEST"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationRevisionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information to get about the application revisions, including type and location.
        public let revisions: [RevisionLocation]
        /// The name of an AWS CodeDeploy application about which to get revision information.
        public let applicationName: String

        public init(revisions: [RevisionLocation], applicationName: String) {
            self.revisions = revisions
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let revisions = dictionary["revisions"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("revisions") }
            self.revisions = try revisions.map({ try RevisionLocation(dictionary: $0) })
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct TimeRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The start time of the time range.  Specify null to leave the start time open-ended. 
        public let start: Date?
        /// The end time of the time range.  Specify null to leave the end time open-ended. 
        public let end: Date?

        public init(start: Date? = nil, end: Date? = nil) {
            self.start = start
            self.end = end
        }

        public init(dictionary: [String: Any]) throws {
            self.start = dictionary["start"] as? Date
            self.end = dictionary["end"] as? Date
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag's value.
        public let value: String?
        /// The tag's key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct BatchGetOnPremisesInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the on-premises instances about which to get information.
        public let instanceNames: [String]?

        public init(instanceNames: [String]? = nil) {
            self.instanceNames = instanceNames
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceNames = dictionary["instanceNames"] as? [String]
        }
    }

    public enum DeploymentType: String, CustomStringConvertible {
        case in_place = "IN_PLACE"
        case blue_green = "BLUE_GREEN"
        public var description: String { return self.rawValue }
    }

    public struct TagFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The on-premises instance tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: TagFilterType?
        /// The on-premises instance tag filter value.
        public let value: String?
        /// The on-premises instance tag filter key.
        public let key: String?

        public init(type: TagFilterType? = nil, value: String? = nil, key: String? = nil) {
            self.`type` = `type`
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            if let `type` = dictionary["Type"] as? String { self.`type` = TagFilterType(rawValue: `type`) } else { self.`type` = nil }
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public enum DeploymentCreator: String, CustomStringConvertible {
        case user = "user"
        case autoscaling = "autoscaling"
        case codedeployrollback = "codeDeployRollback"
        public var description: String { return self.rawValue }
    }

    public struct ErrorInformation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For information about additional error codes, see Error Codes for AWS CodeDeploy in the AWS CodeDeploy User Guide. The error code:   APPLICATION_MISSING: The application was missing. This error code will most likely be raised if the application is deleted after the deployment is created but before it is started.   DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code will most likely be raised if the deployment group is deleted after the deployment is created but before it is started.   HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.   HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.   IAM_ROLE_MISSING: The service role cannot be accessed.   IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.   INTERNAL_ERROR: There was an internal error.   NO_EC2_SUBSCRIPTION: The calling account is not subscribed to the Amazon EC2 service.   NO_INSTANCES: No instance were specified, or no instance can be found.   OVER_MAX_INSTANCES: The maximum number of instance was exceeded.   THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.   TIMEOUT: The deployment has timed out.   REVISION_MISSING: The revision ID was missing. This error code will most likely be raised if the revision is deleted after the deployment is created but before it is started.  
        public let code: ErrorCode?
        /// An accompanying error message.
        public let message: String?

        public init(code: ErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            if let code = dictionary["code"] as? String { self.code = ErrorCode(rawValue: code) } else { self.code = nil }
            self.message = dictionary["message"] as? String
        }
    }

    public struct ListApplicationRevisionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier returned from the previous list application revisions call. It can be used to return the next set of applications in the list.
        public let nextToken: String?
        /// The order in which to sort the list results:   ascending: ascending order.   descending: descending order.   If not specified, the results will be sorted in ascending order. If set to null, the results will be sorted in an arbitrary order.
        public let sortOrder: SortOrder?
        /// A key prefix for the set of Amazon S3 objects to limit the search for revisions.
        public let s3KeyPrefix: String?
        /// An Amazon S3 bucket name to limit the search for revisions. If set to null, all of the user's buckets will be searched.
        public let s3Bucket: String?
        /// The column name to use to sort the list results:   registerTime: Sort by the time the revisions were registered with AWS CodeDeploy.   firstUsedTime: Sort by the time the revisions were first used in a deployment.   lastUsedTime: Sort by the time the revisions were last used in a deployment.   If not specified or set to null, the results will be returned in an arbitrary order.
        public let sortBy: ApplicationRevisionSortBy?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// Whether to list revisions based on whether the revision is the target revision of an deployment group:   include: List revisions that are target revisions of a deployment group.   exclude: Do not list revisions that are target revisions of a deployment group.   ignore: List all revisions.  
        public let deployed: ListStateFilterAction?

        public init(nextToken: String? = nil, sortOrder: SortOrder? = nil, s3KeyPrefix: String? = nil, s3Bucket: String? = nil, sortBy: ApplicationRevisionSortBy? = nil, applicationName: String, deployed: ListStateFilterAction? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
            self.s3KeyPrefix = s3KeyPrefix
            self.s3Bucket = s3Bucket
            self.sortBy = sortBy
            self.applicationName = applicationName
            self.deployed = deployed
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let sortOrder = dictionary["sortOrder"] as? String { self.sortOrder = SortOrder(rawValue: sortOrder) } else { self.sortOrder = nil }
            self.s3KeyPrefix = dictionary["s3KeyPrefix"] as? String
            self.s3Bucket = dictionary["s3Bucket"] as? String
            if let sortBy = dictionary["sortBy"] as? String { self.sortBy = ApplicationRevisionSortBy(rawValue: sortBy) } else { self.sortBy = nil }
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
            if let deployed = dictionary["deployed"] as? String { self.deployed = ListStateFilterAction(rawValue: deployed) } else { self.deployed = nil }
        }
    }

    public struct BatchGetDeploymentsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the deployments.
        public let deploymentsInfo: [DeploymentInfo]?

        public init(deploymentsInfo: [DeploymentInfo]? = nil) {
            self.deploymentsInfo = deploymentsInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentsInfo = dictionary["deploymentsInfo"] as? [[String: Any]] {
                self.deploymentsInfo = try deploymentsInfo.map({ try DeploymentInfo(dictionary: $0) })
            } else { 
                self.deploymentsInfo = nil
            }
        }
    }

    public struct CreateApplicationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the application. This name must be unique with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct UpdateDeploymentGroupOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        public init(dictionary: [String: Any]) throws {
            if let hooksNotCleanedUp = dictionary["hooksNotCleanedUp"] as? [[String: Any]] {
                self.hooksNotCleanedUp = try hooksNotCleanedUp.map({ try AutoScalingGroup(dictionary: $0) })
            } else { 
                self.hooksNotCleanedUp = nil
            }
        }
    }

    public struct Alarm: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
        }
    }

    public struct CreateDeploymentConfigOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique deployment configuration ID.
        public let deploymentConfigId: String?

        public init(deploymentConfigId: String? = nil) {
            self.deploymentConfigId = deploymentConfigId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentConfigId = dictionary["deploymentConfigId"] as? String
        }
    }

    public struct GetOnPremisesInstanceOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the on-premises instance.
        public let instanceInfo: InstanceInfo?

        public init(instanceInfo: InstanceInfo? = nil) {
            self.instanceInfo = instanceInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceInfo = dictionary["instanceInfo"] as? [String: Any] { self.instanceInfo = try Codedeploy.InstanceInfo(dictionary: instanceInfo) } else { self.instanceInfo = nil }
        }
    }

    public struct GetDeploymentInstanceOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the instance.
        public let instanceSummary: InstanceSummary?

        public init(instanceSummary: InstanceSummary? = nil) {
            self.instanceSummary = instanceSummary
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceSummary = dictionary["instanceSummary"] as? [String: Any] { self.instanceSummary = try Codedeploy.InstanceSummary(dictionary: instanceSummary) } else { self.instanceSummary = nil }
        }
    }

    public struct DeploymentReadyOption: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.   CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.   STOP_DEPLOYMENT: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.  
        public let actionOnTimeout: DeploymentReadyAction?
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout
        public let waitTimeInMinutes: Int32?

        public init(actionOnTimeout: DeploymentReadyAction? = nil, waitTimeInMinutes: Int32? = nil) {
            self.actionOnTimeout = actionOnTimeout
            self.waitTimeInMinutes = waitTimeInMinutes
        }

        public init(dictionary: [String: Any]) throws {
            if let actionOnTimeout = dictionary["actionOnTimeout"] as? String { self.actionOnTimeout = DeploymentReadyAction(rawValue: actionOnTimeout) } else { self.actionOnTimeout = nil }
            self.waitTimeInMinutes = dictionary["waitTimeInMinutes"] as? Int32
        }
    }

    public struct RollbackInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the deployment rollback.
        public let rollbackDeploymentId: String?
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        public let rollbackTriggeringDeploymentId: String?
        /// Information describing the status of a deployment rollback; for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded. 
        public let rollbackMessage: String?

        public init(rollbackDeploymentId: String? = nil, rollbackTriggeringDeploymentId: String? = nil, rollbackMessage: String? = nil) {
            self.rollbackDeploymentId = rollbackDeploymentId
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
            self.rollbackMessage = rollbackMessage
        }

        public init(dictionary: [String: Any]) throws {
            self.rollbackDeploymentId = dictionary["rollbackDeploymentId"] as? String
            self.rollbackTriggeringDeploymentId = dictionary["rollbackTriggeringDeploymentId"] as? String
            self.rollbackMessage = dictionary["rollbackMessage"] as? String
        }
    }

    public struct ListDeploymentsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
        public let nextToken: String?
        /// A time range (start and end) for returning a subset of the list of deployments.
        public let createTimeRange: TimeRange?
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String?
        /// A subset of deployments to list by status:   Created: Include created deployments in the resulting list.   Queued: Include queued deployments in the resulting list.   In Progress: Include in-progress deployments in the resulting list.   Succeeded: Include successful deployments in the resulting list.   Failed: Include failed deployments in the resulting list.   Stopped: Include stopped deployments in the resulting list.  
        public let includeOnlyStatuses: [DeploymentStatus]?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String?

        public init(nextToken: String? = nil, createTimeRange: TimeRange? = nil, deploymentGroupName: String? = nil, includeOnlyStatuses: [DeploymentStatus]? = nil, applicationName: String? = nil) {
            self.nextToken = nextToken
            self.createTimeRange = createTimeRange
            self.deploymentGroupName = deploymentGroupName
            self.includeOnlyStatuses = includeOnlyStatuses
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let createTimeRange = dictionary["createTimeRange"] as? [String: Any] { self.createTimeRange = try Codedeploy.TimeRange(dictionary: createTimeRange) } else { self.createTimeRange = nil }
            self.deploymentGroupName = dictionary["deploymentGroupName"] as? String
            if let includeOnlyStatuses = dictionary["includeOnlyStatuses"] as? [String] { self.includeOnlyStatuses = includeOnlyStatuses.flatMap({ DeploymentStatus(rawValue: $0)}) } else { self.includeOnlyStatuses = nil }
            self.applicationName = dictionary["applicationName"] as? String
        }
    }

    public struct BatchGetDeploymentsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of deployment IDs, separated by spaces.
        public let deploymentIds: [String]?

        public init(deploymentIds: [String]? = nil) {
            self.deploymentIds = deploymentIds
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentIds = dictionary["deploymentIds"] as? [String]
        }
    }

    public enum InstanceType: String, CustomStringConvertible {
        case blue = "Blue"
        case green = "Green"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDeploymentGroupOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
        public let hooksNotCleanedUp: [AutoScalingGroup]?

        public init(hooksNotCleanedUp: [AutoScalingGroup]? = nil) {
            self.hooksNotCleanedUp = hooksNotCleanedUp
        }

        public init(dictionary: [String: Any]) throws {
            if let hooksNotCleanedUp = dictionary["hooksNotCleanedUp"] as? [[String: Any]] {
                self.hooksNotCleanedUp = try hooksNotCleanedUp.map({ try AutoScalingGroup(dictionary: $0) })
            } else { 
                self.hooksNotCleanedUp = nil
            }
        }
    }

    public struct ListApplicationRevisionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of locations that contain the matching revisions.
        public let revisions: [RevisionLocation]?
        /// If a large amount of information is returned, an identifier will also be returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
        public let nextToken: String?

        public init(revisions: [RevisionLocation]? = nil, nextToken: String? = nil) {
            self.revisions = revisions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let revisions = dictionary["revisions"] as? [[String: Any]] {
                self.revisions = try revisions.map({ try RevisionLocation(dictionary: $0) })
            } else { 
                self.revisions = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public enum EC2TagFilterType: String, CustomStringConvertible {
        case key_only = "KEY_ONLY"
        case value_only = "VALUE_ONLY"
        case key_and_value = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct ListOnPremisesInstancesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of matching on-premises instance names.
        public let instanceNames: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
        public let nextToken: String?

        public init(instanceNames: [String]? = nil, nextToken: String? = nil) {
            self.instanceNames = instanceNames
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceNames = dictionary["instanceNames"] as? [String]
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct ListDeploymentConfigsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier returned from the previous list deployment configurations call. It can be used to return the next set of deployment configurations in the list. 
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public enum InstanceAction: String, CustomStringConvertible {
        case terminate = "TERMINATE"
        case keep_alive = "KEEP_ALIVE"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the applications.
        public let applicationsInfo: [ApplicationInfo]?

        public init(applicationsInfo: [ApplicationInfo]? = nil) {
            self.applicationsInfo = applicationsInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let applicationsInfo = dictionary["applicationsInfo"] as? [[String: Any]] {
                self.applicationsInfo = try applicationsInfo.map({ try ApplicationInfo(dictionary: $0) })
            } else { 
                self.applicationsInfo = nil
            }
        }
    }

    public enum LifecycleErrorCode: String, CustomStringConvertible {
        case success = "Success"
        case scriptmissing = "ScriptMissing"
        case scriptnotexecutable = "ScriptNotExecutable"
        case scripttimedout = "ScriptTimedOut"
        case scriptfailed = "ScriptFailed"
        case unknownerror = "UnknownError"
        public var description: String { return self.rawValue }
    }

    public struct BlueGreenDeploymentConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        public let terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption?
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        public let greenFleetProvisioningOption: GreenFleetProvisioningOption?
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        public let deploymentReadyOption: DeploymentReadyOption?

        public init(terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil, greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil, deploymentReadyOption: DeploymentReadyOption? = nil) {
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.deploymentReadyOption = deploymentReadyOption
        }

        public init(dictionary: [String: Any]) throws {
            if let terminateBlueInstancesOnDeploymentSuccess = dictionary["terminateBlueInstancesOnDeploymentSuccess"] as? [String: Any] { self.terminateBlueInstancesOnDeploymentSuccess = try Codedeploy.BlueInstanceTerminationOption(dictionary: terminateBlueInstancesOnDeploymentSuccess) } else { self.terminateBlueInstancesOnDeploymentSuccess = nil }
            if let greenFleetProvisioningOption = dictionary["greenFleetProvisioningOption"] as? [String: Any] { self.greenFleetProvisioningOption = try Codedeploy.GreenFleetProvisioningOption(dictionary: greenFleetProvisioningOption) } else { self.greenFleetProvisioningOption = nil }
            if let deploymentReadyOption = dictionary["deploymentReadyOption"] as? [String: Any] { self.deploymentReadyOption = try Codedeploy.DeploymentReadyOption(dictionary: deploymentReadyOption) } else { self.deploymentReadyOption = nil }
        }
    }

    public struct BatchGetDeploymentGroupsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the deployment groups.
        public let deploymentGroupsInfo: [DeploymentGroupInfo]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?

        public init(deploymentGroupsInfo: [DeploymentGroupInfo]? = nil, errorMessage: String? = nil) {
            self.deploymentGroupsInfo = deploymentGroupsInfo
            self.errorMessage = errorMessage
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentGroupsInfo = dictionary["deploymentGroupsInfo"] as? [[String: Any]] {
                self.deploymentGroupsInfo = try deploymentGroupsInfo.map({ try DeploymentGroupInfo(dictionary: $0) })
            } else { 
                self.deploymentGroupsInfo = nil
            }
            self.errorMessage = dictionary["errorMessage"] as? String
        }
    }

    public struct ContinueDeploymentInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The deployment ID of the blue/green deployment for which you want to start rerouting traffic to the replacement environment.
        public let deploymentId: String?

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentId = dictionary["deploymentId"] as? String
        }
    }

    public struct DeleteDeploymentConfigInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentConfigName = dictionary["deploymentConfigName"] as? String else { throw InitializableError.missingRequiredParam("deploymentConfigName") }
            self.deploymentConfigName = deploymentConfigName
        }
    }

    public struct AutoScalingGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Auto Scaling group name.
        public let name: String?
        /// An Auto Scaling lifecycle event hook name.
        public let hook: String?

        public init(name: String? = nil, hook: String? = nil) {
            self.name = name
            self.hook = hook
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.hook = dictionary["hook"] as? String
        }
    }

    public struct ListDeploymentGroupsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(nextToken: String? = nil, applicationName: String) {
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct ListDeploymentInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A subset of instances to list by status:   Pending: Include those instance with pending deployments.   InProgress: Include those instance where deployments are still in progress.   Succeeded: Include those instances with successful deployments.   Failed: Include those instance with failed deployments.   Skipped: Include those instance with skipped deployments.   Unknown: Include those instance with deployments in an unknown state.  
        public let instanceStatusFilter: [InstanceStatus]?
        /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
        public let instanceTypeFilter: [InstanceType]?
        /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
        public let nextToken: String?
        /// The unique ID of a deployment.
        public let deploymentId: String

        public init(instanceStatusFilter: [InstanceStatus]? = nil, instanceTypeFilter: [InstanceType]? = nil, nextToken: String? = nil, deploymentId: String) {
            self.instanceStatusFilter = instanceStatusFilter
            self.instanceTypeFilter = instanceTypeFilter
            self.nextToken = nextToken
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceStatusFilter = dictionary["instanceStatusFilter"] as? [String] { self.instanceStatusFilter = instanceStatusFilter.flatMap({ InstanceStatus(rawValue: $0)}) } else { self.instanceStatusFilter = nil }
            if let instanceTypeFilter = dictionary["instanceTypeFilter"] as? [String] { self.instanceTypeFilter = instanceTypeFilter.flatMap({ InstanceType(rawValue: $0)}) } else { self.instanceTypeFilter = nil }
            self.nextToken = dictionary["nextToken"] as? String
            guard let deploymentId = dictionary["deploymentId"] as? String else { throw InitializableError.missingRequiredParam("deploymentId") }
            self.deploymentId = deploymentId
        }
    }

    public enum StopStatus: String, CustomStringConvertible {
        case pending = "Pending"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public enum RevisionLocationType: String, CustomStringConvertible {
        case s3 = "S3"
        case github = "GitHub"
        public var description: String { return self.rawValue }
    }

    public enum TriggerEventType: String, CustomStringConvertible {
        case deploymentstart = "DeploymentStart"
        case deploymentsuccess = "DeploymentSuccess"
        case deploymentfailure = "DeploymentFailure"
        case deploymentstop = "DeploymentStop"
        case deploymentrollback = "DeploymentRollback"
        case deploymentready = "DeploymentReady"
        case instancestart = "InstanceStart"
        case instancesuccess = "InstanceSuccess"
        case instancefailure = "InstanceFailure"
        case instanceready = "InstanceReady"
        public var description: String { return self.rawValue }
    }

    public enum ListStateFilterAction: String, CustomStringConvertible {
        case include = "include"
        case exclude = "exclude"
        case ignore = "ignore"
        public var description: String { return self.rawValue }
    }

    public struct DeleteApplicationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct CreateDeploymentGroupInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of a new deployment group for the specified application.
        public let deploymentGroupName: String
        /// A service role ARN that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
        public let serviceRoleArn: String
        /// Information about the load balancer used in a blue/green deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information to add about Amazon CloudWatch alarms when the deployment group is created. 
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [String]?
        /// If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or the deployment group. For more information about the predefined deployment configurations in AWS CodeDeploy, see see Working with Deployment Groups in AWS CodeDeploy in the AWS CodeDeploy User Guide.
        public let deploymentConfigName: String?
        /// Information about triggers to create when the deployment group is created. For examples, see Create a Trigger for an AWS CodeDeploy Event in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, standard or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The Amazon EC2 tags on which to filter.
        public let ec2TagFilters: [EC2TagFilter]?
        /// The on-premises instance tags on which to filter.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// Configuration information for an automatic rollback that is added when a deployment group is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?

        public init(deploymentGroupName: String, serviceRoleArn: String, loadBalancerInfo: LoadBalancerInfo? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, ec2TagFilters: [EC2TagFilter]? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.loadBalancerInfo = loadBalancerInfo
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.ec2TagFilters = ec2TagFilters
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentGroupName = dictionary["deploymentGroupName"] as? String else { throw InitializableError.missingRequiredParam("deploymentGroupName") }
            self.deploymentGroupName = deploymentGroupName
            guard let serviceRoleArn = dictionary["serviceRoleArn"] as? String else { throw InitializableError.missingRequiredParam("serviceRoleArn") }
            self.serviceRoleArn = serviceRoleArn
            if let loadBalancerInfo = dictionary["loadBalancerInfo"] as? [String: Any] { self.loadBalancerInfo = try Codedeploy.LoadBalancerInfo(dictionary: loadBalancerInfo) } else { self.loadBalancerInfo = nil }
            if let alarmConfiguration = dictionary["alarmConfiguration"] as? [String: Any] { self.alarmConfiguration = try Codedeploy.AlarmConfiguration(dictionary: alarmConfiguration) } else { self.alarmConfiguration = nil }
            if let blueGreenDeploymentConfiguration = dictionary["blueGreenDeploymentConfiguration"] as? [String: Any] { self.blueGreenDeploymentConfiguration = try Codedeploy.BlueGreenDeploymentConfiguration(dictionary: blueGreenDeploymentConfiguration) } else { self.blueGreenDeploymentConfiguration = nil }
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
            self.autoScalingGroups = dictionary["autoScalingGroups"] as? [String]
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let triggerConfigurations = dictionary["triggerConfigurations"] as? [[String: Any]] {
                self.triggerConfigurations = try triggerConfigurations.map({ try TriggerConfig(dictionary: $0) })
            } else { 
                self.triggerConfigurations = nil
            }
            if let deploymentStyle = dictionary["deploymentStyle"] as? [String: Any] { self.deploymentStyle = try Codedeploy.DeploymentStyle(dictionary: deploymentStyle) } else { self.deploymentStyle = nil }
            if let ec2TagFilters = dictionary["ec2TagFilters"] as? [[String: Any]] {
                self.ec2TagFilters = try ec2TagFilters.map({ try EC2TagFilter(dictionary: $0) })
            } else { 
                self.ec2TagFilters = nil
            }
            if let onPremisesInstanceTagFilters = dictionary["onPremisesInstanceTagFilters"] as? [[String: Any]] {
                self.onPremisesInstanceTagFilters = try onPremisesInstanceTagFilters.map({ try TagFilter(dictionary: $0) })
            } else { 
                self.onPremisesInstanceTagFilters = nil
            }
            if let autoRollbackConfiguration = dictionary["autoRollbackConfiguration"] as? [String: Any] { self.autoRollbackConfiguration = try Codedeploy.AutoRollbackConfiguration(dictionary: autoRollbackConfiguration) } else { self.autoRollbackConfiguration = nil }
        }
    }

    public struct LoadBalancerInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array containing information about the load balancer in Elastic Load Balancing to use in a blue/green deployment.
        public let elbInfoList: [ELBInfo]?

        public init(elbInfoList: [ELBInfo]? = nil) {
            self.elbInfoList = elbInfoList
        }

        public init(dictionary: [String: Any]) throws {
            if let elbInfoList = dictionary["elbInfoList"] as? [[String: Any]] {
                self.elbInfoList = try elbInfoList.map({ try ELBInfo(dictionary: $0) })
            } else { 
                self.elbInfoList = nil
            }
        }
    }

    public struct BatchGetDeploymentInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID of a deployment.
        public let deploymentId: String
        /// The unique IDs of instances in the deployment group.
        public let instanceIds: [String]

        public init(deploymentId: String, instanceIds: [String]) {
            self.deploymentId = deploymentId
            self.instanceIds = instanceIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentId = dictionary["deploymentId"] as? String else { throw InitializableError.missingRequiredParam("deploymentId") }
            self.deploymentId = deploymentId
            guard let instanceIds = dictionary["instanceIds"] as? [String] else { throw InitializableError.missingRequiredParam("instanceIds") }
            self.instanceIds = instanceIds
        }
    }

    public struct BatchGetOnPremisesInstancesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the on-premises instances.
        public let instanceInfos: [InstanceInfo]?

        public init(instanceInfos: [InstanceInfo]? = nil) {
            self.instanceInfos = instanceInfos
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceInfos = dictionary["instanceInfos"] as? [[String: Any]] {
                self.instanceInfos = try instanceInfos.map({ try InstanceInfo(dictionary: $0) })
            } else { 
                self.instanceInfos = nil
            }
        }
    }

    public enum LifecycleEventStatus: String, CustomStringConvertible {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct StopDeploymentOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the stop deployment operation:   Pending: The stop operation is pending.   Succeeded: The stop operation was successful.  
        public let status: StopStatus?
        /// An accompanying status message.
        public let statusMessage: String?

        public init(status: StopStatus? = nil, statusMessage: String? = nil) {
            self.status = status
            self.statusMessage = statusMessage
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["status"] as? String { self.status = StopStatus(rawValue: status) } else { self.status = nil }
            self.statusMessage = dictionary["statusMessage"] as? String
        }
    }

    public struct AutoRollbackConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The event type or types that trigger a rollback.
        public let events: [AutoRollbackEvent]?
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        public let enabled: Bool?

        public init(events: [AutoRollbackEvent]? = nil, enabled: Bool? = nil) {
            self.events = events
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            if let events = dictionary["events"] as? [String] { self.events = events.flatMap({ AutoRollbackEvent(rawValue: $0)}) } else { self.events = nil }
            self.enabled = dictionary["enabled"] as? Bool
        }
    }

    public struct ListDeploymentGroupsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of corresponding deployment group names.
        public let deploymentGroups: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
        public let nextToken: String?
        /// The application name.
        public let applicationName: String?

        public init(deploymentGroups: [String]? = nil, nextToken: String? = nil, applicationName: String? = nil) {
            self.deploymentGroups = deploymentGroups
            self.nextToken = nextToken
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentGroups = dictionary["deploymentGroups"] as? [String]
            self.nextToken = dictionary["nextToken"] as? String
            self.applicationName = dictionary["applicationName"] as? String
        }
    }

    public struct ListDeploymentConfigsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
        public let nextToken: String?
        /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
        public let deploymentConfigsList: [String]?

        public init(nextToken: String? = nil, deploymentConfigsList: [String]? = nil) {
            self.nextToken = nextToken
            self.deploymentConfigsList = deploymentConfigsList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.deploymentConfigsList = dictionary["deploymentConfigsList"] as? [String]
        }
    }

    public struct AddTagsToOnPremisesInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
        public let tags: [Tag]
        /// The names of the on-premises instances to which to add tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
            guard let instanceNames = dictionary["instanceNames"] as? [String] else { throw InitializableError.missingRequiredParam("instanceNames") }
            self.instanceNames = instanceNames
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible {
        case pending = "Pending"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case skipped = "Skipped"
        case unknown = "Unknown"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public struct GitHubLocation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        public let commitId: String?
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision.  Specified as account/repository.
        public let repository: String?

        public init(commitId: String? = nil, repository: String? = nil) {
            self.commitId = commitId
            self.repository = repository
        }

        public init(dictionary: [String: Any]) throws {
            self.commitId = dictionary["commitId"] as? String
            self.repository = dictionary["repository"] as? String
        }
    }

    public struct CreateDeploymentConfigInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the deployment configuration to create.
        public let deploymentConfigName: String
        /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:   HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.   FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.   The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
        public let minimumHealthyHosts: MinimumHealthyHosts?

        public init(deploymentConfigName: String, minimumHealthyHosts: MinimumHealthyHosts? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentConfigName = dictionary["deploymentConfigName"] as? String else { throw InitializableError.missingRequiredParam("deploymentConfigName") }
            self.deploymentConfigName = deploymentConfigName
            if let minimumHealthyHosts = dictionary["minimumHealthyHosts"] as? [String: Any] { self.minimumHealthyHosts = try Codedeploy.MinimumHealthyHosts(dictionary: minimumHealthyHosts) } else { self.minimumHealthyHosts = nil }
        }
    }

    public struct ListOnPremisesInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The on-premises instance tags that will be used to restrict the corresponding on-premises instance names returned.
        public let tagFilters: [TagFilter]?
        /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
        public let nextToken: String?
        /// The registration status of the on-premises instances:   Deregistered: Include deregistered on-premises instances in the resulting list.   Registered: Include registered on-premises instances in the resulting list.  
        public let registrationStatus: RegistrationStatus?

        public init(tagFilters: [TagFilter]? = nil, nextToken: String? = nil, registrationStatus: RegistrationStatus? = nil) {
            self.tagFilters = tagFilters
            self.nextToken = nextToken
            self.registrationStatus = registrationStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let tagFilters = dictionary["tagFilters"] as? [[String: Any]] {
                self.tagFilters = try tagFilters.map({ try TagFilter(dictionary: $0) })
            } else { 
                self.tagFilters = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
            if let registrationStatus = dictionary["registrationStatus"] as? String { self.registrationStatus = RegistrationStatus(rawValue: registrationStatus) } else { self.registrationStatus = nil }
        }
    }

    public struct RegisterApplicationRevisionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A comment about the revision.
        public let description: String?
        /// Information about the application revision to register, including type and location.
        public let revision: RevisionLocation
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(description: String? = nil, revision: RevisionLocation, applicationName: String) {
            self.description = description
            self.revision = revision
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let revision = dictionary["revision"] as? [String: Any] else { throw InitializableError.missingRequiredParam("revision") }
            self.revision = try Codedeploy.RevisionLocation(dictionary: revision)
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct CreateApplicationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique application ID.
        public let applicationId: String?

        public init(applicationId: String? = nil) {
            self.applicationId = applicationId
        }

        public init(dictionary: [String: Any]) throws {
            self.applicationId = dictionary["applicationId"] as? String
        }
    }

    public struct RemoveTagsFromOnPremisesInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag key-value pairs to remove from the on-premises instances.
        public let tags: [Tag]
        /// The names of the on-premises instances from which to remove tags.
        public let instanceNames: [String]

        public init(tags: [Tag], instanceNames: [String]) {
            self.tags = tags
            self.instanceNames = instanceNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
            guard let instanceNames = dictionary["instanceNames"] as? [String] else { throw InitializableError.missingRequiredParam("instanceNames") }
            self.instanceNames = instanceNames
        }
    }

    public struct RevisionInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about an application revision, including usage details and associated deployment groups.
        public let genericRevisionInfo: GenericRevisionInfo?
        /// Information about the location and type of an application revision.
        public let revisionLocation: RevisionLocation?

        public init(genericRevisionInfo: GenericRevisionInfo? = nil, revisionLocation: RevisionLocation? = nil) {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }

        public init(dictionary: [String: Any]) throws {
            if let genericRevisionInfo = dictionary["genericRevisionInfo"] as? [String: Any] { self.genericRevisionInfo = try Codedeploy.GenericRevisionInfo(dictionary: genericRevisionInfo) } else { self.genericRevisionInfo = nil }
            if let revisionLocation = dictionary["revisionLocation"] as? [String: Any] { self.revisionLocation = try Codedeploy.RevisionLocation(dictionary: revisionLocation) } else { self.revisionLocation = nil }
        }
    }

    public struct EC2TagFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag filter type:   KEY_ONLY: Key only.   VALUE_ONLY: Value only.   KEY_AND_VALUE: Key and value.  
        public let `type`: EC2TagFilterType?
        /// The tag filter value.
        public let value: String?
        /// The tag filter key.
        public let key: String?

        public init(type: EC2TagFilterType? = nil, value: String? = nil, key: String? = nil) {
            self.`type` = `type`
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            if let `type` = dictionary["Type"] as? String { self.`type` = EC2TagFilterType(rawValue: `type`) } else { self.`type` = nil }
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct DeploymentGroupInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The deployment group name.
        public let deploymentGroupName: String?
        /// A service role ARN.
        public let serviceRoleArn: String?
        /// Information about the load balancer to use in a blue/green deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// The deployment group ID.
        public let deploymentGroupId: String?
        /// A list of alarms associated with the deployment group.
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// The application name.
        public let applicationName: String?
        /// A list of associated Auto Scaling groups.
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about triggers associated with the deployment group.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The on-premises instance tags on which to filter.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// The Amazon EC2 tags on which to filter.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information about the automatic rollback configuration associated with the deployment group.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// Information about the deployment group's target revision, including type and location.
        public let targetRevision: RevisionLocation?

        public init(deploymentGroupName: String? = nil, serviceRoleArn: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, deploymentGroupId: String? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String? = nil, autoScalingGroups: [AutoScalingGroup]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, targetRevision: RevisionLocation? = nil) {
            self.deploymentGroupName = deploymentGroupName
            self.serviceRoleArn = serviceRoleArn
            self.loadBalancerInfo = loadBalancerInfo
            self.deploymentGroupId = deploymentGroupId
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.targetRevision = targetRevision
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentGroupName = dictionary["deploymentGroupName"] as? String
            self.serviceRoleArn = dictionary["serviceRoleArn"] as? String
            if let loadBalancerInfo = dictionary["loadBalancerInfo"] as? [String: Any] { self.loadBalancerInfo = try Codedeploy.LoadBalancerInfo(dictionary: loadBalancerInfo) } else { self.loadBalancerInfo = nil }
            self.deploymentGroupId = dictionary["deploymentGroupId"] as? String
            if let alarmConfiguration = dictionary["alarmConfiguration"] as? [String: Any] { self.alarmConfiguration = try Codedeploy.AlarmConfiguration(dictionary: alarmConfiguration) } else { self.alarmConfiguration = nil }
            if let blueGreenDeploymentConfiguration = dictionary["blueGreenDeploymentConfiguration"] as? [String: Any] { self.blueGreenDeploymentConfiguration = try Codedeploy.BlueGreenDeploymentConfiguration(dictionary: blueGreenDeploymentConfiguration) } else { self.blueGreenDeploymentConfiguration = nil }
            self.applicationName = dictionary["applicationName"] as? String
            if let autoScalingGroups = dictionary["autoScalingGroups"] as? [[String: Any]] {
                self.autoScalingGroups = try autoScalingGroups.map({ try AutoScalingGroup(dictionary: $0) })
            } else { 
                self.autoScalingGroups = nil
            }
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let triggerConfigurations = dictionary["triggerConfigurations"] as? [[String: Any]] {
                self.triggerConfigurations = try triggerConfigurations.map({ try TriggerConfig(dictionary: $0) })
            } else { 
                self.triggerConfigurations = nil
            }
            if let deploymentStyle = dictionary["deploymentStyle"] as? [String: Any] { self.deploymentStyle = try Codedeploy.DeploymentStyle(dictionary: deploymentStyle) } else { self.deploymentStyle = nil }
            if let onPremisesInstanceTagFilters = dictionary["onPremisesInstanceTagFilters"] as? [[String: Any]] {
                self.onPremisesInstanceTagFilters = try onPremisesInstanceTagFilters.map({ try TagFilter(dictionary: $0) })
            } else { 
                self.onPremisesInstanceTagFilters = nil
            }
            if let ec2TagFilters = dictionary["ec2TagFilters"] as? [[String: Any]] {
                self.ec2TagFilters = try ec2TagFilters.map({ try EC2TagFilter(dictionary: $0) })
            } else { 
                self.ec2TagFilters = nil
            }
            if let autoRollbackConfiguration = dictionary["autoRollbackConfiguration"] as? [String: Any] { self.autoRollbackConfiguration = try Codedeploy.AutoRollbackConfiguration(dictionary: autoRollbackConfiguration) } else { self.autoRollbackConfiguration = nil }
            if let targetRevision = dictionary["targetRevision"] as? [String: Any] { self.targetRevision = try Codedeploy.RevisionLocation(dictionary: targetRevision) } else { self.targetRevision = nil }
        }
    }

    public struct ListApplicationsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct StopDeploymentInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID of a deployment.
        public let deploymentId: String
        /// Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
        public let autoRollbackEnabled: Bool?

        public init(deploymentId: String, autoRollbackEnabled: Bool? = nil) {
            self.deploymentId = deploymentId
            self.autoRollbackEnabled = autoRollbackEnabled
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentId = dictionary["deploymentId"] as? String else { throw InitializableError.missingRequiredParam("deploymentId") }
            self.deploymentId = deploymentId
            self.autoRollbackEnabled = dictionary["autoRollbackEnabled"] as? Bool
        }
    }

    public enum ApplicationRevisionSortBy: String, CustomStringConvertible {
        case registertime = "registerTime"
        case firstusedtime = "firstUsedTime"
        case lastusedtime = "lastUsedTime"
        public var description: String { return self.rawValue }
    }

    public struct InstanceInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the IAM session associated with the on-premises instance.
        public let iamSessionArn: String?
        /// The name of the on-premises instance.
        public let instanceName: String?
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        public let deregisterTime: Date?
        /// The tags currently associated with the on-premises instance.
        public let tags: [Tag]?
        /// The time at which the on-premises instance was registered.
        public let registerTime: Date?
        /// The ARN of the on-premises instance.
        public let instanceArn: String?
        /// The IAM user ARN associated with the on-premises instance.
        public let iamUserArn: String?

        public init(iamSessionArn: String? = nil, instanceName: String? = nil, deregisterTime: Date? = nil, tags: [Tag]? = nil, registerTime: Date? = nil, instanceArn: String? = nil, iamUserArn: String? = nil) {
            self.iamSessionArn = iamSessionArn
            self.instanceName = instanceName
            self.deregisterTime = deregisterTime
            self.tags = tags
            self.registerTime = registerTime
            self.instanceArn = instanceArn
            self.iamUserArn = iamUserArn
        }

        public init(dictionary: [String: Any]) throws {
            self.iamSessionArn = dictionary["iamSessionArn"] as? String
            self.instanceName = dictionary["instanceName"] as? String
            self.deregisterTime = dictionary["deregisterTime"] as? Date
            if let tags = dictionary["tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.registerTime = dictionary["registerTime"] as? Date
            self.instanceArn = dictionary["instanceArn"] as? String
            self.iamUserArn = dictionary["iamUserArn"] as? String
        }
    }

    public struct ListApplicationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications, will also be returned. in the list.
        public let nextToken: String?
        /// A list of application names.
        public let applications: [String]?

        public init(nextToken: String? = nil, applications: [String]? = nil) {
            self.nextToken = nextToken
            self.applications = applications
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.applications = dictionary["applications"] as? [String]
        }
    }

    public struct Diagnostics: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the script.
        public let scriptName: String?
        /// The message associated with the error.
        public let message: String?
        /// The associated error code:   Success: The specified script ran.   ScriptMissing: The specified script was not found in the specified location.   ScriptNotExecutable: The specified script is not a recognized executable file type.   ScriptTimedOut: The specified script did not finish running in the specified time period.   ScriptFailed: The specified script failed to run as expected.   UnknownError: The specified script did not run for an unknown reason.  
        public let errorCode: LifecycleErrorCode?
        /// The last portion of the diagnostic log. If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.
        public let logTail: String?

        public init(scriptName: String? = nil, message: String? = nil, errorCode: LifecycleErrorCode? = nil, logTail: String? = nil) {
            self.scriptName = scriptName
            self.message = message
            self.errorCode = errorCode
            self.logTail = logTail
        }

        public init(dictionary: [String: Any]) throws {
            self.scriptName = dictionary["scriptName"] as? String
            self.message = dictionary["message"] as? String
            if let errorCode = dictionary["errorCode"] as? String { self.errorCode = LifecycleErrorCode(rawValue: errorCode) } else { self.errorCode = nil }
            self.logTail = dictionary["logTail"] as? String
        }
    }

    public struct GenericRevisionInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A comment about the revision.
        public let description: String?
        /// When the revision was first used by AWS CodeDeploy.
        public let firstUsedTime: Date?
        /// When the revision was last used by AWS CodeDeploy.
        public let lastUsedTime: Date?
        /// When the revision was registered with AWS CodeDeploy.
        public let registerTime: Date?
        /// The deployment groups for which this is the current target revision.
        public let deploymentGroups: [String]?

        public init(description: String? = nil, firstUsedTime: Date? = nil, lastUsedTime: Date? = nil, registerTime: Date? = nil, deploymentGroups: [String]? = nil) {
            self.description = description
            self.firstUsedTime = firstUsedTime
            self.lastUsedTime = lastUsedTime
            self.registerTime = registerTime
            self.deploymentGroups = deploymentGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            self.firstUsedTime = dictionary["firstUsedTime"] as? Date
            self.lastUsedTime = dictionary["lastUsedTime"] as? Date
            self.registerTime = dictionary["registerTime"] as? Date
            self.deploymentGroups = dictionary["deploymentGroups"] as? [String]
        }
    }

    public enum SortOrder: String, CustomStringConvertible {
        case ascending = "ascending"
        case descending = "descending"
        public var description: String { return self.rawValue }
    }

    public struct BatchGetApplicationsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of application names separated by spaces.
        public let applicationNames: [String]?

        public init(applicationNames: [String]? = nil) {
            self.applicationNames = applicationNames
        }

        public init(dictionary: [String: Any]) throws {
            self.applicationNames = dictionary["applicationNames"] as? [String]
        }
    }

    public struct GetApplicationRevisionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the application revision to get, including type and location.
        public let revision: RevisionLocation
        /// The name of the application that corresponds to the revision.
        public let applicationName: String

        public init(revision: RevisionLocation, applicationName: String) {
            self.revision = revision
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let revision = dictionary["revision"] as? [String: Any] else { throw InitializableError.missingRequiredParam("revision") }
            self.revision = try Codedeploy.RevisionLocation(dictionary: revision)
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public enum ErrorCode: String, CustomStringConvertible {
        case deployment_group_missing = "DEPLOYMENT_GROUP_MISSING"
        case application_missing = "APPLICATION_MISSING"
        case revision_missing = "REVISION_MISSING"
        case iam_role_missing = "IAM_ROLE_MISSING"
        case iam_role_permissions = "IAM_ROLE_PERMISSIONS"
        case no_ec2_subscription = "NO_EC2_SUBSCRIPTION"
        case over_max_instances = "OVER_MAX_INSTANCES"
        case no_instances = "NO_INSTANCES"
        case timeout = "TIMEOUT"
        case health_constraints_invalid = "HEALTH_CONSTRAINTS_INVALID"
        case health_constraints = "HEALTH_CONSTRAINTS"
        case internal_error = "INTERNAL_ERROR"
        case throttled = "THROTTLED"
        case alarm_active = "ALARM_ACTIVE"
        case agent_issue = "AGENT_ISSUE"
        case auto_scaling_iam_role_permissions = "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
        case auto_scaling_configuration = "AUTO_SCALING_CONFIGURATION"
        case manual_stop = "MANUAL_STOP"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// True if the user has authenticated with GitHub for the specified application; otherwise, false.
        public let linkedToGitHub: Bool?
        /// The time at which the application was created.
        public let createTime: Date?
        /// The application name.
        public let applicationName: String?
        /// The application ID.
        public let applicationId: String?

        public init(linkedToGitHub: Bool? = nil, createTime: Date? = nil, applicationName: String? = nil, applicationId: String? = nil) {
            self.linkedToGitHub = linkedToGitHub
            self.createTime = createTime
            self.applicationName = applicationName
            self.applicationId = applicationId
        }

        public init(dictionary: [String: Any]) throws {
            self.linkedToGitHub = dictionary["linkedToGitHub"] as? Bool
            self.createTime = dictionary["createTime"] as? Date
            self.applicationName = dictionary["applicationName"] as? String
            self.applicationId = dictionary["applicationId"] as? String
        }
    }

    public enum MinimumHealthyHostsType: String, CustomStringConvertible {
        case host_count = "HOST_COUNT"
        case fleet_percent = "FLEET_PERCENT"
        public var description: String { return self.rawValue }
    }

    public struct GetDeploymentGroupOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the deployment group.
        public let deploymentGroupInfo: DeploymentGroupInfo?

        public init(deploymentGroupInfo: DeploymentGroupInfo? = nil) {
            self.deploymentGroupInfo = deploymentGroupInfo
        }

        public init(dictionary: [String: Any]) throws {
            if let deploymentGroupInfo = dictionary["deploymentGroupInfo"] as? [String: Any] { self.deploymentGroupInfo = try Codedeploy.DeploymentGroupInfo(dictionary: deploymentGroupInfo) } else { self.deploymentGroupInfo = nil }
        }
    }

    public struct BlueInstanceTerminationOption: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The action to take on instances in the original environment after a successful blue/green deployment.   TERMINATE: Instances are terminated after a specified wait time.   KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.  
        public let action: InstanceAction?
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        public let terminationWaitTimeInMinutes: Int32?

        public init(action: InstanceAction? = nil, terminationWaitTimeInMinutes: Int32? = nil) {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }

        public init(dictionary: [String: Any]) throws {
            if let action = dictionary["action"] as? String { self.action = InstanceAction(rawValue: action) } else { self.action = nil }
            self.terminationWaitTimeInMinutes = dictionary["terminationWaitTimeInMinutes"] as? Int32
        }
    }

    public struct TriggerConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The event type or types for which notifications are triggered.
        public let triggerEvents: [TriggerEventType]?
        /// The name of the notification trigger.
        public let triggerName: String?
        /// The ARN of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        public let triggerTargetArn: String?

        public init(triggerEvents: [TriggerEventType]? = nil, triggerName: String? = nil, triggerTargetArn: String? = nil) {
            self.triggerEvents = triggerEvents
            self.triggerName = triggerName
            self.triggerTargetArn = triggerTargetArn
        }

        public init(dictionary: [String: Any]) throws {
            if let triggerEvents = dictionary["triggerEvents"] as? [String] { self.triggerEvents = triggerEvents.flatMap({ TriggerEventType(rawValue: $0)}) } else { self.triggerEvents = nil }
            self.triggerName = dictionary["triggerName"] as? String
            self.triggerTargetArn = dictionary["triggerTargetArn"] as? String
        }
    }

    public enum BundleType: String, CustomStringConvertible {
        case tar = "tar"
        case tgz = "tgz"
        case zip = "zip"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentStatus: String, CustomStringConvertible {
        case created = "Created"
        case queued = "Queued"
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case stopped = "Stopped"
        case ready = "Ready"
        public var description: String { return self.rawValue }
    }

    public struct GetDeploymentGroupInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentGroupName = dictionary["deploymentGroupName"] as? String else { throw InitializableError.missingRequiredParam("deploymentGroupName") }
            self.deploymentGroupName = deploymentGroupName
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct AlarmConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
        public let alarms: [Alarm]?
        /// Indicates whether the alarm configuration is enabled.
        public let enabled: Bool?
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.   true: The deployment will proceed even if alarm status information can't be retrieved from Amazon CloudWatch.   false: The deployment will stop if alarm status information can't be retrieved from Amazon CloudWatch.  
        public let ignorePollAlarmFailure: Bool?

        public init(alarms: [Alarm]? = nil, enabled: Bool? = nil, ignorePollAlarmFailure: Bool? = nil) {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }

        public init(dictionary: [String: Any]) throws {
            if let alarms = dictionary["alarms"] as? [[String: Any]] {
                self.alarms = try alarms.map({ try Alarm(dictionary: $0) })
            } else { 
                self.alarms = nil
            }
            self.enabled = dictionary["enabled"] as? Bool
            self.ignorePollAlarmFailure = dictionary["ignorePollAlarmFailure"] as? Bool
        }
    }

    public struct BatchGetDeploymentGroupsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The deployment groups' names.
        public let deploymentGroupNames: [String]
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupNames: [String], applicationName: String) {
            self.deploymentGroupNames = deploymentGroupNames
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentGroupNames = dictionary["deploymentGroupNames"] as? [String] else { throw InitializableError.missingRequiredParam("deploymentGroupNames") }
            self.deploymentGroupNames = deploymentGroupNames
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct CreateDeploymentInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type and location of the revision to deploy.
        public let revision: RevisionLocation?
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account. If not specified, the value configured in the deployment group will be used as the default. If the deployment group does not have a deployment configuration associated with it, then CodeDeployDefault.OneAtATime will be used by default.
        public let deploymentConfigName: String?
        /// Information about the instances that will belong to the replacement environment in a blue/green deployment.
        public let targetInstances: TargetInstances?
        /// If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance will not be considered to have failed at that point and will continue on to the BeforeInstall deployment lifecycle event. If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance will stop, and the deployment to that instance will be considered to have failed.
        public let ignoreApplicationStopFailures: Bool?
        /// The name of the deployment group.
        public let deploymentGroupName: String?
        /// Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
        public let updateOutdatedInstancesOnly: Bool?
        /// A comment about the deployment.
        public let description: String?
        /// Configuration information for an automatic rollback that is added when a deployment is created.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(revision: RevisionLocation? = nil, deploymentConfigName: String? = nil, targetInstances: TargetInstances? = nil, ignoreApplicationStopFailures: Bool? = nil, deploymentGroupName: String? = nil, updateOutdatedInstancesOnly: Bool? = nil, description: String? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil, applicationName: String) {
            self.revision = revision
            self.deploymentConfigName = deploymentConfigName
            self.targetInstances = targetInstances
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.deploymentGroupName = deploymentGroupName
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
            self.description = description
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            if let revision = dictionary["revision"] as? [String: Any] { self.revision = try Codedeploy.RevisionLocation(dictionary: revision) } else { self.revision = nil }
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let targetInstances = dictionary["targetInstances"] as? [String: Any] { self.targetInstances = try Codedeploy.TargetInstances(dictionary: targetInstances) } else { self.targetInstances = nil }
            self.ignoreApplicationStopFailures = dictionary["ignoreApplicationStopFailures"] as? Bool
            self.deploymentGroupName = dictionary["deploymentGroupName"] as? String
            self.updateOutdatedInstancesOnly = dictionary["updateOutdatedInstancesOnly"] as? Bool
            self.description = dictionary["description"] as? String
            if let autoRollbackConfiguration = dictionary["autoRollbackConfiguration"] as? [String: Any] { self.autoRollbackConfiguration = try Codedeploy.AutoRollbackConfiguration(dictionary: autoRollbackConfiguration) } else { self.autoRollbackConfiguration = nil }
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct S3Location: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The file type of the application revision. Must be one of the following:   tar: A tar archive file.   tgz: A compressed tar archive file.   zip: A zip archive file.  
        public let bundleType: BundleType?
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system will use the most recent version by default.
        public let version: String?
        /// The name of the Amazon S3 bucket where the application revision is stored.
        public let bucket: String?
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        public let key: String?
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object will be skipped.
        public let eTag: String?

        public init(bundleType: BundleType? = nil, version: String? = nil, bucket: String? = nil, key: String? = nil, eTag: String? = nil) {
            self.bundleType = bundleType
            self.version = version
            self.bucket = bucket
            self.key = key
            self.eTag = eTag
        }

        public init(dictionary: [String: Any]) throws {
            if let bundleType = dictionary["bundleType"] as? String { self.bundleType = BundleType(rawValue: bundleType) } else { self.bundleType = nil }
            self.version = dictionary["version"] as? String
            self.bucket = dictionary["bucket"] as? String
            self.key = dictionary["key"] as? String
            self.eTag = dictionary["eTag"] as? String
        }
    }

    public struct GetApplicationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the application.
        public let application: ApplicationInfo?

        public init(application: ApplicationInfo? = nil) {
            self.application = application
        }

        public init(dictionary: [String: Any]) throws {
            if let application = dictionary["application"] as? [String: Any] { self.application = try Codedeploy.ApplicationInfo(dictionary: application) } else { self.application = nil }
        }
    }

    public struct ELBInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
        }
    }

    public struct GetDeploymentConfigInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of a deployment configuration associated with the applicable IAM user or AWS account.
        public let deploymentConfigName: String

        public init(deploymentConfigName: String) {
            self.deploymentConfigName = deploymentConfigName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentConfigName = dictionary["deploymentConfigName"] as? String else { throw InitializableError.missingRequiredParam("deploymentConfigName") }
            self.deploymentConfigName = deploymentConfigName
        }
    }

    public enum TagFilterType: String, CustomStringConvertible {
        case key_only = "KEY_ONLY"
        case value_only = "VALUE_ONLY"
        case key_and_value = "KEY_AND_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct ListDeploymentsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of deployment IDs.
        public let deployments: [String]?
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
        public let nextToken: String?

        public init(deployments: [String]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.deployments = dictionary["deployments"] as? [String]
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeleteDeploymentGroupInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of an existing deployment group for the specified application.
        public let deploymentGroupName: String
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(deploymentGroupName: String, applicationName: String) {
            self.deploymentGroupName = deploymentGroupName
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deploymentGroupName = dictionary["deploymentGroupName"] as? String else { throw InitializableError.missingRequiredParam("deploymentGroupName") }
            self.deploymentGroupName = deploymentGroupName
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct ListDeploymentInstancesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
        public let nextToken: String?
        /// A list of instance IDs.
        public let instancesList: [String]?

        public init(nextToken: String? = nil, instancesList: [String]? = nil) {
            self.nextToken = nextToken
            self.instancesList = instancesList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.instancesList = dictionary["instancesList"] as? [String]
        }
    }

    public struct DeregisterOnPremisesInstanceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the on-premises instance to deregister.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceName = dictionary["instanceName"] as? String else { throw InitializableError.missingRequiredParam("instanceName") }
            self.instanceName = instanceName
        }
    }

    public struct BatchGetApplicationRevisionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional information about the revisions, including the type and location.
        public let revisions: [RevisionInfo]?
        /// Information about errors that may have occurred during the API call.
        public let errorMessage: String?
        /// The name of the application that corresponds to the revisions.
        public let applicationName: String?

        public init(revisions: [RevisionInfo]? = nil, errorMessage: String? = nil, applicationName: String? = nil) {
            self.revisions = revisions
            self.errorMessage = errorMessage
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            if let revisions = dictionary["revisions"] as? [[String: Any]] {
                self.revisions = try revisions.map({ try RevisionInfo(dictionary: $0) })
            } else { 
                self.revisions = nil
            }
            self.errorMessage = dictionary["errorMessage"] as? String
            self.applicationName = dictionary["applicationName"] as? String
        }
    }

    public struct GetApplicationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
        }
    }

    public struct GetOnPremisesInstanceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the on-premises instance about which to get information.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceName = dictionary["instanceName"] as? String else { throw InitializableError.missingRequiredParam("instanceName") }
            self.instanceName = instanceName
        }
    }

    public struct GetApplicationRevisionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional information about the revision, including type and location.
        public let revision: RevisionLocation?
        /// General information about the revision.
        public let revisionInfo: GenericRevisionInfo?
        /// The name of the application that corresponds to the revision.
        public let applicationName: String?

        public init(revision: RevisionLocation? = nil, revisionInfo: GenericRevisionInfo? = nil, applicationName: String? = nil) {
            self.revision = revision
            self.revisionInfo = revisionInfo
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            if let revision = dictionary["revision"] as? [String: Any] { self.revision = try Codedeploy.RevisionLocation(dictionary: revision) } else { self.revision = nil }
            if let revisionInfo = dictionary["revisionInfo"] as? [String: Any] { self.revisionInfo = try Codedeploy.GenericRevisionInfo(dictionary: revisionInfo) } else { self.revisionInfo = nil }
            self.applicationName = dictionary["applicationName"] as? String
        }
    }

    public struct GreenFleetProvisioningOption: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The method used to add instances to a replacement environment.   DISCOVER_EXISTING: Use instances that already exist or will be created manually.   COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.  
        public let action: GreenFleetProvisioningAction?

        public init(action: GreenFleetProvisioningAction? = nil) {
            self.action = action
        }

        public init(dictionary: [String: Any]) throws {
            if let action = dictionary["action"] as? String { self.action = GreenFleetProvisioningAction(rawValue: action) } else { self.action = nil }
        }
    }

    public struct DeploymentOverview: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of instances in which the deployment is in progress.
        public let inProgress: Int64?
        /// The number of instances in the deployment in a pending state.
        public let pending: Int64?
        /// The number of instances in the deployment in a skipped state.
        public let skipped: Int64?
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        public let succeeded: Int64?
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        public let ready: Int64?
        /// The number of instances in the deployment in a failed state.
        public let failed: Int64?

        public init(inProgress: Int64? = nil, pending: Int64? = nil, skipped: Int64? = nil, succeeded: Int64? = nil, ready: Int64? = nil, failed: Int64? = nil) {
            self.inProgress = inProgress
            self.pending = pending
            self.skipped = skipped
            self.succeeded = succeeded
            self.ready = ready
            self.failed = failed
        }

        public init(dictionary: [String: Any]) throws {
            self.inProgress = dictionary["InProgress"] as? Int64
            self.pending = dictionary["Pending"] as? Int64
            self.skipped = dictionary["Skipped"] as? Int64
            self.succeeded = dictionary["Succeeded"] as? Int64
            self.ready = dictionary["Ready"] as? Int64
            self.failed = dictionary["Failed"] as? Int64
        }
    }

    public struct UpdateApplicationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new name to give the application.
        public let newApplicationName: String?
        /// The current name of the application you want to change.
        public let applicationName: String?

        public init(newApplicationName: String? = nil, applicationName: String? = nil) {
            self.newApplicationName = newApplicationName
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.newApplicationName = dictionary["newApplicationName"] as? String
            self.applicationName = dictionary["applicationName"] as? String
        }
    }

    public struct UpdateDeploymentGroupInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A replacement ARN for the service role, if you want to change it.
        public let serviceRoleArn: String?
        /// The new name of the deployment group, if you want to change it.
        public let newDeploymentGroupName: String?
        /// Information about the load balancer used in a blue/green deployment.
        public let loadBalancerInfo: LoadBalancerInfo?
        /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated. 
        public let alarmConfiguration: AlarmConfiguration?
        /// Information about blue/green deployment options for a deployment group.
        public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
        /// The application name corresponding to the deployment group to update.
        public let applicationName: String
        /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.
        public let autoScalingGroups: [String]?
        /// The replacement deployment configuration name to use, if you want to change it.
        public let deploymentConfigName: String?
        /// Information about triggers to change when the deployment group is updated. For examples, see Modify Triggers in an AWS CodeDeploy Deployment Group in the AWS CodeDeploy User Guide.
        public let triggerConfigurations: [TriggerConfig]?
        /// Information about the type of deployment, either standard or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public let deploymentStyle: DeploymentStyle?
        /// The current name of the deployment group.
        public let currentDeploymentGroupName: String
        /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let onPremisesInstanceTagFilters: [TagFilter]?
        /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
        public let ec2TagFilters: [EC2TagFilter]?
        /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
        public let autoRollbackConfiguration: AutoRollbackConfiguration?

        public init(serviceRoleArn: String? = nil, newDeploymentGroupName: String? = nil, loadBalancerInfo: LoadBalancerInfo? = nil, alarmConfiguration: AlarmConfiguration? = nil, blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil, applicationName: String, autoScalingGroups: [String]? = nil, deploymentConfigName: String? = nil, triggerConfigurations: [TriggerConfig]? = nil, deploymentStyle: DeploymentStyle? = nil, currentDeploymentGroupName: String, onPremisesInstanceTagFilters: [TagFilter]? = nil, ec2TagFilters: [EC2TagFilter]? = nil, autoRollbackConfiguration: AutoRollbackConfiguration? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.newDeploymentGroupName = newDeploymentGroupName
            self.loadBalancerInfo = loadBalancerInfo
            self.alarmConfiguration = alarmConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.applicationName = applicationName
            self.autoScalingGroups = autoScalingGroups
            self.deploymentConfigName = deploymentConfigName
            self.triggerConfigurations = triggerConfigurations
            self.deploymentStyle = deploymentStyle
            self.currentDeploymentGroupName = currentDeploymentGroupName
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.ec2TagFilters = ec2TagFilters
            self.autoRollbackConfiguration = autoRollbackConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.serviceRoleArn = dictionary["serviceRoleArn"] as? String
            self.newDeploymentGroupName = dictionary["newDeploymentGroupName"] as? String
            if let loadBalancerInfo = dictionary["loadBalancerInfo"] as? [String: Any] { self.loadBalancerInfo = try Codedeploy.LoadBalancerInfo(dictionary: loadBalancerInfo) } else { self.loadBalancerInfo = nil }
            if let alarmConfiguration = dictionary["alarmConfiguration"] as? [String: Any] { self.alarmConfiguration = try Codedeploy.AlarmConfiguration(dictionary: alarmConfiguration) } else { self.alarmConfiguration = nil }
            if let blueGreenDeploymentConfiguration = dictionary["blueGreenDeploymentConfiguration"] as? [String: Any] { self.blueGreenDeploymentConfiguration = try Codedeploy.BlueGreenDeploymentConfiguration(dictionary: blueGreenDeploymentConfiguration) } else { self.blueGreenDeploymentConfiguration = nil }
            guard let applicationName = dictionary["applicationName"] as? String else { throw InitializableError.missingRequiredParam("applicationName") }
            self.applicationName = applicationName
            self.autoScalingGroups = dictionary["autoScalingGroups"] as? [String]
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let triggerConfigurations = dictionary["triggerConfigurations"] as? [[String: Any]] {
                self.triggerConfigurations = try triggerConfigurations.map({ try TriggerConfig(dictionary: $0) })
            } else { 
                self.triggerConfigurations = nil
            }
            if let deploymentStyle = dictionary["deploymentStyle"] as? [String: Any] { self.deploymentStyle = try Codedeploy.DeploymentStyle(dictionary: deploymentStyle) } else { self.deploymentStyle = nil }
            guard let currentDeploymentGroupName = dictionary["currentDeploymentGroupName"] as? String else { throw InitializableError.missingRequiredParam("currentDeploymentGroupName") }
            self.currentDeploymentGroupName = currentDeploymentGroupName
            if let onPremisesInstanceTagFilters = dictionary["onPremisesInstanceTagFilters"] as? [[String: Any]] {
                self.onPremisesInstanceTagFilters = try onPremisesInstanceTagFilters.map({ try TagFilter(dictionary: $0) })
            } else { 
                self.onPremisesInstanceTagFilters = nil
            }
            if let ec2TagFilters = dictionary["ec2TagFilters"] as? [[String: Any]] {
                self.ec2TagFilters = try ec2TagFilters.map({ try EC2TagFilter(dictionary: $0) })
            } else { 
                self.ec2TagFilters = nil
            }
            if let autoRollbackConfiguration = dictionary["autoRollbackConfiguration"] as? [String: Any] { self.autoRollbackConfiguration = try Codedeploy.AutoRollbackConfiguration(dictionary: autoRollbackConfiguration) } else { self.autoRollbackConfiguration = nil }
        }
    }

    public struct CreateDeploymentGroupOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique deployment group ID.
        public let deploymentGroupId: String?

        public init(deploymentGroupId: String? = nil) {
            self.deploymentGroupId = deploymentGroupId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentGroupId = dictionary["deploymentGroupId"] as? String
        }
    }

    public struct InstanceSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The instance ID.
        public let instanceId: String?
        /// The deployment status for this instance:   Pending: The deployment is pending for this instance.   In Progress: The deployment is in progress for this instance.   Succeeded: The deployment has succeeded for this instance.   Failed: The deployment has failed for this instance.   Skipped: The deployment has been skipped for this instance.   Unknown: The deployment status is unknown for this instance.  
        public let status: InstanceStatus?
        /// Information about which environment an instance belongs to in a blue/green deployment.   BLUE: The instance is part of the original environment.   GREEN: The instance is part of the replacement environment.  
        public let instanceType: InstanceType?
        /// A timestamp indicating when the instance information was last updated.
        public let lastUpdatedAt: Date?
        /// The deployment ID.
        public let deploymentId: String?
        /// A list of lifecycle events for this instance.
        public let lifecycleEvents: [LifecycleEvent]?

        public init(instanceId: String? = nil, status: InstanceStatus? = nil, instanceType: InstanceType? = nil, lastUpdatedAt: Date? = nil, deploymentId: String? = nil, lifecycleEvents: [LifecycleEvent]? = nil) {
            self.instanceId = instanceId
            self.status = status
            self.instanceType = instanceType
            self.lastUpdatedAt = lastUpdatedAt
            self.deploymentId = deploymentId
            self.lifecycleEvents = lifecycleEvents
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceId = dictionary["instanceId"] as? String
            if let status = dictionary["status"] as? String { self.status = InstanceStatus(rawValue: status) } else { self.status = nil }
            if let instanceType = dictionary["instanceType"] as? String { self.instanceType = InstanceType(rawValue: instanceType) } else { self.instanceType = nil }
            self.lastUpdatedAt = dictionary["lastUpdatedAt"] as? Date
            self.deploymentId = dictionary["deploymentId"] as? String
            if let lifecycleEvents = dictionary["lifecycleEvents"] as? [[String: Any]] {
                self.lifecycleEvents = try lifecycleEvents.map({ try LifecycleEvent(dictionary: $0) })
            } else { 
                self.lifecycleEvents = nil
            }
        }
    }

    public struct RegisterOnPremisesInstanceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the IAM session to associate with the on-premises instance.
        public let iamSessionArn: String?
        /// The ARN of the IAM user to associate with the on-premises instance.
        public let iamUserArn: String?
        /// The name of the on-premises instance to register.
        public let instanceName: String

        public init(iamSessionArn: String? = nil, iamUserArn: String? = nil, instanceName: String) {
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.instanceName = instanceName
        }

        public init(dictionary: [String: Any]) throws {
            self.iamSessionArn = dictionary["iamSessionArn"] as? String
            self.iamUserArn = dictionary["iamUserArn"] as? String
            guard let instanceName = dictionary["instanceName"] as? String else { throw InitializableError.missingRequiredParam("instanceName") }
            self.instanceName = instanceName
        }
    }

    public enum DeploymentOption: String, CustomStringConvertible {
        case with_traffic_control = "WITH_TRAFFIC_CONTROL"
        case without_traffic_control = "WITHOUT_TRAFFIC_CONTROL"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentReadyAction: String, CustomStringConvertible {
        case continue_deployment = "CONTINUE_DEPLOYMENT"
        case stop_deployment = "STOP_DEPLOYMENT"
        public var description: String { return self.rawValue }
    }

    public struct DeploymentConfigInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The deployment configuration name.
        public let deploymentConfigName: String?
        /// Information about the number or percentage of minimum healthy instance.
        public let minimumHealthyHosts: MinimumHealthyHosts?
        /// The time at which the deployment configuration was created.
        public let createTime: Date?
        /// The deployment configuration ID.
        public let deploymentConfigId: String?

        public init(deploymentConfigName: String? = nil, minimumHealthyHosts: MinimumHealthyHosts? = nil, createTime: Date? = nil, deploymentConfigId: String? = nil) {
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.createTime = createTime
            self.deploymentConfigId = deploymentConfigId
        }

        public init(dictionary: [String: Any]) throws {
            self.deploymentConfigName = dictionary["deploymentConfigName"] as? String
            if let minimumHealthyHosts = dictionary["minimumHealthyHosts"] as? [String: Any] { self.minimumHealthyHosts = try Codedeploy.MinimumHealthyHosts(dictionary: minimumHealthyHosts) } else { self.minimumHealthyHosts = nil }
            self.createTime = dictionary["createTime"] as? Date
            self.deploymentConfigId = dictionary["deploymentConfigId"] as? String
        }
    }

    public struct LifecycleEvent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Diagnostic information about the deployment lifecycle event.
        public let diagnostics: Diagnostics?
        /// The deployment lifecycle event status:   Pending: The deployment lifecycle event is pending.   InProgress: The deployment lifecycle event is in progress.   Succeeded: The deployment lifecycle event ran successfully.   Failed: The deployment lifecycle event has failed.   Skipped: The deployment lifecycle event has been skipped.   Unknown: The deployment lifecycle event is unknown.  
        public let status: LifecycleEventStatus?
        /// A timestamp indicating when the deployment lifecycle event ended.
        public let endTime: Date?
        /// A timestamp indicating when the deployment lifecycle event started.
        public let startTime: Date?
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        public let lifecycleEventName: String?

        public init(diagnostics: Diagnostics? = nil, status: LifecycleEventStatus? = nil, endTime: Date? = nil, startTime: Date? = nil, lifecycleEventName: String? = nil) {
            self.diagnostics = diagnostics
            self.status = status
            self.endTime = endTime
            self.startTime = startTime
            self.lifecycleEventName = lifecycleEventName
        }

        public init(dictionary: [String: Any]) throws {
            if let diagnostics = dictionary["diagnostics"] as? [String: Any] { self.diagnostics = try Codedeploy.Diagnostics(dictionary: diagnostics) } else { self.diagnostics = nil }
            if let status = dictionary["status"] as? String { self.status = LifecycleEventStatus(rawValue: status) } else { self.status = nil }
            self.endTime = dictionary["endTime"] as? Date
            self.startTime = dictionary["startTime"] as? Date
            self.lifecycleEventName = dictionary["lifecycleEventName"] as? String
        }
    }

    public struct TargetInstances: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment.
        public let tagFilters: [EC2TagFilter]?
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        public let autoScalingGroups: [String]?

        public init(tagFilters: [EC2TagFilter]? = nil, autoScalingGroups: [String]? = nil) {
            self.tagFilters = tagFilters
            self.autoScalingGroups = autoScalingGroups
        }

        public init(dictionary: [String: Any]) throws {
            if let tagFilters = dictionary["tagFilters"] as? [[String: Any]] {
                self.tagFilters = try tagFilters.map({ try EC2TagFilter(dictionary: $0) })
            } else { 
                self.tagFilters = nil
            }
            self.autoScalingGroups = dictionary["autoScalingGroups"] as? [String]
        }
    }

    public struct GetDeploymentInstanceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID of an instance in the deployment group.
        public let instanceId: String
        /// The unique ID of a deployment.
        public let deploymentId: String

        public init(instanceId: String, deploymentId: String) {
            self.instanceId = instanceId
            self.deploymentId = deploymentId
        }

        public init(dictionary: [String: Any]) throws {
            guard let instanceId = dictionary["instanceId"] as? String else { throw InitializableError.missingRequiredParam("instanceId") }
            self.instanceId = instanceId
            guard let deploymentId = dictionary["deploymentId"] as? String else { throw InitializableError.missingRequiredParam("deploymentId") }
            self.deploymentId = deploymentId
        }
    }

    public struct MinimumHealthyHosts: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The minimum healthy instance type:   HOST_COUNT: The minimum number of healthy instance as an absolute value.   FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.   In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment will be successful if six or more instances are deployed to successfully; otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment will be successful if four or more instance are deployed to successfully; otherwise, the deployment fails.  In a call to the get deployment configuration operation, CodeDeployDefault.OneAtATime will return a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy will try to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment still succeeds. 
        public let `type`: MinimumHealthyHostsType?
        /// The minimum healthy instance value.
        public let value: Int32?

        public init(type: MinimumHealthyHostsType? = nil, value: Int32? = nil) {
            self.`type` = `type`
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            if let `type` = dictionary["type"] as? String { self.`type` = MinimumHealthyHostsType(rawValue: `type`) } else { self.`type` = nil }
            self.value = dictionary["value"] as? Int32
        }
    }

}