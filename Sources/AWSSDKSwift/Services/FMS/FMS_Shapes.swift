// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension FMS {

    public struct ListComplianceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ID of the AWS Firewall Manager policy that you want the details for.
        public let policyId: String
        /// Specifies the number of PolicyComplianceStatus objects that you want AWS Firewall Manager to return for this request. If you have more PolicyComplianceStatus objects than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of PolicyComplianceStatus objects.
        public let maxResults: Int32?
        /// If you specify a value for MaxResults and you have more PolicyComplianceStatus objects than the number that you specify for MaxResults, AWS Firewall Manager returns a NextToken value in the response that allows you to list another group of PolicyComplianceStatus objects. For the second and subsequent ListComplianceStatus requests, specify the value of NextToken from the previous response to get information about another batch of PolicyComplianceStatus objects.
        public let nextToken: String?

        public init(policyId: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.policyId = policyId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ComplianceViolator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "ViolationReason", required: false, type: .enum)
        ]
        /// The resource ID.
        public let resourceId: String?
        /// The resource type. This is in the format shown in AWS Resource Types Reference. Valid values are AWS::ElasticLoadBalancingV2::LoadBalancer or AWS::CloudFront::Distribution.
        public let resourceType: String?
        /// The reason that the resource is not protected by the policy.
        public let violationReason: ViolationReason?

        public init(resourceId: String? = nil, resourceType: String? = nil, violationReason: ViolationReason? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.violationReason = violationReason
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case violationReason = "ViolationReason"
        }
    }

    public enum ViolationReason: String, CustomStringConvertible, Codable {
        case webAclMissingRuleGroup = "WEB_ACL_MISSING_RULE_GROUP"
        case resourceMissingWebAcl = "RESOURCE_MISSING_WEB_ACL"
        case resourceIncorrectWebAcl = "RESOURCE_INCORRECT_WEB_ACL"
        public var description: String { return self.rawValue }
    }

    public struct GetComplianceDetailResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyComplianceDetail", required: false, type: .structure)
        ]
        /// Information about the resources and the policy that you specified in the GetComplianceDetail request.
        public let policyComplianceDetail: PolicyComplianceDetail?

        public init(policyComplianceDetail: PolicyComplianceDetail? = nil) {
            self.policyComplianceDetail = policyComplianceDetail
        }

        private enum CodingKeys: String, CodingKey {
            case policyComplianceDetail = "PolicyComplianceDetail"
        }
    }

    public struct Policy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceTags", required: false, type: .list), 
            AWSShapeMember(label: "RemediationEnabled", required: true, type: .boolean), 
            AWSShapeMember(label: "IncludeMap", required: false, type: .map), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .string), 
            AWSShapeMember(label: "ExcludeResourceTags", required: true, type: .boolean), 
            AWSShapeMember(label: "SecurityServicePolicyData", required: true, type: .structure), 
            AWSShapeMember(label: "ExcludeMap", required: false, type: .map), 
            AWSShapeMember(label: "PolicyUpdateToken", required: false, type: .string)
        ]
        /// The ID of the AWS Firewall Manager policy.
        public let policyId: String?
        /// An array of ResourceTag objects.
        public let resourceTags: [ResourceTag]?
        /// Indicates if the policy should be automatically applied to new resources.
        public let remediationEnabled: Bool
        /// Specifies the AWS account IDs to include in the policy. If IncludeMap is null, all accounts in the AWS Organization are included in the policy. If IncludeMap is not null, only values listed in IncludeMap will be included in the policy. The key to the map is ACCOUNT. For example, a valid IncludeMap would be {“ACCOUNT” : [“accountID1”, “accountID2”]}.
        public let includeMap: [CustomerPolicyScopeIdType: [String]]?
        /// The friendly name of the AWS Firewall Manager policy.
        public let policyName: String
        /// The type of resource to protect with the policy, either an Application Load Balancer or a CloudFront distribution. This is in the format shown in AWS Resource Types Reference. Valid values are AWS::ElasticLoadBalancingV2::LoadBalancer or AWS::CloudFront::Distribution.
        public let resourceType: String
        /// If set to True, resources with the tags that are specified in the ResourceTag array are not protected by the policy. If set to False, and the ResourceTag array is not null, only resources with the specified tags are associated with the policy.
        public let excludeResourceTags: Bool
        /// Details about the security service that is being used to protect the resources.
        public let securityServicePolicyData: SecurityServicePolicyData
        /// Specifies the AWS account IDs to exclude from the policy. The IncludeMap values are evaluated first, with all of the appropriate account IDs added to the policy. Then the accounts listed in ExcludeMap are removed, resulting in the final list of accounts to add to the policy. The key to the map is ACCOUNT. For example, a valid ExcludeMap would be {“ACCOUNT” : [“accountID1”, “accountID2”]}.
        public let excludeMap: [CustomerPolicyScopeIdType: [String]]?
        /// A unique identifier for each update to the policy. When issuing a PutPolicy request, the PolicyUpdateToken in the request must match the PolicyUpdateToken of the current policy version. To get the PolicyUpdateToken of the current policy version, use a GetPolicy request.
        public let policyUpdateToken: String?

        public init(policyId: String? = nil, resourceTags: [ResourceTag]? = nil, remediationEnabled: Bool, includeMap: [CustomerPolicyScopeIdType: [String]]? = nil, policyName: String, resourceType: String, excludeResourceTags: Bool, securityServicePolicyData: SecurityServicePolicyData, excludeMap: [CustomerPolicyScopeIdType: [String]]? = nil, policyUpdateToken: String? = nil) {
            self.policyId = policyId
            self.resourceTags = resourceTags
            self.remediationEnabled = remediationEnabled
            self.includeMap = includeMap
            self.policyName = policyName
            self.resourceType = resourceType
            self.excludeResourceTags = excludeResourceTags
            self.securityServicePolicyData = securityServicePolicyData
            self.excludeMap = excludeMap
            self.policyUpdateToken = policyUpdateToken
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case resourceTags = "ResourceTags"
            case remediationEnabled = "RemediationEnabled"
            case includeMap = "IncludeMap"
            case policyName = "PolicyName"
            case resourceType = "ResourceType"
            case excludeResourceTags = "ExcludeResourceTags"
            case securityServicePolicyData = "SecurityServicePolicyData"
            case excludeMap = "ExcludeMap"
            case policyUpdateToken = "PolicyUpdateToken"
        }
    }

    public enum DependentServiceName: String, CustomStringConvertible, Codable {
        case awsconfig = "AWSCONFIG"
        case awswaf = "AWSWAF"
        public var description: String { return self.rawValue }
    }

    public struct GetAdminAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AdminAccount", required: false, type: .string)
        ]
        /// The status of the AWS account that you set as the AWS Firewall Manager administrator.
        public let roleStatus: AccountRoleStatus?
        /// The AWS account that is set as the AWS Firewall Manager administrator.
        public let adminAccount: String?

        public init(roleStatus: AccountRoleStatus? = nil, adminAccount: String? = nil) {
            self.roleStatus = roleStatus
            self.adminAccount = adminAccount
        }

        private enum CodingKeys: String, CodingKey {
            case roleStatus = "RoleStatus"
            case adminAccount = "AdminAccount"
        }
    }

    public struct ListPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Specifies the number of PolicySummary objects that you want AWS Firewall Manager to return for this request. If you have more PolicySummary objects than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of PolicySummary objects.
        public let maxResults: Int32?
        /// If you specify a value for MaxResults and you have more PolicySummary objects than the number that you specify for MaxResults, AWS Firewall Manager returns a NextToken value in the response that allows you to list another group of PolicySummary objects. For the second and subsequent ListPolicies requests, specify the value of NextToken from the previous response to get information about another batch of PolicySummary objects.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct SecurityServicePolicyData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManagedServiceData", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// Details about the service. This contains WAF data in JSON format, as shown in the following example:  ManagedServiceData": "{\"type\": \"WAF\", \"ruleGroups\": [{\"id\": \"12345678-1bcd-9012-efga-0987654321ab\", \"overrideAction\" : {\"type\": \"COUNT\"}}], \"defaultAction\": {\"type\": \"BLOCK\"}} 
        public let managedServiceData: String?
        /// The service that the policy is using to protect the resources. This value is WAF.
        public let `type`: SecurityServiceType

        public init(managedServiceData: String? = nil, type: SecurityServiceType) {
            self.managedServiceData = managedServiceData
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case managedServiceData = "ManagedServiceData"
            case `type` = "Type"
        }
    }

    public struct PolicyComplianceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiredAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "MemberAccount", required: false, type: .string), 
            AWSShapeMember(label: "PolicyOwner", required: false, type: .string), 
            AWSShapeMember(label: "Violators", required: false, type: .list), 
            AWSShapeMember(label: "IssueInfoMap", required: false, type: .map), 
            AWSShapeMember(label: "EvaluationLimitExceeded", required: false, type: .boolean), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string)
        ]
        /// A time stamp that indicates when the returned information should be considered out-of-date.
        public let expiredAt: TimeStamp?
        /// The AWS account ID.
        public let memberAccount: String?
        /// The AWS account that created the AWS Firewall Manager policy.
        public let policyOwner: String?
        /// An array of resources that are not protected by the policy.
        public let violators: [ComplianceViolator]?
        /// Details about problems with dependent services, such as AWS WAF or AWS Config, that are causing a resource to be non-compliant. The details include the name of the dependent service and the error message recieved indicating the problem with the service.
        public let issueInfoMap: [DependentServiceName: String]?
        /// Indicates if over 100 resources are non-compliant with the AWS Firewall Manager policy.
        public let evaluationLimitExceeded: Bool?
        /// The ID of the AWS Firewall Manager policy.
        public let policyId: String?

        public init(expiredAt: TimeStamp? = nil, memberAccount: String? = nil, policyOwner: String? = nil, violators: [ComplianceViolator]? = nil, issueInfoMap: [DependentServiceName: String]? = nil, evaluationLimitExceeded: Bool? = nil, policyId: String? = nil) {
            self.expiredAt = expiredAt
            self.memberAccount = memberAccount
            self.policyOwner = policyOwner
            self.violators = violators
            self.issueInfoMap = issueInfoMap
            self.evaluationLimitExceeded = evaluationLimitExceeded
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case expiredAt = "ExpiredAt"
            case memberAccount = "MemberAccount"
            case policyOwner = "PolicyOwner"
            case violators = "Violators"
            case issueInfoMap = "IssueInfoMap"
            case evaluationLimitExceeded = "EvaluationLimitExceeded"
            case policyId = "PolicyId"
        }
    }

    public struct AssociateAdminAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdminAccount", required: true, type: .string)
        ]
        /// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. For more information about AWS Organizations and master accounts, see Managing the AWS Accounts in Your Organization.
        public let adminAccount: String

        public init(adminAccount: String) {
            self.adminAccount = adminAccount
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
        }
    }

    public struct EvaluationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EvaluationLimitExceeded", required: false, type: .boolean), 
            AWSShapeMember(label: "ComplianceStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ViolatorCount", required: false, type: .long)
        ]
        /// Indicates that over 100 resources are non-compliant with the AWS Firewall Manager policy.
        public let evaluationLimitExceeded: Bool?
        /// Describes an AWS account's compliance with the AWS Firewall Manager policy.
        public let complianceStatus: PolicyComplianceStatusType?
        /// Number of resources that are non-compliant with the specified policy. A resource is considered non-compliant if it is not associated with the specified policy.
        public let violatorCount: Int64?

        public init(evaluationLimitExceeded: Bool? = nil, complianceStatus: PolicyComplianceStatusType? = nil, violatorCount: Int64? = nil) {
            self.evaluationLimitExceeded = evaluationLimitExceeded
            self.complianceStatus = complianceStatus
            self.violatorCount = violatorCount
        }

        private enum CodingKeys: String, CodingKey {
            case evaluationLimitExceeded = "EvaluationLimitExceeded"
            case complianceStatus = "ComplianceStatus"
            case violatorCount = "ViolatorCount"
        }
    }

    public enum CustomerPolicyScopeIdType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct ListPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of PolicySummary objects.
        public let policyList: [PolicySummary]?
        /// If you have more PolicySummary objects than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more PolicySummary objects, submit another ListPolicies request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?

        public init(policyList: [PolicySummary]? = nil, nextToken: String? = nil) {
            self.policyList = policyList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policyList = "PolicyList"
            case nextToken = "NextToken"
        }
    }

    public struct ListMemberAccountsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// If you specify a value for MaxResults and you have more account IDs than the number that you specify for MaxResults, AWS Firewall Manager returns a NextToken value in the response that allows you to list another group of IDs. For the second and subsequent ListMemberAccountsRequest requests, specify the value of NextToken from the previous response to get information about another batch of member account IDs.
        public let nextToken: String?
        /// Specifies the number of member account IDs that you want AWS Firewall Manager to return for this request. If you have more IDs than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of member account IDs. The maximum value for MaxResults is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct PutNotificationChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsRoleName", required: true, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record AWS Firewall Manager activity. 
        public let snsRoleName: String
        /// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from AWS Firewall Manager.
        public let snsTopicArn: String

        public init(snsRoleName: String, snsTopicArn: String) {
            self.snsRoleName = snsRoleName
            self.snsTopicArn = snsTopicArn
        }

        private enum CodingKeys: String, CodingKey {
            case snsRoleName = "SnsRoleName"
            case snsTopicArn = "SnsTopicArn"
        }
    }

    public struct ListMemberAccountsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MemberAccounts", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of account IDs.
        public let memberAccounts: [String]?
        /// If you have more member account IDs than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more IDs, submit another ListMemberAccounts request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?

        public init(memberAccounts: [String]? = nil, nextToken: String? = nil) {
            self.memberAccounts = memberAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccounts = "MemberAccounts"
            case nextToken = "NextToken"
        }
    }

    public struct GetPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure), 
            AWSShapeMember(label: "PolicyArn", required: false, type: .string)
        ]
        /// Information about the specified AWS Firewall Manager policy.
        public let policy: Policy?
        /// The Amazon Resource Name (ARN) of the specified policy.
        public let policyArn: String?

        public init(policy: Policy? = nil, policyArn: String? = nil) {
            self.policy = policy
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case policyArn = "PolicyArn"
        }
    }

    public struct PutPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure), 
            AWSShapeMember(label: "PolicyArn", required: false, type: .string)
        ]
        /// The details of the AWS Firewall Manager policy that was created.
        public let policy: Policy?
        /// The Amazon Resource Name (ARN) of the policy that was created.
        public let policyArn: String?

        public init(policy: Policy? = nil, policyArn: String? = nil) {
            self.policy = policy
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case policyArn = "PolicyArn"
        }
    }

    public struct GetAdminAccountRequest: AWSShape {

    }

    public enum SecurityServiceType: String, CustomStringConvertible, Codable {
        case waf = "WAF"
        public var description: String { return self.rawValue }
    }

    public struct ListComplianceStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyComplianceStatusList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of PolicyComplianceStatus objects.
        public let policyComplianceStatusList: [PolicyComplianceStatus]?
        /// If you have more PolicyComplianceStatus objects than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more PolicyComplianceStatus objects, submit another ListComplianceStatus request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?

        public init(policyComplianceStatusList: [PolicyComplianceStatus]? = nil, nextToken: String? = nil) {
            self.policyComplianceStatusList = policyComplianceStatusList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policyComplianceStatusList = "PolicyComplianceStatusList"
            case nextToken = "NextToken"
        }
    }

    public struct GetNotificationChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsRoleName", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string)
        ]
        /// The IAM role that is used by AWS Firewall Manager to record activity to SNS.
        public let snsRoleName: String?
        /// The SNS topic that records AWS Firewall Manager activity. 
        public let snsTopicArn: String?

        public init(snsRoleName: String? = nil, snsTopicArn: String? = nil) {
            self.snsRoleName = snsRoleName
            self.snsTopicArn = snsTopicArn
        }

        private enum CodingKeys: String, CodingKey {
            case snsRoleName = "SnsRoleName"
            case snsTopicArn = "SnsTopicArn"
        }
    }

    public struct PutPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: true, type: .structure)
        ]
        /// The details of the AWS Firewall Manager policy to be created.
        public let policy: Policy

        public init(policy: Policy) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct DeletePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string)
        ]
        /// The ID of the policy that you want to delete. PolicyId is returned by PutPolicy and by ListPolicies.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct GetNotificationChannelRequest: AWSShape {

    }

    public struct DisassociateAdminAccountRequest: AWSShape {

    }

    public struct ResourceTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The resource tag value.
        public let value: String?
        /// The resource tag key.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct PolicySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityServiceType", required: false, type: .enum), 
            AWSShapeMember(label: "PolicyName", required: false, type: .string), 
            AWSShapeMember(label: "RemediationEnabled", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the specified policy.
        public let policyArn: String?
        /// The type of resource to protect with the policy, either an Application Load Balancer or a CloudFront distribution. This is in the format shown in AWS Resource Types Reference. Valid values are AWS::ElasticLoadBalancingV2::LoadBalancer or AWS::CloudFront::Distribution.
        public let resourceType: String?
        /// The ID of the specified policy.
        public let policyId: String?
        /// The service that the policy is using to protect the resources. This value is WAF.
        public let securityServiceType: SecurityServiceType?
        /// The friendly name of the specified policy.
        public let policyName: String?
        /// Indicates if the policy should be automatically applied to new resources.
        public let remediationEnabled: Bool?

        public init(policyArn: String? = nil, resourceType: String? = nil, policyId: String? = nil, securityServiceType: SecurityServiceType? = nil, policyName: String? = nil, remediationEnabled: Bool? = nil) {
            self.policyArn = policyArn
            self.resourceType = resourceType
            self.policyId = policyId
            self.securityServiceType = securityServiceType
            self.policyName = policyName
            self.remediationEnabled = remediationEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "PolicyArn"
            case resourceType = "ResourceType"
            case policyId = "PolicyId"
            case securityServiceType = "SecurityServiceType"
            case policyName = "PolicyName"
            case remediationEnabled = "RemediationEnabled"
        }
    }

    public struct DeleteNotificationChannelRequest: AWSShape {

    }

    public enum PolicyComplianceStatusType: String, CustomStringConvertible, Codable {
        case compliant = "COMPLIANT"
        case nonCompliant = "NON_COMPLIANT"
        public var description: String { return self.rawValue }
    }

    public struct PolicyComplianceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: false, type: .string), 
            AWSShapeMember(label: "MemberAccount", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "IssueInfoMap", required: false, type: .map), 
            AWSShapeMember(label: "EvaluationResults", required: false, type: .list), 
            AWSShapeMember(label: "PolicyName", required: false, type: .string), 
            AWSShapeMember(label: "PolicyOwner", required: false, type: .string)
        ]
        /// The ID of the AWS Firewall Manager policy.
        public let policyId: String?
        /// The member account ID.
        public let memberAccount: String?
        /// Time stamp of the last update to the EvaluationResult objects.
        public let lastUpdated: TimeStamp?
        /// Details about problems with dependent services, such as AWS WAF or AWS Config, that are causing a resource to be non-compliant. The details include the name of the dependent service and the error message recieved indicating the problem with the service.
        public let issueInfoMap: [DependentServiceName: String]?
        /// An array of EvaluationResult objects.
        public let evaluationResults: [EvaluationResult]?
        /// The friendly name of the AWS Firewall Manager policy.
        public let policyName: String?
        /// The AWS account that created the AWS Firewall Manager policy.
        public let policyOwner: String?

        public init(policyId: String? = nil, memberAccount: String? = nil, lastUpdated: TimeStamp? = nil, issueInfoMap: [DependentServiceName: String]? = nil, evaluationResults: [EvaluationResult]? = nil, policyName: String? = nil, policyOwner: String? = nil) {
            self.policyId = policyId
            self.memberAccount = memberAccount
            self.lastUpdated = lastUpdated
            self.issueInfoMap = issueInfoMap
            self.evaluationResults = evaluationResults
            self.policyName = policyName
            self.policyOwner = policyOwner
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case memberAccount = "MemberAccount"
            case lastUpdated = "LastUpdated"
            case issueInfoMap = "IssueInfoMap"
            case evaluationResults = "EvaluationResults"
            case policyName = "PolicyName"
            case policyOwner = "PolicyOwner"
        }
    }

    public enum AccountRoleStatus: String, CustomStringConvertible, Codable {
        case ready = "READY"
        case creating = "CREATING"
        case pendingDeletion = "PENDING_DELETION"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct GetPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string)
        ]
        /// The ID of the AWS Firewall Manager policy that you want the details for.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct GetComplianceDetailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MemberAccount", required: true, type: .string), 
            AWSShapeMember(label: "PolicyId", required: true, type: .string)
        ]
        /// The AWS account that owns the resources that you want to get the details for.
        public let memberAccount: String
        /// The ID of the policy that you want to get the details for. PolicyId is returned by PutPolicy and by ListPolicies.
        public let policyId: String

        public init(memberAccount: String, policyId: String) {
            self.memberAccount = memberAccount
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
        }
    }

}