// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension CognitoIdentity {

    public struct MappingRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The claim name that must be present in the token, for example, "isAdmin" or "paid".
        public let claim: String
        /// The match condition that specifies how closely the claim value in the IdP token must match Value.
        public let matchType: MappingRuleMatchType
        /// A brief string that the claim must match, for example, "paid" or "yes".
        public let value: String
        /// The role ARN.
        public let roleARN: String

        public init(claim: String, matchType: MappingRuleMatchType, value: String, roleARN: String) {
            self.claim = claim
            self.matchType = matchType
            self.value = value
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let claim = dictionary["Claim"] as? String else { throw InitializableError.missingRequiredParam("Claim") }
            self.claim = claim
            guard let rawMatchType = dictionary["MatchType"] as? String, let matchType = MappingRuleMatchType(rawValue: rawMatchType) else { throw InitializableError.missingRequiredParam("MatchType") }
            self.matchType = matchType
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
        }
    }

    public struct CreateIdentityPoolInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of OpendID Connect provider ARNs.
        public let openIdConnectProviderARNs: [String]?
        /// An array of Amazon Cognito Identity user pools and their client IDs.
        public let cognitoIdentityProviders: [CognitoIdentityProvider]?
        /// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the DeveloperProviderName, you can use letters as well as period (.), underscore (_), and dash (-). Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.
        public let developerProviderName: String?
        /// A string that you provide.
        public let identityPoolName: String
        /// TRUE if the identity pool supports unauthenticated logins.
        public let allowUnauthenticatedIdentities: Bool
        /// Optional key:value pairs mapping provider names to provider app IDs.
        public let supportedLoginProviders: [String: String]?
        /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
        public let samlProviderARNs: [String]?

        public init(openIdConnectProviderARNs: [String]? = nil, cognitoIdentityProviders: [CognitoIdentityProvider]? = nil, developerProviderName: String? = nil, identityPoolName: String, allowUnauthenticatedIdentities: Bool, supportedLoginProviders: [String: String]? = nil, samlProviderARNs: [String]? = nil) {
            self.openIdConnectProviderARNs = openIdConnectProviderARNs
            self.cognitoIdentityProviders = cognitoIdentityProviders
            self.developerProviderName = developerProviderName
            self.identityPoolName = identityPoolName
            self.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities
            self.supportedLoginProviders = supportedLoginProviders
            self.samlProviderARNs = samlProviderARNs
        }

        public init(dictionary: [String: Any]) throws {
            self.openIdConnectProviderARNs = dictionary["OpenIdConnectProviderARNs"] as? [String]
            if let cognitoIdentityProviders = dictionary["CognitoIdentityProviders"] as? [[String: Any]] {
                self.cognitoIdentityProviders = try cognitoIdentityProviders.map({ try CognitoIdentityProvider(dictionary: $0) })
            } else { 
                self.cognitoIdentityProviders = nil
            }
            self.developerProviderName = dictionary["DeveloperProviderName"] as? String
            guard let identityPoolName = dictionary["IdentityPoolName"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolName") }
            self.identityPoolName = identityPoolName
            guard let allowUnauthenticatedIdentities = dictionary["AllowUnauthenticatedIdentities"] as? Bool else { throw InitializableError.missingRequiredParam("AllowUnauthenticatedIdentities") }
            self.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities
            if let supportedLoginProviders = dictionary["SupportedLoginProviders"] as? [String: String] {
                self.supportedLoginProviders = supportedLoginProviders
            } else { 
                self.supportedLoginProviders = nil
            }
            self.samlProviderARNs = dictionary["SamlProviderARNs"] as? [String]
        }
    }

    public struct ListIdentityPoolsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of identities to return.
        public let maxResults: Int32

        public init(nextToken: String? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let maxResults = dictionary["MaxResults"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxResults") }
            self.maxResults = maxResults
        }
    }

    public struct Credentials: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Secret Access Key portion of the credentials
        public let secretKey: String?
        /// The Access Key portion of the credentials.
        public let accessKeyId: String?
        /// The Session Token portion of the credentials
        public let sessionToken: String?
        /// The date at which these credentials will expire.
        public let expiration: Date?

        public init(secretKey: String? = nil, accessKeyId: String? = nil, sessionToken: String? = nil, expiration: Date? = nil) {
            self.secretKey = secretKey
            self.accessKeyId = accessKeyId
            self.sessionToken = sessionToken
            self.expiration = expiration
        }

        public init(dictionary: [String: Any]) throws {
            self.secretKey = dictionary["SecretKey"] as? String
            self.accessKeyId = dictionary["AccessKeyId"] as? String
            self.sessionToken = dictionary["SessionToken"] as? String
            self.expiration = dictionary["Expiration"] as? Date
        }
    }

    public struct GetCredentialsForIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were received in the token from the identity provider. For example, a SAML-based identity provider. This parameter is optional for identity providers that do not support role customization.
        public let customRoleArn: String?
        /// A set of optional name-value pairs that map provider names to provider tokens.
        public let logins: [String: String]?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String

        public init(customRoleArn: String? = nil, logins: [String: String]? = nil, identityId: String) {
            self.customRoleArn = customRoleArn
            self.logins = logins
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.customRoleArn = dictionary["CustomRoleArn"] as? String
            if let logins = dictionary["Logins"] as? [String: String] {
                self.logins = logins
            } else { 
                self.logins = nil
            }
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public struct LookupDeveloperIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.
        public let developerUserIdentifier: String?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// A pagination token. The first call you make will have NextToken set to null. After that the service will return NextToken values as needed. For example, let's say you make a request with MaxResults set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.
        public let nextToken: String?
        /// The maximum number of identities to return.
        public let maxResults: Int32?

        public init(developerUserIdentifier: String? = nil, identityId: String? = nil, identityPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.developerUserIdentifier = developerUserIdentifier
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.developerUserIdentifier = dictionary["DeveloperUserIdentifier"] as? String
            self.identityId = dictionary["IdentityId"] as? String
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct RulesConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of rules. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
        public let rules: [MappingRule]

        public init(rules: [MappingRule]) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            guard let rules = dictionary["Rules"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Rules") }
            self.rules = try rules.map({ try MappingRule(dictionary: $0) })
        }
    }

    public struct IdentityPool: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of OpendID Connect provider ARNs.
        public let openIdConnectProviderARNs: [String]?
        /// A list representing an Amazon Cognito Identity User Pool and its client ID.
        public let cognitoIdentityProviders: [CognitoIdentityProvider]?
        /// The "domain" by which Cognito will refer to your users.
        public let developerProviderName: String?
        /// A string that you provide.
        public let identityPoolName: String
        /// TRUE if the identity pool supports unauthenticated logins.
        public let allowUnauthenticatedIdentities: Bool
        /// Optional key:value pairs mapping provider names to provider app IDs.
        public let supportedLoginProviders: [String: String]?
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
        public let samlProviderARNs: [String]?

        public init(openIdConnectProviderARNs: [String]? = nil, cognitoIdentityProviders: [CognitoIdentityProvider]? = nil, developerProviderName: String? = nil, identityPoolName: String, allowUnauthenticatedIdentities: Bool, supportedLoginProviders: [String: String]? = nil, identityPoolId: String, samlProviderARNs: [String]? = nil) {
            self.openIdConnectProviderARNs = openIdConnectProviderARNs
            self.cognitoIdentityProviders = cognitoIdentityProviders
            self.developerProviderName = developerProviderName
            self.identityPoolName = identityPoolName
            self.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities
            self.supportedLoginProviders = supportedLoginProviders
            self.identityPoolId = identityPoolId
            self.samlProviderARNs = samlProviderARNs
        }

        public init(dictionary: [String: Any]) throws {
            self.openIdConnectProviderARNs = dictionary["OpenIdConnectProviderARNs"] as? [String]
            if let cognitoIdentityProviders = dictionary["CognitoIdentityProviders"] as? [[String: Any]] {
                self.cognitoIdentityProviders = try cognitoIdentityProviders.map({ try CognitoIdentityProvider(dictionary: $0) })
            } else { 
                self.cognitoIdentityProviders = nil
            }
            self.developerProviderName = dictionary["DeveloperProviderName"] as? String
            guard let identityPoolName = dictionary["IdentityPoolName"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolName") }
            self.identityPoolName = identityPoolName
            guard let allowUnauthenticatedIdentities = dictionary["AllowUnauthenticatedIdentities"] as? Bool else { throw InitializableError.missingRequiredParam("AllowUnauthenticatedIdentities") }
            self.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities
            if let supportedLoginProviders = dictionary["SupportedLoginProviders"] as? [String: String] {
                self.supportedLoginProviders = supportedLoginProviders
            } else { 
                self.supportedLoginProviders = nil
            }
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            self.samlProviderARNs = dictionary["SamlProviderARNs"] as? [String]
        }
    }

    public struct IdentityPoolShortDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String?
        /// A string that you provide.
        public let identityPoolName: String?

        public init(identityPoolId: String? = nil, identityPoolName: String? = nil) {
            self.identityPoolId = identityPoolId
            self.identityPoolName = identityPoolName
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            self.identityPoolName = dictionary["IdentityPoolName"] as? String
        }
    }

    public struct ListIdentitiesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response.
        public let hideDisabled: Bool?
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// A pagination token.
        public let nextToken: String?
        /// The maximum number of identities to return.
        public let maxResults: Int32

        public init(hideDisabled: Bool? = nil, identityPoolId: String, nextToken: String? = nil, maxResults: Int32) {
            self.hideDisabled = hideDisabled
            self.identityPoolId = identityPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.hideDisabled = dictionary["HideDisabled"] as? Bool
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            self.nextToken = dictionary["NextToken"] as? String
            guard let maxResults = dictionary["MaxResults"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxResults") }
            self.maxResults = maxResults
        }
    }

    public struct DeleteIdentityPoolInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct GetCredentialsForIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Credentials for the provided identity ID.
        public let credentials: Credentials?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(credentials: Credentials? = nil, identityId: String? = nil) {
            self.credentials = credentials
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            if let credentials = dictionary["Credentials"] as? [String: Any] { self.credentials = try CognitoIdentity.Credentials(dictionary: credentials) } else { self.credentials = nil }
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public struct MergeDeveloperIdentitiesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// User identifier for the destination user. The value should be a DeveloperUserIdentifier.
        public let destinationUserIdentifier: String
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// User identifier for the source user. The value should be a DeveloperUserIdentifier.
        public let sourceUserIdentifier: String
        /// The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the DeveloperProviderName, you can use letters as well as period (.), underscore (_), and dash (-).
        public let developerProviderName: String

        public init(destinationUserIdentifier: String, identityPoolId: String, sourceUserIdentifier: String, developerProviderName: String) {
            self.destinationUserIdentifier = destinationUserIdentifier
            self.identityPoolId = identityPoolId
            self.sourceUserIdentifier = sourceUserIdentifier
            self.developerProviderName = developerProviderName
        }

        public init(dictionary: [String: Any]) throws {
            guard let destinationUserIdentifier = dictionary["DestinationUserIdentifier"] as? String else { throw InitializableError.missingRequiredParam("DestinationUserIdentifier") }
            self.destinationUserIdentifier = destinationUserIdentifier
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let sourceUserIdentifier = dictionary["SourceUserIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SourceUserIdentifier") }
            self.sourceUserIdentifier = sourceUserIdentifier
            guard let developerProviderName = dictionary["DeveloperProviderName"] as? String else { throw InitializableError.missingRequiredParam("DeveloperProviderName") }
            self.developerProviderName = developerProviderName
        }
    }

    public struct DeleteIdentitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.
        public let unprocessedIdentityIds: [UnprocessedIdentityId]?

        public init(unprocessedIdentityIds: [UnprocessedIdentityId]? = nil) {
            self.unprocessedIdentityIds = unprocessedIdentityIds
        }

        public init(dictionary: [String: Any]) throws {
            if let unprocessedIdentityIds = dictionary["UnprocessedIdentityIds"] as? [[String: Any]] {
                self.unprocessedIdentityIds = try unprocessedIdentityIds.map({ try UnprocessedIdentityId(dictionary: $0) })
            } else { 
                self.unprocessedIdentityIds = nil
            }
        }
    }

    public struct GetOpenIdTokenForDeveloperIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don't provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token's duration.
        public let tokenDuration: Int64?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax "developer_provider_name": "developer_user_identifier". The developer provider is the "domain" by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.
        public let logins: [String: String]

        public init(tokenDuration: Int64? = nil, identityId: String? = nil, identityPoolId: String, logins: [String: String]) {
            self.tokenDuration = tokenDuration
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.logins = logins
        }

        public init(dictionary: [String: Any]) throws {
            self.tokenDuration = dictionary["TokenDuration"] as? Int64
            self.identityId = dictionary["IdentityId"] as? String
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let logins = dictionary["Logins"] as? [String: String] else { throw InitializableError.missingRequiredParam("Logins") }
            self.logins = logins
        }
    }

    public struct GetOpenIdTokenInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com, an Amazon Cognito Identity Provider, or any other OpenId Connect provider, always include the id_token.
        public let logins: [String: String]?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String

        public init(logins: [String: String]? = nil, identityId: String) {
            self.logins = logins
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            if let logins = dictionary["Logins"] as? [String: String] {
                self.logins = logins
            } else { 
                self.logins = nil
            }
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public struct DeleteIdentitiesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of 1-60 identities that you want to delete.
        public let identityIdsToDelete: [String]

        public init(identityIdsToDelete: [String]) {
            self.identityIdsToDelete = identityIdsToDelete
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityIdsToDelete = dictionary["IdentityIdsToDelete"] as? [String] else { throw InitializableError.missingRequiredParam("IdentityIdsToDelete") }
            self.identityIdsToDelete = identityIdsToDelete
        }
    }

    public struct GetIdInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A standard AWS account ID (9+ digits).
        public let accountId: String?
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// A set of optional name-value pairs that map provider names to provider tokens. The available provider names for Logins are as follows:   Facebook: graph.facebook.com    Amazon Cognito Identity Provider: cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789    Google: accounts.google.com    Amazon: www.amazon.com    Twitter: api.twitter.com    Digits: www.digits.com   
        public let logins: [String: String]?

        public init(accountId: String? = nil, identityPoolId: String, logins: [String: String]? = nil) {
            self.accountId = accountId
            self.identityPoolId = identityPoolId
            self.logins = logins
        }

        public init(dictionary: [String: Any]) throws {
            self.accountId = dictionary["AccountId"] as? String
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            if let logins = dictionary["Logins"] as? [String: String] {
                self.logins = logins
            } else { 
                self.logins = nil
            }
        }
    }

    public struct ListIdentityPoolsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identity pools returned by the ListIdentityPools action.
        public let identityPools: [IdentityPoolShortDescription]?
        /// A pagination token.
        public let nextToken: String?

        public init(identityPools: [IdentityPoolShortDescription]? = nil, nextToken: String? = nil) {
            self.identityPools = identityPools
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let identityPools = dictionary["IdentityPools"] as? [[String: Any]] {
                self.identityPools = try identityPools.map({ try IdentityPoolShortDescription(dictionary: $0) })
            } else { 
                self.identityPools = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetIdentityPoolRolesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String?
        /// How users for a specific identity provider are to mapped to roles. This is a String-to-RoleMapping object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
        public let roleMappings: [String: RoleMapping]?
        /// The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported.
        public let roles: [String: String]?

        public init(identityPoolId: String? = nil, roleMappings: [String: RoleMapping]? = nil, roles: [String: String]? = nil) {
            self.identityPoolId = identityPoolId
            self.roleMappings = roleMappings
            self.roles = roles
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            if let roleMappings = dictionary["RoleMappings"] as? [String: Any] {
                var roleMappingsDict: [String: RoleMapping] = [:]
                for (key, value) in roleMappings {
                    guard let roleMappingDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    roleMappingsDict[key] = try RoleMapping(dictionary: roleMappingDict)
                }
                self.roleMappings = roleMappingsDict
            } else { 
                self.roleMappings = nil
            }
            if let roles = dictionary["Roles"] as? [String: String] {
                self.roles = roles
            } else { 
                self.roles = nil
            }
        }
    }

    public struct GetOpenIdTokenForDeveloperIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An OpenID token.
        public let token: String?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(token: String? = nil, identityId: String? = nil) {
            self.token = token
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.token = dictionary["Token"] as? String
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public struct DescribeIdentityPoolInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct GetIdentityPoolRolesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct UnlinkDeveloperIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique ID used by your backend authentication process to identify a user.
        public let developerUserIdentifier: String
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// The "domain" by which Cognito will refer to your users.
        public let developerProviderName: String

        public init(developerUserIdentifier: String, identityId: String, identityPoolId: String, developerProviderName: String) {
            self.developerUserIdentifier = developerUserIdentifier
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.developerProviderName = developerProviderName
        }

        public init(dictionary: [String: Any]) throws {
            guard let developerUserIdentifier = dictionary["DeveloperUserIdentifier"] as? String else { throw InitializableError.missingRequiredParam("DeveloperUserIdentifier") }
            self.developerUserIdentifier = developerUserIdentifier
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let developerProviderName = dictionary["DeveloperProviderName"] as? String else { throw InitializableError.missingRequiredParam("DeveloperProviderName") }
            self.developerProviderName = developerProviderName
        }
    }

    public struct GetIdResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(identityId: String? = nil) {
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public enum RoleMappingType: String, CustomStringConvertible {
        case token = "Token"
        case rules = "Rules"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible {
        case accessdenied = "AccessDenied"
        case internalservererror = "InternalServerError"
        public var description: String { return self.rawValue }
    }

    public struct IdentityDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Date on which the identity was last modified.
        public let lastModifiedDate: Date?
        /// Date on which the identity was created.
        public let creationDate: Date?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?
        /// A set of optional name-value pairs that map provider names to provider tokens.
        public let logins: [String]?

        public init(lastModifiedDate: Date? = nil, creationDate: Date? = nil, identityId: String? = nil, logins: [String]? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.identityId = identityId
            self.logins = logins
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.creationDate = dictionary["CreationDate"] as? Date
            self.identityId = dictionary["IdentityId"] as? String
            self.logins = dictionary["Logins"] as? [String]
        }
    }

    public struct SetIdentityPoolRolesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String
        /// How users for a specific identity provider are to mapped to roles. This is a string to RoleMapping object map. The string identifies the identity provider, for example, "graph.facebook.com" or "cognito-idp-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Up to 25 rules can be specified per identity provider.
        public let roleMappings: [String: RoleMapping]?
        /// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
        public let roles: [String: String]

        public init(identityPoolId: String, roleMappings: [String: RoleMapping]? = nil, roles: [String: String]) {
            self.identityPoolId = identityPoolId
            self.roleMappings = roleMappings
            self.roles = roles
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            if let roleMappings = dictionary["RoleMappings"] as? [String: Any] {
                var roleMappingsDict: [String: RoleMapping] = [:]
                for (key, value) in roleMappings {
                    guard let roleMappingDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    roleMappingsDict[key] = try RoleMapping(dictionary: roleMappingDict)
                }
                self.roleMappings = roleMappingsDict
            } else { 
                self.roleMappings = nil
            }
            guard let roles = dictionary["Roles"] as? [String: String] else { throw InitializableError.missingRequiredParam("Roles") }
            self.roles = roles
        }
    }

    public struct UnlinkIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A set of optional name-value pairs that map provider names to provider tokens.
        public let logins: [String: String]
        /// Provider names to unlink from this identity.
        public let loginsToRemove: [String]
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String

        public init(logins: [String: String], loginsToRemove: [String], identityId: String) {
            self.logins = logins
            self.loginsToRemove = loginsToRemove
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let logins = dictionary["Logins"] as? [String: String] else { throw InitializableError.missingRequiredParam("Logins") }
            self.logins = logins
            guard let loginsToRemove = dictionary["LoginsToRemove"] as? [String] else { throw InitializableError.missingRequiredParam("LoginsToRemove") }
            self.loginsToRemove = loginsToRemove
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public struct GetOpenIdTokenResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An OpenID token, valid for 15 minutes.
        public let token: String?
        /// A unique identifier in the format REGION:GUID. Note that the IdentityId returned may not match the one passed on input.
        public let identityId: String?

        public init(token: String? = nil, identityId: String? = nil) {
            self.token = token
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.token = dictionary["Token"] as? String
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public struct CognitoIdentityProvider: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// TRUE if server-side token validation is enabled for the identity provider’s token.
        public let serverSideTokenCheck: Bool?
        /// The provider name for an Amazon Cognito Identity User Pool. For example, cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789.
        public let providerName: String?
        /// The client ID for the Amazon Cognito Identity User Pool.
        public let clientId: String?

        public init(serverSideTokenCheck: Bool? = nil, providerName: String? = nil, clientId: String? = nil) {
            self.serverSideTokenCheck = serverSideTokenCheck
            self.providerName = providerName
            self.clientId = clientId
        }

        public init(dictionary: [String: Any]) throws {
            self.serverSideTokenCheck = dictionary["ServerSideTokenCheck"] as? Bool
            self.providerName = dictionary["ProviderName"] as? String
            self.clientId = dictionary["ClientId"] as? String
        }
    }

    public struct ListIdentitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identity pool ID in the format REGION:GUID.
        public let identityPoolId: String?
        /// An object containing a set of identities and associated mappings.
        public let identities: [IdentityDescription]?
        /// A pagination token.
        public let nextToken: String?

        public init(identityPoolId: String? = nil, identities: [IdentityDescription]? = nil, nextToken: String? = nil) {
            self.identityPoolId = identityPoolId
            self.identities = identities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            if let identities = dictionary["Identities"] as? [[String: Any]] {
                self.identities = try identities.map({ try IdentityDescription(dictionary: $0) })
            } else { 
                self.identities = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct LookupDeveloperIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID.
        public let developerUserIdentifierList: [String]?
        /// A pagination token. The first call you make will have NextToken set to null. After that the service will return NextToken values as needed. For example, let's say you make a request with MaxResults set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.
        public let nextToken: String?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(developerUserIdentifierList: [String]? = nil, nextToken: String? = nil, identityId: String? = nil) {
            self.developerUserIdentifierList = developerUserIdentifierList
            self.nextToken = nextToken
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.developerUserIdentifierList = dictionary["DeveloperUserIdentifierList"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public struct UnprocessedIdentityId: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The error code indicating the type of error that occurred.
        public let errorCode: ErrorCode?
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(errorCode: ErrorCode? = nil, identityId: String? = nil) {
            self.errorCode = errorCode
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            if let errorCode = dictionary["ErrorCode"] as? String { self.errorCode = ErrorCode(rawValue: errorCode) } else { self.errorCode = nil }
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public struct MergeDeveloperIdentitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String?

        public init(identityId: String? = nil) {
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            self.identityId = dictionary["IdentityId"] as? String
        }
    }

    public enum MappingRuleMatchType: String, CustomStringConvertible {
        case equals = "Equals"
        case contains = "Contains"
        case startswith = "StartsWith"
        case notequal = "NotEqual"
        public var description: String { return self.rawValue }
    }

    public struct RoleMapping: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The role mapping type. Token will use cognito:roles and cognito:preferred_role claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.
        public let `type`: RoleMappingType
        /// The rules to be used for mapping users to roles. If you specify Rules as the role mapping type, RulesConfiguration is required.
        public let rulesConfiguration: RulesConfigurationType?
        /// If you specify Token or Rules as the Type, AmbiguousRoleResolution is required. Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type.
        public let ambiguousRoleResolution: AmbiguousRoleResolutionType?

        public init(type: RoleMappingType, rulesConfiguration: RulesConfigurationType? = nil, ambiguousRoleResolution: AmbiguousRoleResolutionType? = nil) {
            self.`type` = `type`
            self.rulesConfiguration = rulesConfiguration
            self.ambiguousRoleResolution = ambiguousRoleResolution
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawType = dictionary["Type"] as? String, let `type` = RoleMappingType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            if let rulesConfiguration = dictionary["RulesConfiguration"] as? [String: Any] { self.rulesConfiguration = try CognitoIdentity.RulesConfigurationType(dictionary: rulesConfiguration) } else { self.rulesConfiguration = nil }
            if let ambiguousRoleResolution = dictionary["AmbiguousRoleResolution"] as? String { self.ambiguousRoleResolution = AmbiguousRoleResolutionType(rawValue: ambiguousRoleResolution) } else { self.ambiguousRoleResolution = nil }
        }
    }

    public enum AmbiguousRoleResolutionType: String, CustomStringConvertible {
        case authenticatedrole = "AuthenticatedRole"
        case deny = "Deny"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIdentityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier in the format REGION:GUID.
        public let identityId: String

        public init(identityId: String) {
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

}