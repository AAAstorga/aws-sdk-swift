// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Kms {

    public struct ListKeyPoliciesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To retrieve more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// A list of policy names. Currently, there is only one policy and it is named "Default".
        public let policyNames: [String]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(truncated: Bool? = nil, policyNames: [String]? = nil, nextMarker: String? = nil) {
            self.truncated = truncated
            self.policyNames = policyNames
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["Truncated"] as? Bool
            self.policyNames = dictionary["PolicyNames"] as? [String]
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public enum WrappingKeySpec: String, CustomStringConvertible {
        case rsa_2048 = "RSA_2048"
        public var description: String { return self.rawValue }
    }

    public struct GetParametersForImportRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the CMK into which you will import key material. The CMK's Origin must be EXTERNAL. A valid identifier is the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String
        /// The algorithm you will use to encrypt the key material before importing it with ImportKeyMaterial. For more information, see Encrypt the Key Material in the AWS Key Management Service Developer Guide.
        public let wrappingAlgorithm: AlgorithmSpec
        /// The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public keys are supported.
        public let wrappingKeySpec: WrappingKeySpec

        public init(keyId: String, wrappingAlgorithm: AlgorithmSpec, wrappingKeySpec: WrappingKeySpec) {
            self.keyId = keyId
            self.wrappingAlgorithm = wrappingAlgorithm
            self.wrappingKeySpec = wrappingKeySpec
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            guard let rawWrappingAlgorithm = dictionary["WrappingAlgorithm"] as? String, let wrappingAlgorithm = AlgorithmSpec(rawValue: rawWrappingAlgorithm) else { throw InitializableError.missingRequiredParam("WrappingAlgorithm") }
            self.wrappingAlgorithm = wrappingAlgorithm
            guard let rawWrappingKeySpec = dictionary["WrappingKeySpec"] as? String, let wrappingKeySpec = WrappingKeySpec(rawValue: rawWrappingKeySpec) else { throw InitializableError.missingRequiredParam("WrappingKeySpec") }
            self.wrappingKeySpec = wrappingKeySpec
        }
    }

    public struct TagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more tags. Each tag consists of a tag key and a tag value.
        public let tags: [Tag]
        /// A unique identifier for the CMK you are tagging. You can use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String

        public init(tags: [Tag], keyId: String) {
            self.tags = tags
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct GenerateRandomRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The length of the byte string.
        public let numberOfBytes: Int32?

        public init(numberOfBytes: Int32? = nil) {
            self.numberOfBytes = numberOfBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.numberOfBytes = dictionary["NumberOfBytes"] as? Int32
        }
    }

    public struct UpdateAliasRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// String that contains the name of the alias to be modified. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/aws" are reserved.
        public let aliasName: String
        /// Unique identifier of the customer master key to be mapped to the alias. This value can be a globally unique identifier or the fully specified ARN of a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012   You can call ListAliases to verify that the alias is mapped to the correct TargetKeyId.
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasName = dictionary["AliasName"] as? String else { throw InitializableError.missingRequiredParam("AliasName") }
            self.aliasName = aliasName
            guard let targetKeyId = dictionary["TargetKeyId"] as? String else { throw InitializableError.missingRequiredParam("TargetKeyId") }
            self.targetKeyId = targetKeyId
        }
    }

    public struct ReEncryptRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Encryption context to use when the data is reencrypted.
        public let destinationEncryptionContext: [String: String]?
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Ciphertext of the data to reencrypt.
        public let ciphertextBlob: Data
        /// Encryption context used to encrypt and decrypt the data specified in the CiphertextBlob parameter.
        public let sourceEncryptionContext: [String: String]?
        /// A unique identifier for the CMK to use to reencrypt the data. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Alias ARN Example - arn:aws:kms:us-east-1:123456789012:alias/MyAliasName   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012   Alias Name Example - alias/MyAliasName  
        public let destinationKeyId: String

        public init(destinationEncryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, ciphertextBlob: Data, sourceEncryptionContext: [String: String]? = nil, destinationKeyId: String) {
            self.destinationEncryptionContext = destinationEncryptionContext
            self.grantTokens = grantTokens
            self.ciphertextBlob = ciphertextBlob
            self.sourceEncryptionContext = sourceEncryptionContext
            self.destinationKeyId = destinationKeyId
        }

        public init(dictionary: [String: Any]) throws {
            if let destinationEncryptionContext = dictionary["DestinationEncryptionContext"] as? [String: String] {
                self.destinationEncryptionContext = destinationEncryptionContext
            } else { 
                self.destinationEncryptionContext = nil
            }
            self.grantTokens = dictionary["GrantTokens"] as? [String]
            guard let ciphertextBlob = dictionary["CiphertextBlob"] as? Data else { throw InitializableError.missingRequiredParam("CiphertextBlob") }
            self.ciphertextBlob = ciphertextBlob
            if let sourceEncryptionContext = dictionary["SourceEncryptionContext"] as? [String: String] {
                self.sourceEncryptionContext = sourceEncryptionContext
            } else { 
                self.sourceEncryptionContext = nil
            }
            guard let destinationKeyId = dictionary["DestinationKeyId"] as? String else { throw InitializableError.missingRequiredParam("DestinationKeyId") }
            self.destinationKeyId = destinationKeyId
        }
    }

    public enum DataKeySpec: String, CustomStringConvertible {
        case aes_256 = "AES_256"
        case aes_128 = "AES_128"
        public var description: String { return self.rawValue }
    }

    public struct ReEncryptResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The reencrypted data.
        public let ciphertextBlob: Data?
        /// Unique identifier of the CMK used to originally encrypt the data.
        public let sourceKeyId: String?
        /// Unique identifier of the CMK used to reencrypt the data.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, sourceKeyId: String? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.sourceKeyId = sourceKeyId
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.ciphertextBlob = dictionary["CiphertextBlob"] as? Data
            self.sourceKeyId = dictionary["SourceKeyId"] as? String
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct KeyListEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the key.
        public let keyArn: String?
        /// Unique identifier of the key.
        public let keyId: String?

        public init(keyArn: String? = nil, keyId: String? = nil) {
            self.keyArn = keyArn
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.keyArn = dictionary["KeyArn"] as? String
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct DescribeKeyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// A unique identifier for the customer master key. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Alias ARN Example - arn:aws:kms:us-east-1:123456789012:alias/MyAliasName   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012   Alias Name Example - alias/MyAliasName  
        public let keyId: String

        public init(grantTokens: [String]? = nil, keyId: String) {
            self.grantTokens = grantTokens
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.grantTokens = dictionary["GrantTokens"] as? [String]
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public enum AlgorithmSpec: String, CustomStringConvertible {
        case rsaes_pkcs1_v1_5 = "RSAES_PKCS1_V1_5"
        case rsaes_oaep_sha_1 = "RSAES_OAEP_SHA_1"
        case rsaes_oaep_sha_256 = "RSAES_OAEP_SHA_256"
        public var description: String { return self.rawValue }
    }

    public struct GetKeyPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A policy document in JSON format.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            self.policy = dictionary["Policy"] as? String
        }
    }

    public struct DecryptRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Ciphertext to be decrypted. The blob includes metadata.
        public let ciphertextBlob: Data
        /// The encryption context. If this was specified in the Encrypt function, it must be specified here or the decryption operation will fail. For more information, see Encryption Context.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?

        public init(ciphertextBlob: Data, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
        }

        public init(dictionary: [String: Any]) throws {
            guard let ciphertextBlob = dictionary["CiphertextBlob"] as? Data else { throw InitializableError.missingRequiredParam("CiphertextBlob") }
            self.ciphertextBlob = ciphertextBlob
            if let encryptionContext = dictionary["EncryptionContext"] as? [String: String] {
                self.encryptionContext = encryptionContext
            } else { 
                self.encryptionContext = nil
            }
            self.grantTokens = dictionary["GrantTokens"] as? [String]
        }
    }

    public struct ListAliasesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of key aliases in the user's account.
        public let aliases: [AliasListEntry]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To retrieve more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(aliases: [AliasListEntry]? = nil, truncated: Bool? = nil, nextMarker: String? = nil) {
            self.aliases = aliases
            self.truncated = truncated
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            if let aliases = dictionary["Aliases"] as? [[String: Any]] {
                self.aliases = try aliases.map({ try AliasListEntry(dictionary: $0) })
            } else { 
                self.aliases = nil
            }
            self.truncated = dictionary["Truncated"] as? Bool
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the tag.
        public let tagValue: String
        /// The key of the tag.
        public let tagKey: String

        public init(tagValue: String, tagKey: String) {
            self.tagValue = tagValue
            self.tagKey = tagKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let tagValue = dictionary["TagValue"] as? String else { throw InitializableError.missingRequiredParam("TagValue") }
            self.tagValue = tagValue
            guard let tagKey = dictionary["TagKey"] as? String else { throw InitializableError.missingRequiredParam("TagKey") }
            self.tagKey = tagKey
        }
    }

    public struct GetKeyRotationStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A Boolean value that specifies whether key rotation is enabled.
        public let keyRotationEnabled: Bool?

        public init(keyRotationEnabled: Bool? = nil) {
            self.keyRotationEnabled = keyRotationEnabled
        }

        public init(dictionary: [String: Any]) throws {
            self.keyRotationEnabled = dictionary["KeyRotationEnabled"] as? Bool
        }
    }

    public struct PutKeyPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag to indicate whether to bypass the key policy lockout safety check.  Setting this value to true increases the likelihood that the CMK becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.  Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the CMK. The default value is false.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// A unique identifier for the CMK. Use the CMK's unique identifier or its Amazon Resource Name (ARN). For example:   Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab   ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab  
        public let keyId: String
        /// The key policy to attach to the CMK. If you do not set BypassPolicyLockoutSafetyCheck to true, the policy must meet the following criteria:   It must allow the principal that is making the PutKeyPolicy request to make a subsequent PutKeyPolicy request on the CMK. This reduces the likelihood that the CMK becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.   The principals that are specified in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to enforce a delay before specifying the new principal in a key policy because the new principal might not immediately be visible to AWS KMS. For more information, see Changes that I make are not always immediately visible in the IAM User Guide.   The policy size limit is 32 KiB (32768 bytes).
        public let policy: String
        /// The name of the key policy. This value must be default.
        public let policyName: String

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, keyId: String, policy: String, policyName: String) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.keyId = keyId
            self.policy = policy
            self.policyName = policyName
        }

        public init(dictionary: [String: Any]) throws {
            self.bypassPolicyLockoutSafetyCheck = dictionary["BypassPolicyLockoutSafetyCheck"] as? Bool
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            guard let policy = dictionary["Policy"] as? String else { throw InitializableError.missingRequiredParam("Policy") }
            self.policy = policy
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
        }
    }

    public struct KeyMetadata: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the CMK. For examples, see AWS Key Management Service (AWS KMS) in the Example ARNs section of the AWS General Reference.
        public let arn: String?
        /// The globally unique identifier for the CMK.
        public let keyId: String
        /// The source of the CMK's key material. When this value is AWS_KMS, AWS KMS created the key material. When this value is EXTERNAL, the key material was imported from your existing key management infrastructure or the CMK lacks key material.
        public let origin: OriginType?
        /// Specifies whether the CMK's key material expires. This value is present only when Origin is EXTERNAL, otherwise this value is omitted.
        public let expirationModel: ExpirationModelType?
        /// The twelve-digit account ID of the AWS account that owns the CMK.
        public let aWSAccountId: String?
        /// Specifies whether the CMK is enabled. When KeyState is Enabled this value is true, otherwise it is false.
        public let enabled: Bool?
        /// The state of the CMK. For more information about how key state affects the use of a CMK, see How Key State Affects the Use of a Customer Master Key in the AWS Key Management Service Developer Guide.
        public let keyState: KeyState?
        /// The date and time when the CMK was created.
        public let creationDate: Date?
        /// The cryptographic operations for which you can use the CMK. Currently the only allowed value is ENCRYPT_DECRYPT, which means you can use the CMK for the Encrypt and Decrypt operations.
        public let keyUsage: KeyUsageType?
        /// The time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. This value is present only for CMKs whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
        public let validTo: Date?
        /// The date and time after which AWS KMS deletes the CMK. This value is present only when KeyState is PendingDeletion, otherwise this value is omitted.
        public let deletionDate: Date?
        /// The description of the CMK.
        public let description: String?

        public init(arn: String? = nil, keyId: String, origin: OriginType? = nil, expirationModel: ExpirationModelType? = nil, aWSAccountId: String? = nil, enabled: Bool? = nil, keyState: KeyState? = nil, creationDate: Date? = nil, keyUsage: KeyUsageType? = nil, validTo: Date? = nil, deletionDate: Date? = nil, description: String? = nil) {
            self.arn = arn
            self.keyId = keyId
            self.origin = origin
            self.expirationModel = expirationModel
            self.aWSAccountId = aWSAccountId
            self.enabled = enabled
            self.keyState = keyState
            self.creationDate = creationDate
            self.keyUsage = keyUsage
            self.validTo = validTo
            self.deletionDate = deletionDate
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.arn = dictionary["Arn"] as? String
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            if let origin = dictionary["Origin"] as? String { self.origin = OriginType(rawValue: origin) } else { self.origin = nil }
            if let expirationModel = dictionary["ExpirationModel"] as? String { self.expirationModel = ExpirationModelType(rawValue: expirationModel) } else { self.expirationModel = nil }
            self.aWSAccountId = dictionary["AWSAccountId"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
            if let keyState = dictionary["KeyState"] as? String { self.keyState = KeyState(rawValue: keyState) } else { self.keyState = nil }
            self.creationDate = dictionary["CreationDate"] as? Date
            if let keyUsage = dictionary["KeyUsage"] as? String { self.keyUsage = KeyUsageType(rawValue: keyUsage) } else { self.keyUsage = nil }
            self.validTo = dictionary["ValidTo"] as? Date
            self.deletionDate = dictionary["DeletionDate"] as? Date
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CancelKeyDeletionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the customer master key (CMK) for which to cancel deletion. To specify this value, use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab   Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   To obtain the unique key ID and key ARN for a given CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct ListKeyPoliciesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// A unique identifier for the customer master key (CMK). You can use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100. Currently only 1 policy can be attached to a key.
        public let limit: Int32?

        public init(marker: String? = nil, keyId: String, limit: Int32? = nil) {
            self.marker = marker
            self.keyId = keyId
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct CreateAliasRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// String that contains the display name. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/AWS" are reserved.
        public let aliasName: String
        /// An identifier of the key for which you are creating the alias. This value cannot be another alias but can be a globally unique identifier or a fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasName = dictionary["AliasName"] as? String else { throw InitializableError.missingRequiredParam("AliasName") }
            self.aliasName = aliasName
            guard let targetKeyId = dictionary["TargetKeyId"] as? String else { throw InitializableError.missingRequiredParam("TargetKeyId") }
            self.targetKeyId = targetKeyId
        }
    }

    public enum KeyUsageType: String, CustomStringConvertible {
        case encrypt_decrypt = "ENCRYPT_DECRYPT"
        public var description: String { return self.rawValue }
    }

    public struct ScheduleKeyDeletionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the customer master key (CMK). This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30.
        public let pendingWindowInDays: Int32?
        /// The unique identifier for the customer master key (CMK) to delete. To specify this value, use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab   Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   To obtain the unique key ID and key ARN for a given CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(pendingWindowInDays: Int32? = nil, keyId: String) {
            self.pendingWindowInDays = pendingWindowInDays
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.pendingWindowInDays = dictionary["PendingWindowInDays"] as? Int32
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct CreateGrantResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The grant token. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantToken: String?
        /// The unique identifier for the grant. You can use the GrantId in a subsequent RetireGrant or RevokeGrant operation.
        public let grantId: String?

        public init(grantToken: String? = nil, grantId: String? = nil) {
            self.grantToken = grantToken
            self.grantId = grantId
        }

        public init(dictionary: [String: Any]) throws {
            self.grantToken = dictionary["GrantToken"] as? String
            self.grantId = dictionary["GrantId"] as? String
        }
    }

    public struct ListRetirableGrantsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// The retiring principal for which to list grants. To specify the retiring principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the Amazon Web Services General Reference.
        public let retiringPrincipal: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?

        public init(marker: String? = nil, retiringPrincipal: String, limit: Int32? = nil) {
            self.marker = marker
            self.retiringPrincipal = retiringPrincipal
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let retiringPrincipal = dictionary["RetiringPrincipal"] as? String else { throw InitializableError.missingRequiredParam("RetiringPrincipal") }
            self.retiringPrincipal = retiringPrincipal
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct ListKeysRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
        public let limit: Int32?

        public init(marker: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct GetParametersForImportResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The import token to send in a subsequent ImportKeyMaterial request.
        public let importToken: Data?
        /// The public key to use to encrypt the key material before importing it with ImportKeyMaterial.
        public let publicKey: Data?
        /// The identifier of the CMK to use in a subsequent ImportKeyMaterial request. This is the same CMK specified in the GetParametersForImport request.
        public let keyId: String?
        /// The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an ImportKeyMaterial request and you must send another GetParametersForImport request to retrieve new ones.
        public let parametersValidTo: Date?

        public init(importToken: Data? = nil, publicKey: Data? = nil, keyId: String? = nil, parametersValidTo: Date? = nil) {
            self.importToken = importToken
            self.publicKey = publicKey
            self.keyId = keyId
            self.parametersValidTo = parametersValidTo
        }

        public init(dictionary: [String: Any]) throws {
            self.importToken = dictionary["ImportToken"] as? Data
            self.publicKey = dictionary["PublicKey"] as? Data
            self.keyId = dictionary["KeyId"] as? String
            self.parametersValidTo = dictionary["ParametersValidTo"] as? Date
        }
    }

    public struct DisableKeyRotationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct ListResourceTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received. Do not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// A unique identifier for the CMK whose tags you are listing. You can use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?

        public init(marker: String? = nil, keyId: String, limit: Int32? = nil) {
            self.marker = marker
            self.keyId = keyId
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct EnableKeyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct ImportKeyMaterialResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct EncryptRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the Decrypt API or decryption will fail. For more information, see Encryption Context.
        public let encryptionContext: [String: String]?
        /// Data to be encrypted.
        public let plaintext: Data
        /// A unique identifier for the customer master key. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Alias ARN Example - arn:aws:kms:us-east-1:123456789012:alias/MyAliasName   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012   Alias Name Example - alias/MyAliasName  
        public let keyId: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?

        public init(encryptionContext: [String: String]? = nil, plaintext: Data, keyId: String, grantTokens: [String]? = nil) {
            self.encryptionContext = encryptionContext
            self.plaintext = plaintext
            self.keyId = keyId
            self.grantTokens = grantTokens
        }

        public init(dictionary: [String: Any]) throws {
            if let encryptionContext = dictionary["EncryptionContext"] as? [String: String] {
                self.encryptionContext = encryptionContext
            } else { 
                self.encryptionContext = nil
            }
            guard let plaintext = dictionary["Plaintext"] as? Data else { throw InitializableError.missingRequiredParam("Plaintext") }
            self.plaintext = plaintext
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.grantTokens = dictionary["GrantTokens"] as? [String]
        }
    }

    public enum ExpirationModelType: String, CustomStringConvertible {
        case key_material_expires = "KEY_MATERIAL_EXPIRES"
        case key_material_does_not_expire = "KEY_MATERIAL_DOES_NOT_EXPIRE"
        public var description: String { return self.rawValue }
    }

    public struct EnableKeyRotationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct RevokeGrantRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier of the grant to be revoked.
        public let grantId: String
        /// A unique identifier for the customer master key associated with the grant. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(grantId: String, keyId: String) {
            self.grantId = grantId
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let grantId = dictionary["GrantId"] as? String else { throw InitializableError.missingRequiredParam("GrantId") }
            self.grantId = grantId
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct RetireGrantRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that identifies the grant to be retired.
        public let grantToken: String?
        /// Unique identifier of the grant to retire. The grant ID is returned in the response to a CreateGrant operation.   Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123  
        public let grantId: String?
        /// The Amazon Resource Name of the CMK associated with the grant. Example:   arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab  
        public let keyId: String?

        public init(grantToken: String? = nil, grantId: String? = nil, keyId: String? = nil) {
            self.grantToken = grantToken
            self.grantId = grantId
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.grantToken = dictionary["GrantToken"] as? String
            self.grantId = dictionary["GrantId"] as? String
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct CancelKeyDeletionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the master key for which deletion is canceled.
        public let keyId: String?

        public init(keyId: String? = nil) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct GenerateRandomResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unpredictable byte string.
        public let plaintext: Data?

        public init(plaintext: Data? = nil) {
            self.plaintext = plaintext
        }

        public init(dictionary: [String: Any]) throws {
            self.plaintext = dictionary["Plaintext"] as? Data
        }
    }

    public struct CreateGrantRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the customer master key (CMK) that the grant applies to. To specify this value, use the globally unique key ID or the Amazon Resource Name (ARN) of the key. Examples:   Globally unique key ID: 12345678-1234-1234-1234-123456789012   Key ARN: arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012  
        public let keyId: String
        /// The principal that is given permission to retire the grant by using RetireGrant operation. To specify the principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the AWS General Reference.
        public let retiringPrincipal: String?
        /// A friendly name for identifying the grant. Use this value to prevent unintended creation of duplicate grants when retrying this request. When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens obtained in this way can be used interchangeably.
        public let name: String?
        /// A list of operations that the grant permits.
        public let operations: [GrantOperation]?
        /// The principal that is given permission to perform the operations that the grant permits. To specify the principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the AWS General Reference.
        public let granteePrincipal: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The conditions under which the operations permitted by the grant are allowed. You can use this value to allow the operations permitted by the grant only when a specified encryption context is present. For more information, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let constraints: GrantConstraints?

        public init(keyId: String, retiringPrincipal: String? = nil, name: String? = nil, operations: [GrantOperation]? = nil, granteePrincipal: String, grantTokens: [String]? = nil, constraints: GrantConstraints? = nil) {
            self.keyId = keyId
            self.retiringPrincipal = retiringPrincipal
            self.name = name
            self.operations = operations
            self.granteePrincipal = granteePrincipal
            self.grantTokens = grantTokens
            self.constraints = constraints
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.retiringPrincipal = dictionary["RetiringPrincipal"] as? String
            self.name = dictionary["Name"] as? String
            if let operations = dictionary["Operations"] as? [String] { self.operations = operations.flatMap({ GrantOperation(rawValue: $0)}) } else { self.operations = nil }
            guard let granteePrincipal = dictionary["GranteePrincipal"] as? String else { throw InitializableError.missingRequiredParam("GranteePrincipal") }
            self.granteePrincipal = granteePrincipal
            self.grantTokens = dictionary["GrantTokens"] as? [String]
            if let constraints = dictionary["Constraints"] as? [String: Any] { self.constraints = try Kms.GrantConstraints(dictionary: constraints) } else { self.constraints = nil }
        }
    }

    public struct DescribeKeyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Metadata associated with the key.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        public init(dictionary: [String: Any]) throws {
            if let keyMetadata = dictionary["KeyMetadata"] as? [String: Any] { self.keyMetadata = try Kms.KeyMetadata(dictionary: keyMetadata) } else { self.keyMetadata = nil }
        }
    }

    public struct UpdateKeyDescriptionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the CMK. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String
        /// New description for the CMK.
        public let description: String

        public init(keyId: String, description: String) {
            self.keyId = keyId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct GetKeyPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String
        /// String that contains the name of the policy. Currently, this must be "default". Policy names can be discovered by calling ListKeyPolicies.
        public let policyName: String

        public init(keyId: String, policyName: String) {
            self.keyId = keyId
            self.policyName = policyName
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
        }
    }

    public struct GenerateDataKeyWithoutPlaintextRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A set of key-value pairs that represents additional authenticated data. For more information, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// The length of the data encryption key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
        public let numberOfBytes: Int32?
        /// The identifier of the CMK under which to generate and encrypt the data encryption key. A valid identifier is the unique key ID or the Amazon Resource Name (ARN) of the CMK, or the alias name or ARN of an alias that refers to the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    CMK ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias   
        public let keyId: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The length of the data encryption key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
        public let keySpec: DataKeySpec?

        public init(encryptionContext: [String: String]? = nil, numberOfBytes: Int32? = nil, keyId: String, grantTokens: [String]? = nil, keySpec: DataKeySpec? = nil) {
            self.encryptionContext = encryptionContext
            self.numberOfBytes = numberOfBytes
            self.keyId = keyId
            self.grantTokens = grantTokens
            self.keySpec = keySpec
        }

        public init(dictionary: [String: Any]) throws {
            if let encryptionContext = dictionary["EncryptionContext"] as? [String: String] {
                self.encryptionContext = encryptionContext
            } else { 
                self.encryptionContext = nil
            }
            self.numberOfBytes = dictionary["NumberOfBytes"] as? Int32
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.grantTokens = dictionary["GrantTokens"] as? [String]
            if let keySpec = dictionary["KeySpec"] as? String { self.keySpec = DataKeySpec(rawValue: keySpec) } else { self.keySpec = nil }
        }
    }

    public enum KeyState: String, CustomStringConvertible {
        case enabled = "Enabled"
        case disabled = "Disabled"
        case pendingdeletion = "PendingDeletion"
        case pendingimport = "PendingImport"
        public var description: String { return self.rawValue }
    }

    public struct ListKeysResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To retrieve more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// A list of keys.
        public let keys: [KeyListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(truncated: Bool? = nil, keys: [KeyListEntry]? = nil, nextMarker: String? = nil) {
            self.truncated = truncated
            self.keys = keys
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["Truncated"] as? Bool
            if let keys = dictionary["Keys"] as? [[String: Any]] {
                self.keys = try keys.map({ try KeyListEntry(dictionary: $0) })
            } else { 
                self.keys = nil
            }
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct ListGrantsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To retrieve more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// A list of grants.
        public let grants: [GrantListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(truncated: Bool? = nil, grants: [GrantListEntry]? = nil, nextMarker: String? = nil) {
            self.truncated = truncated
            self.grants = grants
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["Truncated"] as? Bool
            if let grants = dictionary["Grants"] as? [[String: Any]] {
                self.grants = try grants.map({ try GrantListEntry(dictionary: $0) })
            } else { 
                self.grants = nil
            }
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct DeleteAliasRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The alias to be deleted. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/AWS" are reserved.
        public let aliasName: String

        public init(aliasName: String) {
            self.aliasName = aliasName
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasName = dictionary["AliasName"] as? String else { throw InitializableError.missingRequiredParam("AliasName") }
            self.aliasName = aliasName
        }
    }

    public struct ListAliasesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?

        public init(marker: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DecryptResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Decrypted plaintext data. This value may not be returned if the customer master key is not available or if you didn't have permission to use it.
        public let plaintext: Data?
        /// ARN of the key used to perform the decryption. This value is returned if no errors are encountered during the operation.
        public let keyId: String?

        public init(plaintext: Data? = nil, keyId: String? = nil) {
            self.plaintext = plaintext
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.plaintext = dictionary["Plaintext"] as? Data
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct GenerateDataKeyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The encrypted data encryption key.
        public let ciphertextBlob: Data?
        /// The data encryption key. Use this data key for local encryption and decryption, then remove it from memory as soon as possible.
        public let plaintext: Data?
        /// The identifier of the CMK under which the data encryption key was generated and encrypted.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, plaintext: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.plaintext = plaintext
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.ciphertextBlob = dictionary["CiphertextBlob"] as? Data
            self.plaintext = dictionary["Plaintext"] as? Data
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public enum GrantOperation: String, CustomStringConvertible {
        case decrypt = "Decrypt"
        case encrypt = "Encrypt"
        case generatedatakey = "GenerateDataKey"
        case generatedatakeywithoutplaintext = "GenerateDataKeyWithoutPlaintext"
        case reencryptfrom = "ReEncryptFrom"
        case reencryptto = "ReEncryptTo"
        case creategrant = "CreateGrant"
        case retiregrant = "RetireGrant"
        case describekey = "DescribeKey"
        public var description: String { return self.rawValue }
    }

    public struct ScheduleKeyDeletionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date and time after which AWS KMS deletes the customer master key (CMK).
        public let deletionDate: Date?
        /// The unique identifier of the customer master key (CMK) for which deletion is scheduled.
        public let keyId: String?

        public init(deletionDate: Date? = nil, keyId: String? = nil) {
            self.deletionDate = deletionDate
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.deletionDate = dictionary["DeletionDate"] as? Date
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct DeleteImportedKeyMaterialRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the CMK whose key material to delete. The CMK's Origin must be EXTERNAL. A valid identifier is the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct GenerateDataKeyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A set of key-value pairs that represents additional authenticated data. For more information, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// The length of the data encryption key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
        public let numberOfBytes: Int32?
        /// The identifier of the CMK under which to generate and encrypt the data encryption key. A valid identifier is the unique key ID or the Amazon Resource Name (ARN) of the CMK, or the alias name or ARN of an alias that refers to the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    CMK ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias   
        public let keyId: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The length of the data encryption key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
        public let keySpec: DataKeySpec?

        public init(encryptionContext: [String: String]? = nil, numberOfBytes: Int32? = nil, keyId: String, grantTokens: [String]? = nil, keySpec: DataKeySpec? = nil) {
            self.encryptionContext = encryptionContext
            self.numberOfBytes = numberOfBytes
            self.keyId = keyId
            self.grantTokens = grantTokens
            self.keySpec = keySpec
        }

        public init(dictionary: [String: Any]) throws {
            if let encryptionContext = dictionary["EncryptionContext"] as? [String: String] {
                self.encryptionContext = encryptionContext
            } else { 
                self.encryptionContext = nil
            }
            self.numberOfBytes = dictionary["NumberOfBytes"] as? Int32
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.grantTokens = dictionary["GrantTokens"] as? [String]
            if let keySpec = dictionary["KeySpec"] as? String { self.keySpec = DataKeySpec(rawValue: keySpec) } else { self.keySpec = nil }
        }
    }

    public struct CreateKeyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Metadata associated with the CMK.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        public init(dictionary: [String: Any]) throws {
            if let keyMetadata = dictionary["KeyMetadata"] as? [String: Any] { self.keyMetadata = try Kms.KeyMetadata(dictionary: keyMetadata) } else { self.keyMetadata = nil }
        }
    }

    public struct GrantListEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the customer master key (CMK) to which the grant applies.
        public let keyId: String?
        /// The principal that can retire the grant.
        public let retiringPrincipal: String?
        /// The friendly name that identifies the grant. If a name was provided in the CreateGrant request, that name is returned. Otherwise this value is null.
        public let name: String?
        /// The list of operations permitted by the grant.
        public let operations: [GrantOperation]?
        /// The unique identifier for the grant.
        public let grantId: String?
        /// The AWS account under which the grant was issued.
        public let issuingAccount: String?
        /// The date and time when the grant was created.
        public let creationDate: Date?
        /// The principal that receives the grant's permissions.
        public let granteePrincipal: String?
        /// The conditions under which the grant's operations are allowed.
        public let constraints: GrantConstraints?

        public init(keyId: String? = nil, retiringPrincipal: String? = nil, name: String? = nil, operations: [GrantOperation]? = nil, grantId: String? = nil, issuingAccount: String? = nil, creationDate: Date? = nil, granteePrincipal: String? = nil, constraints: GrantConstraints? = nil) {
            self.keyId = keyId
            self.retiringPrincipal = retiringPrincipal
            self.name = name
            self.operations = operations
            self.grantId = grantId
            self.issuingAccount = issuingAccount
            self.creationDate = creationDate
            self.granteePrincipal = granteePrincipal
            self.constraints = constraints
        }

        public init(dictionary: [String: Any]) throws {
            self.keyId = dictionary["KeyId"] as? String
            self.retiringPrincipal = dictionary["RetiringPrincipal"] as? String
            self.name = dictionary["Name"] as? String
            if let operations = dictionary["Operations"] as? [String] { self.operations = operations.flatMap({ GrantOperation(rawValue: $0)}) } else { self.operations = nil }
            self.grantId = dictionary["GrantId"] as? String
            self.issuingAccount = dictionary["IssuingAccount"] as? String
            self.creationDate = dictionary["CreationDate"] as? Date
            self.granteePrincipal = dictionary["GranteePrincipal"] as? String
            if let constraints = dictionary["Constraints"] as? [String: Any] { self.constraints = try Kms.GrantConstraints(dictionary: constraints) } else { self.constraints = nil }
        }
    }

    public struct ListGrantsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(marker: String? = nil, limit: Int32? = nil, keyId: String) {
            self.marker = marker
            self.limit = limit
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? Int32
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct GrantConstraints: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains a list of key-value pairs, a subset of which must be present in the encryption context of a subsequent operation permitted by the grant. When a subsequent operation permitted by the grant includes an encryption context that matches this list or is a subset of this list, the grant allows the operation. Otherwise, the operation is not allowed.
        public let encryptionContextSubset: [String: String]?
        /// Contains a list of key-value pairs that must be present in the encryption context of a subsequent operation permitted by the grant. When a subsequent operation permitted by the grant includes an encryption context that matches this list, the grant allows the operation. Otherwise, the operation is not allowed.
        public let encryptionContextEquals: [String: String]?

        public init(encryptionContextSubset: [String: String]? = nil, encryptionContextEquals: [String: String]? = nil) {
            self.encryptionContextSubset = encryptionContextSubset
            self.encryptionContextEquals = encryptionContextEquals
        }

        public init(dictionary: [String: Any]) throws {
            if let encryptionContextSubset = dictionary["EncryptionContextSubset"] as? [String: String] {
                self.encryptionContextSubset = encryptionContextSubset
            } else { 
                self.encryptionContextSubset = nil
            }
            if let encryptionContextEquals = dictionary["EncryptionContextEquals"] as? [String: String] {
                self.encryptionContextEquals = encryptionContextEquals
            } else { 
                self.encryptionContextEquals = nil
            }
        }
    }

    public struct GetKeyRotationStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the customer master key. This value can be a globally unique identifier or the fully specified ARN to a key.   Key ARN Example - arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012  
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public struct DisableKeyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the CMK. Use the CMK's unique identifier or its Amazon Resource Name (ARN). For example:   Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab   ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab  
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
        }
    }

    public enum OriginType: String, CustomStringConvertible {
        case aws_kms = "AWS_KMS"
        case external = "EXTERNAL"
        public var description: String { return self.rawValue }
    }

    public struct AliasListEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// String that contains the alias.
        public let aliasName: String?
        /// String that contains the key ARN.
        public let aliasArn: String?
        /// String that contains the key identifier referred to by the alias.
        public let targetKeyId: String?

        public init(aliasName: String? = nil, aliasArn: String? = nil, targetKeyId: String? = nil) {
            self.aliasName = aliasName
            self.aliasArn = aliasArn
            self.targetKeyId = targetKeyId
        }

        public init(dictionary: [String: Any]) throws {
            self.aliasName = dictionary["AliasName"] as? String
            self.aliasArn = dictionary["AliasArn"] as? String
            self.targetKeyId = dictionary["TargetKeyId"] as? String
        }
    }

    public struct ImportKeyMaterialRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The import token that you received in the response to a previous GetParametersForImport request. It must be from the same response that contained the public key that you used to encrypt the key material.
        public let importToken: Data
        /// The encrypted key material to import. It must be encrypted with the public key that you received in the response to a previous GetParametersForImport request, using the wrapping algorithm that you specified in that request.
        public let encryptedKeyMaterial: Data
        /// Specifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES, in which case you must include the ValidTo parameter. When this parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE, you must omit the ValidTo parameter.
        public let expirationModel: ExpirationModelType?
        /// The identifier of the CMK to import the key material into. The CMK's Origin must be EXTERNAL. A valid identifier is the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String
        /// The time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. You must omit this parameter when the ExpirationModel parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE. Otherwise it is required.
        public let validTo: Date?

        public init(importToken: Data, encryptedKeyMaterial: Data, expirationModel: ExpirationModelType? = nil, keyId: String, validTo: Date? = nil) {
            self.importToken = importToken
            self.encryptedKeyMaterial = encryptedKeyMaterial
            self.expirationModel = expirationModel
            self.keyId = keyId
            self.validTo = validTo
        }

        public init(dictionary: [String: Any]) throws {
            guard let importToken = dictionary["ImportToken"] as? Data else { throw InitializableError.missingRequiredParam("ImportToken") }
            self.importToken = importToken
            guard let encryptedKeyMaterial = dictionary["EncryptedKeyMaterial"] as? Data else { throw InitializableError.missingRequiredParam("EncryptedKeyMaterial") }
            self.encryptedKeyMaterial = encryptedKeyMaterial
            if let expirationModel = dictionary["ExpirationModel"] as? String { self.expirationModel = ExpirationModelType(rawValue: expirationModel) } else { self.expirationModel = nil }
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            self.validTo = dictionary["ValidTo"] as? Date
        }
    }

    public struct EncryptResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The encrypted plaintext. If you are using the CLI, the value is Base64 encoded. Otherwise, it is not encoded.
        public let ciphertextBlob: Data?
        /// The ID of the key used during encryption.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.ciphertextBlob = dictionary["CiphertextBlob"] as? Data
            self.keyId = dictionary["KeyId"] as? String
        }
    }

    public struct CreateKeyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag to indicate whether to bypass the key policy lockout safety check.  Setting this value to true increases the likelihood that the CMK becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.  Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the CMK. The default value is false.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// The intended use of the CMK. You can use CMKs only for symmetric encryption and decryption.
        public let keyUsage: KeyUsageType?
        /// The source of the CMK's key material. The default is AWS_KMS, which means AWS KMS creates the key material. When this parameter is set to EXTERNAL, the request creates a CMK without key material so that you can import key material from your existing key management infrastructure. For more information about importing key material into AWS KMS, see Importing Key Material in the AWS Key Management Service Developer Guide. The CMK's Origin is immutable and is set when the CMK is created.
        public let origin: OriginType?
        /// One or more tags. Each tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings. Use this parameter to tag the CMK when it is created. Alternately, you can omit this parameter and instead tag the CMK after it is created using TagResource.
        public let tags: [Tag]?
        /// The key policy to attach to the CMK. If you specify a policy and do not set BypassPolicyLockoutSafetyCheck to true, the policy must meet the following criteria:   It must allow the principal that is making the CreateKey request to make a subsequent PutKeyPolicy request on the CMK. This reduces the likelihood that the CMK becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.   The principals that are specified in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to enforce a delay before specifying the new principal in a key policy because the new principal might not immediately be visible to AWS KMS. For more information, see Changes that I make are not always immediately visible in the IAM User Guide.   If you do not specify a policy, AWS KMS attaches a default key policy to the CMK. For more information, see Default Key Policy in the AWS Key Management Service Developer Guide. The policy size limit is 32 KiB (32768 bytes).
        public let policy: String?
        /// A description of the CMK. Use a description that helps you decide whether the CMK is appropriate for a task.
        public let description: String?

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, keyUsage: KeyUsageType? = nil, origin: OriginType? = nil, tags: [Tag]? = nil, policy: String? = nil, description: String? = nil) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.keyUsage = keyUsage
            self.origin = origin
            self.tags = tags
            self.policy = policy
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.bypassPolicyLockoutSafetyCheck = dictionary["BypassPolicyLockoutSafetyCheck"] as? Bool
            if let keyUsage = dictionary["KeyUsage"] as? String { self.keyUsage = KeyUsageType(rawValue: keyUsage) } else { self.keyUsage = nil }
            if let origin = dictionary["Origin"] as? String { self.origin = OriginType(rawValue: origin) } else { self.origin = nil }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.policy = dictionary["Policy"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct UntagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the CMK from which you are removing tags. You can use the unique key ID or the Amazon Resource Name (ARN) of the CMK. Examples:   Unique key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab   
        public let keyId: String
        /// One or more tag keys. Specify only the tag keys, not the tag values.
        public let tagKeys: [String]

        public init(keyId: String, tagKeys: [String]) {
            self.keyId = keyId
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let keyId = dictionary["KeyId"] as? String else { throw InitializableError.missingRequiredParam("KeyId") }
            self.keyId = keyId
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct ListResourceTagsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To retrieve more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// A list of tags. Each tag consists of a tag key and a tag value.
        public let tags: [Tag]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request. Do not assume or infer any information from this value.
        public let nextMarker: String?

        public init(truncated: Bool? = nil, tags: [Tag]? = nil, nextMarker: String? = nil) {
            self.truncated = truncated
            self.tags = tags
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["Truncated"] as? Bool
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct GenerateDataKeyWithoutPlaintextResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The encrypted data encryption key.
        public let ciphertextBlob: Data?
        /// The identifier of the CMK under which the data encryption key was generated and encrypted.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
        }

        public init(dictionary: [String: Any]) throws {
            self.ciphertextBlob = dictionary["CiphertextBlob"] as? Data
            self.keyId = dictionary["KeyId"] as? String
        }
    }

}