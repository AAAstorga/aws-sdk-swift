// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension S3 {

    public struct ContinuationEvent: AWSShape {

    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The prefix that an object must have to be included in the inventory results.
        public let prefix: String

        public init(prefix: String) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct UploadPartRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Upload ID identifying the multipart upload whose part is being uploaded.
        public let uploadId: String
        /// Object data.
        public let body: Data?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String
        public let requestPayer: RequestPayer?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Object key for which the multipart upload was initiated.
        public let key: String

        public init(partNumber: Int32, uploadId: String, body: Data? = nil, bucket: String, requestPayer: RequestPayer? = nil, contentLength: Int64? = nil, sSECustomerKey: String? = nil, contentMD5: String? = nil, sSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil, key: String) {
            self.partNumber = partNumber
            self.uploadId = uploadId
            self.body = body
            self.bucket = bucket
            self.requestPayer = requestPayer
            self.contentLength = contentLength
            self.sSECustomerKey = sSECustomerKey
            self.contentMD5 = contentMD5
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "partNumber"
            case uploadId = "uploadId"
            case body = "Body"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
            case contentLength = "Content-Length"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentMD5 = "Content-MD5"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case key = "Key"
        }
    }

    public struct InventoryOptionalFields: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .list)
        ]
        public let field: [InventoryOptionalField]?

        public init(field: [InventoryOptionalField]? = nil) {
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
        }
    }

    public struct RoutingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Redirect", required: true, type: .structure), 
            AWSShapeMember(label: "Condition", required: false, type: .structure)
        ]
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        public let redirect: Redirect
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public let condition: Condition?

        public init(redirect: Redirect, condition: Condition? = nil) {
            self.redirect = redirect
            self.condition = condition
        }

        private enum CodingKeys: String, CodingKey {
            case redirect = "Redirect"
            case condition = "Condition"
        }
    }

    public struct CORSConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: true, type: .list)
        ]
        public let cORSRules: [CORSRule]

        public init(cORSRules: [CORSRule]) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct NoncurrentVersionTransition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer)
        ]
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?

        public init(storageClass: TransitionStorageClass? = nil, noncurrentDays: Int32? = nil) {
            self.storageClass = storageClass
            self.noncurrentDays = noncurrentDays
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case noncurrentDays = "NoncurrentDays"
        }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case write = "WRITE"
        case writeAcp = "WRITE_ACP"
        case read = "READ"
        case readAcp = "READ_ACP"
        public var description: String { return self.rawValue }
    }

    public struct PutObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let tagging: Tagging
        public let key: String
        public let versionId: String?

        public init(contentMD5: String? = nil, bucket: String, tagging: Tagging, key: String, versionId: String? = nil) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.tagging = tagging
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case tagging = "Tagging"
            case key = "Key"
            case versionId = "versionId"
        }
    }

    public struct CompleteMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MultipartUpload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultipartUpload", location: .body(locationName: "CompleteMultipartUpload"), required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string)
        ]
        public let multipartUpload: CompletedMultipartUpload?
        public let key: String
        public let bucket: String
        public let requestPayer: RequestPayer?
        public let uploadId: String

        public init(multipartUpload: CompletedMultipartUpload? = nil, key: String, bucket: String, requestPayer: RequestPayer? = nil, uploadId: String) {
            self.multipartUpload = multipartUpload
            self.key = key
            self.bucket = bucket
            self.requestPayer = requestPayer
            self.uploadId = uploadId
        }

        private enum CodingKeys: String, CodingKey {
            case multipartUpload = "CompleteMultipartUpload"
            case key = "Key"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
            case uploadId = "uploadId"
        }
    }

    public struct QueueConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Queue", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list)
        ]
        public let id: String?
        public let event: Event?
        public let queue: String?
        public let events: [Event]?

        public init(id: String? = nil, event: Event? = nil, queue: String? = nil, events: [Event]? = nil) {
            self.id = id
            self.event = event
            self.queue = queue
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case event = "Event"
            case queue = "Queue"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
        }
    }

    public struct RestoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Tier", required: false, type: .enum), 
            AWSShapeMember(label: "SelectParameters", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "GlacierJobParameters", required: false, type: .structure)
        ]
        /// Describes the location where the restore job's output is stored.
        public let outputLocation: OutputLocation?
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier?
        /// Describes the parameters for Select job types.
        public let selectParameters: SelectParameters?
        /// The optional description for the job.
        public let description: String?
        /// Type of restore request.
        public let `type`: RestoreRequestType?
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation.
        public let days: Int32?
        /// Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public let glacierJobParameters: GlacierJobParameters?

        public init(outputLocation: OutputLocation? = nil, tier: Tier? = nil, selectParameters: SelectParameters? = nil, description: String? = nil, type: RestoreRequestType? = nil, days: Int32? = nil, glacierJobParameters: GlacierJobParameters? = nil) {
            self.outputLocation = outputLocation
            self.tier = tier
            self.selectParameters = selectParameters
            self.description = description
            self.`type` = `type`
            self.days = days
            self.glacierJobParameters = glacierJobParameters
        }

        private enum CodingKeys: String, CodingKey {
            case outputLocation = "OutputLocation"
            case tier = "Tier"
            case selectParameters = "SelectParameters"
            case description = "Description"
            case `type` = "Type"
            case days = "Days"
            case glacierJobParameters = "GlacierJobParameters"
        }
    }

    public struct GetBucketWebsiteOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure), 
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure)
        ]
        public let redirectAllRequestsTo: RedirectAllRequestsTo?
        public let indexDocument: IndexDocument?
        public let routingRules: RoutingRules?
        public let errorDocument: ErrorDocument?

        public init(redirectAllRequestsTo: RedirectAllRequestsTo? = nil, indexDocument: IndexDocument? = nil, routingRules: RoutingRules? = nil, errorDocument: ErrorDocument? = nil) {
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.indexDocument = indexDocument
            self.routingRules = routingRules
            self.errorDocument = errorDocument
        }

        private enum CodingKeys: String, CodingKey {
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
            case indexDocument = "IndexDocument"
            case routingRules = "RoutingRules"
            case errorDocument = "ErrorDocument"
        }
    }

    public struct ListBucketMetricsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "MetricsConfigurationList", location: .body(locationName: "MetricsConfiguration"), required: false, type: .list)
        ]
        /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?
        /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
        public let continuationToken: String?
        /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The list of metrics configurations for a bucket.
        public let metricsConfigurationList: [MetricsConfiguration]?

        public init(nextContinuationToken: String? = nil, continuationToken: String? = nil, isTruncated: Bool? = nil, metricsConfigurationList: [MetricsConfiguration]? = nil) {
            self.nextContinuationToken = nextContinuationToken
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.metricsConfigurationList = metricsConfigurationList
        }

        private enum CodingKeys: String, CodingKey {
            case nextContinuationToken = "NextContinuationToken"
            case continuationToken = "ContinuationToken"
            case isTruncated = "IsTruncated"
            case metricsConfigurationList = "MetricsConfiguration"
        }
    }

    public struct ObjectLockRetention: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "RetainUntilDate", required: false, type: .timestamp)
        ]
        /// Indicates the Retention mode for the specified object.
        public let mode: ObjectLockRetentionMode?
        /// The date on which this Object Lock Retention will expire.
        public let retainUntilDate: TimeStamp?

        public init(mode: ObjectLockRetentionMode? = nil, retainUntilDate: TimeStamp? = nil) {
            self.mode = mode
            self.retainUntilDate = retainUntilDate
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case retainUntilDate = "RetainUntilDate"
        }
    }

    public struct RequestProgress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct HeadBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct InventoryConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedule", required: true, type: .structure), 
            AWSShapeMember(label: "IsEnabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "OptionalFields", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "IncludedObjectVersions", required: true, type: .enum)
        ]
        /// Specifies the schedule for generating inventory results.
        public let schedule: InventorySchedule
        /// Specifies whether the inventory is enabled or disabled.
        public let isEnabled: Bool
        /// Contains information about where to publish the inventory results.
        public let destination: InventoryDestination
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public let filter: InventoryFilter?
        /// Contains the optional fields that are included in the inventory results.
        public let optionalFields: InventoryOptionalFields?
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// Specifies which object version(s) to included in the inventory results.
        public let includedObjectVersions: InventoryIncludedObjectVersions

        public init(schedule: InventorySchedule, isEnabled: Bool, destination: InventoryDestination, filter: InventoryFilter? = nil, optionalFields: InventoryOptionalFields? = nil, id: String, includedObjectVersions: InventoryIncludedObjectVersions) {
            self.schedule = schedule
            self.isEnabled = isEnabled
            self.destination = destination
            self.filter = filter
            self.optionalFields = optionalFields
            self.id = id
            self.includedObjectVersions = includedObjectVersions
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case isEnabled = "IsEnabled"
            case destination = "Destination"
            case filter = "Filter"
            case optionalFields = "OptionalFields"
            case id = "Id"
            case includedObjectVersions = "IncludedObjectVersions"
        }
    }

    public struct BucketLifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [LifecycleRule]

        public init(rules: [LifecycleRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct TargetGrants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [TargetGrant]?

        public init(grant: [TargetGrant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct PutBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let tagging: Tagging
        public let contentMD5: String?
        public let bucket: String

        public init(tagging: Tagging, contentMD5: String? = nil, bucket: String) {
            self.tagging = tagging
            self.contentMD5 = contentMD5
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case tagging = "Tagging"
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
        }
    }

    public struct CloudFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFunction", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InvocationRole", required: false, type: .string), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list)
        ]
        public let cloudFunction: String?
        public let id: String?
        public let invocationRole: String?
        public let event: Event?
        public let events: [Event]?

        public init(cloudFunction: String? = nil, id: String? = nil, invocationRole: String? = nil, event: Event? = nil, events: [Event]? = nil) {
            self.cloudFunction = cloudFunction
            self.id = id
            self.invocationRole = invocationRole
            self.event = event
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFunction = "CloudFunction"
            case id = "Id"
            case invocationRole = "InvocationRole"
            case event = "Event"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
        }
    }

    public struct GetBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the inventory configuration to retrieve.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct WebsiteConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure), 
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure)
        ]
        public let redirectAllRequestsTo: RedirectAllRequestsTo?
        public let errorDocument: ErrorDocument?
        public let routingRules: RoutingRules?
        public let indexDocument: IndexDocument?

        public init(redirectAllRequestsTo: RedirectAllRequestsTo? = nil, errorDocument: ErrorDocument? = nil, routingRules: RoutingRules? = nil, indexDocument: IndexDocument? = nil) {
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.errorDocument = errorDocument
            self.routingRules = routingRules
            self.indexDocument = indexDocument
        }

        private enum CodingKeys: String, CodingKey {
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
            case errorDocument = "ErrorDocument"
            case routingRules = "RoutingRules"
            case indexDocument = "IndexDocument"
        }
    }

    public struct LifecycleExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiredObjectDeleteMarker", required: false, type: .boolean), 
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public let expiredObjectDeleteMarker: Bool?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?

        public init(expiredObjectDeleteMarker: Bool? = nil, days: Int32? = nil, date: TimeStamp? = nil) {
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
            self.days = days
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
            case days = "Days"
            case date = "Date"
        }
    }

    public struct CommonPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        public let prefix: String?

        public init(prefix: String? = nil) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct PutBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "VersioningConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "VersioningConfiguration", location: .body(locationName: "VersioningConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let versioningConfiguration: VersioningConfiguration

        public init(contentMD5: String? = nil, bucket: String, mfa: String? = nil, versioningConfiguration: VersioningConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.mfa = mfa
            self.versioningConfiguration = versioningConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case mfa = "x-amz-mfa"
            case versioningConfiguration = "VersioningConfiguration"
        }
    }

    public struct GetBucketMetricsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsConfiguration", required: false, type: .structure)
        ]
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration?

        public init(metricsConfiguration: MetricsConfiguration? = nil) {
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public struct GetBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket from which an analytics configuration is retrieved.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum ObjectStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        public var description: String { return self.rawValue }
    }

    public struct ListObjectVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionIdMarker", location: .querystring(locationName: "version-id-marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string)
        ]
        /// Specifies the key to start with when listing objects in a bucket.
        public let keyMarker: String?
        public let bucket: String
        public let encodingType: EncodingType?
        /// Specifies the object version you want to start listing from.
        public let versionIdMarker: String?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?

        public init(keyMarker: String? = nil, bucket: String, encodingType: EncodingType? = nil, versionIdMarker: String? = nil, maxKeys: Int32? = nil, prefix: String? = nil, delimiter: String? = nil) {
            self.keyMarker = keyMarker
            self.bucket = bucket
            self.encodingType = encodingType
            self.versionIdMarker = versionIdMarker
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.delimiter = delimiter
        }

        private enum CodingKeys: String, CodingKey {
            case keyMarker = "key-marker"
            case bucket = "Bucket"
            case encodingType = "encoding-type"
            case versionIdMarker = "version-id-marker"
            case maxKeys = "max-keys"
            case prefix = "prefix"
            case delimiter = "delimiter"
        }
    }

    public struct IndexDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Suffix", required: true, type: .string)
        ]
        /// A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
        public let suffix: String

        public init(suffix: String) {
            self.suffix = suffix
        }

        private enum CodingKeys: String, CodingKey {
            case suffix = "Suffix"
        }
    }

    public struct ListPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxParts", location: .querystring(locationName: "max-parts"), required: false, type: .integer), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "PartNumberMarker", location: .querystring(locationName: "part-number-marker"), required: false, type: .integer)
        ]
        public let bucket: String
        /// Sets the maximum number of parts to return.
        public let maxParts: Int32?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String
        public let requestPayer: RequestPayer?
        public let key: String
        /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        public let partNumberMarker: Int32?

        public init(bucket: String, maxParts: Int32? = nil, uploadId: String, requestPayer: RequestPayer? = nil, key: String, partNumberMarker: Int32? = nil) {
            self.bucket = bucket
            self.maxParts = maxParts
            self.uploadId = uploadId
            self.requestPayer = requestPayer
            self.key = key
            self.partNumberMarker = partNumberMarker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxParts = "max-parts"
            case uploadId = "uploadId"
            case requestPayer = "x-amz-request-payer"
            case key = "Key"
            case partNumberMarker = "part-number-marker"
        }
    }

    public struct Buckets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .list)
        ]
        public let bucket: [Bucket]?

        public init(bucket: [Bucket]? = nil) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum InventoryFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case orc = "ORC"
        case parquet = "Parquet"
        public var description: String { return self.rawValue }
    }

    public struct ReplicationRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "And", required: false, type: .structure), 
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:    If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.   If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.  
        public let and: ReplicationRuleAndOperator?
        /// A container for specifying a tag key and value.  The rule applies only to objects that have the tag in their tag set.
        public let tag: Tag?
        /// An object keyname prefix that identifies the subset of objects to which the rule applies.
        public let prefix: String?

        public init(and: ReplicationRuleAndOperator? = nil, tag: Tag? = nil, prefix: String? = nil) {
            self.and = and
            self.tag = tag
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case and = "And"
            case tag = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct AnalyticsExportDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// A destination signifying output to an S3 bucket.
        public let s3BucketDestination: AnalyticsS3BucketDestination

        public init(s3BucketDestination: AnalyticsS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpErrorCodeReturnedEquals", required: false, type: .string), 
            AWSShapeMember(label: "KeyPrefixEquals", required: false, type: .string)
        ]
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public let httpErrorCodeReturnedEquals: String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        public let keyPrefixEquals: String?

        public init(httpErrorCodeReturnedEquals: String? = nil, keyPrefixEquals: String? = nil) {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }

        private enum CodingKeys: String, CodingKey {
            case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
            case keyPrefixEquals = "KeyPrefixEquals"
        }
    }

    public struct CORSRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExposeHeaders", location: .body(locationName: "ExposeHeader"), required: false, type: .list), 
            AWSShapeMember(label: "AllowedMethods", location: .body(locationName: "AllowedMethod"), required: true, type: .list), 
            AWSShapeMember(label: "MaxAgeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AllowedOrigins", location: .body(locationName: "AllowedOrigin"), required: true, type: .list), 
            AWSShapeMember(label: "AllowedHeaders", location: .body(locationName: "AllowedHeader"), required: false, type: .list)
        ]
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public let exposeHeaders: [String]?
        /// Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
        public let allowedMethods: [String]
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public let maxAgeSeconds: Int32?
        /// One or more origins you want customers to be able to access the bucket from.
        public let allowedOrigins: [String]
        /// Specifies which headers are allowed in a pre-flight OPTIONS request.
        public let allowedHeaders: [String]?

        public init(exposeHeaders: [String]? = nil, allowedMethods: [String], maxAgeSeconds: Int32? = nil, allowedOrigins: [String], allowedHeaders: [String]? = nil) {
            self.exposeHeaders = exposeHeaders
            self.allowedMethods = allowedMethods
            self.maxAgeSeconds = maxAgeSeconds
            self.allowedOrigins = allowedOrigins
            self.allowedHeaders = allowedHeaders
        }

        private enum CodingKeys: String, CodingKey {
            case exposeHeaders = "ExposeHeader"
            case allowedMethods = "AllowedMethod"
            case maxAgeSeconds = "MaxAgeSeconds"
            case allowedOrigins = "AllowedOrigin"
            case allowedHeaders = "AllowedHeader"
        }
    }

    public struct MultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Initiated", required: false, type: .timestamp)
        ]
        /// Key of the object for which the multipart upload was initiated.
        public let key: String?
        /// Upload ID that identifies the multipart upload.
        public let uploadId: String?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        public let owner: Owner?
        /// Date and time at which the multipart upload was initiated.
        public let initiated: TimeStamp?

        public init(key: String? = nil, uploadId: String? = nil, initiator: Initiator? = nil, storageClass: StorageClass? = nil, owner: Owner? = nil, initiated: TimeStamp? = nil) {
            self.key = key
            self.uploadId = uploadId
            self.initiator = initiator
            self.storageClass = storageClass
            self.owner = owner
            self.initiated = initiated
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case uploadId = "UploadId"
            case initiator = "Initiator"
            case storageClass = "StorageClass"
            case owner = "Owner"
            case initiated = "Initiated"
        }
    }

    public struct Progress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesReturned", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long), 
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long)
        ]
        /// The current number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// The current number of object bytes scanned.
        public let bytesScanned: Int64?
        /// The current number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?

        public init(bytesReturned: Int64? = nil, bytesScanned: Int64? = nil, bytesProcessed: Int64? = nil) {
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
            self.bytesProcessed = bytesProcessed
        }

        private enum CodingKeys: String, CodingKey {
            case bytesReturned = "BytesReturned"
            case bytesScanned = "BytesScanned"
            case bytesProcessed = "BytesProcessed"
        }
    }

    public struct PutObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let requestCharged: RequestCharged?
        /// Version of the object.
        public let versionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?

        public init(expiration: String? = nil, sSECustomerKeyMD5: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: RequestCharged? = nil, versionId: String? = nil, sSEKMSKeyId: String? = nil) {
            self.expiration = expiration
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.serverSideEncryption = serverSideEncryption
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.versionId = versionId
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case eTag = "ETag"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestCharged = "x-amz-request-charged"
            case versionId = "x-amz-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public struct MetricsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
        public let filter: MetricsFilter?

        public init(id: String, filter: MetricsFilter? = nil) {
            self.id = id
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
        }
    }

    public struct CopyPartResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        /// Entity tag of the object.
        public let eTag: String?
        /// Date and time at which the object was uploaded.
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct GetObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// A list of grants.
        public let grants: Grants?
        public let requestCharged: RequestCharged?
        public let owner: Owner?

        public init(grants: Grants? = nil, requestCharged: RequestCharged? = nil, owner: Owner? = nil) {
            self.grants = grants
            self.requestCharged = requestCharged
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "AccessControlList"
            case requestCharged = "x-amz-request-charged"
            case owner = "Owner"
        }
    }

    public struct GetBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct NotificationConfigurationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "S3Key"), required: false, type: .structure)
        ]
        public let key: S3KeyFilter?

        public init(key: S3KeyFilter? = nil) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "S3Key"
        }
    }

    public struct ErrorDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The object key name to use when a 4XX class error occurs.
        public let key: String

        public init(key: String) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct RestoreObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RestoreOutputPath", location: .header(locationName: "x-amz-restore-output-path"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        /// Indicates the path in the provided S3 output location where Select results will be restored to.
        public let restoreOutputPath: String?
        public let requestCharged: RequestCharged?

        public init(restoreOutputPath: String? = nil, requestCharged: RequestCharged? = nil) {
            self.restoreOutputPath = restoreOutputPath
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case restoreOutputPath = "x-amz-restore-output-path"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct CompleteMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Location", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", required: false, type: .string)
        ]
        /// Entity tag of the object.
        public let eTag: String?
        public let key: String?
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        public let requestCharged: RequestCharged?
        public let location: String?
        /// Version of the object.
        public let versionId: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        public let bucket: String?

        public init(eTag: String? = nil, key: String? = nil, expiration: String? = nil, requestCharged: RequestCharged? = nil, location: String? = nil, versionId: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, sSEKMSKeyId: String? = nil, bucket: String? = nil) {
            self.eTag = eTag
            self.key = key
            self.expiration = expiration
            self.requestCharged = requestCharged
            self.location = location
            self.versionId = versionId
            self.serverSideEncryption = serverSideEncryption
            self.sSEKMSKeyId = sSEKMSKeyId
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case key = "Key"
            case expiration = "x-amz-expiration"
            case requestCharged = "x-amz-request-charged"
            case location = "Location"
            case versionId = "x-amz-version-id"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case bucket = "Bucket"
        }
    }

    public enum Tier: String, CustomStringConvertible, Codable {
        case standard = "Standard"
        case bulk = "Bulk"
        case expedited = "Expedited"
        public var description: String { return self.rawValue }
    }

    public struct InventoryDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        public let s3BucketDestination: InventoryS3BucketDestination

        public init(s3BucketDestination: InventoryS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public struct GetBucketAnalyticsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure)
        ]
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration?

        public init(analyticsConfiguration: AnalyticsConfiguration? = nil) {
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct ProgressEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Progress event details.
        public let details: Progress?

        public init(details: Progress? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct JSONInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The type of JSON. Valid values: Document, Lines.
        public let `type`: JSONType?

        public init(type: JSONType? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct GetBucketPolicyStatusOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PolicyStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyStatus", required: false, type: .structure)
        ]
        /// The policy status for the specified bucket.
        public let policyStatus: PolicyStatus?

        public init(policyStatus: PolicyStatus? = nil) {
            self.policyStatus = policyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case policyStatus = "PolicyStatus"
        }
    }

    public struct ListMultipartUploadsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "MaxUploads", location: .querystring(locationName: "max-uploads"), required: false, type: .integer), 
            AWSShapeMember(label: "UploadIdMarker", location: .querystring(locationName: "upload-id-marker"), required: false, type: .string)
        ]
        /// Character you use to group keys.
        public let delimiter: String?
        /// Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
        public let keyMarker: String?
        public let bucket: String
        public let encodingType: EncodingType?
        /// Lists in-progress uploads only for those keys that begin with the specified prefix.
        public let prefix: String?
        /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
        public let maxUploads: Int32?
        /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
        public let uploadIdMarker: String?

        public init(delimiter: String? = nil, keyMarker: String? = nil, bucket: String, encodingType: EncodingType? = nil, prefix: String? = nil, maxUploads: Int32? = nil, uploadIdMarker: String? = nil) {
            self.delimiter = delimiter
            self.keyMarker = keyMarker
            self.bucket = bucket
            self.encodingType = encodingType
            self.prefix = prefix
            self.maxUploads = maxUploads
            self.uploadIdMarker = uploadIdMarker
        }

        private enum CodingKeys: String, CodingKey {
            case delimiter = "delimiter"
            case keyMarker = "key-marker"
            case bucket = "Bucket"
            case encodingType = "encoding-type"
            case prefix = "prefix"
            case maxUploads = "max-uploads"
            case uploadIdMarker = "upload-id-marker"
        }
    }

    public struct PutBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ConfirmRemoveSelfBucketAccess", location: .header(locationName: "x-amz-confirm-remove-self-bucket-access"), required: false, type: .boolean), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Policy", required: true, type: .string)
        ]
        public let bucket: String
        /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future.
        public let confirmRemoveSelfBucketAccess: Bool?
        public let contentMD5: String?
        /// The bucket policy as a JSON document.
        public let policy: String

        public init(bucket: String, confirmRemoveSelfBucketAccess: Bool? = nil, contentMD5: String? = nil, policy: String) {
            self.bucket = bucket
            self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
            self.contentMD5 = contentMD5
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case confirmRemoveSelfBucketAccess = "x-amz-confirm-remove-self-bucket-access"
            case contentMD5 = "Content-MD5"
            case policy = "Policy"
        }
    }

    public struct VersioningConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADelete?
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?

        public init(mFADelete: MFADelete? = nil, status: BucketVersioningStatus? = nil) {
            self.mFADelete = mFADelete
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case mFADelete = "MfaDelete"
            case status = "Status"
        }
    }

    public struct PolicyStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsPublic", location: .body(locationName: "IsPublic"), required: false, type: .boolean)
        ]
        /// The policy status for this bucket. TRUE indicates that this bucket is public. FALSE indicates that the bucket is not public.
        public let isPublic: Bool?

        public init(isPublic: Bool? = nil) {
            self.isPublic = isPublic
        }

        private enum CodingKeys: String, CodingKey {
            case isPublic = "IsPublic"
        }
    }

    public struct PutBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum)
        ]
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        public let accessControlPolicy: AccessControlPolicy?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let contentMD5: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        public let bucket: String
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?

        public init(grantWrite: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantReadACP: String? = nil, contentMD5: String? = nil, grantWriteACP: String? = nil, grantFullControl: String? = nil, bucket: String, grantRead: String? = nil, acl: BucketCannedACL? = nil) {
            self.grantWrite = grantWrite
            self.accessControlPolicy = accessControlPolicy
            self.grantReadACP = grantReadACP
            self.contentMD5 = contentMD5
            self.grantWriteACP = grantWriteACP
            self.grantFullControl = grantFullControl
            self.bucket = bucket
            self.grantRead = grantRead
            self.acl = acl
        }

        private enum CodingKeys: String, CodingKey {
            case grantWrite = "x-amz-grant-write"
            case accessControlPolicy = "AccessControlPolicy"
            case grantReadACP = "x-amz-grant-read-acp"
            case contentMD5 = "Content-MD5"
            case grantWriteACP = "x-amz-grant-write-acp"
            case grantFullControl = "x-amz-grant-full-control"
            case bucket = "Bucket"
            case grantRead = "x-amz-grant-read"
            case acl = "x-amz-acl"
        }
    }

    public struct AnalyticsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        /// The prefix to use when evaluating an AND predicate.
        public let prefix: String?
        /// The list of tags to use when evaluating an AND predicate.
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public struct Part: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumber", required: false, type: .integer), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "ETag", required: false, type: .string)
        ]
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?
        /// Date and time at which the part was uploaded.
        public let lastModified: TimeStamp?
        /// Size in bytes of the uploaded part data.
        public let size: Int32?
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?

        public init(partNumber: Int32? = nil, lastModified: TimeStamp? = nil, size: Int32? = nil, eTag: String? = nil) {
            self.partNumber = partNumber
            self.lastModified = lastModified
            self.size = size
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case partNumber = "PartNumber"
            case lastModified = "LastModified"
            case size = "Size"
            case eTag = "ETag"
        }
    }

    public struct PutBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let notificationConfiguration: NotificationConfiguration

        public init(bucket: String, notificationConfiguration: NotificationConfiguration) {
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case notificationConfiguration = "NotificationConfiguration"
        }
    }

    public struct ParquetInput: AWSShape {

    }

    public struct RoutingRules: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRule", required: false, type: .list)
        ]
        public let routingRule: [RoutingRule]?

        public init(routingRule: [RoutingRule]? = nil) {
            self.routingRule = routingRule
        }

        private enum CodingKeys: String, CodingKey {
            case routingRule = "RoutingRule"
        }
    }

    public struct GetPublicAccessBlockOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicAccessBlockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicAccessBlockConfiguration", required: false, type: .structure)
        ]
        /// The PublicAccessBlock configuration currently in effect for this Amazon S3 bucket.
        public let publicAccessBlockConfiguration: PublicAccessBlockConfiguration?

        public init(publicAccessBlockConfiguration: PublicAccessBlockConfiguration? = nil) {
            self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        }
    }

    public struct FilterRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .enum)
        ]
        public let value: String?
        /// The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum prefix length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide.
        public let name: FilterRuleName?

        public init(value: String? = nil, name: FilterRuleName? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public enum BucketCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct AbortIncompleteMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DaysAfterInitiation", required: false, type: .integer)
        ]
        /// Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
        public let daysAfterInitiation: Int32?

        public init(daysAfterInitiation: Int32? = nil) {
            self.daysAfterInitiation = daysAfterInitiation
        }

        private enum CodingKeys: String, CodingKey {
            case daysAfterInitiation = "DaysAfterInitiation"
        }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case gzip = "GZIP"
        case bzip2 = "BZIP2"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RequestPaymentConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPaymentConfiguration", location: .body(locationName: "RequestPaymentConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let contentMD5: String?
        public let requestPaymentConfiguration: RequestPaymentConfiguration
        public let bucket: String

        public init(contentMD5: String? = nil, requestPaymentConfiguration: RequestPaymentConfiguration, bucket: String) {
            self.contentMD5 = contentMD5
            self.requestPaymentConfiguration = requestPaymentConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case requestPaymentConfiguration = "RequestPaymentConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct GetBucketEncryptionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", required: false, type: .structure)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public struct RedirectAllRequestsTo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostName", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// Name of the host where requests will be redirected.
        public let hostName: String
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?

        public init(hostName: String, protocol: Protocol? = nil) {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case hostName = "HostName"
            case `protocol` = "Protocol"
        }
    }

    public struct ListObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        public let maxKeys: Int32?
        public let commonPrefixes: [CommonPrefix]?
        /// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
        public let nextMarker: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let contents: [Object]?
        public let prefix: String?
        public let marker: String?
        public let delimiter: String?
        public let name: String?

        public init(isTruncated: Bool? = nil, maxKeys: Int32? = nil, commonPrefixes: [CommonPrefix]? = nil, nextMarker: String? = nil, encodingType: EncodingType? = nil, contents: [Object]? = nil, prefix: String? = nil, marker: String? = nil, delimiter: String? = nil, name: String? = nil) {
            self.isTruncated = isTruncated
            self.maxKeys = maxKeys
            self.commonPrefixes = commonPrefixes
            self.nextMarker = nextMarker
            self.encodingType = encodingType
            self.contents = contents
            self.prefix = prefix
            self.marker = marker
            self.delimiter = delimiter
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case maxKeys = "MaxKeys"
            case commonPrefixes = "CommonPrefixes"
            case nextMarker = "NextMarker"
            case encodingType = "EncodingType"
            case contents = "Contents"
            case prefix = "Prefix"
            case marker = "Marker"
            case delimiter = "Delimiter"
            case name = "Name"
        }
    }

    public struct DeleteBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        ///  The bucket name.   It can take a while to propagate the deletion of a replication configuration to all Amazon S3 systems. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CSVOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QuoteFields", required: false, type: .enum), 
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string), 
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string)
        ]
        /// Indicates whether or not all output fields should be quoted.
        public let quoteFields: QuoteFields?
        /// Th single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// The value used to separate individual records.
        public let recordDelimiter: String?
        /// The value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// The value used to separate individual fields in a record.
        public let fieldDelimiter: String?

        public init(quoteFields: QuoteFields? = nil, quoteEscapeCharacter: String? = nil, recordDelimiter: String? = nil, quoteCharacter: String? = nil, fieldDelimiter: String? = nil) {
            self.quoteFields = quoteFields
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.recordDelimiter = recordDelimiter
            self.quoteCharacter = quoteCharacter
            self.fieldDelimiter = fieldDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case quoteFields = "QuoteFields"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case recordDelimiter = "RecordDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case fieldDelimiter = "FieldDelimiter"
        }
    }

    public struct DeletedObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteMarkerVersionId", required: false, type: .string)
        ]
        public let key: String?
        public let versionId: String?
        public let deleteMarker: Bool?
        public let deleteMarkerVersionId: String?

        public init(key: String? = nil, versionId: String? = nil, deleteMarker: Bool? = nil, deleteMarkerVersionId: String? = nil) {
            self.key = key
            self.versionId = versionId
            self.deleteMarker = deleteMarker
            self.deleteMarkerVersionId = deleteMarkerVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case versionId = "VersionId"
            case deleteMarker = "DeleteMarker"
            case deleteMarkerVersionId = "DeleteMarkerVersionId"
        }
    }

    public struct TopicConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "TopicArn", location: .body(locationName: "Topic"), required: true, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        public let events: [Event]
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 will publish a message when it detects events of the specified type.
        public let topicArn: String
        public let id: String?
        public let filter: NotificationConfigurationFilter?

        public init(events: [Event], topicArn: String, id: String? = nil, filter: NotificationConfigurationFilter? = nil) {
            self.events = events
            self.topicArn = topicArn
            self.id = id
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case topicArn = "Topic"
            case id = "Id"
            case filter = "Filter"
        }
    }

    public enum TransitionStorageClass: String, CustomStringConvertible, Codable {
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        public var description: String { return self.rawValue }
    }

    public enum BucketVersioningStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct JSONOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string)
        ]
        /// The value used to separate individual records in the output.
        public let recordDelimiter: String?

        public init(recordDelimiter: String? = nil) {
            self.recordDelimiter = recordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
        }
    }

    public struct SSES3: AWSShape {

    }

    public struct NoncurrentVersionExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?

        public init(noncurrentDays: Int32? = nil) {
            self.noncurrentDays = noncurrentDays
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
        }
    }

    public struct GetBucketVersioningRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Delete: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Quiet", required: false, type: .boolean), 
            AWSShapeMember(label: "Objects", location: .body(locationName: "Object"), required: true, type: .list)
        ]
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public let quiet: Bool?
        public let objects: [ObjectIdentifier]

        public init(quiet: Bool? = nil, objects: [ObjectIdentifier]) {
            self.quiet = quiet
            self.objects = objects
        }

        private enum CodingKeys: String, CodingKey {
            case quiet = "Quiet"
            case objects = "Object"
        }
    }

    public struct Grantee: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "URI", required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "xsi:type"), required: true, type: .enum)
        ]
        /// Email address of the grantee.
        public let emailAddress: String?
        /// Screen name of the grantee.
        public let displayName: String?
        /// The canonical user ID of the grantee.
        public let id: String?
        /// URI of the grantee group.
        public let uri: String?
        /// Type of grantee
        public let `type`: `Type`

        public init(emailAddress: String? = nil, displayName: String? = nil, id: String? = nil, uri: String? = nil, type: `Type`) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.id = id
            self.uri = uri
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
            case displayName = "DisplayName"
            case id = "ID"
            case uri = "URI"
            case `type` = "xsi:type"
        }
    }

    public struct GetBucketPolicyStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the Amazon S3 bucket whose policy status you want to retrieve.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum JSONType: String, CustomStringConvertible, Codable {
        case document = "DOCUMENT"
        case lines = "LINES"
        public var description: String { return self.rawValue }
    }

    public struct ListPartsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "NextPartNumberMarker", required: false, type: .integer), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxParts", required: false, type: .integer), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "PartNumberMarker", required: false, type: .integer), 
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list)
        ]
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
        public let nextPartNumberMarker: Int32?
        public let owner: Owner?
        /// Indicates whether the returned list of parts is truncated.
        public let isTruncated: Bool?
        /// Maximum number of parts that were allowed in the response.
        public let maxParts: Int32?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String?
        public let requestCharged: RequestCharged?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Part number after which listing begins.
        public let partNumberMarker: Int32?
        public let parts: [Part]?

        public init(initiator: Initiator? = nil, abortDate: TimeStamp? = nil, key: String? = nil, storageClass: StorageClass? = nil, nextPartNumberMarker: Int32? = nil, owner: Owner? = nil, isTruncated: Bool? = nil, maxParts: Int32? = nil, uploadId: String? = nil, requestCharged: RequestCharged? = nil, abortRuleId: String? = nil, bucket: String? = nil, partNumberMarker: Int32? = nil, parts: [Part]? = nil) {
            self.initiator = initiator
            self.abortDate = abortDate
            self.key = key
            self.storageClass = storageClass
            self.nextPartNumberMarker = nextPartNumberMarker
            self.owner = owner
            self.isTruncated = isTruncated
            self.maxParts = maxParts
            self.uploadId = uploadId
            self.requestCharged = requestCharged
            self.abortRuleId = abortRuleId
            self.bucket = bucket
            self.partNumberMarker = partNumberMarker
            self.parts = parts
        }

        private enum CodingKeys: String, CodingKey {
            case initiator = "Initiator"
            case abortDate = "x-amz-abort-date"
            case key = "Key"
            case storageClass = "StorageClass"
            case nextPartNumberMarker = "NextPartNumberMarker"
            case owner = "Owner"
            case isTruncated = "IsTruncated"
            case maxParts = "MaxParts"
            case uploadId = "UploadId"
            case requestCharged = "x-amz-request-charged"
            case abortRuleId = "x-amz-abort-rule-id"
            case bucket = "Bucket"
            case partNumberMarker = "PartNumberMarker"
            case parts = "Part"
        }
    }

    public enum TaggingDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let lifecycleConfiguration: BucketLifecycleConfiguration?
        public let bucket: String

        public init(lifecycleConfiguration: BucketLifecycleConfiguration? = nil, bucket: String) {
            self.lifecycleConfiguration = lifecycleConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleConfiguration = "LifecycleConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct DeletePublicAccessBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The Amazon S3 bucket whose PublicAccessBlock configuration you want to delete. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListBucketAnalyticsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ContinuationToken that represents a placeholder from where this request should begin.
        public let continuationToken: String?
        /// The name of the bucket from which analytics configurations are retrieved.
        public let bucket: String

        public init(continuationToken: String? = nil, bucket: String) {
            self.continuationToken = continuationToken
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "continuation-token"
            case bucket = "Bucket"
        }
    }

    public enum BucketAccelerateStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutObjectLockConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct GetBucketAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(owner: Owner? = nil, grants: Grants? = nil) {
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessControlList", required: false, type: .structure), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "UserMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "Tagging", required: false, type: .structure), 
            AWSShapeMember(label: "CannedACL", required: false, type: .enum), 
            AWSShapeMember(label: "BucketName", required: true, type: .string)
        ]
        /// A list of grants that control access to the staged results.
        public let accessControlList: Grants?
        /// The class of storage used to store the restore results.
        public let storageClass: StorageClass?
        /// A list of metadata to store with the restore results in S3.
        public let userMetadata: UserMetadata?
        public let encryption: Encryption?
        /// The prefix that is prepended to the restore results for this request.
        public let prefix: String
        /// The tag-set that is applied to the restore results.
        public let tagging: Tagging?
        /// The canned ACL to apply to the restore results.
        public let cannedACL: ObjectCannedACL?
        /// The name of the bucket where the restore results will be placed.
        public let bucketName: String

        public init(accessControlList: Grants? = nil, storageClass: StorageClass? = nil, userMetadata: UserMetadata? = nil, encryption: Encryption? = nil, prefix: String, tagging: Tagging? = nil, cannedACL: ObjectCannedACL? = nil, bucketName: String) {
            self.accessControlList = accessControlList
            self.storageClass = storageClass
            self.userMetadata = userMetadata
            self.encryption = encryption
            self.prefix = prefix
            self.tagging = tagging
            self.cannedACL = cannedACL
            self.bucketName = bucketName
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlList = "AccessControlList"
            case storageClass = "StorageClass"
            case userMetadata = "UserMetadata"
            case encryption = "Encryption"
            case prefix = "Prefix"
            case tagging = "Tagging"
            case cannedACL = "CannedACL"
            case bucketName = "BucketName"
        }
    }

    public struct StorageClassAnalysisDataExport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputSchemaVersion", required: true, type: .enum), 
            AWSShapeMember(label: "Destination", required: true, type: .structure)
        ]
        /// The version of the output schema to use when exporting data. Must be V_1.
        public let outputSchemaVersion: StorageClassAnalysisSchemaVersion
        /// The place to store the data for an analysis.
        public let destination: AnalyticsExportDestination

        public init(outputSchemaVersion: StorageClassAnalysisSchemaVersion, destination: AnalyticsExportDestination) {
            self.outputSchemaVersion = outputSchemaVersion
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case outputSchemaVersion = "OutputSchemaVersion"
            case destination = "Destination"
        }
    }

    public enum ObjectLockEnabled: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct DeleteMarkerReplication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The status of the delete marker replication.   In the current implementation, Amazon S3 doesn't replicate the delete markers. The status must be Disabled.  
        public let status: DeleteMarkerReplicationStatus?

        public init(status: DeleteMarkerReplicationStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct PutPublicAccessBlockRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicAccessBlockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "PublicAccessBlockConfiguration", location: .body(locationName: "PublicAccessBlockConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The MD5 hash of the PutPublicAccessBlock request body. 
        public let contentMD5: String?
        /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see The Meaning of "Public" in the Amazon Simple Storage Service Developer Guide.
        public let publicAccessBlockConfiguration: PublicAccessBlockConfiguration
        /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to set.
        public let bucket: String

        public init(contentMD5: String? = nil, publicAccessBlockConfiguration: PublicAccessBlockConfiguration, bucket: String) {
            self.contentMD5 = contentMD5
            self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct PutObjectRetentionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Retention"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Retention", location: .body(locationName: "Retention"), required: false, type: .structure)
        ]
        /// The MD5 hash for the request body.
        public let contentMD5: String?
        /// The key name for the object that you want to apply this Object Retention configuration to.
        public let key: String
        /// Indicates whether this operation should bypass Governance-mode restrictions.j
        public let bypassGovernanceRetention: Bool?
        /// The bucket that contains the object you want to apply this Object Retention configuration to.
        public let bucket: String
        public let requestPayer: RequestPayer?
        /// The version ID for the object that you want to apply this Object Retention configuration to.
        public let versionId: String?
        /// The container element for the Object Retention configuration.
        public let retention: ObjectLockRetention?

        public init(contentMD5: String? = nil, key: String, bypassGovernanceRetention: Bool? = nil, bucket: String, requestPayer: RequestPayer? = nil, versionId: String? = nil, retention: ObjectLockRetention? = nil) {
            self.contentMD5 = contentMD5
            self.key = key
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.bucket = bucket
            self.requestPayer = requestPayer
            self.versionId = versionId
            self.retention = retention
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case key = "Key"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
            case retention = "Retention"
        }
    }

    public struct ListBucketsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Buckets", required: false, type: .structure)
        ]
        public let owner: Owner?
        public let buckets: Buckets?

        public init(owner: Owner? = nil, buckets: Buckets? = nil) {
            self.owner = owner
            self.buckets = buckets
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case buckets = "Buckets"
        }
    }

    public struct CreateBucketConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        /// Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct GetBucketLocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct OutputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSON", required: false, type: .structure), 
            AWSShapeMember(label: "CSV", required: false, type: .structure)
        ]
        /// Specifies JSON as request's output serialization format.
        public let json: JSONOutput?
        /// Describes the serialization of CSV-encoded Select results.
        public let csv: CSVOutput?

        public init(json: JSONOutput? = nil, csv: CSVOutput? = nil) {
            self.json = json
            self.csv = csv
        }

        private enum CodingKeys: String, CodingKey {
            case json = "JSON"
            case csv = "CSV"
        }
    }

    public struct GetBucketReplicationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationConfiguration", required: false, type: .structure)
        ]
        public let replicationConfiguration: ReplicationConfiguration?

        public init(replicationConfiguration: ReplicationConfiguration? = nil) {
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct GetBucketNotificationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket to get the notification configuration for.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutObjectLegalHoldRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LegalHold"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LegalHold", location: .body(locationName: "LegalHold"), required: false, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// Container element for the Legal Hold configuration you want to apply to the specified object.
        public let legalHold: ObjectLockLegalHold?
        /// The bucket containing the object that you want to place a Legal Hold on.
        public let bucket: String
        public let requestPayer: RequestPayer?
        /// The key name for the object that you want to place a Legal Hold on.
        public let key: String
        /// The MD5 hash for the request body.
        public let contentMD5: String?
        /// The version ID of the object that you want to place a Legal Hold on.
        public let versionId: String?

        public init(legalHold: ObjectLockLegalHold? = nil, bucket: String, requestPayer: RequestPayer? = nil, key: String, contentMD5: String? = nil, versionId: String? = nil) {
            self.legalHold = legalHold
            self.bucket = bucket
            self.requestPayer = requestPayer
            self.key = key
            self.contentMD5 = contentMD5
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case legalHold = "LegalHold"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
            case key = "Key"
            case contentMD5 = "Content-MD5"
            case versionId = "versionId"
        }
    }

    public struct DeleteObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// The versionId of the object the tag-set was removed from.
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public struct AnalyticsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure), 
            AWSShapeMember(label: "Tag", required: false, type: .structure)
        ]
        /// The prefix to use when evaluating an analytics filter.
        public let prefix: String?
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        public let and: AnalyticsAndOperator?
        /// The tag to use when evaluating an analytics filter.
        public let tag: Tag?

        public init(prefix: String? = nil, and: AnalyticsAndOperator? = nil, tag: Tag? = nil) {
            self.prefix = prefix
            self.and = and
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case and = "And"
            case tag = "Tag"
        }
    }

    public struct DeleteObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Delete"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Delete", location: .body(locationName: "Delete"), required: true, type: .structure), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string)
        ]
        public let requestPayer: RequestPayer?
        /// Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. You must have sufficient permissions to perform this operation.
        public let bypassGovernanceRetention: Bool?
        public let bucket: String
        public let delete: Delete
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?

        public init(requestPayer: RequestPayer? = nil, bypassGovernanceRetention: Bool? = nil, bucket: String, delete: Delete, mfa: String? = nil) {
            self.requestPayer = requestPayer
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.bucket = bucket
            self.delete = delete
            self.mfa = mfa
        }

        private enum CodingKeys: String, CodingKey {
            case requestPayer = "x-amz-request-payer"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case bucket = "Bucket"
            case delete = "Delete"
            case mfa = "x-amz-mfa"
        }
    }

    public enum SseKmsEncryptedObjectsStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let lifecycleConfiguration: LifecycleConfiguration?
        public let contentMD5: String?

        public init(bucket: String, lifecycleConfiguration: LifecycleConfiguration? = nil, contentMD5: String? = nil) {
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case lifecycleConfiguration = "LifecycleConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct GetBucketLifecycleConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [LifecycleRule]?

        public init(rules: [LifecycleRule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct HeadObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string)
        ]
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Version of the object.
        public let versionId: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        public let requestCharged: RequestCharged?
        public let replicationStatus: ReplicationStatus?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// The Legal Hold status for the specified object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        public let acceptRanges: String?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        /// The date and time when this object's Object Lock will expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// The count of parts this object has.
        public let partsCount: Int32?
        public let storageClass: StorageClass?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// The Object Lock mode currently in place for this object.
        public let objectLockMode: ObjectLockMode?
        /// The language the content is in.
        public let contentLanguage: String?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?

        public init(serverSideEncryption: ServerSideEncryption? = nil, versionId: String? = nil, expires: TimeStamp? = nil, requestCharged: RequestCharged? = nil, replicationStatus: ReplicationStatus? = nil, expiration: String? = nil, restore: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, acceptRanges: String? = nil, deleteMarker: Bool? = nil, objectLockRetainUntilDate: TimeStamp? = nil, partsCount: Int32? = nil, storageClass: StorageClass? = nil, lastModified: TimeStamp? = nil, contentLength: Int64? = nil, sSECustomerKeyMD5: String? = nil, websiteRedirectLocation: String? = nil, sSEKMSKeyId: String? = nil, contentDisposition: String? = nil, metadata: [String: String]? = nil, contentType: String? = nil, cacheControl: String? = nil, sSECustomerAlgorithm: String? = nil, objectLockMode: ObjectLockMode? = nil, contentLanguage: String? = nil, missingMeta: Int32? = nil, eTag: String? = nil, contentEncoding: String? = nil) {
            self.serverSideEncryption = serverSideEncryption
            self.versionId = versionId
            self.expires = expires
            self.requestCharged = requestCharged
            self.replicationStatus = replicationStatus
            self.expiration = expiration
            self.restore = restore
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.acceptRanges = acceptRanges
            self.deleteMarker = deleteMarker
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.partsCount = partsCount
            self.storageClass = storageClass
            self.lastModified = lastModified
            self.contentLength = contentLength
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentDisposition = contentDisposition
            self.metadata = metadata
            self.contentType = contentType
            self.cacheControl = cacheControl
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.objectLockMode = objectLockMode
            self.contentLanguage = contentLanguage
            self.missingMeta = missingMeta
            self.eTag = eTag
            self.contentEncoding = contentEncoding
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryption = "x-amz-server-side-encryption"
            case versionId = "x-amz-version-id"
            case expires = "Expires"
            case requestCharged = "x-amz-request-charged"
            case replicationStatus = "x-amz-replication-status"
            case expiration = "x-amz-expiration"
            case restore = "x-amz-restore"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case acceptRanges = "accept-ranges"
            case deleteMarker = "x-amz-delete-marker"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case partsCount = "x-amz-mp-parts-count"
            case storageClass = "x-amz-storage-class"
            case lastModified = "Last-Modified"
            case contentLength = "Content-Length"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentDisposition = "Content-Disposition"
            case metadata = "Metadata"
            case contentType = "Content-Type"
            case cacheControl = "Cache-Control"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case objectLockMode = "x-amz-object-lock-mode"
            case contentLanguage = "Content-Language"
            case missingMeta = "x-amz-missing-meta"
            case eTag = "ETag"
            case contentEncoding = "Content-Encoding"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// Name of the tag.
        public let key: String
        /// Value of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct GetBucketRequestPaymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetObjectLegalHoldRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// The bucket containing the object whose Legal Hold status you want to retrieve.
        public let bucket: String
        /// The version ID of the object whose Legal Hold status you want to retrieve.
        public let versionId: String?
        /// The key name for the object whose Legal Hold status you want to retrieve.
        public let key: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, versionId: String? = nil, key: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case versionId = "versionId"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct ListBucketMetricsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the metrics configurations to retrieve.
        public let bucket: String
        /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct RequestPaymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: true, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer

        public init(payer: Payer) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case http = "http"
        case https = "https"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectLockConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ObjectLockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockConfiguration", required: false, type: .structure)
        ]
        /// The specified bucket's Object Lock configuration.
        public let objectLockConfiguration: ObjectLockConfiguration?

        public init(objectLockConfiguration: ObjectLockConfiguration? = nil) {
            self.objectLockConfiguration = objectLockConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockConfiguration = "ObjectLockConfiguration"
        }
    }

    public struct CompletedMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list)
        ]
        public let parts: [CompletedPart]?

        public init(parts: [CompletedPart]? = nil) {
            self.parts = parts
        }

        private enum CodingKeys: String, CodingKey {
            case parts = "Part"
        }
    }

    public struct GetBucketTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public enum InventoryIncludedObjectVersions: String, CustomStringConvertible, Codable {
        case all = "All"
        case current = "Current"
        public var description: String { return self.rawValue }
    }

    public enum ObjectLockMode: String, CustomStringConvertible, Codable {
        case governance = "GOVERNANCE"
        case compliance = "COMPLIANCE"
        public var description: String { return self.rawValue }
    }

    public enum QuoteFields: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case asneeded = "ASNEEDED"
        public var description: String { return self.rawValue }
    }

    public struct RecordsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payload", required: false, type: .blob)
        ]
        /// The byte array of partial, one or more result records.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "Payload"
        }
    }

    public struct ListObjectsV2Request: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "FetchOwner", location: .querystring(locationName: "fetch-owner"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "StartAfter", location: .querystring(locationName: "start-after"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string)
        ]
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Name of the bucket to list.
        public let bucket: String
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
        public let fetchOwner: Bool?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?

        public init(continuationToken: String? = nil, bucket: String, encodingType: EncodingType? = nil, fetchOwner: Bool? = nil, maxKeys: Int32? = nil, startAfter: String? = nil, prefix: String? = nil, requestPayer: RequestPayer? = nil, delimiter: String? = nil) {
            self.continuationToken = continuationToken
            self.bucket = bucket
            self.encodingType = encodingType
            self.fetchOwner = fetchOwner
            self.maxKeys = maxKeys
            self.startAfter = startAfter
            self.prefix = prefix
            self.requestPayer = requestPayer
            self.delimiter = delimiter
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "continuation-token"
            case bucket = "Bucket"
            case encodingType = "encoding-type"
            case fetchOwner = "fetch-owner"
            case maxKeys = "max-keys"
            case startAfter = "start-after"
            case prefix = "prefix"
            case requestPayer = "x-amz-request-payer"
            case delimiter = "delimiter"
        }
    }

    public enum ObjectLockLegalHoldStatus: String, CustomStringConvertible, Codable {
        case on = "ON"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public enum StorageClassAnalysisSchemaVersion: String, CustomStringConvertible, Codable {
        case v1 = "V_1"
        public var description: String { return self.rawValue }
    }

    public struct QueueConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueueArn", location: .body(locationName: "Queue"), required: true, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 will publish a message when it detects events of the specified type.
        public let queueArn: String
        public let id: String?
        public let filter: NotificationConfigurationFilter?
        public let events: [Event]

        public init(queueArn: String, id: String? = nil, filter: NotificationConfigurationFilter? = nil, events: [Event]) {
            self.queueArn = queueArn
            self.id = id
            self.filter = filter
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case queueArn = "Queue"
            case id = "Id"
            case filter = "Filter"
            case events = "Event"
        }
    }

    public enum ServerSideEncryption: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case awsKms = "aws:kms"
        public var description: String { return self.rawValue }
    }

    public struct AnalyticsS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "BucketAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum)
        ]
        /// The Amazon resource name (ARN) of the bucket to which data is exported.
        public let bucket: String
        /// The prefix to use when exporting data. The exported data begins with this prefix.
        public let prefix: String?
        /// The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
        public let bucketAccountId: String?
        /// The file format used when exporting data to Amazon S3.
        public let format: AnalyticsS3ExportFileFormat

        public init(bucket: String, prefix: String? = nil, bucketAccountId: String? = nil, format: AnalyticsS3ExportFileFormat) {
            self.bucket = bucket
            self.prefix = prefix
            self.bucketAccountId = bucketAccountId
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case prefix = "Prefix"
            case bucketAccountId = "BucketAccountId"
            case format = "Format"
        }
    }

    public struct DeleteBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The name of the bucket from which an analytics configuration is deleted.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public enum AnalyticsS3ExportFileFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct NotificationConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "QueueConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudFunctionConfiguration", required: false, type: .structure)
        ]
        public let topicConfiguration: TopicConfigurationDeprecated?
        public let queueConfiguration: QueueConfigurationDeprecated?
        public let cloudFunctionConfiguration: CloudFunctionConfiguration?

        public init(topicConfiguration: TopicConfigurationDeprecated? = nil, queueConfiguration: QueueConfigurationDeprecated? = nil, cloudFunctionConfiguration: CloudFunctionConfiguration? = nil) {
            self.topicConfiguration = topicConfiguration
            self.queueConfiguration = queueConfiguration
            self.cloudFunctionConfiguration = cloudFunctionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case topicConfiguration = "TopicConfiguration"
            case queueConfiguration = "QueueConfiguration"
            case cloudFunctionConfiguration = "CloudFunctionConfiguration"
        }
    }

    public struct ObjectLockRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultRetention", required: false, type: .structure)
        ]
        /// The default retention period that you want to apply to new objects placed in the specified bucket.
        public let defaultRetention: DefaultRetention?

        public init(defaultRetention: DefaultRetention? = nil) {
            self.defaultRetention = defaultRetention
        }

        private enum CodingKeys: String, CodingKey {
            case defaultRetention = "DefaultRetention"
        }
    }

    public struct GetBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket from which the server-side encryption configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListObjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer)
        ]
        /// Specifies the key to start with when listing objects in a bucket.
        public let marker: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        public let encodingType: EncodingType?
        /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?

        public init(marker: String? = nil, delimiter: String? = nil, prefix: String? = nil, encodingType: EncodingType? = nil, requestPayer: RequestPayer? = nil, bucket: String, maxKeys: Int32? = nil) {
            self.marker = marker
            self.delimiter = delimiter
            self.prefix = prefix
            self.encodingType = encodingType
            self.requestPayer = requestPayer
            self.bucket = bucket
            self.maxKeys = maxKeys
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case delimiter = "delimiter"
            case prefix = "prefix"
            case encodingType = "encoding-type"
            case requestPayer = "x-amz-request-payer"
            case bucket = "Bucket"
            case maxKeys = "max-keys"
        }
    }

    public struct PublicAccessBlockConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockPublicPolicy", location: .body(locationName: "BlockPublicPolicy"), required: false, type: .boolean), 
            AWSShapeMember(label: "BlockPublicAcls", location: .body(locationName: "BlockPublicAcls"), required: false, type: .boolean), 
            AWSShapeMember(label: "IgnorePublicAcls", location: .body(locationName: "IgnorePublicAcls"), required: false, type: .boolean), 
            AWSShapeMember(label: "RestrictPublicBuckets", location: .body(locationName: "RestrictPublicBuckets"), required: false, type: .boolean)
        ]
        /// Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.  Enabling this setting doesn't affect existing bucket policies.
        public let blockPublicPolicy: Bool?
        /// Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to TRUE causes the following behavior:   PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.   PUT Object calls fail if the request includes a public ACL.   Enabling this setting doesn't affect existing policies or ACLs.
        public let blockPublicAcls: Bool?
        /// Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        public let ignorePublicAcls: Bool?
        /// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy. Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        public let restrictPublicBuckets: Bool?

        public init(blockPublicPolicy: Bool? = nil, blockPublicAcls: Bool? = nil, ignorePublicAcls: Bool? = nil, restrictPublicBuckets: Bool? = nil) {
            self.blockPublicPolicy = blockPublicPolicy
            self.blockPublicAcls = blockPublicAcls
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicPolicy = "BlockPublicPolicy"
            case blockPublicAcls = "BlockPublicAcls"
            case ignorePublicAcls = "IgnorePublicAcls"
            case restrictPublicBuckets = "RestrictPublicBuckets"
        }
    }

    public struct BucketLoggingStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct GetBucketLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct MetadataEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let value: String?
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct PutBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WebsiteConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteConfiguration", location: .body(locationName: "WebsiteConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let websiteConfiguration: WebsiteConfiguration
        public let contentMD5: String?

        public init(bucket: String, websiteConfiguration: WebsiteConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.websiteConfiguration = websiteConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case websiteConfiguration = "WebsiteConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct Object: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        public let size: Int32?
        public let key: String?
        public let owner: Owner?
        public let eTag: String?
        /// The class of storage used to store the object.
        public let storageClass: ObjectStorageClass?
        public let lastModified: TimeStamp?

        public init(size: Int32? = nil, key: String? = nil, owner: Owner? = nil, eTag: String? = nil, storageClass: ObjectStorageClass? = nil, lastModified: TimeStamp? = nil) {
            self.size = size
            self.key = key
            self.owner = owner
            self.eTag = eTag
            self.storageClass = storageClass
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case size = "Size"
            case key = "Key"
            case owner = "Owner"
            case eTag = "ETag"
            case storageClass = "StorageClass"
            case lastModified = "LastModified"
        }
    }

    public struct Stats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long), 
            AWSShapeMember(label: "BytesReturned", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long)
        ]
        /// The total number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?
        /// The total number of bytes of records payload data returned.
        public let bytesReturned: Int64?
        /// The total number of object bytes scanned.
        public let bytesScanned: Int64?

        public init(bytesProcessed: Int64? = nil, bytesReturned: Int64? = nil, bytesScanned: Int64? = nil) {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }

        private enum CodingKeys: String, CodingKey {
            case bytesProcessed = "BytesProcessed"
            case bytesReturned = "BytesReturned"
            case bytesScanned = "BytesScanned"
        }
    }

    public enum FilterRuleName: String, CustomStringConvertible, Codable {
        case prefix = "prefix"
        case suffix = "suffix"
        public var description: String { return self.rawValue }
    }

    public struct DefaultRetention: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Years", required: false, type: .integer), 
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "Mode", required: false, type: .enum)
        ]
        /// The number of years that you want to specify for the default retention period.
        public let years: Int32?
        /// The number of days that you want to specify for the default retention period.
        public let days: Int32?
        /// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket.
        public let mode: ObjectLockRetentionMode?

        public init(years: Int32? = nil, days: Int32? = nil, mode: ObjectLockRetentionMode? = nil) {
            self.years = years
            self.days = days
            self.mode = mode
        }

        private enum CodingKeys: String, CodingKey {
            case years = "Years"
            case days = "Days"
            case mode = "Mode"
        }
    }

    public struct PutBucketNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let contentMD5: String?
        public let notificationConfiguration: NotificationConfigurationDeprecated
        public let bucket: String

        public init(contentMD5: String? = nil, notificationConfiguration: NotificationConfigurationDeprecated, bucket: String) {
            self.contentMD5 = contentMD5
            self.notificationConfiguration = notificationConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case notificationConfiguration = "NotificationConfiguration"
            case bucket = "Bucket"
        }
    }

    public struct S3KeyFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterRules", location: .body(locationName: "FilterRule"), required: false, type: .list)
        ]
        public let filterRules: [FilterRule]?

        public init(filterRules: [FilterRule]? = nil) {
            self.filterRules = filterRules
        }

        private enum CodingKeys: String, CodingKey {
            case filterRules = "FilterRule"
        }
    }

    public enum BucketLogsPermission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public struct EndEvent: AWSShape {

    }

    public struct DeleteBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket containing the server-side encryption configuration to delete.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct LifecycleRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String?
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public let tag: Tag?
        public let and: LifecycleRuleAndOperator?

        public init(prefix: String? = nil, tag: Tag? = nil, and: LifecycleRuleAndOperator? = nil) {
            self.prefix = prefix
            self.tag = tag
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tag = "Tag"
            case and = "And"
        }
    }

    public struct PutBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MetricsConfiguration", location: .body(locationName: "MetricsConfiguration"), required: true, type: .structure)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// The name of the bucket for which the metrics configuration is set.
        public let bucket: String
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration

        public init(id: String, bucket: String, metricsConfiguration: MetricsConfiguration) {
            self.id = id
            self.bucket = bucket
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public enum ReplicationStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case pending = "PENDING"
        case failed = "FAILED"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketInventoryConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryConfiguration", required: false, type: .structure)
        ]
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration?

        public init(inventoryConfiguration: InventoryConfiguration? = nil) {
            self.inventoryConfiguration = inventoryConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryConfiguration = "InventoryConfiguration"
        }
    }

    public struct Grants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [Grant]?

        public init(grant: [Grant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public enum RequestPayer: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public enum MFADelete: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct DeleteObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        /// Returns the version ID of the delete marker created as a result of the DELETE operation.
        public let versionId: String?
        /// Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
        public let deleteMarker: Bool?
        public let requestCharged: RequestCharged?

        public init(versionId: String? = nil, deleteMarker: Bool? = nil, requestCharged: RequestCharged? = nil) {
            self.versionId = versionId
            self.deleteMarker = deleteMarker
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
            case deleteMarker = "x-amz-delete-marker"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "BypassGovernanceRetention", location: .header(locationName: "x-amz-bypass-governance-retention"), required: false, type: .boolean), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process this operation.
        public let bypassGovernanceRetention: Bool?
        public let key: String
        public let bucket: String
        public let requestPayer: RequestPayer?

        public init(mfa: String? = nil, versionId: String? = nil, bypassGovernanceRetention: Bool? = nil, key: String, bucket: String, requestPayer: RequestPayer? = nil) {
            self.mfa = mfa
            self.versionId = versionId
            self.bypassGovernanceRetention = bypassGovernanceRetention
            self.key = key
            self.bucket = bucket
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case mfa = "x-amz-mfa"
            case versionId = "versionId"
            case bypassGovernanceRetention = "x-amz-bypass-governance-retention"
            case key = "Key"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct GetPublicAccessBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to retrieve. 
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Initiator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
        public let id: String?
        /// Name of the Principal.
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public enum MetadataDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct Owner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        public let id: String?
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct ServerSideEncryptionByDefault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSMasterKeyID", required: false, type: .string), 
            AWSShapeMember(label: "SSEAlgorithm", required: true, type: .enum)
        ]
        /// KMS master key ID to use for the default encryption. This parameter is allowed if SSEAlgorithm is aws:kms.
        public let kMSMasterKeyID: String?
        /// Server-side encryption algorithm to use for the default encryption.
        public let sSEAlgorithm: ServerSideEncryption

        public init(kMSMasterKeyID: String? = nil, sSEAlgorithm: ServerSideEncryption) {
            self.kMSMasterKeyID = kMSMasterKeyID
            self.sSEAlgorithm = sSEAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case kMSMasterKeyID = "KMSMasterKeyID"
            case sSEAlgorithm = "SSEAlgorithm"
        }
    }

    public struct InventoryS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public let encryption: InventoryEncryption?
        /// Specifies the output format of the inventory results.
        public let format: InventoryFormat
        /// The Amazon resource name (ARN) of the bucket where inventory results will be published.
        public let bucket: String
        /// The prefix that is prepended to all inventory results.
        public let prefix: String?
        /// The ID of the account that owns the destination bucket.
        public let accountId: String?

        public init(encryption: InventoryEncryption? = nil, format: InventoryFormat, bucket: String, prefix: String? = nil, accountId: String? = nil) {
            self.encryption = encryption
            self.format = format
            self.bucket = bucket
            self.prefix = prefix
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case encryption = "Encryption"
            case format = "Format"
            case bucket = "Bucket"
            case prefix = "Prefix"
            case accountId = "AccountId"
        }
    }

    public struct PutObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case canonicaluser = "CanonicalUser"
        case amazoncustomerbyemail = "AmazonCustomerByEmail"
        case group = "Group"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectTorrentOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Body", required: false, type: .blob)
        ]
        public let requestCharged: RequestCharged?
        public let body: Data?

        public init(requestCharged: RequestCharged? = nil, body: Data? = nil) {
            self.requestCharged = requestCharged
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case body = "Body"
        }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "KMSContext", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionType", required: true, type: .enum)
        ]
        /// If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results.
        public let kMSKeyId: String?
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public let kMSContext: String?
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (e.g., AES256, aws:kms).
        public let encryptionType: ServerSideEncryption

        public init(kMSKeyId: String? = nil, kMSContext: String? = nil, encryptionType: ServerSideEncryption) {
            self.kMSKeyId = kMSKeyId
            self.kMSContext = kMSContext
            self.encryptionType = encryptionType
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKeyId = "KMSKeyId"
            case kMSContext = "KMSContext"
            case encryptionType = "EncryptionType"
        }
    }

    public struct ObjectLockLegalHold: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Indicates whether the specified object has a Legal Hold in place.
        public let status: ObjectLockLegalHoldStatus?

        public init(status: ObjectLockLegalHoldStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DeleteObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deleted", required: false, type: .list), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "Error"), required: false, type: .list)
        ]
        public let deleted: [DeletedObject]?
        public let requestCharged: RequestCharged?
        public let errors: [Error]?

        public init(deleted: [DeletedObject]? = nil, requestCharged: RequestCharged? = nil, errors: [Error]? = nil) {
            self.deleted = deleted
            self.requestCharged = requestCharged
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case deleted = "Deleted"
            case requestCharged = "x-amz-request-charged"
            case errors = "Error"
        }
    }

    public struct UploadPartCopyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceRange", location: .header(locationName: "x-amz-copy-source-range"), required: false, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string)
        ]
        public let bucket: String
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        public let requestPayer: RequestPayer?
        /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        public let copySourceRange: String?
        /// Upload ID identifying the multipart upload whose part is being copied.
        public let uploadId: String
        /// Part number of part being copied. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        public let key: String
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?

        public init(bucket: String, copySource: String, requestPayer: RequestPayer? = nil, copySourceRange: String? = nil, uploadId: String, partNumber: Int32, sSECustomerKeyMD5: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, copySourceSSECustomerAlgorithm: String? = nil, copySourceSSECustomerKey: String? = nil, copySourceIfMatch: String? = nil, key: String, copySourceIfModifiedSince: TimeStamp? = nil, copySourceSSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil, copySourceIfNoneMatch: String? = nil, sSECustomerKey: String? = nil) {
            self.bucket = bucket
            self.copySource = copySource
            self.requestPayer = requestPayer
            self.copySourceRange = copySourceRange
            self.uploadId = uploadId
            self.partNumber = partNumber
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.copySourceIfMatch = copySourceIfMatch
            self.key = key
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.sSECustomerKey = sSECustomerKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case copySource = "x-amz-copy-source"
            case requestPayer = "x-amz-request-payer"
            case copySourceRange = "x-amz-copy-source-range"
            case uploadId = "uploadId"
            case partNumber = "partNumber"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case key = "Key"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
        }
    }

    public enum InventoryOptionalField: String, CustomStringConvertible, Codable {
        case size = "Size"
        case lastmodifieddate = "LastModifiedDate"
        case storageclass = "StorageClass"
        case etag = "ETag"
        case ismultipartuploaded = "IsMultipartUploaded"
        case replicationstatus = "ReplicationStatus"
        case encryptionstatus = "EncryptionStatus"
        case objectlockretainuntildate = "ObjectLockRetainUntilDate"
        case objectlockmode = "ObjectLockMode"
        case objectlocklegalholdstatus = "ObjectLockLegalHoldStatus"
        public var description: String { return self.rawValue }
    }

    public enum Event: String, CustomStringConvertible, Codable {
        case s3Reducedredundancylostobject = "s3:ReducedRedundancyLostObject"
        case s3ObjectcreatedAll = "s3:ObjectCreated:*"
        case s3ObjectcreatedPut = "s3:ObjectCreated:Put"
        case s3ObjectcreatedPost = "s3:ObjectCreated:Post"
        case s3ObjectcreatedCopy = "s3:ObjectCreated:Copy"
        case s3ObjectcreatedCompletemultipartupload = "s3:ObjectCreated:CompleteMultipartUpload"
        case s3ObjectremovedAll = "s3:ObjectRemoved:*"
        case s3ObjectremovedDelete = "s3:ObjectRemoved:Delete"
        case s3ObjectremovedDeletemarkercreated = "s3:ObjectRemoved:DeleteMarkerCreated"
        case s3ObjectrestorePost = "s3:ObjectRestore:Post"
        case s3ObjectrestoreCompleted = "s3:ObjectRestore:Completed"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicaKmsKeyID", required: false, type: .string)
        ]
        /// The ID of the AWS KMS key for the AWS Region where the destination bucket resides. Amazon S3 uses this key to encrypt the replica object. 
        public let replicaKmsKeyID: String?

        public init(replicaKmsKeyID: String? = nil) {
            self.replicaKmsKeyID = replicaKmsKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case replicaKmsKeyID = "ReplicaKmsKeyID"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", required: false, type: .structure), 
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "Transition", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "NoncurrentVersionTransition", required: false, type: .structure)
        ]
        public let expiration: LifecycleExpiration?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String
        public let transition: Transition?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let noncurrentVersionTransition: NoncurrentVersionTransition?

        public init(expiration: LifecycleExpiration? = nil, id: String? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, prefix: String, transition: Transition? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, status: ExpirationStatus, noncurrentVersionTransition: NoncurrentVersionTransition? = nil) {
            self.expiration = expiration
            self.id = id
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.prefix = prefix
            self.transition = transition
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.status = status
            self.noncurrentVersionTransition = noncurrentVersionTransition
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "Expiration"
            case id = "ID"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case prefix = "Prefix"
            case transition = "Transition"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case status = "Status"
            case noncurrentVersionTransition = "NoncurrentVersionTransition"
        }
    }

    public struct DeleteBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let tagSet: TagSet
        public let versionId: String?

        public init(tagSet: TagSet, versionId: String? = nil) {
            self.tagSet = tagSet
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
            case versionId = "x-amz-version-id"
        }
    }

    public struct ReplicationRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        public let prefix: String?
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public struct PutBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ReplicationConfiguration", location: .body(locationName: "ReplicationConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let replicationConfiguration: ReplicationConfiguration

        public init(bucket: String, contentMD5: String? = nil, replicationConfiguration: ReplicationConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct GetObjectRetentionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Retention"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Retention", required: false, type: .structure)
        ]
        /// The container element for an object's retention settings.
        public let retention: ObjectLockRetention?

        public init(retention: ObjectLockRetention? = nil) {
            self.retention = retention
        }

        private enum CodingKeys: String, CodingKey {
            case retention = "Retention"
        }
    }

    public struct AbortMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct LifecycleRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Transitions", location: .body(locationName: "Transition"), required: false, type: .list), 
            AWSShapeMember(label: "NoncurrentVersionTransitions", location: .body(locationName: "NoncurrentVersionTransition"), required: false, type: .list), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "Expiration", required: false, type: .structure)
        ]
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        /// Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
        public let prefix: String?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        public let filter: LifecycleRuleFilter?
        public let transitions: [Transition]?
        public let noncurrentVersionTransitions: [NoncurrentVersionTransition]?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let expiration: LifecycleExpiration?

        public init(id: String? = nil, prefix: String? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, filter: LifecycleRuleFilter? = nil, transitions: [Transition]? = nil, noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil, status: ExpirationStatus, expiration: LifecycleExpiration? = nil) {
            self.id = id
            self.prefix = prefix
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.filter = filter
            self.transitions = transitions
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.status = status
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case prefix = "Prefix"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case filter = "Filter"
            case transitions = "Transition"
            case noncurrentVersionTransitions = "NoncurrentVersionTransition"
            case status = "Status"
            case expiration = "Expiration"
        }
    }

    public struct LambdaFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LambdaFunctionArn", location: .body(locationName: "CloudFunction"), required: true, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        public let events: [Event]
        public let id: String?
        /// The Amazon Resource Name (ARN) of the Lambda cloud function that Amazon S3 can invoke when it detects events of the specified type.
        public let lambdaFunctionArn: String
        public let filter: NotificationConfigurationFilter?

        public init(events: [Event], id: String? = nil, lambdaFunctionArn: String, filter: NotificationConfigurationFilter? = nil) {
            self.events = events
            self.id = id
            self.lambdaFunctionArn = lambdaFunctionArn
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case id = "Id"
            case lambdaFunctionArn = "CloudFunction"
            case filter = "Filter"
        }
    }

    public struct RestoreObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RestoreRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "RestoreRequest", location: .body(locationName: "RestoreRequest"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let key: String
        public let bucket: String
        public let versionId: String?
        public let restoreRequest: RestoreRequest?
        public let requestPayer: RequestPayer?

        public init(key: String, bucket: String, versionId: String? = nil, restoreRequest: RestoreRequest? = nil, requestPayer: RequestPayer? = nil) {
            self.key = key
            self.bucket = bucket
            self.versionId = versionId
            self.restoreRequest = restoreRequest
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case versionId = "versionId"
            case restoreRequest = "RestoreRequest"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct AccessControlPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// A list of grants.
        public let grants: Grants?
        public let owner: Owner?

        public init(grants: Grants? = nil, owner: Owner? = nil) {
            self.grants = grants
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "AccessControlList"
            case owner = "Owner"
        }
    }

    public struct StorageClassAnalysis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataExport", required: false, type: .structure)
        ]
        /// A container used to describe how data related to the storage class analysis should be exported.
        public let dataExport: StorageClassAnalysisDataExport?

        public init(dataExport: StorageClassAnalysisDataExport? = nil) {
            self.dataExport = dataExport
        }

        private enum CodingKeys: String, CodingKey {
            case dataExport = "DataExport"
        }
    }

    public struct SelectParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure)
        ]
        /// The expression that is used to query the object.
        public let expression: String
        /// Describes how the results of the Select job are serialized.
        public let outputSerialization: OutputSerialization
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// Describes the serialization format of the object.
        public let inputSerialization: InputSerialization

        public init(expression: String, outputSerialization: OutputSerialization, expressionType: ExpressionType, inputSerialization: InputSerialization) {
            self.expression = expression
            self.outputSerialization = outputSerialization
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "Expression"
            case outputSerialization = "OutputSerialization"
            case expressionType = "ExpressionType"
            case inputSerialization = "InputSerialization"
        }
    }

    public enum ObjectLockRetentionMode: String, CustomStringConvertible, Codable {
        case governance = "GOVERNANCE"
        case compliance = "COMPLIANCE"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccelerateConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "AccelerateConfiguration", location: .body(locationName: "AccelerateConfiguration"), required: true, type: .structure)
        ]
        /// Name of the bucket for which the accelerate configuration is set.
        public let bucket: String
        /// Specifies the Accelerate Configuration you want to set for the bucket.
        public let accelerateConfiguration: AccelerateConfiguration

        public init(bucket: String, accelerateConfiguration: AccelerateConfiguration) {
            self.bucket = bucket
            self.accelerateConfiguration = accelerateConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case accelerateConfiguration = "AccelerateConfiguration"
        }
    }

    public struct DeleteMarkerEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        public let owner: Owner?
        /// The object key.
        public let key: String?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        /// Version ID of an object.
        public let versionId: String?

        public init(owner: Owner? = nil, key: String? = nil, lastModified: TimeStamp? = nil, isLatest: Bool? = nil, versionId: String? = nil) {
            self.owner = owner
            self.key = key
            self.lastModified = lastModified
            self.isLatest = isLatest
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case key = "Key"
            case lastModified = "LastModified"
            case isLatest = "IsLatest"
            case versionId = "VersionId"
        }
    }

    public struct PutObjectRetentionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct SSEKMS: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct PutBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BucketLoggingStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BucketLoggingStatus", location: .body(locationName: "BucketLoggingStatus"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let bucketLoggingStatus: BucketLoggingStatus

        public init(contentMD5: String? = nil, bucket: String, bucketLoggingStatus: BucketLoggingStatus) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.bucketLoggingStatus = bucketLoggingStatus
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case bucketLoggingStatus = "BucketLoggingStatus"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// Container for information about a particular server-side encryption configuration rule.
        public let rules: [ServerSideEncryptionRule]

        public init(rules: [ServerSideEncryptionRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct TargetGrant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure), 
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Logging permissions assigned to the Grantee for the bucket.
        public let permission: BucketLogsPermission?

        public init(grantee: Grantee? = nil, permission: BucketLogsPermission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct CopyObjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        public let eTag: String?
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct GetBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct AccelerateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct GetObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResponseCacheControl", location: .querystring(locationName: "response-cache-control"), required: false, type: .string), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentEncoding", location: .querystring(locationName: "response-content-encoding"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentDisposition", location: .querystring(locationName: "response-content-disposition"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ResponseExpires", location: .querystring(locationName: "response-expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ResponseContentLanguage", location: .querystring(locationName: "response-content-language"), required: false, type: .string), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentType", location: .querystring(locationName: "response-content-type"), required: false, type: .string), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        /// Sets the Cache-Control header of the response.
        public let responseCacheControl: String?
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Sets the Content-Encoding header of the response.
        public let responseContentEncoding: String?
        /// Sets the Content-Disposition header of the response
        public let responseContentDisposition: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
        public let partNumber: Int32?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?
        public let requestPayer: RequestPayer?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Sets the Expires header of the response.
        public let responseExpires: TimeStamp?
        /// Sets the Content-Language header of the response.
        public let responseContentLanguage: String?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Sets the Content-Type header of the response.
        public let responseContentType: String?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        public let key: String

        public init(responseCacheControl: String? = nil, ifModifiedSince: TimeStamp? = nil, sSECustomerAlgorithm: String? = nil, responseContentEncoding: String? = nil, responseContentDisposition: String? = nil, sSECustomerKeyMD5: String? = nil, bucket: String, sSECustomerKey: String? = nil, partNumber: Int32? = nil, ifMatch: String? = nil, requestPayer: RequestPayer? = nil, versionId: String? = nil, ifUnmodifiedSince: TimeStamp? = nil, responseExpires: TimeStamp? = nil, responseContentLanguage: String? = nil, range: String? = nil, responseContentType: String? = nil, ifNoneMatch: String? = nil, key: String) {
            self.responseCacheControl = responseCacheControl
            self.ifModifiedSince = ifModifiedSince
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.responseContentEncoding = responseContentEncoding
            self.responseContentDisposition = responseContentDisposition
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.partNumber = partNumber
            self.ifMatch = ifMatch
            self.requestPayer = requestPayer
            self.versionId = versionId
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.responseExpires = responseExpires
            self.responseContentLanguage = responseContentLanguage
            self.range = range
            self.responseContentType = responseContentType
            self.ifNoneMatch = ifNoneMatch
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case responseCacheControl = "response-cache-control"
            case ifModifiedSince = "If-Modified-Since"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case responseContentEncoding = "response-content-encoding"
            case responseContentDisposition = "response-content-disposition"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case partNumber = "partNumber"
            case ifMatch = "If-Match"
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case responseExpires = "response-expires"
            case responseContentLanguage = "response-content-language"
            case range = "Range"
            case responseContentType = "response-content-type"
            case ifNoneMatch = "If-None-Match"
            case key = "Key"
        }
    }

    public struct ObjectLockConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rule", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectLockEnabled", required: false, type: .enum)
        ]
        /// The Object Lock rule in place for the specified object.
        public let rule: ObjectLockRule?
        /// Indicates whether this bucket has an Object Lock configuration enabled.
        public let objectLockEnabled: ObjectLockEnabled?

        public init(rule: ObjectLockRule? = nil, objectLockEnabled: ObjectLockEnabled? = nil) {
            self.rule = rule
            self.objectLockEnabled = objectLockEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "Rule"
            case objectLockEnabled = "ObjectLockEnabled"
        }
    }

    public struct CopyObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "MetadataDirective", location: .header(locationName: "x-amz-metadata-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "TaggingDirective", location: .header(locationName: "x-amz-tagging-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// The Object Lock mode that you want to apply to the copied object.
        public let objectLockMode: ObjectLockMode?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The date and time when you want the copied object's Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        public let key: String
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        public let metadataDirective: MetadataDirective?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// The tag-set for the object destination object this value must be used in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies whether you want to apply a Legal Hold to the copied object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.
        public let taggingDirective: TaggingDirective?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        public let bucket: String
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        public let requestPayer: RequestPayer?

        public init(objectLockMode: ObjectLockMode? = nil, metadata: [String: String]? = nil, sSECustomerKey: String? = nil, grantRead: String? = nil, acl: ObjectCannedACL? = nil, websiteRedirectLocation: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, objectLockRetainUntilDate: TimeStamp? = nil, sSECustomerAlgorithm: String? = nil, copySourceIfMatch: String? = nil, expires: TimeStamp? = nil, copySourceIfNoneMatch: String? = nil, key: String, grantReadACP: String? = nil, contentLanguage: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, storageClass: StorageClass? = nil, copySource: String, metadataDirective: MetadataDirective? = nil, grantWriteACP: String? = nil, sSEKMSKeyId: String? = nil, contentDisposition: String? = nil, tagging: String? = nil, grantFullControl: String? = nil, contentType: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, taggingDirective: TaggingDirective? = nil, contentEncoding: String? = nil, bucket: String, sSECustomerKeyMD5: String? = nil, copySourceSSECustomerKeyMD5: String? = nil, copySourceSSECustomerKey: String? = nil, cacheControl: String? = nil, copySourceIfModifiedSince: TimeStamp? = nil, requestPayer: RequestPayer? = nil) {
            self.objectLockMode = objectLockMode
            self.metadata = metadata
            self.sSECustomerKey = sSECustomerKey
            self.grantRead = grantRead
            self.acl = acl
            self.websiteRedirectLocation = websiteRedirectLocation
            self.serverSideEncryption = serverSideEncryption
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceIfMatch = copySourceIfMatch
            self.expires = expires
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.key = key
            self.grantReadACP = grantReadACP
            self.contentLanguage = contentLanguage
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.storageClass = storageClass
            self.copySource = copySource
            self.metadataDirective = metadataDirective
            self.grantWriteACP = grantWriteACP
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentDisposition = contentDisposition
            self.tagging = tagging
            self.grantFullControl = grantFullControl
            self.contentType = contentType
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.taggingDirective = taggingDirective
            self.contentEncoding = contentEncoding
            self.bucket = bucket
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.cacheControl = cacheControl
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockMode = "x-amz-object-lock-mode"
            case metadata = "Metadata"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case grantRead = "x-amz-grant-read"
            case acl = "x-amz-acl"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case expires = "Expires"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case key = "Key"
            case grantReadACP = "x-amz-grant-read-acp"
            case contentLanguage = "Content-Language"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case storageClass = "x-amz-storage-class"
            case copySource = "x-amz-copy-source"
            case metadataDirective = "x-amz-metadata-directive"
            case grantWriteACP = "x-amz-grant-write-acp"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentDisposition = "Content-Disposition"
            case tagging = "x-amz-tagging"
            case grantFullControl = "x-amz-grant-full-control"
            case contentType = "Content-Type"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case taggingDirective = "x-amz-tagging-directive"
            case contentEncoding = "Content-Encoding"
            case bucket = "Bucket"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case cacheControl = "Cache-Control"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct DeleteBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the metrics configuration to delete.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct CopyObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyObjectResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopyObjectResult", required: false, type: .structure), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let copyObjectResult: CopyObjectResult?
        public let requestCharged: RequestCharged?
        public let copySourceVersionId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If the object expiration is configured, the response includes this header.
        public let expiration: String?
        /// Version ID of the newly created copy.
        public let versionId: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?

        public init(sSECustomerAlgorithm: String? = nil, copyObjectResult: CopyObjectResult? = nil, requestCharged: RequestCharged? = nil, copySourceVersionId: String? = nil, sSECustomerKeyMD5: String? = nil, expiration: String? = nil, versionId: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, sSEKMSKeyId: String? = nil) {
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copyObjectResult = copyObjectResult
            self.requestCharged = requestCharged
            self.copySourceVersionId = copySourceVersionId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.expiration = expiration
            self.versionId = versionId
            self.serverSideEncryption = serverSideEncryption
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copyObjectResult = "CopyObjectResult"
            case requestCharged = "x-amz-request-charged"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case expiration = "x-amz-expiration"
            case versionId = "x-amz-version-id"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public enum ExpressionType: String, CustomStringConvertible, Codable {
        case sql = "SQL"
        public var description: String { return self.rawValue }
    }

    public enum ExpirationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        public let bucket: String
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        public let requestPayer: RequestPayer?
        public let key: String

        public init(bucket: String, versionId: String? = nil, requestPayer: RequestPayer? = nil, key: String) {
            self.bucket = bucket
            self.versionId = versionId
            self.requestPayer = requestPayer
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case versionId = "versionId"
            case requestPayer = "x-amz-request-payer"
            case key = "Key"
        }
    }

    public struct SelectObjectContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "RequestProgress", required: false, type: .structure), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        /// The SSE Algorithm used to encrypt the object. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerAlgorithm: String?
        /// Describes the format of the data in the object that is being queried.
        public let inputSerialization: InputSerialization
        /// The S3 bucket.
        public let bucket: String
        /// The SSE Customer Key MD5. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKeyMD5: String?
        /// Specifies if periodic request progress information should be enabled.
        public let requestProgress: RequestProgress?
        /// The SSE Customer Key. For more information, see  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKey: String?
        /// Describes the format of the data that you want Amazon S3 to return in response.
        public let outputSerialization: OutputSerialization
        /// The expression that is used to query the object.
        public let expression: String
        /// The type of the provided expression (for example., SQL).
        public let expressionType: ExpressionType
        /// The object key.
        public let key: String

        public init(sSECustomerAlgorithm: String? = nil, inputSerialization: InputSerialization, bucket: String, sSECustomerKeyMD5: String? = nil, requestProgress: RequestProgress? = nil, sSECustomerKey: String? = nil, outputSerialization: OutputSerialization, expression: String, expressionType: ExpressionType, key: String) {
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.inputSerialization = inputSerialization
            self.bucket = bucket
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.requestProgress = requestProgress
            self.sSECustomerKey = sSECustomerKey
            self.outputSerialization = outputSerialization
            self.expression = expression
            self.expressionType = expressionType
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case inputSerialization = "InputSerialization"
            case bucket = "Bucket"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case requestProgress = "RequestProgress"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case outputSerialization = "OutputSerialization"
            case expression = "Expression"
            case expressionType = "ExpressionType"
            case key = "Key"
        }
    }

    public struct UploadPartCopyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyPartResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopyPartResult", required: false, type: .structure), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string)
        ]
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let copyPartResult: CopyPartResult?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The version of the source object that was copied, if you have enabled versioning on the source bucket.
        public let copySourceVersionId: String?
        public let requestCharged: RequestCharged?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?

        public init(sSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil, copyPartResult: CopyPartResult? = nil, serverSideEncryption: ServerSideEncryption? = nil, copySourceVersionId: String? = nil, requestCharged: RequestCharged? = nil, sSEKMSKeyId: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copyPartResult = copyPartResult
            self.serverSideEncryption = serverSideEncryption
            self.copySourceVersionId = copySourceVersionId
            self.requestCharged = requestCharged
            self.sSEKMSKeyId = sSEKMSKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copyPartResult = "CopyPartResult"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case requestCharged = "x-amz-request-charged"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
        }
    }

    public struct Error: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        public let message: String?
        public let versionId: String?
        public let code: String?
        public let key: String?

        public init(message: String? = nil, versionId: String? = nil, code: String? = nil, key: String? = nil) {
            self.message = message
            self.versionId = versionId
            self.code = code
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case versionId = "VersionId"
            case code = "Code"
            case key = "Key"
        }
    }

    public struct GlacierJobParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tier", required: true, type: .enum)
        ]
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier

        public init(tier: Tier) {
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case tier = "Tier"
        }
    }

    public struct OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// Describes an S3 location that will receive the results of the restore request.
        public let s3: S3Location?

        public init(s3: S3Location? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct GetObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let key: String
        public let versionId: String?
        public let bucket: String

        public init(key: String, versionId: String? = nil, bucket: String) {
            self.key = key
            self.versionId = versionId
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case versionId = "versionId"
            case bucket = "Bucket"
        }
    }

    public struct GetObjectRetentionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let requestPayer: RequestPayer?
        /// The version ID for the object whose retention settings you want to retrieve.
        public let versionId: String?
        /// The key name for the object whose retention settings you want to retrieve.
        public let key: String
        /// The bucket containing the object whose retention settings you want to retrieve.
        public let bucket: String

        public init(requestPayer: RequestPayer? = nil, versionId: String? = nil, key: String, bucket: String) {
            self.requestPayer = requestPayer
            self.versionId = versionId
            self.key = key
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case requestPayer = "x-amz-request-payer"
            case versionId = "versionId"
            case key = "Key"
            case bucket = "Bucket"
        }
    }

    public struct CreateBucketOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public enum ObjectCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case awsExecRead = "aws-exec-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        public var description: String { return self.rawValue }
    }

    public enum FileHeaderInfo: String, CustomStringConvertible, Codable {
        case use = "USE"
        case ignore = "IGNORE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct ObjectVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        /// Size in bytes of the object.
        public let size: Int32?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        /// The object key.
        public let key: String?
        /// The class of storage used to store the object.
        public let storageClass: ObjectVersionStorageClass?
        public let eTag: String?
        public let owner: Owner?
        /// Version ID of an object.
        public let versionId: String?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?

        public init(size: Int32? = nil, isLatest: Bool? = nil, key: String? = nil, storageClass: ObjectVersionStorageClass? = nil, eTag: String? = nil, owner: Owner? = nil, versionId: String? = nil, lastModified: TimeStamp? = nil) {
            self.size = size
            self.isLatest = isLatest
            self.key = key
            self.storageClass = storageClass
            self.eTag = eTag
            self.owner = owner
            self.versionId = versionId
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case size = "Size"
            case isLatest = "IsLatest"
            case key = "Key"
            case storageClass = "StorageClass"
            case eTag = "ETag"
            case owner = "Owner"
            case versionId = "VersionId"
            case lastModified = "LastModified"
        }
    }

    public enum RestoreRequestType: String, CustomStringConvertible, Codable {
        case select = "SELECT"
        public var description: String { return self.rawValue }
    }

    public struct LoggingEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetBucket", required: true, type: .string), 
            AWSShapeMember(label: "TargetGrants", required: false, type: .structure), 
            AWSShapeMember(label: "TargetPrefix", required: true, type: .string)
        ]
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        public let targetBucket: String
        public let targetGrants: TargetGrants?
        /// This element lets you specify a prefix for the keys that the log files will be stored under.
        public let targetPrefix: String

        public init(targetBucket: String, targetGrants: TargetGrants? = nil, targetPrefix: String) {
            self.targetBucket = targetBucket
            self.targetGrants = targetGrants
            self.targetPrefix = targetPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case targetBucket = "TargetBucket"
            case targetGrants = "TargetGrants"
            case targetPrefix = "TargetPrefix"
        }
    }

    public struct CSVInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comments", required: false, type: .string), 
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string), 
            AWSShapeMember(label: "FileHeaderInfo", required: false, type: .enum), 
            AWSShapeMember(label: "AllowQuotedRecordDelimiter", required: false, type: .boolean), 
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string)
        ]
        /// The single character used to indicate a row should be ignored when present at the start of a row.
        public let comments: String?
        /// The single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// Describes the first line of input. Valid values: None, Ignore, Use.
        public let fileHeaderInfo: FileHeaderInfo?
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public let allowQuotedRecordDelimiter: Bool?
        /// The value used to separate individual fields in a record.
        public let fieldDelimiter: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// The value used to separate individual records.
        public let recordDelimiter: String?

        public init(comments: String? = nil, quoteEscapeCharacter: String? = nil, fileHeaderInfo: FileHeaderInfo? = nil, allowQuotedRecordDelimiter: Bool? = nil, fieldDelimiter: String? = nil, quoteCharacter: String? = nil, recordDelimiter: String? = nil) {
            self.comments = comments
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.fileHeaderInfo = fileHeaderInfo
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.recordDelimiter = recordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case comments = "Comments"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case fileHeaderInfo = "FileHeaderInfo"
            case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
            case fieldDelimiter = "FieldDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case recordDelimiter = "RecordDelimiter"
        }
    }

    public enum BucketLocationConstraint: String, CustomStringConvertible, Codable {
        case eu = "EU"
        case euWest1 = "eu-west-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case saEast1 = "sa-east-1"
        case cnNorth1 = "cn-north-1"
        case euCentral1 = "eu-central-1"
        public var description: String { return self.rawValue }
    }

    public struct MetricsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure)
        ]
        /// The prefix used when evaluating an AND predicate.
        public let prefix: String?
        /// The list of tags used when evaluating an AND predicate.
        public let tags: TagSet?

        public init(prefix: String? = nil, tags: TagSet? = nil) {
            self.prefix = prefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
            case tags = "Tag"
        }
    }

    public struct ListBucketAnalyticsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "AnalyticsConfigurationList", location: .body(locationName: "AnalyticsConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string)
        ]
        /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
        public let nextContinuationToken: String?
        /// The list of analytics configurations for a bucket.
        public let analyticsConfigurationList: [AnalyticsConfiguration]?
        /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The ContinuationToken that represents where this request began.
        public let continuationToken: String?

        public init(nextContinuationToken: String? = nil, analyticsConfigurationList: [AnalyticsConfiguration]? = nil, isTruncated: Bool? = nil, continuationToken: String? = nil) {
            self.nextContinuationToken = nextContinuationToken
            self.analyticsConfigurationList = analyticsConfigurationList
            self.isTruncated = isTruncated
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextContinuationToken = "NextContinuationToken"
            case analyticsConfigurationList = "AnalyticsConfiguration"
            case isTruncated = "IsTruncated"
            case continuationToken = "ContinuationToken"
        }
    }

    public struct CompletedPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", required: false, type: .integer)
        ]
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?

        public init(eTag: String? = nil, partNumber: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case partNumber = "PartNumber"
        }
    }

    public struct TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct GetBucketAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct TopicConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Topic", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Bucket event for which to send notifications.
        public let event: Event?
        /// Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
        public let topic: String?
        public let events: [Event]?
        public let id: String?

        public init(event: Event? = nil, topic: String? = nil, events: [Event]? = nil, id: String? = nil) {
            self.event = event
            self.topic = topic
            self.events = events
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case event = "Event"
            case topic = "Topic"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case events = "_Event"
            case id = "Id"
        }
    }

    public struct GetBucketRequestPaymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: false, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer?

        public init(payer: Payer? = nil) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct StatsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Stats event details.
        public let details: Stats?

        public init(details: Stats? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct GetBucketPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// The bucket policy as a JSON document.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct AnalyticsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "StorageClassAnalysis", required: true, type: .structure)
        ]
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public let filter: AnalyticsFilter?
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
        public let storageClassAnalysis: StorageClassAnalysis

        public init(filter: AnalyticsFilter? = nil, id: String, storageClassAnalysis: StorageClassAnalysis) {
            self.filter = filter
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case id = "Id"
            case storageClassAnalysis = "StorageClassAnalysis"
        }
    }

    public struct CreateMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string)
        ]
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        public let requestPayer: RequestPayer?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        public let bucket: String
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Specifies the date and time when you want the Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Specifies the Object Lock mode that you want to apply to the uploaded object.
        public let objectLockMode: ObjectLockMode?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Specifies whether you want to apply a Legal Hold to the uploaded object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        public let key: String
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?

        public init(sSECustomerKeyMD5: String? = nil, grantRead: String? = nil, cacheControl: String? = nil, contentLanguage: String? = nil, grantReadACP: String? = nil, tagging: String? = nil, sSEKMSKeyId: String? = nil, contentType: String? = nil, requestPayer: RequestPayer? = nil, websiteRedirectLocation: String? = nil, sSECustomerKey: String? = nil, bucket: String, storageClass: StorageClass? = nil, serverSideEncryption: ServerSideEncryption? = nil, grantWriteACP: String? = nil, contentDisposition: String? = nil, metadata: [String: String]? = nil, grantFullControl: String? = nil, acl: ObjectCannedACL? = nil, expires: TimeStamp? = nil, objectLockRetainUntilDate: TimeStamp? = nil, objectLockMode: ObjectLockMode? = nil, sSECustomerAlgorithm: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, key: String, contentEncoding: String? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantRead = grantRead
            self.cacheControl = cacheControl
            self.contentLanguage = contentLanguage
            self.grantReadACP = grantReadACP
            self.tagging = tagging
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentType = contentType
            self.requestPayer = requestPayer
            self.websiteRedirectLocation = websiteRedirectLocation
            self.sSECustomerKey = sSECustomerKey
            self.bucket = bucket
            self.storageClass = storageClass
            self.serverSideEncryption = serverSideEncryption
            self.grantWriteACP = grantWriteACP
            self.contentDisposition = contentDisposition
            self.metadata = metadata
            self.grantFullControl = grantFullControl
            self.acl = acl
            self.expires = expires
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.objectLockMode = objectLockMode
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.key = key
            self.contentEncoding = contentEncoding
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case grantRead = "x-amz-grant-read"
            case cacheControl = "Cache-Control"
            case contentLanguage = "Content-Language"
            case grantReadACP = "x-amz-grant-read-acp"
            case tagging = "x-amz-tagging"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentType = "Content-Type"
            case requestPayer = "x-amz-request-payer"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case bucket = "Bucket"
            case storageClass = "x-amz-storage-class"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case grantWriteACP = "x-amz-grant-write-acp"
            case contentDisposition = "Content-Disposition"
            case metadata = "Metadata"
            case grantFullControl = "x-amz-grant-full-control"
            case acl = "x-amz-acl"
            case expires = "Expires"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case objectLockMode = "x-amz-object-lock-mode"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case key = "Key"
            case contentEncoding = "Content-Encoding"
        }
    }

    public struct DeleteBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListBucketInventoryConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the inventory configurations to retrieve.
        public let bucket: String
        /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct DeleteBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum DeleteMarkerReplicationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct MetricsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "And", required: false, type: .structure)
        ]
        /// The tag used when evaluating a metrics filter.
        public let tag: Tag?
        /// The prefix used when evaluating a metrics filter.
        public let prefix: String?
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public let and: MetricsAndOperator?

        public init(tag: Tag? = nil, prefix: String? = nil, and: MetricsAndOperator? = nil) {
            self.tag = tag
            self.prefix = prefix
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case prefix = "Prefix"
            case and = "And"
        }
    }

    public struct InventorySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: true, type: .enum)
        ]
        /// Specifies how frequently inventory results are produced.
        public let frequency: InventoryFrequency

        public init(frequency: InventoryFrequency) {
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
        }
    }

    public struct InventoryEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSES3", location: .body(locationName: "SSE-S3"), required: false, type: .structure), 
            AWSShapeMember(label: "SSEKMS", location: .body(locationName: "SSE-KMS"), required: false, type: .structure)
        ]
        /// Specifies the use of SSE-S3 to encrypt delivered Inventory reports.
        public let sses3: SSES3?
        /// Specifies the use of SSE-KMS to encrypt delivered Inventory reports.
        public let ssekms: SSEKMS?

        public init(sses3: SSES3? = nil, ssekms: SSEKMS? = nil) {
            self.sses3 = sses3
            self.ssekms = ssekms
        }

        private enum CodingKeys: String, CodingKey {
            case sses3 = "SSE-S3"
            case ssekms = "SSE-KMS"
        }
    }

    public struct SseKmsEncryptedObjects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .enum)
        ]
        ///  If the status is not Enabled, replication for S3 objects encrypted with AWS KMS is disabled.
        public let status: SseKmsEncryptedObjectsStatus

        public init(status: SseKmsEncryptedObjectsStatus) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetadataEntry", required: false, type: .list)
        ]
        public let metadataEntry: [MetadataEntry]?

        public init(metadataEntry: [MetadataEntry]? = nil) {
            self.metadataEntry = metadataEntry
        }

        private enum CodingKeys: String, CodingKey {
            case metadataEntry = "MetadataEntry"
        }
    }

    public enum OwnerOverride: String, CustomStringConvertible, Codable {
        case destination = "Destination"
        public var description: String { return self.rawValue }
    }

    public enum InventoryFrequency: String, CustomStringConvertible, Codable {
        case daily = "Daily"
        case weekly = "Weekly"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [Rule]

        public init(rules: [Rule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct PutObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure)
        ]
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        public let key: String
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        public let requestPayer: RequestPayer?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        public let bucket: String
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let contentMD5: String?
        public let accessControlPolicy: AccessControlPolicy?

        public init(grantFullControl: String? = nil, key: String, acl: ObjectCannedACL? = nil, grantRead: String? = nil, versionId: String? = nil, requestPayer: RequestPayer? = nil, grantWrite: String? = nil, grantReadACP: String? = nil, bucket: String, grantWriteACP: String? = nil, contentMD5: String? = nil, accessControlPolicy: AccessControlPolicy? = nil) {
            self.grantFullControl = grantFullControl
            self.key = key
            self.acl = acl
            self.grantRead = grantRead
            self.versionId = versionId
            self.requestPayer = requestPayer
            self.grantWrite = grantWrite
            self.grantReadACP = grantReadACP
            self.bucket = bucket
            self.grantWriteACP = grantWriteACP
            self.contentMD5 = contentMD5
            self.accessControlPolicy = accessControlPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case grantFullControl = "x-amz-grant-full-control"
            case key = "Key"
            case acl = "x-amz-acl"
            case grantRead = "x-amz-grant-read"
            case versionId = "versionId"
            case requestPayer = "x-amz-request-payer"
            case grantWrite = "x-amz-grant-write"
            case grantReadACP = "x-amz-grant-read-acp"
            case bucket = "Bucket"
            case grantWriteACP = "x-amz-grant-write-acp"
            case contentMD5 = "Content-MD5"
            case accessControlPolicy = "AccessControlPolicy"
        }
    }

    public struct GetBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Grant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grantee", required: false, type: .structure), 
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        public let grantee: Grantee?
        /// Specifies the permission given to the grantee.
        public let permission: Permission?

        public init(grantee: Grantee? = nil, permission: Permission? = nil) {
            self.grantee = grantee
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case grantee = "Grantee"
            case permission = "Permission"
        }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "UploadIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "MaxUploads", required: false, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "NextUploadIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "Uploads", location: .body(locationName: "Upload"), required: false, type: .list)
        ]
        public let delimiter: String?
        /// Upload ID after which listing began.
        public let uploadIdMarker: String?
        /// Maximum number of multipart uploads that could have been included in the response.
        public let maxUploads: Int32?
        /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
        public let isTruncated: Bool?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
        public let prefix: String?
        /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
        public let nextUploadIdMarker: String?
        /// The key at or after which the listing began.
        public let keyMarker: String?
        public let commonPrefixes: [CommonPrefix]?
        /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        public let uploads: [MultipartUpload]?

        public init(delimiter: String? = nil, uploadIdMarker: String? = nil, maxUploads: Int32? = nil, isTruncated: Bool? = nil, bucket: String? = nil, encodingType: EncodingType? = nil, prefix: String? = nil, nextUploadIdMarker: String? = nil, keyMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, nextKeyMarker: String? = nil, uploads: [MultipartUpload]? = nil) {
            self.delimiter = delimiter
            self.uploadIdMarker = uploadIdMarker
            self.maxUploads = maxUploads
            self.isTruncated = isTruncated
            self.bucket = bucket
            self.encodingType = encodingType
            self.prefix = prefix
            self.nextUploadIdMarker = nextUploadIdMarker
            self.keyMarker = keyMarker
            self.commonPrefixes = commonPrefixes
            self.nextKeyMarker = nextKeyMarker
            self.uploads = uploads
        }

        private enum CodingKeys: String, CodingKey {
            case delimiter = "Delimiter"
            case uploadIdMarker = "UploadIdMarker"
            case maxUploads = "MaxUploads"
            case isTruncated = "IsTruncated"
            case bucket = "Bucket"
            case encodingType = "EncodingType"
            case prefix = "Prefix"
            case nextUploadIdMarker = "NextUploadIdMarker"
            case keyMarker = "KeyMarker"
            case commonPrefixes = "CommonPrefixes"
            case nextKeyMarker = "NextKeyMarker"
            case uploads = "Upload"
        }
    }

    public struct InputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "CSV", required: false, type: .structure), 
            AWSShapeMember(label: "JSON", required: false, type: .structure), 
            AWSShapeMember(label: "Parquet", required: false, type: .structure)
        ]
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public let compressionType: CompressionType?
        /// Describes the serialization of a CSV-encoded object.
        public let csv: CSVInput?
        /// Specifies JSON as object's input serialization format.
        public let json: JSONInput?
        /// Specifies Parquet as object's input serialization format.
        public let parquet: ParquetInput?

        public init(compressionType: CompressionType? = nil, csv: CSVInput? = nil, json: JSONInput? = nil, parquet: ParquetInput? = nil) {
            self.compressionType = compressionType
            self.csv = csv
            self.json = json
            self.parquet = parquet
        }

        private enum CodingKeys: String, CodingKey {
            case compressionType = "CompressionType"
            case csv = "CSV"
            case json = "JSON"
            case parquet = "Parquet"
        }
    }

    public struct GetBucketVersioningOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum)
        ]
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADeleteStatus?

        public init(status: BucketVersioningStatus? = nil, mFADelete: MFADeleteStatus? = nil) {
            self.status = status
            self.mFADelete = mFADelete
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case mFADelete = "MfaDelete"
        }
    }

    public struct SourceSelectionCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SseKmsEncryptedObjects", required: false, type: .structure)
        ]
        ///  A container for filter information for the selection of S3 objects encrypted with AWS KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required. 
        public let sseKmsEncryptedObjects: SseKmsEncryptedObjects?

        public init(sseKmsEncryptedObjects: SseKmsEncryptedObjects? = nil) {
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }

        private enum CodingKeys: String, CodingKey {
            case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
        }
    }

    public struct DeleteBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListBucketInventoryConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "InventoryConfigurationList", location: .body(locationName: "InventoryConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string)
        ]
        /// Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
        public let isTruncated: Bool?
        /// The list of inventory configurations for a bucket.
        public let inventoryConfigurationList: [InventoryConfiguration]?
        /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?
        /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
        public let continuationToken: String?

        public init(isTruncated: Bool? = nil, inventoryConfigurationList: [InventoryConfiguration]? = nil, nextContinuationToken: String? = nil, continuationToken: String? = nil) {
            self.isTruncated = isTruncated
            self.inventoryConfigurationList = inventoryConfigurationList
            self.nextContinuationToken = nextContinuationToken
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case inventoryConfigurationList = "InventoryConfiguration"
            case nextContinuationToken = "NextContinuationToken"
            case continuationToken = "ContinuationToken"
        }
    }

    public struct PutBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsConfiguration", location: .body(locationName: "AnalyticsConfiguration"), required: true, type: .structure)
        ]
        /// The name of the bucket to which an analytics configuration is stored.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration

        public init(bucket: String, id: String, analyticsConfiguration: AnalyticsConfiguration) {
            self.bucket = bucket
            self.id = id
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct GetObjectTorrentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let requestPayer: RequestPayer?
        public let key: String
        public let bucket: String

        public init(requestPayer: RequestPayer? = nil, key: String, bucket: String) {
            self.requestPayer = requestPayer
            self.key = key
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case requestPayer = "x-amz-request-payer"
            case key = "Key"
            case bucket = "Bucket"
        }
    }

    public struct GetObjectLockConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The bucket whose Object Lock configuration you want to retrieve.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ReplicationRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarkerReplication", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "SourceSelectionCriteria", required: false, type: .structure), 
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer)
        ]
        public let filter: ReplicationRuleFilter?
        /// A container for information about the replication destination.
        public let destination: Destination
        /// An object keyname prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. 
        public let prefix: String?
        public let deleteMarkerReplication: DeleteMarkerReplication?
        /// If status isn't enabled, the rule is ignored.
        public let status: ReplicationRuleStatus
        /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using an AWS KMS-Managed Key (SSE-KMS).   If you want Amazon S3 to replicate objects created with server-side encryption using AWS KMS-Managed Keys. 
        public let sourceSelectionCriteria: SourceSelectionCriteria?
        /// A unique identifier for the rule. The maximum value is 255 characters.
        public let id: String?
        /// The priority associated with the rule. If you specify multiple rules in a replication configuration, Amazon S3 prioritizes the rules to prevent conflicts when filtering. If two or more rules identify the same object based on a specified filter, the rule with higher priority takes precedence. For example:   Same object quality prefix based filter criteria If prefixes you specified in multiple rules overlap    Same object qualify tag based filter criteria specified in multiple rules   For more information, see Cross-Region Replication (CRR) in the Amazon S3 Developer Guide.
        public let priority: Int32?

        public init(filter: ReplicationRuleFilter? = nil, destination: Destination, prefix: String? = nil, deleteMarkerReplication: DeleteMarkerReplication? = nil, status: ReplicationRuleStatus, sourceSelectionCriteria: SourceSelectionCriteria? = nil, id: String? = nil, priority: Int32? = nil) {
            self.filter = filter
            self.destination = destination
            self.prefix = prefix
            self.deleteMarkerReplication = deleteMarkerReplication
            self.status = status
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.id = id
            self.priority = priority
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case destination = "Destination"
            case prefix = "Prefix"
            case deleteMarkerReplication = "DeleteMarkerReplication"
            case status = "Status"
            case sourceSelectionCriteria = "SourceSelectionCriteria"
            case id = "ID"
            case priority = "Priority"
        }
    }

    public enum Payer: String, CustomStringConvertible, Codable {
        case requester = "Requester"
        case bucketowner = "BucketOwner"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketEncryptionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", location: .body(locationName: "ServerSideEncryptionConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration
        /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.
        public let contentMD5: String?
        /// The name of the bucket for which the server-side encryption configuration is set.
        public let bucket: String

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration, contentMD5: String? = nil, bucket: String) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.contentMD5 = contentMD5
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
        }
    }

    public struct PutObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct PutObjectLegalHoldOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct Redirect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "ReplaceKeyWith", required: false, type: .string), 
            AWSShapeMember(label: "HttpRedirectCode", required: false, type: .string), 
            AWSShapeMember(label: "HostName", required: false, type: .string), 
            AWSShapeMember(label: "ReplaceKeyPrefixWith", required: false, type: .string)
        ]
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
        public let replaceKeyWith: String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public let httpRedirectCode: String?
        /// The host name to use in the redirect request.
        public let hostName: String?
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
        public let replaceKeyPrefixWith: String?

        public init(protocol: Protocol? = nil, replaceKeyWith: String? = nil, httpRedirectCode: String? = nil, hostName: String? = nil, replaceKeyPrefixWith: String? = nil) {
            self.`protocol` = `protocol`
            self.replaceKeyWith = replaceKeyWith
            self.httpRedirectCode = httpRedirectCode
            self.hostName = hostName
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case replaceKeyWith = "ReplaceKeyWith"
            case httpRedirectCode = "HttpRedirectCode"
            case hostName = "HostName"
            case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
        }
    }

    public struct HeadObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string)
        ]
        public let key: String
        public let bucket: String
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?
        public let requestPayer: RequestPayer?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
        public let partNumber: Int32?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?

        public init(key: String, bucket: String, ifModifiedSince: TimeStamp? = nil, ifMatch: String? = nil, requestPayer: RequestPayer? = nil, ifNoneMatch: String? = nil, ifUnmodifiedSince: TimeStamp? = nil, range: String? = nil, sSECustomerKey: String? = nil, partNumber: Int32? = nil, versionId: String? = nil, sSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil) {
            self.key = key
            self.bucket = bucket
            self.ifModifiedSince = ifModifiedSince
            self.ifMatch = ifMatch
            self.requestPayer = requestPayer
            self.ifNoneMatch = ifNoneMatch
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.range = range
            self.sSECustomerKey = sSECustomerKey
            self.partNumber = partNumber
            self.versionId = versionId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case ifModifiedSince = "If-Modified-Since"
            case ifMatch = "If-Match"
            case requestPayer = "x-amz-request-payer"
            case ifNoneMatch = "If-None-Match"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case range = "Range"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case partNumber = "partNumber"
            case versionId = "versionId"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
        }
    }

    public struct DeleteBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the inventory configuration.
        public let id: String
        /// The name of the bucket containing the inventory configuration to delete.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public struct Transition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?

        public init(storageClass: TransitionStorageClass? = nil, days: Int32? = nil, date: TimeStamp? = nil) {
            self.storageClass = storageClass
            self.days = days
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case days = "Days"
            case date = "Date"
        }
    }

    public struct Bucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp)
        ]
        /// The name of the bucket.
        public let name: String?
        /// Date the bucket was created.
        public let creationDate: TimeStamp?

        public init(name: String? = nil, creationDate: TimeStamp? = nil) {
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDate = "CreationDate"
        }
    }

    public struct Tagging: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct PutObjectLockConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ObjectLockConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Token", location: .header(locationName: "x-amz-bucket-object-lock-token"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockConfiguration", location: .body(locationName: "ObjectLockConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let token: String?
        public let requestPayer: RequestPayer?
        /// The Object Lock configuration that you want to apply to the specified bucket.
        public let objectLockConfiguration: ObjectLockConfiguration?
        /// The bucket whose Object Lock configuration you want to create or replace.
        public let bucket: String
        /// The MD5 hash for the request body.
        public let contentMD5: String?

        public init(token: String? = nil, requestPayer: RequestPayer? = nil, objectLockConfiguration: ObjectLockConfiguration? = nil, bucket: String, contentMD5: String? = nil) {
            self.token = token
            self.requestPayer = requestPayer
            self.objectLockConfiguration = objectLockConfiguration
            self.bucket = bucket
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case token = "x-amz-bucket-object-lock-token"
            case requestPayer = "x-amz-request-payer"
            case objectLockConfiguration = "ObjectLockConfiguration"
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
        }
    }

    public enum ObjectVersionStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketLifecycleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct ReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 can assume when replicating the objects.
        public let role: String
        /// A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. 
        public let rules: [ReplicationRule]

        public init(role: String, rules: [ReplicationRule]) {
            self.role = role
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case rules = "Rule"
        }
    }

    public struct GetBucketLoggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case url = "url"
        public var description: String { return self.rawValue }
    }

    public struct ServerSideEncryptionRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyServerSideEncryptionByDefault", required: false, type: .structure)
        ]
        /// Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied.
        public let applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault?

        public init(applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault? = nil) {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        }
    }

    public enum MFADeleteStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryConfiguration", location: .body(locationName: "InventoryConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration
        /// The name of the bucket where the inventory configuration will be stored.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(inventoryConfiguration: InventoryConfiguration, bucket: String, id: String) {
            self.inventoryConfiguration = inventoryConfiguration
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryConfiguration = "InventoryConfiguration"
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct LifecycleRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public let tags: TagSet?
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct GetBucketAccelerateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket for which the accelerate configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string)
        ]
        /// The Legal Hold status that you want to apply to the specified object.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Name of the bucket to which the PUT operation was initiated.
        public let bucket: String
        /// The Object Lock mode that you want to apply to this object.
        public let objectLockMode: ObjectLockMode?
        /// The date and time when you want this object's Object Lock to expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Object data.
        public let body: Data?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, "Key1=Value1")
        public let tagging: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Object key for which the PUT operation was initiated.
        public let key: String
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?

        public init(objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, contentType: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKey: String? = nil, metadata: [String: String]? = nil, grantFullControl: String? = nil, contentMD5: String? = nil, storageClass: StorageClass? = nil, grantRead: String? = nil, contentLength: Int64? = nil, contentEncoding: String? = nil, bucket: String, objectLockMode: ObjectLockMode? = nil, objectLockRetainUntilDate: TimeStamp? = nil, serverSideEncryption: ServerSideEncryption? = nil, contentLanguage: String? = nil, contentDisposition: String? = nil, cacheControl: String? = nil, sSECustomerAlgorithm: String? = nil, grantWriteACP: String? = nil, body: Data? = nil, acl: ObjectCannedACL? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, tagging: String? = nil, expires: TimeStamp? = nil, grantReadACP: String? = nil, key: String, websiteRedirectLocation: String? = nil) {
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.contentType = contentType
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKey = sSECustomerKey
            self.metadata = metadata
            self.grantFullControl = grantFullControl
            self.contentMD5 = contentMD5
            self.storageClass = storageClass
            self.grantRead = grantRead
            self.contentLength = contentLength
            self.contentEncoding = contentEncoding
            self.bucket = bucket
            self.objectLockMode = objectLockMode
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.serverSideEncryption = serverSideEncryption
            self.contentLanguage = contentLanguage
            self.contentDisposition = contentDisposition
            self.cacheControl = cacheControl
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.grantWriteACP = grantWriteACP
            self.body = body
            self.acl = acl
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.tagging = tagging
            self.expires = expires
            self.grantReadACP = grantReadACP
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
        }

        private enum CodingKeys: String, CodingKey {
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case contentType = "Content-Type"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case metadata = "Metadata"
            case grantFullControl = "x-amz-grant-full-control"
            case contentMD5 = "Content-MD5"
            case storageClass = "x-amz-storage-class"
            case grantRead = "x-amz-grant-read"
            case contentLength = "Content-Length"
            case contentEncoding = "Content-Encoding"
            case bucket = "Bucket"
            case objectLockMode = "x-amz-object-lock-mode"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case contentLanguage = "Content-Language"
            case contentDisposition = "Content-Disposition"
            case cacheControl = "Cache-Control"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case grantWriteACP = "x-amz-grant-write-acp"
            case body = "Body"
            case acl = "x-amz-acl"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case tagging = "x-amz-tagging"
            case expires = "Expires"
            case grantReadACP = "x-amz-grant-read-acp"
            case key = "Key"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
        }
    }

    public struct ListObjectsV2Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "KeyCount", required: false, type: .integer), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "StartAfter", required: false, type: .string)
        ]
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// Name of the bucket to list.
        public let name: String?
        /// CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
        public let commonPrefixes: [CommonPrefix]?
        /// Metadata about each object returned.
        public let contents: [Object]?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys 
        public let keyCount: Int32?
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
        public let nextContinuationToken: String?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?

        public init(encodingType: EncodingType? = nil, name: String? = nil, commonPrefixes: [CommonPrefix]? = nil, contents: [Object]? = nil, prefix: String? = nil, isTruncated: Bool? = nil, delimiter: String? = nil, continuationToken: String? = nil, keyCount: Int32? = nil, maxKeys: Int32? = nil, nextContinuationToken: String? = nil, startAfter: String? = nil) {
            self.encodingType = encodingType
            self.name = name
            self.commonPrefixes = commonPrefixes
            self.contents = contents
            self.prefix = prefix
            self.isTruncated = isTruncated
            self.delimiter = delimiter
            self.continuationToken = continuationToken
            self.keyCount = keyCount
            self.maxKeys = maxKeys
            self.nextContinuationToken = nextContinuationToken
            self.startAfter = startAfter
        }

        private enum CodingKeys: String, CodingKey {
            case encodingType = "EncodingType"
            case name = "Name"
            case commonPrefixes = "CommonPrefixes"
            case contents = "Contents"
            case prefix = "Prefix"
            case isTruncated = "IsTruncated"
            case delimiter = "Delimiter"
            case continuationToken = "ContinuationToken"
            case keyCount = "KeyCount"
            case maxKeys = "MaxKeys"
            case nextContinuationToken = "NextContinuationToken"
            case startAfter = "StartAfter"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Account", required: false, type: .string), 
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "AccessControlTranslation", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        /// The account ID of the destination bucket. Currently, Amazon S3 verifies this value only if Access Control Translation is enabled.  In a cross-account scenario, if you change replica ownership to the AWS account that owns the destination bucket by adding the AccessControlTranslation element, this is the account ID of the owner of the destination bucket. 
        public let account: String?
        ///  The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.   If there are multiple rules in your replication configuration, all rules must specify the same bucket as the destination. A replication configuration can replicate objects to only one destination bucket. 
        public let bucket: String
        /// A container for information about access control for replicas.  Use this element only in a cross-account scenario where source and destination bucket owners are not the same to change replica ownership to the AWS account that owns the destination bucket. If you don't add this element to the replication configuration, the replicas are owned by same AWS account that owns the source object. 
        public let accessControlTranslation: AccessControlTranslation?
        /// A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element. 
        public let encryptionConfiguration: EncryptionConfiguration?
        ///  The class of storage used to store the object. By default Amazon S3 uses storage class of the source object when creating a replica. 
        public let storageClass: StorageClass?

        public init(account: String? = nil, bucket: String, accessControlTranslation: AccessControlTranslation? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, storageClass: StorageClass? = nil) {
            self.account = account
            self.bucket = bucket
            self.accessControlTranslation = accessControlTranslation
            self.encryptionConfiguration = encryptionConfiguration
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case account = "Account"
            case bucket = "Bucket"
            case accessControlTranslation = "AccessControlTranslation"
            case encryptionConfiguration = "EncryptionConfiguration"
            case storageClass = "StorageClass"
        }
    }

    public struct AccessControlTranslation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: true, type: .enum)
        ]
        /// The override value for the owner of the replica object.
        public let owner: OwnerOverride

        public init(owner: OwnerOverride) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct GetBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketCorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: false, type: .list)
        ]
        public let cORSRules: [CORSRule]?

        public init(cORSRules: [CORSRule]? = nil) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public enum StorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        case glacier = "GLACIER"
        public var description: String { return self.rawValue }
    }

    public struct CreateMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .body(locationName: "Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// ID for the initiated multipart upload.
        public let uploadId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        public let requestCharged: RequestCharged?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Object key for which the multipart upload was initiated.
        public let key: String?

        public init(abortDate: TimeStamp? = nil, uploadId: String? = nil, sSEKMSKeyId: String? = nil, requestCharged: RequestCharged? = nil, abortRuleId: String? = nil, bucket: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, sSECustomerKeyMD5: String? = nil, sSECustomerAlgorithm: String? = nil, key: String? = nil) {
            self.abortDate = abortDate
            self.uploadId = uploadId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.requestCharged = requestCharged
            self.abortRuleId = abortRuleId
            self.bucket = bucket
            self.serverSideEncryption = serverSideEncryption
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case abortDate = "x-amz-abort-date"
            case uploadId = "UploadId"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case requestCharged = "x-amz-request-charged"
            case abortRuleId = "x-amz-abort-rule-id"
            case bucket = "Bucket"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case key = "Key"
        }
    }

    public struct DeleteObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        /// The versionId of the object that the tag-set will be removed from.
        public let versionId: String?
        public let bucket: String
        public let key: String

        public init(versionId: String? = nil, bucket: String, key: String) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct AbortMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string)
        ]
        public let key: String
        public let bucket: String
        public let requestPayer: RequestPayer?
        public let uploadId: String

        public init(key: String, bucket: String, requestPayer: RequestPayer? = nil, uploadId: String) {
            self.key = key
            self.bucket = bucket
            self.requestPayer = requestPayer
            self.uploadId = uploadId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
            case requestPayer = "x-amz-request-payer"
            case uploadId = "uploadId"
        }
    }

    public struct GetObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentRange", location: .header(locationName: "Content-Range"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockRetainUntilDate", location: .header(locationName: "x-amz-object-lock-retain-until-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockMode", location: .header(locationName: "x-amz-object-lock-mode"), required: false, type: .enum), 
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "ObjectLockLegalHoldStatus", location: .header(locationName: "x-amz-object-lock-legal-hold"), required: false, type: .enum), 
            AWSShapeMember(label: "TagCount", location: .header(locationName: "x-amz-tagging-count"), required: false, type: .integer)
        ]
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?
        public let replicationStatus: ReplicationStatus?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        public let storageClass: StorageClass?
        /// The portion of the object returned in the response.
        public let contentRange: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The date and time when this object's Object Lock will expire.
        public let objectLockRetainUntilDate: TimeStamp?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        public let requestCharged: RequestCharged?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        public let acceptRanges: String?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// Object data.
        public let body: Data?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// The Object Lock mode currently in place for this object.
        public let objectLockMode: ObjectLockMode?
        /// The count of parts this object has.
        public let partsCount: Int32?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Version of the object.
        public let versionId: String?
        /// Indicates whether this object has an active legal hold. This field is only returned if you have permission to view an object's legal hold status.
        public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
        /// The number of tags, if any, on the object.
        public let tagCount: Int32?

        public init(contentType: String? = nil, deleteMarker: Bool? = nil, replicationStatus: ReplicationStatus? = nil, expires: TimeStamp? = nil, contentLanguage: String? = nil, restore: String? = nil, expiration: String? = nil, storageClass: StorageClass? = nil, contentRange: String? = nil, sSECustomerKeyMD5: String? = nil, objectLockRetainUntilDate: TimeStamp? = nil, contentEncoding: String? = nil, websiteRedirectLocation: String? = nil, requestCharged: RequestCharged? = nil, metadata: [String: String]? = nil, acceptRanges: String? = nil, contentLength: Int64? = nil, sSECustomerAlgorithm: String? = nil, contentDisposition: String? = nil, missingMeta: Int32? = nil, lastModified: TimeStamp? = nil, body: Data? = nil, cacheControl: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, objectLockMode: ObjectLockMode? = nil, partsCount: Int32? = nil, eTag: String? = nil, sSEKMSKeyId: String? = nil, versionId: String? = nil, objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil, tagCount: Int32? = nil) {
            self.contentType = contentType
            self.deleteMarker = deleteMarker
            self.replicationStatus = replicationStatus
            self.expires = expires
            self.contentLanguage = contentLanguage
            self.restore = restore
            self.expiration = expiration
            self.storageClass = storageClass
            self.contentRange = contentRange
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.contentEncoding = contentEncoding
            self.websiteRedirectLocation = websiteRedirectLocation
            self.requestCharged = requestCharged
            self.metadata = metadata
            self.acceptRanges = acceptRanges
            self.contentLength = contentLength
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentDisposition = contentDisposition
            self.missingMeta = missingMeta
            self.lastModified = lastModified
            self.body = body
            self.cacheControl = cacheControl
            self.serverSideEncryption = serverSideEncryption
            self.objectLockMode = objectLockMode
            self.partsCount = partsCount
            self.eTag = eTag
            self.sSEKMSKeyId = sSEKMSKeyId
            self.versionId = versionId
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.tagCount = tagCount
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "Content-Type"
            case deleteMarker = "x-amz-delete-marker"
            case replicationStatus = "x-amz-replication-status"
            case expires = "Expires"
            case contentLanguage = "Content-Language"
            case restore = "x-amz-restore"
            case expiration = "x-amz-expiration"
            case storageClass = "x-amz-storage-class"
            case contentRange = "Content-Range"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case objectLockRetainUntilDate = "x-amz-object-lock-retain-until-date"
            case contentEncoding = "Content-Encoding"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case requestCharged = "x-amz-request-charged"
            case metadata = "Metadata"
            case acceptRanges = "accept-ranges"
            case contentLength = "Content-Length"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentDisposition = "Content-Disposition"
            case missingMeta = "x-amz-missing-meta"
            case lastModified = "Last-Modified"
            case body = "Body"
            case cacheControl = "Cache-Control"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case objectLockMode = "x-amz-object-lock-mode"
            case partsCount = "x-amz-mp-parts-count"
            case eTag = "ETag"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case versionId = "x-amz-version-id"
            case objectLockLegalHoldStatus = "x-amz-object-lock-legal-hold"
            case tagCount = "x-amz-tagging-count"
        }
    }

    public struct DeleteBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ObjectIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// Key name of the object to delete.
        public let key: String
        /// VersionId for the specific version of the object to delete.
        public let versionId: String?

        public init(key: String, versionId: String? = nil) {
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case versionId = "VersionId"
        }
    }

    public struct ListObjectVersionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "Version"), required: false, type: .list), 
            AWSShapeMember(label: "NextVersionIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "DeleteMarkers", location: .body(locationName: "DeleteMarker"), required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string)
        ]
        public let versionIdMarker: String?
        public let delimiter: String?
        public let prefix: String?
        public let versions: [ObjectVersion]?
        /// Use this value for the next version id marker parameter in a subsequent request.
        public let nextVersionIdMarker: String?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
        public let isTruncated: Bool?
        public let maxKeys: Int32?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// Use this value for the key marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        public let commonPrefixes: [CommonPrefix]?
        public let deleteMarkers: [DeleteMarkerEntry]?
        public let name: String?
        /// Marks the last Key returned in a truncated response.
        public let keyMarker: String?

        public init(versionIdMarker: String? = nil, delimiter: String? = nil, prefix: String? = nil, versions: [ObjectVersion]? = nil, nextVersionIdMarker: String? = nil, isTruncated: Bool? = nil, maxKeys: Int32? = nil, encodingType: EncodingType? = nil, nextKeyMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, deleteMarkers: [DeleteMarkerEntry]? = nil, name: String? = nil, keyMarker: String? = nil) {
            self.versionIdMarker = versionIdMarker
            self.delimiter = delimiter
            self.prefix = prefix
            self.versions = versions
            self.nextVersionIdMarker = nextVersionIdMarker
            self.isTruncated = isTruncated
            self.maxKeys = maxKeys
            self.encodingType = encodingType
            self.nextKeyMarker = nextKeyMarker
            self.commonPrefixes = commonPrefixes
            self.deleteMarkers = deleteMarkers
            self.name = name
            self.keyMarker = keyMarker
        }

        private enum CodingKeys: String, CodingKey {
            case versionIdMarker = "VersionIdMarker"
            case delimiter = "Delimiter"
            case prefix = "Prefix"
            case versions = "Version"
            case nextVersionIdMarker = "NextVersionIdMarker"
            case isTruncated = "IsTruncated"
            case maxKeys = "MaxKeys"
            case encodingType = "EncodingType"
            case nextKeyMarker = "NextKeyMarker"
            case commonPrefixes = "CommonPrefixes"
            case deleteMarkers = "DeleteMarker"
            case name = "Name"
            case keyMarker = "KeyMarker"
        }
    }

    public struct GetBucketLocationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueueConfigurations", location: .body(locationName: "QueueConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "LambdaFunctionConfigurations", location: .body(locationName: "CloudFunctionConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "TopicConfigurations", location: .body(locationName: "TopicConfiguration"), required: false, type: .list)
        ]
        public let queueConfigurations: [QueueConfiguration]?
        public let lambdaFunctionConfigurations: [LambdaFunctionConfiguration]?
        public let topicConfigurations: [TopicConfiguration]?

        public init(queueConfigurations: [QueueConfiguration]? = nil, lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil, topicConfigurations: [TopicConfiguration]? = nil) {
            self.queueConfigurations = queueConfigurations
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
            self.topicConfigurations = topicConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case queueConfigurations = "QueueConfiguration"
            case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
            case topicConfigurations = "TopicConfiguration"
        }
    }

    public struct CreateBucketRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CreateBucketConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "CreateBucketConfiguration", location: .body(locationName: "CreateBucketConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectLockEnabledForBucket", location: .header(locationName: "x-amz-bucket-object-lock-enabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string)
        ]
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let createBucketConfiguration: CreateBucketConfiguration?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        public let bucket: String
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        /// Specifies whether you want S3 Object Lock to be enabled for the new bucket.
        public let objectLockEnabledForBucket: Bool?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?

        public init(grantReadACP: String? = nil, grantWrite: String? = nil, grantWriteACP: String? = nil, createBucketConfiguration: CreateBucketConfiguration? = nil, grantRead: String? = nil, bucket: String, acl: BucketCannedACL? = nil, objectLockEnabledForBucket: Bool? = nil, grantFullControl: String? = nil) {
            self.grantReadACP = grantReadACP
            self.grantWrite = grantWrite
            self.grantWriteACP = grantWriteACP
            self.createBucketConfiguration = createBucketConfiguration
            self.grantRead = grantRead
            self.bucket = bucket
            self.acl = acl
            self.objectLockEnabledForBucket = objectLockEnabledForBucket
            self.grantFullControl = grantFullControl
        }

        private enum CodingKeys: String, CodingKey {
            case grantReadACP = "x-amz-grant-read-acp"
            case grantWrite = "x-amz-grant-write"
            case grantWriteACP = "x-amz-grant-write-acp"
            case createBucketConfiguration = "CreateBucketConfiguration"
            case grantRead = "x-amz-grant-read"
            case bucket = "Bucket"
            case acl = "x-amz-acl"
            case objectLockEnabledForBucket = "x-amz-bucket-object-lock-enabled"
            case grantFullControl = "x-amz-grant-full-control"
        }
    }

    public struct UploadPartOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// Entity tag for the uploaded object.
        public let eTag: String?

        public init(requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerKeyMD5: String? = nil, eTag: String? = nil) {
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case eTag = "ETag"
        }
    }

    public struct GetBucketAccelerateConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public enum RequestCharged: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// The name of the bucket containing the metrics configuration to retrieve.
        public let bucket: String

        public init(id: String, bucket: String) {
            self.id = id
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case bucket = "Bucket"
        }
    }

    public enum ReplicationRuleStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectLegalHoldOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LegalHold"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LegalHold", required: false, type: .structure)
        ]
        /// The current Legal Hold status for the specified object.
        public let legalHold: ObjectLockLegalHold?

        public init(legalHold: ObjectLockLegalHold? = nil) {
            self.legalHold = legalHold
        }

        private enum CodingKeys: String, CodingKey {
            case legalHold = "LegalHold"
        }
    }

    public struct PutBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CORSConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CORSConfiguration", location: .body(locationName: "CORSConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let contentMD5: String?
        public let cORSConfiguration: CORSConfiguration
        public let bucket: String

        public init(contentMD5: String? = nil, cORSConfiguration: CORSConfiguration, bucket: String) {
            self.contentMD5 = contentMD5
            self.cORSConfiguration = cORSConfiguration
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case cORSConfiguration = "CORSConfiguration"
            case bucket = "Bucket"
        }
    }

}