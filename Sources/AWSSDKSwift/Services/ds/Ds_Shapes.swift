// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Ds {

    public struct EnableRadiusResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteDirectoryResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The directory identifier.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public enum SnapshotStatus: String, CustomStringConvertible {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTrustRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Delete a conditional forwarder as part of a DeleteTrustRequest.
        public let deleteAssociatedConditionalForwarder: Bool?
        /// The Trust ID of the trust relationship to be deleted.
        public let trustId: String

        public init(deleteAssociatedConditionalForwarder: Bool? = nil, trustId: String) {
            self.deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarder
            self.trustId = trustId
        }

        public init(dictionary: [String: Any]) throws {
            self.deleteAssociatedConditionalForwarder = dictionary["DeleteAssociatedConditionalForwarder"] as? Bool
            guard let trustId = dictionary["TrustId"] as? String else { throw InitializableError.missingRequiredParam("TrustId") }
            self.trustId = trustId
        }
    }

    public struct DescribeTrustsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let trustIds: [String]?
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// The DescribeTrustsResult.NextToken value from a previous call to DescribeTrusts. Pass null if this is the first call.
        public let nextToken: String?
        /// The Directory ID of the AWS directory that is a part of the requested trust relationship.
        public let directoryId: String?

        public init(trustIds: [String]? = nil, limit: Int32? = nil, nextToken: String? = nil, directoryId: String? = nil) {
            self.trustIds = trustIds
            self.limit = limit
            self.nextToken = nextToken
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.trustIds = dictionary["TrustIds"] as? [String]
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct CreateTrustResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique identifier for the trust relationship that was created.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        public init(dictionary: [String: Any]) throws {
            self.trustId = dictionary["TrustId"] as? String
        }
    }

    public struct RemoveIpRoutesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier (ID) of the directory from which you want to remove the IP addresses.
        public let directoryId: String
        /// IP address blocks that you want to remove.
        public let cidrIps: [String]

        public init(directoryId: String, cidrIps: [String]) {
            self.directoryId = directoryId
            self.cidrIps = cidrIps
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let cidrIps = dictionary["CidrIps"] as? [String] else { throw InitializableError.missingRequiredParam("CidrIps") }
            self.cidrIps = cidrIps
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String
        /// Required name of the tag. The string value can be Unicode characters and cannot be prefixed with "aws:". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct CreateConditionalForwarderResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Computer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the computer.
        public let computerId: String?
        /// The computer name.
        public let computerName: String?
        /// An array of Attribute objects containing the LDAP attributes that belong to the computer account.
        public let computerAttributes: [Attribute]?

        public init(computerId: String? = nil, computerName: String? = nil, computerAttributes: [Attribute]? = nil) {
            self.computerId = computerId
            self.computerName = computerName
            self.computerAttributes = computerAttributes
        }

        public init(dictionary: [String: Any]) throws {
            self.computerId = dictionary["ComputerId"] as? String
            self.computerName = dictionary["ComputerName"] as? String
            if let computerAttributes = dictionary["ComputerAttributes"] as? [[String: Any]] {
                self.computerAttributes = try computerAttributes.map({ try Attribute(dictionary: $0) })
            } else { 
                self.computerAttributes = nil
            }
        }
    }

    public enum SchemaExtensionStatus: String, CustomStringConvertible {
        case initializing = "Initializing"
        case creatingsnapshot = "CreatingSnapshot"
        case updatingschema = "UpdatingSchema"
        case replicating = "Replicating"
        case cancelinprogress = "CancelInProgress"
        case rollbackinprogress = "RollbackInProgress"
        case cancelled = "Cancelled"
        case failed = "Failed"
        case completed = "Completed"
        public var description: String { return self.rawValue }
    }

    public struct Attribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.name = dictionary["Name"] as? String
        }
    }

    public struct CreateAliasRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The requested alias. The alias must be unique amongst all aliases in AWS. This operation throws an EntityAlreadyExistsException error if the alias already exists.
        public let alias: String
        /// The identifier of the directory for which to create the alias.
        public let directoryId: String

        public init(alias: String, directoryId: String) {
            self.alias = alias
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let alias = dictionary["Alias"] as? String else { throw InitializableError.missingRequiredParam("Alias") }
            self.alias = alias
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct DirectoryConnectSettingsDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of subnet identifiers in the VPC that the AD connector is in.
        public let subnetIds: [String]?
        /// The security group identifier for the AD Connector directory.
        public let securityGroupId: String?
        /// A list of the Availability Zones that the directory is in.
        public let availabilityZones: [String]?
        /// The identifier of the VPC that the AD Connector is in.
        public let vpcId: String?
        /// The username of the service account in the on-premises directory.
        public let customerUserName: String?
        /// The IP addresses of the AD Connector servers.
        public let connectIps: [String]?

        public init(subnetIds: [String]? = nil, securityGroupId: String? = nil, availabilityZones: [String]? = nil, vpcId: String? = nil, customerUserName: String? = nil, connectIps: [String]? = nil) {
            self.subnetIds = subnetIds
            self.securityGroupId = securityGroupId
            self.availabilityZones = availabilityZones
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.connectIps = connectIps
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIds = dictionary["SubnetIds"] as? [String]
            self.securityGroupId = dictionary["SecurityGroupId"] as? String
            self.availabilityZones = dictionary["AvailabilityZones"] as? [String]
            self.vpcId = dictionary["VpcId"] as? String
            self.customerUserName = dictionary["CustomerUserName"] as? String
            self.connectIps = dictionary["ConnectIps"] as? [String]
        }
    }

    public struct DescribeSnapshotsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If not null, more results are available. Pass this value in the NextToken member of a subsequent call to DescribeSnapshots.
        public let nextToken: String?
        /// The list of Snapshot objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let snapshots = dictionary["Snapshots"] as? [[String: Any]] {
                self.snapshots = try snapshots.map({ try Snapshot(dictionary: $0) })
            } else { 
                self.snapshots = nil
            }
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier (ID) for the directory to which to add the tag.
        public let resourceId: String
        /// The tags to be assigned to the directory.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct DeleteDirectoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory to delete.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct IpRoute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.
        public let cidrIp: String?
        /// Description of the address block.
        public let description: String?

        public init(cidrIp: String? = nil, description: String? = nil) {
            self.cidrIp = cidrIp
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.cidrIp = dictionary["CidrIp"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DirectoryDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The short name of the directory.
        public let shortName: String?
        /// Specifies when the directory was created.
        public let launchTime: Date?
        /// The directory identifier.
        public let directoryId: String?
        /// The current stage of the directory.
        public let stage: DirectoryStage?
        /// The textual description for the directory.
        public let description: String?
        /// The date and time that the stage was last updated.
        public let stageLastUpdatedDateTime: Date?
        /// A DirectoryVpcSettingsDescription object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed AD directory.
        public let vpcSettings: DirectoryVpcSettingsDescription?
        /// Indicates if single-sign on is enabled for the directory. For more information, see EnableSso and DisableSso.
        public let ssoEnabled: Bool?
        /// A RadiusSettings object that contains information about the RADIUS server configured for this directory.
        public let radiusSettings: RadiusSettings?
        /// Additional information about the directory stage.
        public let stageReason: String?
        /// The fully-qualified name of the directory.
        public let name: String?
        /// The access URL for the directory, such as http://&lt;alias&gt;.awsapps.com. If no alias has been created for the directory, &lt;alias&gt; is the directory identifier, such as d-XXXXXXXXXX.
        public let accessUrl: String?
        /// The directory size.
        public let size: DirectorySize?
        /// The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as d-XXXXXXXXXX.
        public let alias: String?
        /// The status of the RADIUS MFA server connection.
        public let radiusStatus: RadiusStatus?
        /// The directory size.
        public let `type`: DirectoryType?
        /// A DirectoryConnectSettingsDescription object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.
        public let connectSettings: DirectoryConnectSettingsDescription?
        /// The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in the on-premises directory to which the AD Connector is connected.
        public let dnsIpAddrs: [String]?

        public init(shortName: String? = nil, launchTime: Date? = nil, directoryId: String? = nil, stage: DirectoryStage? = nil, description: String? = nil, stageLastUpdatedDateTime: Date? = nil, vpcSettings: DirectoryVpcSettingsDescription? = nil, ssoEnabled: Bool? = nil, radiusSettings: RadiusSettings? = nil, stageReason: String? = nil, name: String? = nil, accessUrl: String? = nil, size: DirectorySize? = nil, alias: String? = nil, radiusStatus: RadiusStatus? = nil, type: DirectoryType? = nil, connectSettings: DirectoryConnectSettingsDescription? = nil, dnsIpAddrs: [String]? = nil) {
            self.shortName = shortName
            self.launchTime = launchTime
            self.directoryId = directoryId
            self.stage = stage
            self.description = description
            self.stageLastUpdatedDateTime = stageLastUpdatedDateTime
            self.vpcSettings = vpcSettings
            self.ssoEnabled = ssoEnabled
            self.radiusSettings = radiusSettings
            self.stageReason = stageReason
            self.name = name
            self.accessUrl = accessUrl
            self.size = size
            self.alias = alias
            self.radiusStatus = radiusStatus
            self.`type` = `type`
            self.connectSettings = connectSettings
            self.dnsIpAddrs = dnsIpAddrs
        }

        public init(dictionary: [String: Any]) throws {
            self.shortName = dictionary["ShortName"] as? String
            self.launchTime = dictionary["LaunchTime"] as? Date
            self.directoryId = dictionary["DirectoryId"] as? String
            if let stage = dictionary["Stage"] as? String { self.stage = DirectoryStage(rawValue: stage) } else { self.stage = nil }
            self.description = dictionary["Description"] as? String
            self.stageLastUpdatedDateTime = dictionary["StageLastUpdatedDateTime"] as? Date
            if let vpcSettings = dictionary["VpcSettings"] as? [String: Any] { self.vpcSettings = try Ds.DirectoryVpcSettingsDescription(dictionary: vpcSettings) } else { self.vpcSettings = nil }
            self.ssoEnabled = dictionary["SsoEnabled"] as? Bool
            if let radiusSettings = dictionary["RadiusSettings"] as? [String: Any] { self.radiusSettings = try Ds.RadiusSettings(dictionary: radiusSettings) } else { self.radiusSettings = nil }
            self.stageReason = dictionary["StageReason"] as? String
            self.name = dictionary["Name"] as? String
            self.accessUrl = dictionary["AccessUrl"] as? String
            if let size = dictionary["Size"] as? String { self.size = DirectorySize(rawValue: size) } else { self.size = nil }
            self.alias = dictionary["Alias"] as? String
            if let radiusStatus = dictionary["RadiusStatus"] as? String { self.radiusStatus = RadiusStatus(rawValue: radiusStatus) } else { self.radiusStatus = nil }
            if let `type` = dictionary["Type"] as? String { self.`type` = DirectoryType(rawValue: `type`) } else { self.`type` = nil }
            if let connectSettings = dictionary["ConnectSettings"] as? [String: Any] { self.connectSettings = try Ds.DirectoryConnectSettingsDescription(dictionary: connectSettings) } else { self.connectSettings = nil }
            self.dnsIpAddrs = dictionary["DnsIpAddrs"] as? [String]
        }
    }

    public struct UpdateConditionalForwarderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The directory ID of the AWS directory for which to update the conditional forwarder.
        public let directoryId: String
        /// The updated IP addresses of the remote DNS server associated with the conditional forwarder.
        public let dnsIpAddrs: [String]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String

        public init(directoryId: String, dnsIpAddrs: [String], remoteDomainName: String) {
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let dnsIpAddrs = dictionary["DnsIpAddrs"] as? [String] else { throw InitializableError.missingRequiredParam("DnsIpAddrs") }
            self.dnsIpAddrs = dnsIpAddrs
            guard let remoteDomainName = dictionary["RemoteDomainName"] as? String else { throw InitializableError.missingRequiredParam("RemoteDomainName") }
            self.remoteDomainName = remoteDomainName
        }
    }

    public struct Trust: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship.
        public let remoteDomainName: String?
        /// The date and time that the trust relationship was last updated.
        public let lastUpdatedDateTime: Date?
        /// The trust relationship type.
        public let trustType: TrustType?
        /// The reason for the TrustState.
        public let trustStateReason: String?
        /// The Directory ID of the AWS directory involved in the trust relationship.
        public let directoryId: String?
        /// The trust relationship state.
        public let trustState: TrustState?
        /// The date and time that the trust relationship was created.
        public let createdDateTime: Date?
        /// The unique ID of the trust relationship.
        public let trustId: String?
        /// The date and time that the TrustState was last updated.
        public let stateLastUpdatedDateTime: Date?
        /// The trust relationship direction.
        public let trustDirection: TrustDirection?

        public init(remoteDomainName: String? = nil, lastUpdatedDateTime: Date? = nil, trustType: TrustType? = nil, trustStateReason: String? = nil, directoryId: String? = nil, trustState: TrustState? = nil, createdDateTime: Date? = nil, trustId: String? = nil, stateLastUpdatedDateTime: Date? = nil, trustDirection: TrustDirection? = nil) {
            self.remoteDomainName = remoteDomainName
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.trustType = trustType
            self.trustStateReason = trustStateReason
            self.directoryId = directoryId
            self.trustState = trustState
            self.createdDateTime = createdDateTime
            self.trustId = trustId
            self.stateLastUpdatedDateTime = stateLastUpdatedDateTime
            self.trustDirection = trustDirection
        }

        public init(dictionary: [String: Any]) throws {
            self.remoteDomainName = dictionary["RemoteDomainName"] as? String
            self.lastUpdatedDateTime = dictionary["LastUpdatedDateTime"] as? Date
            if let trustType = dictionary["TrustType"] as? String { self.trustType = TrustType(rawValue: trustType) } else { self.trustType = nil }
            self.trustStateReason = dictionary["TrustStateReason"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
            if let trustState = dictionary["TrustState"] as? String { self.trustState = TrustState(rawValue: trustState) } else { self.trustState = nil }
            self.createdDateTime = dictionary["CreatedDateTime"] as? Date
            self.trustId = dictionary["TrustId"] as? String
            self.stateLastUpdatedDateTime = dictionary["StateLastUpdatedDateTime"] as? Date
            if let trustDirection = dictionary["TrustDirection"] as? String { self.trustDirection = TrustDirection(rawValue: trustDirection) } else { self.trustDirection = nil }
        }
    }

    public struct ListIpRoutesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier (ID) of the directory for which you want to retrieve the IP addresses.
        public let directoryId: String
        /// The ListIpRoutes.NextToken value from a previous call to ListIpRoutes. Pass null if this is the first call.
        public let nextToken: String?
        /// Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?

        public init(directoryId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.directoryId = directoryId
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct RemoveTagsFromResourceResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum RadiusStatus: String, CustomStringConvertible {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct EventTopic: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The SNS topic ARN (Amazon Resource Name).
        public let topicArn: String?
        /// The name of an AWS SNS topic the receives status messages from the directory.
        public let topicName: String?
        /// The date and time of when you associated your directory with the SNS topic.
        public let createdDateTime: Date?
        /// The topic registration status.
        public let status: TopicStatus?
        /// The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic.
        public let directoryId: String?

        public init(topicArn: String? = nil, topicName: String? = nil, createdDateTime: Date? = nil, status: TopicStatus? = nil, directoryId: String? = nil) {
            self.topicArn = topicArn
            self.topicName = topicName
            self.createdDateTime = createdDateTime
            self.status = status
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.topicArn = dictionary["TopicArn"] as? String
            self.topicName = dictionary["TopicName"] as? String
            self.createdDateTime = dictionary["CreatedDateTime"] as? Date
            if let status = dictionary["Status"] as? String { self.status = TopicStatus(rawValue: status) } else { self.status = nil }
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct DirectoryVpcSettings: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the VPC in which to create the directory.
        public let vpcId: String
        /// The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service creates a directory server and a DNS server in each of these subnets.
        public let subnetIds: [String]

        public init(vpcId: String, subnetIds: [String]) {
            self.vpcId = vpcId
            self.subnetIds = subnetIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let vpcId = dictionary["VpcId"] as? String else { throw InitializableError.missingRequiredParam("VpcId") }
            self.vpcId = vpcId
            guard let subnetIds = dictionary["SubnetIds"] as? [String] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = subnetIds
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier (ID) of the directory for which you want to retrieve tags.
        public let resourceId: String
        /// Reserved for future use.
        public let nextToken: String?
        /// Reserved for future use.
        public let limit: Int32?

        public init(resourceId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.resourceId = resourceId
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DescribeTrustsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of Trust objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let trusts: [Trust]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeTrusts to retrieve the next set of items.
        public let nextToken: String?

        public init(trusts: [Trust]? = nil, nextToken: String? = nil) {
            self.trusts = trusts
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let trusts = dictionary["Trusts"] as? [[String: Any]] {
                self.trusts = try trusts.map({ try Trust(dictionary: $0) })
            } else { 
                self.trusts = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateMicrosoftADRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vpcSettings: DirectoryVpcSettings
        /// The NetBIOS name for your domain. A short identifier for your domain, such as CORP. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, CORP for the directory DNS corp.example.com. 
        public let shortName: String?
        /// The fully qualified domain name for the directory, such as corp.example.com. This name will resolve inside your VPC only. It does not need to be publicly resolvable.
        public let name: String
        /// The password for the default administrative user named Admin.
        public let password: String
        /// A textual description for the directory. This label will appear on the AWS console Directory Details page after the directory is created.
        public let description: String?

        public init(vpcSettings: DirectoryVpcSettings, shortName: String? = nil, name: String, password: String, description: String? = nil) {
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.name = name
            self.password = password
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let vpcSettings = dictionary["VpcSettings"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VpcSettings") }
            self.vpcSettings = try Ds.DirectoryVpcSettings(dictionary: vpcSettings)
            self.shortName = dictionary["ShortName"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            self.description = dictionary["Description"] as? String
        }
    }

    public struct AddTagsToResourceResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DirectoryLimits: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of cloud directories allowed in the region.
        public let cloudOnlyDirectoriesLimit: Int32?
        /// Indicates if the cloud directory limit has been reached.
        public let cloudOnlyDirectoriesLimitReached: Bool?
        /// The current number of connected directories in the region.
        public let connectedDirectoriesCurrentCount: Int32?
        /// The current number of Microsoft AD directories in the region.
        public let cloudOnlyMicrosoftADCurrentCount: Int32?
        /// The current number of cloud directories in the region.
        public let cloudOnlyDirectoriesCurrentCount: Int32?
        /// The maximum number of Microsoft AD directories allowed in the region.
        public let cloudOnlyMicrosoftADLimit: Int32?
        /// Indicates if the Microsoft AD directory limit has been reached.
        public let cloudOnlyMicrosoftADLimitReached: Bool?
        /// Indicates if the connected directory limit has been reached.
        public let connectedDirectoriesLimitReached: Bool?
        /// The maximum number of connected directories allowed in the region.
        public let connectedDirectoriesLimit: Int32?

        public init(cloudOnlyDirectoriesLimit: Int32? = nil, cloudOnlyDirectoriesLimitReached: Bool? = nil, connectedDirectoriesCurrentCount: Int32? = nil, cloudOnlyMicrosoftADCurrentCount: Int32? = nil, cloudOnlyDirectoriesCurrentCount: Int32? = nil, cloudOnlyMicrosoftADLimit: Int32? = nil, cloudOnlyMicrosoftADLimitReached: Bool? = nil, connectedDirectoriesLimitReached: Bool? = nil, connectedDirectoriesLimit: Int32? = nil) {
            self.cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit
            self.cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReached
            self.connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount
            self.cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount
            self.cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount
            self.cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit
            self.cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReached
            self.connectedDirectoriesLimitReached = connectedDirectoriesLimitReached
            self.connectedDirectoriesLimit = connectedDirectoriesLimit
        }

        public init(dictionary: [String: Any]) throws {
            self.cloudOnlyDirectoriesLimit = dictionary["CloudOnlyDirectoriesLimit"] as? Int32
            self.cloudOnlyDirectoriesLimitReached = dictionary["CloudOnlyDirectoriesLimitReached"] as? Bool
            self.connectedDirectoriesCurrentCount = dictionary["ConnectedDirectoriesCurrentCount"] as? Int32
            self.cloudOnlyMicrosoftADCurrentCount = dictionary["CloudOnlyMicrosoftADCurrentCount"] as? Int32
            self.cloudOnlyDirectoriesCurrentCount = dictionary["CloudOnlyDirectoriesCurrentCount"] as? Int32
            self.cloudOnlyMicrosoftADLimit = dictionary["CloudOnlyMicrosoftADLimit"] as? Int32
            self.cloudOnlyMicrosoftADLimitReached = dictionary["CloudOnlyMicrosoftADLimitReached"] as? Bool
            self.connectedDirectoriesLimitReached = dictionary["ConnectedDirectoriesLimitReached"] as? Bool
            self.connectedDirectoriesLimit = dictionary["ConnectedDirectoriesLimit"] as? Int32
        }
    }

    public struct ListSchemaExtensionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory from which to retrieve the schema extension information.
        public let directoryId: String
        /// The ListSchemaExtensions.NextToken value from a previous call to ListSchemaExtensions. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of items to return.
        public let limit: Int32?

        public init(directoryId: String, nextToken: String? = nil, limit: Int32? = nil) {
            self.directoryId = directoryId
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DeregisterEventTopicRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the SNS topic from which to remove the directory as a publisher.
        public let topicName: String
        /// The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic.
        public let directoryId: String

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let topicName = dictionary["TopicName"] as? String else { throw InitializableError.missingRequiredParam("TopicName") }
            self.topicName = topicName
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct EnableSsoResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetDirectoryLimitsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A DirectoryLimits object that contains the directory limits for the current region.
        public let directoryLimits: DirectoryLimits?

        public init(directoryLimits: DirectoryLimits? = nil) {
            self.directoryLimits = directoryLimits
        }

        public init(dictionary: [String: Any]) throws {
            if let directoryLimits = dictionary["DirectoryLimits"] as? [String: Any] { self.directoryLimits = try Ds.DirectoryLimits(dictionary: directoryLimits) } else { self.directoryLimits = nil }
        }
    }

    public struct ConnectDirectoryResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the new directory.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public enum SnapshotType: String, CustomStringConvertible {
        case auto = "Auto"
        case manual = "Manual"
        public var description: String { return self.rawValue }
    }

    public struct DescribeConditionalForwardersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned.
        public let remoteDomainNames: [String]?
        /// The directory ID for which to get the list of associated conditional forwarders.
        public let directoryId: String

        public init(remoteDomainNames: [String]? = nil, directoryId: String) {
            self.remoteDomainNames = remoteDomainNames
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.remoteDomainNames = dictionary["RemoteDomainNames"] as? [String]
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct GetDirectoryLimitsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum TrustState: String, CustomStringConvertible {
        case creating = "Creating"
        case created = "Created"
        case verifying = "Verifying"
        case verifyfailed = "VerifyFailed"
        case verified = "Verified"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct EnableSsoRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?
        /// The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name. If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The identifier of the directory for which to enable single-sign on.
        public let directoryId: String

        public init(password: String? = nil, userName: String? = nil, directoryId: String) {
            self.password = password
            self.userName = userName
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.password = dictionary["Password"] as? String
            self.userName = dictionary["UserName"] as? String
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct StartSchemaExtensionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory for which the schema extension will be applied to.
        public let directoryId: String
        /// If true, creates a snapshot of the directory before applying the schema extension.
        public let createSnapshotBeforeSchemaExtension: Bool
        /// The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.
        public let ldifContent: String
        /// A description of the schema extension.
        public let description: String

        public init(directoryId: String, createSnapshotBeforeSchemaExtension: Bool, ldifContent: String, description: String) {
            self.directoryId = directoryId
            self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
            self.ldifContent = ldifContent
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let createSnapshotBeforeSchemaExtension = dictionary["CreateSnapshotBeforeSchemaExtension"] as? Bool else { throw InitializableError.missingRequiredParam("CreateSnapshotBeforeSchemaExtension") }
            self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
            guard let ldifContent = dictionary["LdifContent"] as? String else { throw InitializableError.missingRequiredParam("LdifContent") }
            self.ldifContent = ldifContent
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct RestoreFromSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteConditionalForwarderResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct RemoveIpRoutesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ConditionalForwarder: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to.
        public let dnsIpAddrs: [String]?
        /// The replication scope of the conditional forwarder. The only allowed value is Domain, which will replicate the conditional forwarder to all of the domain controllers for your AWS directory.
        public let replicationScope: ReplicationScope?
        /// The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder.
        public let remoteDomainName: String?

        public init(dnsIpAddrs: [String]? = nil, replicationScope: ReplicationScope? = nil, remoteDomainName: String? = nil) {
            self.dnsIpAddrs = dnsIpAddrs
            self.replicationScope = replicationScope
            self.remoteDomainName = remoteDomainName
        }

        public init(dictionary: [String: Any]) throws {
            self.dnsIpAddrs = dictionary["DnsIpAddrs"] as? [String]
            if let replicationScope = dictionary["ReplicationScope"] as? String { self.replicationScope = ReplicationScope(rawValue: replicationScope) } else { self.replicationScope = nil }
            self.remoteDomainName = dictionary["RemoteDomainName"] as? String
        }
    }

    public struct EnableRadiusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings
        /// The identifier of the directory for which to enable MFA.
        public let directoryId: String

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let radiusSettings = dictionary["RadiusSettings"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RadiusSettings") }
            self.radiusSettings = try Ds.RadiusSettings(dictionary: radiusSettings)
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct CreateSnapshotRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The descriptive name to apply to the snapshot.
        public let name: String?
        /// The identifier of the directory of which to take a snapshot.
        public let directoryId: String

        public init(name: String? = nil, directoryId: String) {
            self.name = name
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Reserved for future use.
        public let nextToken: String?
        /// List of tags returned by the ListTagsForResource operation.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct GetSnapshotLimitsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A SnapshotLimits object that contains the manual snapshot limits for the specified directory.
        public let snapshotLimits: SnapshotLimits?

        public init(snapshotLimits: SnapshotLimits? = nil) {
            self.snapshotLimits = snapshotLimits
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotLimits = dictionary["SnapshotLimits"] as? [String: Any] { self.snapshotLimits = try Ds.SnapshotLimits(dictionary: snapshotLimits) } else { self.snapshotLimits = nil }
        }
    }

    public struct SchemaExtensionInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the schema extension.
        public let schemaExtensionId: String?
        /// The reason for the SchemaExtensionStatus.
        public let schemaExtensionStatusReason: String?
        /// The date and time that the schema extension was completed.
        public let endDateTime: Date?
        /// The identifier of the directory to which the schema extension is applied.
        public let directoryId: String?
        /// The date and time that the schema extension started being applied to the directory.
        public let startDateTime: Date?
        /// The current status of the schema extension.
        public let schemaExtensionStatus: SchemaExtensionStatus?
        /// A description of the schema extension.
        public let description: String?

        public init(schemaExtensionId: String? = nil, schemaExtensionStatusReason: String? = nil, endDateTime: Date? = nil, directoryId: String? = nil, startDateTime: Date? = nil, schemaExtensionStatus: SchemaExtensionStatus? = nil, description: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
            self.schemaExtensionStatusReason = schemaExtensionStatusReason
            self.endDateTime = endDateTime
            self.directoryId = directoryId
            self.startDateTime = startDateTime
            self.schemaExtensionStatus = schemaExtensionStatus
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.schemaExtensionId = dictionary["SchemaExtensionId"] as? String
            self.schemaExtensionStatusReason = dictionary["SchemaExtensionStatusReason"] as? String
            self.endDateTime = dictionary["EndDateTime"] as? Date
            self.directoryId = dictionary["DirectoryId"] as? String
            self.startDateTime = dictionary["StartDateTime"] as? Date
            if let schemaExtensionStatus = dictionary["SchemaExtensionStatus"] as? String { self.schemaExtensionStatus = SchemaExtensionStatus(rawValue: schemaExtensionStatus) } else { self.schemaExtensionStatus = nil }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeDirectoriesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?
        /// The DescribeDirectoriesResult.NextToken value from a previous call to DescribeDirectories. Pass null if this is the first call.
        public let nextToken: String?
        /// A list of identifiers of the directories for which to obtain the information. If this member is null, all directories that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let directoryIds: [String]?

        public init(limit: Int32? = nil, nextToken: String? = nil, directoryIds: [String]? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.directoryIds = directoryIds
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.directoryIds = dictionary["DirectoryIds"] as? [String]
        }
    }

    public enum ReplicationScope: String, CustomStringConvertible {
        case domain = "Domain"
        public var description: String { return self.rawValue }
    }

    public struct CreateComputerResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A Computer object that represents the computer account.
        public let computer: Computer?

        public init(computer: Computer? = nil) {
            self.computer = computer
        }

        public init(dictionary: [String: Any]) throws {
            if let computer = dictionary["Computer"] as? [String: Any] { self.computer = try Ds.Computer(dictionary: computer) } else { self.computer = nil }
        }
    }

    public struct UpdateRadiusResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteConditionalForwarderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The directory ID for which you are deleting the conditional forwarder.
        public let directoryId: String
        /// The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder.
        public let remoteDomainName: String

        public init(directoryId: String, remoteDomainName: String) {
            self.directoryId = directoryId
            self.remoteDomainName = remoteDomainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let remoteDomainName = dictionary["RemoteDomainName"] as? String else { throw InitializableError.missingRequiredParam("RemoteDomainName") }
            self.remoteDomainName = remoteDomainName
        }
    }

    public struct StartSchemaExtensionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the schema extension that will be applied.
        public let schemaExtensionId: String?

        public init(schemaExtensionId: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
        }

        public init(dictionary: [String: Any]) throws {
            self.schemaExtensionId = dictionary["SchemaExtensionId"] as? String
        }
    }

    public struct DescribeConditionalForwardersResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of conditional forwarders that have been created.
        public let conditionalForwarders: [ConditionalForwarder]?

        public init(conditionalForwarders: [ConditionalForwarder]? = nil) {
            self.conditionalForwarders = conditionalForwarders
        }

        public init(dictionary: [String: Any]) throws {
            if let conditionalForwarders = dictionary["ConditionalForwarders"] as? [[String: Any]] {
                self.conditionalForwarders = try conditionalForwarders.map({ try ConditionalForwarder(dictionary: $0) })
            } else { 
                self.conditionalForwarders = nil
            }
        }
    }

    public struct SnapshotLimits: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of manual snapshots allowed.
        public let manualSnapshotsLimit: Int32?
        /// Indicates if the manual snapshot limit has been reached.
        public let manualSnapshotsLimitReached: Bool?
        /// The current number of manual snapshots of the directory.
        public let manualSnapshotsCurrentCount: Int32?

        public init(manualSnapshotsLimit: Int32? = nil, manualSnapshotsLimitReached: Bool? = nil, manualSnapshotsCurrentCount: Int32? = nil) {
            self.manualSnapshotsLimit = manualSnapshotsLimit
            self.manualSnapshotsLimitReached = manualSnapshotsLimitReached
            self.manualSnapshotsCurrentCount = manualSnapshotsCurrentCount
        }

        public init(dictionary: [String: Any]) throws {
            self.manualSnapshotsLimit = dictionary["ManualSnapshotsLimit"] as? Int32
            self.manualSnapshotsLimitReached = dictionary["ManualSnapshotsLimitReached"] as? Bool
            self.manualSnapshotsCurrentCount = dictionary["ManualSnapshotsCurrentCount"] as? Int32
        }
    }

    public struct CreateComputerRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The fully-qualified distinguished name of the organizational unit to place the computer account in.
        public let organizationalUnitDistinguishedName: String?
        /// The name of the computer account.
        public let computerName: String
        /// An array of Attribute objects that contain any LDAP attributes to apply to the computer account.
        public let computerAttributes: [Attribute]?
        /// A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter.
        public let password: String
        /// The identifier of the directory in which to create the computer account.
        public let directoryId: String

        public init(organizationalUnitDistinguishedName: String? = nil, computerName: String, computerAttributes: [Attribute]? = nil, password: String, directoryId: String) {
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.computerName = computerName
            self.computerAttributes = computerAttributes
            self.password = password
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.organizationalUnitDistinguishedName = dictionary["OrganizationalUnitDistinguishedName"] as? String
            guard let computerName = dictionary["ComputerName"] as? String else { throw InitializableError.missingRequiredParam("ComputerName") }
            self.computerName = computerName
            if let computerAttributes = dictionary["ComputerAttributes"] as? [[String: Any]] {
                self.computerAttributes = try computerAttributes.map({ try Attribute(dictionary: $0) })
            } else { 
                self.computerAttributes = nil
            }
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public enum IpRouteStatusMsg: String, CustomStringConvertible {
        case adding = "Adding"
        case added = "Added"
        case removing = "Removing"
        case removed = "Removed"
        case addfailed = "AddFailed"
        case removefailed = "RemoveFailed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of identifiers of the snapshots to obtain the information for. If this member is null or empty, all snapshots are returned using the Limit and NextToken members.
        public let snapshotIds: [String]?
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// The DescribeSnapshotsResult.NextToken value from a previous call to DescribeSnapshots. Pass null if this is the first call.
        public let nextToken: String?
        /// The identifier of the directory for which to retrieve snapshot information.
        public let directoryId: String?

        public init(snapshotIds: [String]? = nil, limit: Int32? = nil, nextToken: String? = nil, directoryId: String? = nil) {
            self.snapshotIds = snapshotIds
            self.limit = limit
            self.nextToken = nextToken
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotIds = dictionary["SnapshotIds"] as? [String]
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct DescribeEventTopicsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned. An empty list results in an InvalidParameterException being thrown.
        public let topicNames: [String]?
        /// The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned.
        public let directoryId: String?

        public init(topicNames: [String]? = nil, directoryId: String? = nil) {
            self.topicNames = topicNames
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.topicNames = dictionary["TopicNames"] as? [String]
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct DirectoryVpcSettingsDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifiers of the subnets for the directory servers.
        public let subnetIds: [String]?
        /// The list of Availability Zones that the directory is in.
        public let availabilityZones: [String]?
        /// The security group identifier for the directory. If the directory was created before 8/1/2014, this is the identifier of the directory members security group that was created when the directory was created. If the directory was created after this date, this value is null.
        public let securityGroupId: String?
        /// The identifier of the VPC that the directory is in.
        public let vpcId: String?

        public init(subnetIds: [String]? = nil, availabilityZones: [String]? = nil, securityGroupId: String? = nil, vpcId: String? = nil) {
            self.subnetIds = subnetIds
            self.availabilityZones = availabilityZones
            self.securityGroupId = securityGroupId
            self.vpcId = vpcId
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIds = dictionary["SubnetIds"] as? [String]
            self.availabilityZones = dictionary["AvailabilityZones"] as? [String]
            self.securityGroupId = dictionary["SecurityGroupId"] as? String
            self.vpcId = dictionary["VpcId"] as? String
        }
    }

    public struct DeleteTrustResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Trust ID of the trust relationship that was deleted.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        public init(dictionary: [String: Any]) throws {
            self.trustId = dictionary["TrustId"] as? String
        }
    }

    public struct CreateAliasResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The alias for the directory.
        public let alias: String?
        /// The identifier of the directory.
        public let directoryId: String?

        public init(alias: String? = nil, directoryId: String? = nil) {
            self.alias = alias
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.alias = dictionary["Alias"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct RadiusSettings: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers.
        public let radiusPort: Int32?
        /// The protocol specified for your RADIUS endpoints.
        public let authenticationProtocol: RadiusAuthenticationProtocol?
        /// The maximum number of times that communication with the RADIUS server is attempted.
        public let radiusRetries: Int32?
        /// The amount of time, in seconds, to wait for the RADIUS server to respond.
        public let radiusTimeout: Int32?
        /// Not currently used.
        public let useSameUsername: Bool?
        /// Not currently used.
        public let sharedSecret: String?
        /// Not currently used.
        public let displayLabel: String?
        /// An array of strings that contains the IP addresses of the RADIUS server endpoints, or the IP addresses of your RADIUS server load balancer.
        public let radiusServers: [String]?

        public init(radiusPort: Int32? = nil, authenticationProtocol: RadiusAuthenticationProtocol? = nil, radiusRetries: Int32? = nil, radiusTimeout: Int32? = nil, useSameUsername: Bool? = nil, sharedSecret: String? = nil, displayLabel: String? = nil, radiusServers: [String]? = nil) {
            self.radiusPort = radiusPort
            self.authenticationProtocol = authenticationProtocol
            self.radiusRetries = radiusRetries
            self.radiusTimeout = radiusTimeout
            self.useSameUsername = useSameUsername
            self.sharedSecret = sharedSecret
            self.displayLabel = displayLabel
            self.radiusServers = radiusServers
        }

        public init(dictionary: [String: Any]) throws {
            self.radiusPort = dictionary["RadiusPort"] as? Int32
            if let authenticationProtocol = dictionary["AuthenticationProtocol"] as? String { self.authenticationProtocol = RadiusAuthenticationProtocol(rawValue: authenticationProtocol) } else { self.authenticationProtocol = nil }
            self.radiusRetries = dictionary["RadiusRetries"] as? Int32
            self.radiusTimeout = dictionary["RadiusTimeout"] as? Int32
            self.useSameUsername = dictionary["UseSameUsername"] as? Bool
            self.sharedSecret = dictionary["SharedSecret"] as? String
            self.displayLabel = dictionary["DisplayLabel"] as? String
            self.radiusServers = dictionary["RadiusServers"] as? [String]
        }
    }

    public struct RegisterEventTopicResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Snapshot: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The snapshot identifier.
        public let snapshotId: String?
        /// The snapshot status.
        public let status: SnapshotStatus?
        /// The date and time that the snapshot was taken.
        public let startTime: Date?
        /// The snapshot type.
        public let `type`: SnapshotType?
        /// The descriptive name of the snapshot.
        public let name: String?
        /// The directory identifier.
        public let directoryId: String?

        public init(snapshotId: String? = nil, status: SnapshotStatus? = nil, startTime: Date? = nil, type: SnapshotType? = nil, name: String? = nil, directoryId: String? = nil) {
            self.snapshotId = snapshotId
            self.status = status
            self.startTime = startTime
            self.`type` = `type`
            self.name = name
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
            if let status = dictionary["Status"] as? String { self.status = SnapshotStatus(rawValue: status) } else { self.status = nil }
            self.startTime = dictionary["StartTime"] as? Date
            if let `type` = dictionary["Type"] as? String { self.`type` = SnapshotType(rawValue: `type`) } else { self.`type` = nil }
            self.name = dictionary["Name"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public enum TopicStatus: String, CustomStringConvertible {
        case registered = "Registered"
        case topic_not_found = "Topic not found"
        case failed = "Failed"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public struct RestoreFromSnapshotRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the snapshot to restore from.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotId = dictionary["SnapshotId"] as? String else { throw InitializableError.missingRequiredParam("SnapshotId") }
            self.snapshotId = snapshotId
        }
    }

    public enum DirectoryStage: String, CustomStringConvertible {
        case requested = "Requested"
        case creating = "Creating"
        case created = "Created"
        case active = "Active"
        case inoperable = "Inoperable"
        case impaired = "Impaired"
        case restoring = "Restoring"
        case restorefailed = "RestoreFailed"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory snapshot that was deleted.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
        }
    }

    public struct CreateDirectoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A textual description for the directory.
        public let description: String?
        /// A DirectoryVpcSettings object that contains additional information for the operation.
        public let vpcSettings: DirectoryVpcSettings?
        /// The short name of the directory, such as CORP.
        public let shortName: String?
        /// The fully qualified name for the directory, such as corp.example.com.
        public let name: String
        /// The size of the directory.
        public let size: DirectorySize
        /// The password for the directory administrator. The directory creation process creates a directory administrator account with the username Administrator and this password.
        public let password: String

        public init(description: String? = nil, vpcSettings: DirectoryVpcSettings? = nil, shortName: String? = nil, name: String, size: DirectorySize, password: String) {
            self.description = description
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.name = name
            self.size = size
            self.password = password
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            if let vpcSettings = dictionary["VpcSettings"] as? [String: Any] { self.vpcSettings = try Ds.DirectoryVpcSettings(dictionary: vpcSettings) } else { self.vpcSettings = nil }
            self.shortName = dictionary["ShortName"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let rawSize = dictionary["Size"] as? String, let size = DirectorySize(rawValue: rawSize) else { throw InitializableError.missingRequiredParam("Size") }
            self.size = size
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
        }
    }

    public struct UpdateRadiusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings
        /// The identifier of the directory for which to update the RADIUS server information.
        public let directoryId: String

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let radiusSettings = dictionary["RadiusSettings"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RadiusSettings") }
            self.radiusSettings = try Ds.RadiusSettings(dictionary: radiusSettings)
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct DisableSsoRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The password of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?
        /// The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name. If the AD Connector service account does not have privileges to remove a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to disable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The identifier of the directory for which to disable single-sign on.
        public let directoryId: String

        public init(password: String? = nil, userName: String? = nil, directoryId: String) {
            self.password = password
            self.userName = userName
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.password = dictionary["Password"] as? String
            self.userName = dictionary["UserName"] as? String
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct DeleteSnapshotRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory snapshot to be deleted.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotId = dictionary["SnapshotId"] as? String else { throw InitializableError.missingRequiredParam("SnapshotId") }
            self.snapshotId = snapshotId
        }
    }

    public struct CreateTrustRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship.
        public let remoteDomainName: String
        /// The direction of the trust relationship.
        public let trustDirection: TrustDirection
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let conditionalForwarderIpAddrs: [String]?
        /// The trust relationship type.
        public let trustType: TrustType?
        /// The trust password. The must be the same password that was used when creating the trust relationship on the external domain.
        public let trustPassword: String
        /// The Directory ID of the Microsoft AD in the AWS cloud for which to establish the trust relationship.
        public let directoryId: String

        public init(remoteDomainName: String, trustDirection: TrustDirection, conditionalForwarderIpAddrs: [String]? = nil, trustType: TrustType? = nil, trustPassword: String, directoryId: String) {
            self.remoteDomainName = remoteDomainName
            self.trustDirection = trustDirection
            self.conditionalForwarderIpAddrs = conditionalForwarderIpAddrs
            self.trustType = trustType
            self.trustPassword = trustPassword
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let remoteDomainName = dictionary["RemoteDomainName"] as? String else { throw InitializableError.missingRequiredParam("RemoteDomainName") }
            self.remoteDomainName = remoteDomainName
            guard let rawTrustDirection = dictionary["TrustDirection"] as? String, let trustDirection = TrustDirection(rawValue: rawTrustDirection) else { throw InitializableError.missingRequiredParam("TrustDirection") }
            self.trustDirection = trustDirection
            self.conditionalForwarderIpAddrs = dictionary["ConditionalForwarderIpAddrs"] as? [String]
            if let trustType = dictionary["TrustType"] as? String { self.trustType = TrustType(rawValue: trustType) } else { self.trustType = nil }
            guard let trustPassword = dictionary["TrustPassword"] as? String else { throw InitializableError.missingRequiredParam("TrustPassword") }
            self.trustPassword = trustPassword
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct VerifyTrustRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique Trust ID of the trust relationship to verify.
        public let trustId: String

        public init(trustId: String) {
            self.trustId = trustId
        }

        public init(dictionary: [String: Any]) throws {
            guard let trustId = dictionary["TrustId"] as? String else { throw InitializableError.missingRequiredParam("TrustId") }
            self.trustId = trustId
        }
    }

    public struct RegisterEventTopicRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID.
        public let topicName: String
        /// The Directory ID that will publish status messages to the SNS topic.
        public let directoryId: String

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let topicName = dictionary["TopicName"] as? String else { throw InitializableError.missingRequiredParam("TopicName") }
            self.topicName = topicName
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct CreateSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the snapshot that was created.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
        }
    }

    public enum RadiusAuthenticationProtocol: String, CustomStringConvertible {
        case pap = "PAP"
        case chap = "CHAP"
        case ms_chapv1 = "MS-CHAPv1"
        case ms_chapv2 = "MS-CHAPv2"
        public var description: String { return self.rawValue }
    }

    public struct AddIpRoutesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set to true, updates the inbound and outbound rules of the security group that has the description: "AWS created security group for directory ID directory controllers." Following are the new rules:  Inbound:   Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0   Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0   Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0   Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0   Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0    Outbound:   Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0   These security rules impact an internal network interface that is not exposed publicly.
        public let updateSecurityGroupForDirectoryControllers: Bool?
        /// Identifier (ID) of the directory to which to add the address block.
        public let directoryId: String
        /// IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain.
        public let ipRoutes: [IpRoute]

        public init(updateSecurityGroupForDirectoryControllers: Bool? = nil, directoryId: String, ipRoutes: [IpRoute]) {
            self.updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllers
            self.directoryId = directoryId
            self.ipRoutes = ipRoutes
        }

        public init(dictionary: [String: Any]) throws {
            self.updateSecurityGroupForDirectoryControllers = dictionary["UpdateSecurityGroupForDirectoryControllers"] as? Bool
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let ipRoutes = dictionary["IpRoutes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("IpRoutes") }
            self.ipRoutes = try ipRoutes.map({ try IpRoute(dictionary: $0) })
        }
    }

    public enum TrustType: String, CustomStringConvertible {
        case forest = "Forest"
        public var description: String { return self.rawValue }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifier (ID) of the directory from which to remove the tag.
        public let resourceId: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct AddIpRoutesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum TrustDirection: String, CustomStringConvertible {
        case one_way__outgoing = "One-Way: Outgoing"
        case one_way__incoming = "One-Way: Incoming"
        case two_way = "Two-Way"
        public var description: String { return self.rawValue }
    }

    public struct CancelSchemaExtensionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the schema extension that will be canceled.
        public let schemaExtensionId: String
        /// The identifier of the directory whose schema extension will be canceled.
        public let directoryId: String

        public init(schemaExtensionId: String, directoryId: String) {
            self.schemaExtensionId = schemaExtensionId
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let schemaExtensionId = dictionary["SchemaExtensionId"] as? String else { throw InitializableError.missingRequiredParam("SchemaExtensionId") }
            self.schemaExtensionId = schemaExtensionId
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct DescribeDirectoriesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of DirectoryDescription objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let directoryDescriptions: [DirectoryDescription]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDirectories to retrieve the next set of items.
        public let nextToken: String?

        public init(directoryDescriptions: [DirectoryDescription]? = nil, nextToken: String? = nil) {
            self.directoryDescriptions = directoryDescriptions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let directoryDescriptions = dictionary["DirectoryDescriptions"] as? [[String: Any]] {
                self.directoryDescriptions = try directoryDescriptions.map({ try DirectoryDescription(dictionary: $0) })
            } else { 
                self.directoryDescriptions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateMicrosoftADResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct GetSnapshotLimitsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains the identifier of the directory to obtain the limits for.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public struct DisableRadiusResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListSchemaExtensionsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListSchemaExtensions to retrieve the next set of items.
        public let nextToken: String?
        /// Information about the schema extensions applied to the directory.
        public let schemaExtensionsInfo: [SchemaExtensionInfo]?

        public init(nextToken: String? = nil, schemaExtensionsInfo: [SchemaExtensionInfo]? = nil) {
            self.nextToken = nextToken
            self.schemaExtensionsInfo = schemaExtensionsInfo
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let schemaExtensionsInfo = dictionary["SchemaExtensionsInfo"] as? [[String: Any]] {
                self.schemaExtensionsInfo = try schemaExtensionsInfo.map({ try SchemaExtensionInfo(dictionary: $0) })
            } else { 
                self.schemaExtensionsInfo = nil
            }
        }
    }

    public struct DeregisterEventTopicResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeEventTopicsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of SNS topic names that receive status messages from the specified Directory ID.
        public let eventTopics: [EventTopic]?

        public init(eventTopics: [EventTopic]? = nil) {
            self.eventTopics = eventTopics
        }

        public init(dictionary: [String: Any]) throws {
            if let eventTopics = dictionary["EventTopics"] as? [[String: Any]] {
                self.eventTopics = try eventTopics.map({ try EventTopic(dictionary: $0) })
            } else { 
                self.eventTopics = nil
            }
        }
    }

    public struct IpRouteInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Description of the IpRouteInfo.
        public let description: String?
        /// The status of the IP address block.
        public let ipRouteStatusMsg: IpRouteStatusMsg?
        /// The date and time the address block was added to the directory.
        public let addedDateTime: Date?
        /// IP address block in the IpRoute.
        public let cidrIp: String?
        /// The reason for the IpRouteStatusMsg.
        public let ipRouteStatusReason: String?
        /// Identifier (ID) of the directory associated with the IP addresses.
        public let directoryId: String?

        public init(description: String? = nil, ipRouteStatusMsg: IpRouteStatusMsg? = nil, addedDateTime: Date? = nil, cidrIp: String? = nil, ipRouteStatusReason: String? = nil, directoryId: String? = nil) {
            self.description = description
            self.ipRouteStatusMsg = ipRouteStatusMsg
            self.addedDateTime = addedDateTime
            self.cidrIp = cidrIp
            self.ipRouteStatusReason = ipRouteStatusReason
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            if let ipRouteStatusMsg = dictionary["IpRouteStatusMsg"] as? String { self.ipRouteStatusMsg = IpRouteStatusMsg(rawValue: ipRouteStatusMsg) } else { self.ipRouteStatusMsg = nil }
            self.addedDateTime = dictionary["AddedDateTime"] as? Date
            self.cidrIp = dictionary["CidrIp"] as? String
            self.ipRouteStatusReason = dictionary["IpRouteStatusReason"] as? String
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct ConnectDirectoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The password for the on-premises user account.
        public let password: String
        /// A textual description for the directory.
        public let description: String?
        /// The NetBIOS name of the on-premises directory, such as CORP.
        public let shortName: String?
        /// A DirectoryConnectSettings object that contains additional information for the operation.
        public let connectSettings: DirectoryConnectSettings
        /// The size of the directory.
        public let size: DirectorySize
        /// The fully-qualified name of the on-premises directory, such as corp.example.com.
        public let name: String

        public init(password: String, description: String? = nil, shortName: String? = nil, connectSettings: DirectoryConnectSettings, size: DirectorySize, name: String) {
            self.password = password
            self.description = description
            self.shortName = shortName
            self.connectSettings = connectSettings
            self.size = size
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            self.description = dictionary["Description"] as? String
            self.shortName = dictionary["ShortName"] as? String
            guard let connectSettings = dictionary["ConnectSettings"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ConnectSettings") }
            self.connectSettings = try Ds.DirectoryConnectSettings(dictionary: connectSettings)
            guard let rawSize = dictionary["Size"] as? String, let size = DirectorySize(rawValue: rawSize) else { throw InitializableError.missingRequiredParam("Size") }
            self.size = size
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct VerifyTrustResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique Trust ID of the trust relationship that was verified.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        public init(dictionary: [String: Any]) throws {
            self.trustId = dictionary["TrustId"] as? String
        }
    }

    public struct DisableSsoResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateConditionalForwarderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The directory ID of the AWS directory for which you are creating the conditional forwarder.
        public let directoryId: String
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let dnsIpAddrs: [String]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String

        public init(directoryId: String, dnsIpAddrs: [String], remoteDomainName: String) {
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
            guard let dnsIpAddrs = dictionary["DnsIpAddrs"] as? [String] else { throw InitializableError.missingRequiredParam("DnsIpAddrs") }
            self.dnsIpAddrs = dnsIpAddrs
            guard let remoteDomainName = dictionary["RemoteDomainName"] as? String else { throw InitializableError.missingRequiredParam("RemoteDomainName") }
            self.remoteDomainName = remoteDomainName
        }
    }

    public struct CancelSchemaExtensionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateConditionalForwarderResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DisableRadiusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory for which to disable MFA.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            guard let directoryId = dictionary["DirectoryId"] as? String else { throw InitializableError.missingRequiredParam("DirectoryId") }
            self.directoryId = directoryId
        }
    }

    public enum DirectoryType: String, CustomStringConvertible {
        case simplead = "SimpleAD"
        case adconnector = "ADConnector"
        case microsoftad = "MicrosoftAD"
        public var description: String { return self.rawValue }
    }

    public enum DirectorySize: String, CustomStringConvertible {
        case small = "Small"
        case large = "Large"
        public var description: String { return self.rawValue }
    }

    public struct CreateDirectoryResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        public init(dictionary: [String: Any]) throws {
            self.directoryId = dictionary["DirectoryId"] as? String
        }
    }

    public struct ListIpRoutesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListIpRoutes to retrieve the next set of items.
        public let nextToken: String?
        /// A list of IpRoutes.
        public let ipRoutesInfo: [IpRouteInfo]?

        public init(nextToken: String? = nil, ipRoutesInfo: [IpRouteInfo]? = nil) {
            self.nextToken = nextToken
            self.ipRoutesInfo = ipRoutesInfo
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let ipRoutesInfo = dictionary["IpRoutesInfo"] as? [[String: Any]] {
                self.ipRoutesInfo = try ipRoutesInfo.map({ try IpRouteInfo(dictionary: $0) })
            } else { 
                self.ipRoutesInfo = nil
            }
        }
    }

    public struct DirectoryConnectSettings: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of subnet identifiers in the VPC in which the AD Connector is created.
        public let subnetIds: [String]
        /// The identifier of the VPC in which the AD Connector is created.
        public let vpcId: String
        /// The username of an account in the on-premises directory that is used to connect to the directory. This account must have the following privileges:   Read users and groups   Create computer objects   Join computers to the domain  
        public let customerUserName: String
        /// A list of one or more IP addresses of DNS servers or domain controllers in the on-premises directory.
        public let customerDnsIps: [String]

        public init(subnetIds: [String], vpcId: String, customerUserName: String, customerDnsIps: [String]) {
            self.subnetIds = subnetIds
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.customerDnsIps = customerDnsIps
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetIds = dictionary["SubnetIds"] as? [String] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = subnetIds
            guard let vpcId = dictionary["VpcId"] as? String else { throw InitializableError.missingRequiredParam("VpcId") }
            self.vpcId = vpcId
            guard let customerUserName = dictionary["CustomerUserName"] as? String else { throw InitializableError.missingRequiredParam("CustomerUserName") }
            self.customerUserName = customerUserName
            guard let customerDnsIps = dictionary["CustomerDnsIps"] as? [String] else { throw InitializableError.missingRequiredParam("CustomerDnsIps") }
            self.customerDnsIps = customerDnsIps
        }
    }

}