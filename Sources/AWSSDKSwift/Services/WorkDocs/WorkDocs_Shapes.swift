// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension WorkDocs {

    public struct GetDocumentPathRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String
        /// A comma-separated list of values. Specify NAME to include the names of the parent folders.
        public let fields: String?
        /// This value is not supported.
        public let marker: String?
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?

        public init(authenticationToken: String? = nil, documentId: String, fields: String? = nil, marker: String? = nil, limit: Int32? = nil) {
            self.authenticationToken = authenticationToken
            self.documentId = documentId
            self.fields = fields
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
            case fields = "fields"
            case marker = "marker"
            case limit = "limit"
        }
    }

    public struct CreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public enum DocumentSourceType: String, CustomStringConvertible, Codable {
        case original = "ORIGINAL"
        case withComments = "WITH_COMMENTS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFolderContentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Type", location: .querystring(locationName: "type"), required: false, type: .enum)
        ]
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The ID of the folder.
        public let folderId: String
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The sorting criteria.
        public let sort: ResourceSortType?
        /// The contents to include. Specify "INITIALIZED" to include initialized documents.
        public let include: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The order for the contents of the folder.
        public let order: OrderType?
        /// The type of items.
        public let `type`: FolderContentType?

        public init(marker: String? = nil, folderId: String, limit: Int32? = nil, sort: ResourceSortType? = nil, include: String? = nil, authenticationToken: String? = nil, order: OrderType? = nil, type: FolderContentType? = nil) {
            self.marker = marker
            self.folderId = folderId
            self.limit = limit
            self.sort = sort
            self.include = include
            self.authenticationToken = authenticationToken
            self.order = order
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case folderId = "FolderId"
            case limit = "limit"
            case sort = "sort"
            case include = "include"
            case authenticationToken = "Authentication"
            case order = "order"
            case `type` = "type"
        }
    }

    public enum UserStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public struct GetResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "CollectionType", location: .querystring(locationName: "collectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .querystring(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The maximum number of resources to return.
        public let limit: Int32?
        /// The collection type.
        public let collectionType: ResourceCollectionType?
        /// The user ID for the resource collection. This is a required field for accessing the API operation using IAM credentials.
        public let userId: String?
        /// The Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API operation using AWS credentials.
        public let authenticationToken: String?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?

        public init(limit: Int32? = nil, collectionType: ResourceCollectionType? = nil, userId: String? = nil, authenticationToken: String? = nil, marker: String? = nil) {
            self.limit = limit
            self.collectionType = collectionType
            self.userId = userId
            self.authenticationToken = authenticationToken
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case collectionType = "collectionType"
            case userId = "userId"
            case authenticationToken = "Authentication"
            case marker = "marker"
        }
    }

    public struct DescribeUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TotalNumberOfUsers", required: false, type: .long)
        ]
        /// The users.
        public let users: [User]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The total number of users included in the results.
        public let totalNumberOfUsers: Int64?

        public init(users: [User]? = nil, marker: String? = nil, totalNumberOfUsers: Int64? = nil) {
            self.users = users
            self.marker = marker
            self.totalNumberOfUsers = totalNumberOfUsers
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case marker = "Marker"
            case totalNumberOfUsers = "TotalNumberOfUsers"
        }
    }

    public struct GetDocumentVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// A comma-separated list of values. Specify "SOURCE" to include a URL for the source document.
        public let fields: String?
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The version ID of the document.
        public let versionId: String
        /// The ID of the document.
        public let documentId: String

        public init(fields: String? = nil, includeCustomMetadata: Bool? = nil, authenticationToken: String? = nil, versionId: String, documentId: String) {
            self.fields = fields
            self.includeCustomMetadata = includeCustomMetadata
            self.authenticationToken = authenticationToken
            self.versionId = versionId
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case fields = "fields"
            case includeCustomMetadata = "includeCustomMetadata"
            case authenticationToken = "Authentication"
            case versionId = "VersionId"
            case documentId = "DocumentId"
        }
    }

    public struct DescribeActivitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .querystring(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ActivityTypes", location: .querystring(locationName: "activityTypes"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .querystring(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "EndTime", location: .querystring(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IncludeIndirectActivities", location: .querystring(locationName: "includeIndirectActivities"), required: false, type: .boolean), 
            AWSShapeMember(label: "StartTime", location: .querystring(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The document or folder ID for which to describe activity types.
        public let resourceId: String?
        /// Specifies which activity types to include in the response. If this field is left empty, all activity types are returned.
        public let activityTypes: String?
        /// The ID of the user who performed the action. The response includes activities pertaining to this user. This is an optional parameter and is only applicable for administrative API (SigV4) requests.
        public let userId: String?
        /// The timestamp that determines the end time of the activities. The response includes the activities performed before the specified timestamp.
        public let endTime: TimeStamp?
        /// Includes indirect activities. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).
        public let includeIndirectActivities: Bool?
        /// The timestamp that determines the starting time of the activities. The response includes the activities performed after the specified timestamp.
        public let startTime: TimeStamp?
        /// The ID of the organization. This is a mandatory parameter when using administrative API (SigV4) requests.
        public let organizationId: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The marker for the next set of results.
        public let marker: String?
        /// The maximum number of items to return.
        public let limit: Int32?

        public init(resourceId: String? = nil, activityTypes: String? = nil, userId: String? = nil, endTime: TimeStamp? = nil, includeIndirectActivities: Bool? = nil, startTime: TimeStamp? = nil, organizationId: String? = nil, authenticationToken: String? = nil, marker: String? = nil, limit: Int32? = nil) {
            self.resourceId = resourceId
            self.activityTypes = activityTypes
            self.userId = userId
            self.endTime = endTime
            self.includeIndirectActivities = includeIndirectActivities
            self.startTime = startTime
            self.organizationId = organizationId
            self.authenticationToken = authenticationToken
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case activityTypes = "activityTypes"
            case userId = "userId"
            case endTime = "endTime"
            case includeIndirectActivities = "includeIndirectActivities"
            case startTime = "startTime"
            case organizationId = "organizationId"
            case authenticationToken = "Authentication"
            case marker = "marker"
            case limit = "limit"
        }
    }

    public struct DescribeActivitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserActivities", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of activities for the specified user and time period.
        public let userActivities: [Activity]?
        /// The marker for the next set of results.
        public let marker: String?

        public init(userActivities: [Activity]? = nil, marker: String? = nil) {
            self.userActivities = userActivities
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case userActivities = "UserActivities"
            case marker = "Marker"
        }
    }

    public struct NotificationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SendEmail", required: false, type: .boolean), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .string)
        ]
        /// Boolean value to indicate an email notification should be sent to the receipients.
        public let sendEmail: Bool?
        /// Text value to be included in the email body.
        public let emailMessage: String?

        public init(sendEmail: Bool? = nil, emailMessage: String? = nil) {
            self.sendEmail = sendEmail
            self.emailMessage = emailMessage
        }

        private enum CodingKeys: String, CodingKey {
            case sendEmail = "SendEmail"
            case emailMessage = "EmailMessage"
        }
    }

    public struct GetCurrentUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// Metadata of the user.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public enum ShareStatusType: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case failure = "FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct GetResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Folders", required: false, type: .list), 
            AWSShapeMember(label: "Documents", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The folders in the specified folder.
        public let folders: [FolderMetadata]?
        /// The documents in the specified collection.
        public let documents: [DocumentMetadata]?

        public init(marker: String? = nil, folders: [FolderMetadata]? = nil, documents: [DocumentMetadata]? = nil) {
            self.marker = marker
            self.folders = folders
            self.documents = documents
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case folders = "Folders"
            case documents = "Documents"
        }
    }

    public struct GetDocumentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata details of the document.
        public let metadata: DocumentMetadata?
        /// The custom metadata on the document.
        public let customMetadata: [String: String]?

        public init(metadata: DocumentMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public struct CreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Surname", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: true, type: .string)
        ]
        /// The surname of the user.
        public let surname: String
        /// The password of the user.
        public let password: String
        /// The ID of the organization.
        public let organizationId: String?
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?
        /// The login name of the user.
        public let username: String
        /// The email address of the user.
        public let emailAddress: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The given name of the user.
        public let givenName: String

        public init(surname: String, password: String, organizationId: String? = nil, storageRule: StorageRuleType? = nil, username: String, emailAddress: String? = nil, authenticationToken: String? = nil, timeZoneId: String? = nil, givenName: String) {
            self.surname = surname
            self.password = password
            self.organizationId = organizationId
            self.storageRule = storageRule
            self.username = username
            self.emailAddress = emailAddress
            self.authenticationToken = authenticationToken
            self.timeZoneId = timeZoneId
            self.givenName = givenName
        }

        private enum CodingKeys: String, CodingKey {
            case surname = "Surname"
            case password = "Password"
            case organizationId = "OrganizationId"
            case storageRule = "StorageRule"
            case username = "Username"
            case emailAddress = "EmailAddress"
            case authenticationToken = "Authentication"
            case timeZoneId = "TimeZoneId"
            case givenName = "GivenName"
        }
    }

    public struct UpdateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "GrantPoweruserPrivileges", required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The surname of the user.
        public let surname: String?
        /// The type of the user.
        public let `type`: UserType?
        /// The amount of storage for the user.
        public let storageRule: StorageRuleType?
        /// Boolean value to determine whether the user is granted Poweruser privileges.
        public let grantPoweruserPrivileges: BooleanEnumType?
        /// The ID of the user.
        public let userId: String
        /// The given name of the user.
        public let givenName: String?
        /// The locale of the user.
        public let locale: LocaleType?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(timeZoneId: String? = nil, surname: String? = nil, type: UserType? = nil, storageRule: StorageRuleType? = nil, grantPoweruserPrivileges: BooleanEnumType? = nil, userId: String, givenName: String? = nil, locale: LocaleType? = nil, authenticationToken: String? = nil) {
            self.timeZoneId = timeZoneId
            self.surname = surname
            self.`type` = `type`
            self.storageRule = storageRule
            self.grantPoweruserPrivileges = grantPoweruserPrivileges
            self.userId = userId
            self.givenName = givenName
            self.locale = locale
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case timeZoneId = "TimeZoneId"
            case surname = "Surname"
            case `type` = "Type"
            case storageRule = "StorageRule"
            case grantPoweruserPrivileges = "GrantPoweruserPrivileges"
            case userId = "UserId"
            case givenName = "GivenName"
            case locale = "Locale"
            case authenticationToken = "Authentication"
        }
    }

    public struct DeleteFolderContentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the folder.
        public let folderId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(folderId: String, authenticationToken: String? = nil) {
            self.folderId = folderId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case folderId = "FolderId"
            case authenticationToken = "Authentication"
        }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Roles", required: false, type: .list)
        ]
        /// The ID of the resource.
        public let id: String?
        /// The type of resource.
        public let `type`: PrincipalType?
        /// The permission information for the resource.
        public let roles: [PermissionInfo]?

        public init(id: String? = nil, type: PrincipalType? = nil, roles: [PermissionInfo]? = nil) {
            self.id = id
            self.`type` = `type`
            self.roles = roles
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case `type` = "Type"
            case roles = "Roles"
        }
    }

    public struct GetFolderPathResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct UpdateDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The resource state of the document. Only ACTIVE and RECYCLED are supported.
        public let resourceState: ResourceStateType?
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The name of the document.
        public let name: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String

        public init(resourceState: ResourceStateType? = nil, parentFolderId: String? = nil, name: String? = nil, authenticationToken: String? = nil, documentId: String) {
            self.resourceState = resourceState
            self.parentFolderId = parentFolderId
            self.name = name
            self.authenticationToken = authenticationToken
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceState = "ResourceState"
            case parentFolderId = "ParentFolderId"
            case name = "Name"
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
        }
    }

    public enum DocumentThumbnailType: String, CustomStringConvertible, Codable {
        case small = "SMALL"
        case smallHq = "SMALL_HQ"
        case large = "LARGE"
        public var description: String { return self.rawValue }
    }

    public enum UserSortType: String, CustomStringConvertible, Codable {
        case userName = "USER_NAME"
        case fullName = "FULL_NAME"
        case storageLimit = "STORAGE_LIMIT"
        case userStatus = "USER_STATUS"
        case storageUsed = "STORAGE_USED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDocumentVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentVersions", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The document versions.
        public let documentVersions: [DocumentVersionMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(documentVersions: [DocumentVersionMetadata]? = nil, marker: String? = nil) {
            self.documentVersions = documentVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case documentVersions = "DocumentVersions"
            case marker = "Marker"
        }
    }

    public struct Activity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "CommentMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "OriginalParent", required: false, type: .structure), 
            AWSShapeMember(label: "Participants", required: false, type: .structure), 
            AWSShapeMember(label: "TimeStamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "IsIndirectActivity", required: false, type: .boolean), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure)
        ]
        /// The metadata of the resource involved in the user action.
        public let resourceMetadata: ResourceMetadata?
        /// Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
        public let commentMetadata: CommentMetadata?
        /// The original parent of the resource. This is an optional field and is filled for move activities.
        public let originalParent: ResourceMetadata?
        /// The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.
        public let participants: Participants?
        /// The timestamp when the action was performed.
        public let timeStamp: TimeStamp?
        /// Indicates whether an activity is indirect or direct. An indirect activity results from a direct activity performed on a parent resource. For example, sharing a parent folder (the direct activity) shares all of the subfolders and documents within the parent folder (the indirect activity).
        public let isIndirectActivity: Bool?
        /// The ID of the organization.
        public let organizationId: String?
        /// The activity type.
        public let `type`: ActivityType?
        /// The user who performed the action.
        public let initiator: UserMetadata?

        public init(resourceMetadata: ResourceMetadata? = nil, commentMetadata: CommentMetadata? = nil, originalParent: ResourceMetadata? = nil, participants: Participants? = nil, timeStamp: TimeStamp? = nil, isIndirectActivity: Bool? = nil, organizationId: String? = nil, type: ActivityType? = nil, initiator: UserMetadata? = nil) {
            self.resourceMetadata = resourceMetadata
            self.commentMetadata = commentMetadata
            self.originalParent = originalParent
            self.participants = participants
            self.timeStamp = timeStamp
            self.isIndirectActivity = isIndirectActivity
            self.organizationId = organizationId
            self.`type` = `type`
            self.initiator = initiator
        }

        private enum CodingKeys: String, CodingKey {
            case resourceMetadata = "ResourceMetadata"
            case commentMetadata = "CommentMetadata"
            case originalParent = "OriginalParent"
            case participants = "Participants"
            case timeStamp = "TimeStamp"
            case isIndirectActivity = "IsIndirectActivity"
            case organizationId = "OrganizationId"
            case `type` = "Type"
            case initiator = "Initiator"
        }
    }

    public struct CreateFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The name of the new folder.
        public let name: String?
        /// The ID of the parent folder.
        public let parentFolderId: String

        public init(authenticationToken: String? = nil, name: String? = nil, parentFolderId: String) {
            self.authenticationToken = authenticationToken
            self.name = name
            self.parentFolderId = parentFolderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case name = "Name"
            case parentFolderId = "ParentFolderId"
        }
    }

    public enum CommentVisibilityType: String, CustomStringConvertible, Codable {
        case `public` = "PUBLIC"
        case `private` = "PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct Participants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The list of users.
        public let users: [UserMetadata]?
        /// The list of user groups.
        public let groups: [GroupMetadata]?

        public init(users: [UserMetadata]? = nil, groups: [GroupMetadata]? = nil) {
            self.users = users
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case users = "Users"
            case groups = "Groups"
        }
    }

    public struct DescribeCommentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comments", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of comments for the specified document version.
        public let comments: [Comment]?
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?

        public init(comments: [Comment]? = nil, marker: String? = nil) {
            self.comments = comments
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case comments = "Comments"
            case marker = "Marker"
        }
    }

    public struct DescribeResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", location: .querystring(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call)
        public let marker: String?
        /// The ID of the principal to filter permissions by.
        public let principalId: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(resourceId: String, limit: Int32? = nil, marker: String? = nil, principalId: String? = nil, authenticationToken: String? = nil) {
            self.resourceId = resourceId
            self.limit = limit
            self.marker = marker
            self.principalId = principalId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case limit = "limit"
            case marker = "marker"
            case principalId = "principalId"
            case authenticationToken = "Authentication"
        }
    }

    public struct DeleteCustomMetadataResponse: AWSShape {

    }

    public struct FolderMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatestVersionSize", required: false, type: .long), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Labels", required: false, type: .list)
        ]
        /// The size of the latest version of the folder metadata.
        public let latestVersionSize: Int64?
        /// The ID of the folder.
        public let id: String?
        /// The time when the folder was updated.
        public let modifiedTimestamp: TimeStamp?
        /// The ID of the creator.
        public let creatorId: String?
        /// The unique identifier created from the subfolders and documents of the folder.
        public let signature: String?
        /// The size of the folder metadata.
        public let size: Int64?
        /// The name of the folder.
        public let name: String?
        /// The time when the folder was created.
        public let createdTimestamp: TimeStamp?
        /// The resource state of the folder.
        public let resourceState: ResourceStateType?
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// List of labels on the folder.
        public let labels: [String]?

        public init(latestVersionSize: Int64? = nil, id: String? = nil, modifiedTimestamp: TimeStamp? = nil, creatorId: String? = nil, signature: String? = nil, size: Int64? = nil, name: String? = nil, createdTimestamp: TimeStamp? = nil, resourceState: ResourceStateType? = nil, parentFolderId: String? = nil, labels: [String]? = nil) {
            self.latestVersionSize = latestVersionSize
            self.id = id
            self.modifiedTimestamp = modifiedTimestamp
            self.creatorId = creatorId
            self.signature = signature
            self.size = size
            self.name = name
            self.createdTimestamp = createdTimestamp
            self.resourceState = resourceState
            self.parentFolderId = parentFolderId
            self.labels = labels
        }

        private enum CodingKeys: String, CodingKey {
            case latestVersionSize = "LatestVersionSize"
            case id = "Id"
            case modifiedTimestamp = "ModifiedTimestamp"
            case creatorId = "CreatorId"
            case signature = "Signature"
            case size = "Size"
            case name = "Name"
            case createdTimestamp = "CreatedTimestamp"
            case resourceState = "ResourceState"
            case parentFolderId = "ParentFolderId"
            case labels = "Labels"
        }
    }

    public struct AddResourcePermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareResults", required: false, type: .list)
        ]
        /// The share results.
        public let shareResults: [ShareResult]?

        public init(shareResults: [ShareResult]? = nil) {
            self.shareResults = shareResults
        }

        private enum CodingKeys: String, CodingKey {
            case shareResults = "ShareResults"
        }
    }

    public struct CreateNotificationSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "Endpoint", required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".
        public let endpoint: String
        /// The notification type.
        public let subscriptionType: SubscriptionType
        /// The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.
        public let `protocol`: SubscriptionProtocolType

        public init(organizationId: String, endpoint: String, subscriptionType: SubscriptionType, protocol: SubscriptionProtocolType) {
            self.organizationId = organizationId
            self.endpoint = endpoint
            self.subscriptionType = subscriptionType
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case endpoint = "Endpoint"
            case subscriptionType = "SubscriptionType"
            case `protocol` = "Protocol"
        }
    }

    public enum BooleanEnumType: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        public var description: String { return self.rawValue }
    }

    public struct SharePrincipal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: true, type: .enum), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The role of the recipient.
        public let role: RoleType
        /// The type of the recipient.
        public let `type`: PrincipalType
        /// The ID of the recipient.
        public let id: String

        public init(role: RoleType, type: PrincipalType, id: String) {
            self.role = role
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct AbortDocumentVersionUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String
        /// The ID of the version.
        public let versionId: String

        public init(authenticationToken: String? = nil, documentId: String, versionId: String) {
            self.authenticationToken = authenticationToken
            self.documentId = documentId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
            case versionId = "VersionId"
        }
    }

    public enum ResourceCollectionType: String, CustomStringConvertible, Codable {
        case sharedWithMe = "SHARED_WITH_ME"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLabelsResponse: AWSShape {

    }

    public struct UpdateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct GetDocumentPathResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .structure)
        ]
        /// The path information.
        public let path: ResourcePath?

        public init(path: ResourcePath? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
        }
    }

    public struct DocumentMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestVersionMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Labels", required: false, type: .list), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string)
        ]
        /// The time when the document was created.
        public let createdTimestamp: TimeStamp?
        /// The latest version of the document.
        public let latestVersionMetadata: DocumentVersionMetadata?
        /// List of labels on the document.
        public let labels: [String]?
        /// The ID of the creator.
        public let creatorId: String?
        /// The resource state.
        public let resourceState: ResourceStateType?
        /// The ID of the document.
        public let id: String?
        /// The time when the document was updated.
        public let modifiedTimestamp: TimeStamp?
        /// The ID of the parent folder.
        public let parentFolderId: String?

        public init(createdTimestamp: TimeStamp? = nil, latestVersionMetadata: DocumentVersionMetadata? = nil, labels: [String]? = nil, creatorId: String? = nil, resourceState: ResourceStateType? = nil, id: String? = nil, modifiedTimestamp: TimeStamp? = nil, parentFolderId: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.latestVersionMetadata = latestVersionMetadata
            self.labels = labels
            self.creatorId = creatorId
            self.resourceState = resourceState
            self.id = id
            self.modifiedTimestamp = modifiedTimestamp
            self.parentFolderId = parentFolderId
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case latestVersionMetadata = "LatestVersionMetadata"
            case labels = "Labels"
            case creatorId = "CreatorId"
            case resourceState = "ResourceState"
            case id = "Id"
            case modifiedTimestamp = "ModifiedTimestamp"
            case parentFolderId = "ParentFolderId"
        }
    }

    public struct PermissionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The role of the user.
        public let role: RoleType?
        /// The type of permissions.
        public let `type`: RolePermissionType?

        public init(role: RoleType? = nil, type: RolePermissionType? = nil) {
            self.role = role
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case `type` = "Type"
        }
    }

    public struct StorageRuleType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "StorageType", required: false, type: .enum)
        ]
        /// The amount of storage allocated, in bytes.
        public let storageAllocatedInBytes: Int64?
        /// The type of storage.
        public let storageType: StorageType?

        public init(storageAllocatedInBytes: Int64? = nil, storageType: StorageType? = nil) {
            self.storageAllocatedInBytes = storageAllocatedInBytes
            self.storageType = storageType
        }

        private enum CodingKeys: String, CodingKey {
            case storageAllocatedInBytes = "StorageAllocatedInBytes"
            case storageType = "StorageType"
        }
    }

    public struct DescribeRootFoldersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Folders", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The user's special folders.
        public let folders: [FolderMetadata]?
        /// The marker for the next set of results.
        public let marker: String?

        public init(folders: [FolderMetadata]? = nil, marker: String? = nil) {
            self.folders = folders
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case folders = "Folders"
            case marker = "Marker"
        }
    }

    public struct ActivateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure)
        ]
        /// The user information.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct GetDocumentVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map), 
            AWSShapeMember(label: "Metadata", required: false, type: .structure)
        ]
        /// The custom metadata on the document version.
        public let customMetadata: [String: String]?
        /// The version metadata.
        public let metadata: DocumentVersionMetadata?

        public init(customMetadata: [String: String]? = nil, metadata: DocumentVersionMetadata? = nil) {
            self.customMetadata = customMetadata
            self.metadata = metadata
        }

        private enum CodingKeys: String, CodingKey {
            case customMetadata = "CustomMetadata"
            case metadata = "Metadata"
        }
    }

    public enum ResourceStateType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case restoring = "RESTORING"
        case recycling = "RECYCLING"
        case recycled = "RECYCLED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCommentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The marker for the next set of results. This marker was received from a previous call.
        public let marker: String?
        /// The ID of the document version.
        public let versionId: String
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The ID of the document.
        public let documentId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(marker: String? = nil, versionId: String, limit: Int32? = nil, documentId: String, authenticationToken: String? = nil) {
            self.marker = marker
            self.versionId = versionId
            self.limit = limit
            self.documentId = documentId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case versionId = "VersionId"
            case limit = "limit"
            case documentId = "DocumentId"
            case authenticationToken = "Authentication"
        }
    }

    public struct InitiateDocumentVersionUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ParentFolderId", required: true, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DocumentSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the document.
        public let id: String?
        /// The timestamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?
        /// The ID of the parent folder.
        public let parentFolderId: String
        /// The content type of the document.
        public let contentType: String?
        /// The timestamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// The name of the document.
        public let name: String?
        /// The size of the document, in bytes.
        public let documentSizeInBytes: Int64?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(id: String? = nil, contentCreatedTimestamp: TimeStamp? = nil, parentFolderId: String, contentType: String? = nil, contentModifiedTimestamp: TimeStamp? = nil, name: String? = nil, documentSizeInBytes: Int64? = nil, authenticationToken: String? = nil) {
            self.id = id
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.parentFolderId = parentFolderId
            self.contentType = contentType
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.name = name
            self.documentSizeInBytes = documentSizeInBytes
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
            case parentFolderId = "ParentFolderId"
            case contentType = "ContentType"
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case name = "Name"
            case documentSizeInBytes = "DocumentSizeInBytes"
            case authenticationToken = "Authentication"
        }
    }

    public enum CommentStatusType: String, CustomStringConvertible, Codable {
        case draft = "DRAFT"
        case published = "PUBLISHED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The list of groups.
        public let groups: [GroupMetadata]?

        public init(marker: String? = nil, groups: [GroupMetadata]? = nil) {
            self.marker = marker
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case groups = "Groups"
        }
    }

    public struct CreateLabelsResponse: AWSShape {

    }

    public struct DeleteFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(authenticationToken: String? = nil, folderId: String) {
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public enum DocumentVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceSortType: String, CustomStringConvertible, Codable {
        case date = "DATE"
        case name = "NAME"
        public var description: String { return self.rawValue }
    }

    public struct GetCurrentUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String

        public init(authenticationToken: String) {
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
        }
    }

    public struct DescribeNotificationSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The subscriptions.
        public let subscriptions: [Subscription]?

        public init(marker: String? = nil, subscriptions: [Subscription]? = nil) {
            self.marker = marker
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case subscriptions = "Subscriptions"
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public enum UserFilterType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case activePending = "ACTIVE_PENDING"
        public var description: String { return self.rawValue }
    }

    public struct ActivateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the user.
        public let userId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(userId: String, authenticationToken: String? = nil) {
            self.userId = userId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case authenticationToken = "Authentication"
        }
    }

    public enum UserType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case admin = "ADMIN"
        case poweruser = "POWERUSER"
        case minimaluser = "MINIMALUSER"
        case workspacesuser = "WORKSPACESUSER"
        public var description: String { return self.rawValue }
    }

    public struct CreateNotificationSubscriptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscription", required: false, type: .structure)
        ]
        /// The subscription.
        public let subscription: Subscription?

        public init(subscription: Subscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "Subscription"
        }
    }

    public enum RolePermissionType: String, CustomStringConvertible, Codable {
        case direct = "DIRECT"
        case inherited = "INHERITED"
        public var description: String { return self.rawValue }
    }

    public struct ResourcePathComponent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the resource path.
        public let name: String?
        /// The ID of the resource path.
        public let id: String?

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
        }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string)
        ]
        /// The surname of the user.
        public let surname: String?
        /// The ID of the user.
        public let id: String?
        /// The email address of the user.
        public let emailAddress: String?
        /// The given name of the user before a rename operation.
        public let givenName: String?
        /// The name of the user.
        public let username: String?

        public init(surname: String? = nil, id: String? = nil, emailAddress: String? = nil, givenName: String? = nil, username: String? = nil) {
            self.surname = surname
            self.id = id
            self.emailAddress = emailAddress
            self.givenName = givenName
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case surname = "Surname"
            case id = "Id"
            case emailAddress = "EmailAddress"
            case givenName = "GivenName"
            case username = "Username"
        }
    }

    public struct DeleteNotificationSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionId", location: .uri(locationName: "SubscriptionId"), required: true, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String
        /// The ID of the subscription.
        public let subscriptionId: String

        public init(organizationId: String, subscriptionId: String) {
            self.organizationId = organizationId
            self.subscriptionId = subscriptionId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "OrganizationId"
            case subscriptionId = "SubscriptionId"
        }
    }

    public enum LocaleType: String, CustomStringConvertible, Codable {
        case en = "en"
        case fr = "fr"
        case ko = "ko"
        case de = "de"
        case es = "es"
        case ja = "ja"
        case ru = "ru"
        case zhCn = "zh_CN"
        case zhTw = "zh_TW"
        case ptBr = "pt_BR"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public struct DescribeResourcePermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The principals.
        public let principals: [Principal]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?

        public init(principals: [Principal]? = nil, marker: String? = nil) {
            self.principals = principals
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case marker = "Marker"
        }
    }

    public struct CreateCommentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "NotifyCollaborators", required: false, type: .boolean), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The text of the comment.
        public let text: String
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The ID of the parent comment.
        public let parentId: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document version.
        public let versionId: String
        /// Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
        public let notifyCollaborators: Bool?
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// The ID of the document.
        public let documentId: String

        public init(text: String, threadId: String? = nil, parentId: String? = nil, authenticationToken: String? = nil, versionId: String, notifyCollaborators: Bool? = nil, visibility: CommentVisibilityType? = nil, documentId: String) {
            self.text = text
            self.threadId = threadId
            self.parentId = parentId
            self.authenticationToken = authenticationToken
            self.versionId = versionId
            self.notifyCollaborators = notifyCollaborators
            self.visibility = visibility
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case threadId = "ThreadId"
            case parentId = "ParentId"
            case authenticationToken = "Authentication"
            case versionId = "VersionId"
            case notifyCollaborators = "NotifyCollaborators"
            case visibility = "Visibility"
            case documentId = "DocumentId"
        }
    }

    public struct DescribeRootFoldersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String
        /// The maximum number of items to return.
        public let limit: Int32?

        public init(marker: String? = nil, authenticationToken: String, limit: Int32? = nil) {
            self.marker = marker
            self.authenticationToken = authenticationToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case authenticationToken = "Authentication"
            case limit = "limit"
        }
    }

    public struct GetDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the document.
        public let documentId: String
        /// Set this to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?

        public init(authenticationToken: String? = nil, documentId: String, includeCustomMetadata: Bool? = nil) {
            self.authenticationToken = authenticationToken
            self.documentId = documentId
            self.includeCustomMetadata = includeCustomMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case documentId = "DocumentId"
            case includeCustomMetadata = "includeCustomMetadata"
        }
    }

    public struct CreateLabelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Labels", required: true, type: .list)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// List of labels to add to the resource.
        public let labels: [String]

        public init(authenticationToken: String? = nil, resourceId: String, labels: [String]) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.labels = labels
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case labels = "Labels"
        }
    }

    public struct DeleteLabelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Labels", location: .querystring(locationName: "labels"), required: false, type: .list), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the resource.
        public let resourceId: String
        /// List of labels to delete from the resource.
        public let labels: [String]?
        /// Flag to request removal of all labels from the specified resource.
        public let deleteAll: Bool?

        public init(authenticationToken: String? = nil, resourceId: String, labels: [String]? = nil, deleteAll: Bool? = nil) {
            self.authenticationToken = authenticationToken
            self.resourceId = resourceId
            self.labels = labels
            self.deleteAll = deleteAll
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case resourceId = "ResourceId"
            case labels = "labels"
            case deleteAll = "deleteAll"
        }
    }

    public struct DocumentVersionMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Source", required: false, type: .map), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentCreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "Signature", required: false, type: .string), 
            AWSShapeMember(label: "Thumbnail", required: false, type: .map), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string)
        ]
        /// The timestamp when the document was last uploaded.
        public let modifiedTimestamp: TimeStamp?
        /// The source of the document.
        public let source: [DocumentSourceType: String]?
        /// The ID of the version.
        public let id: String?
        /// The content type of the document.
        public let contentType: String?
        /// The timestamp when the document was first uploaded.
        public let createdTimestamp: TimeStamp?
        /// The timestamp when the content of the document was originally created.
        public let contentCreatedTimestamp: TimeStamp?
        /// The timestamp when the content of the document was modified.
        public let contentModifiedTimestamp: TimeStamp?
        /// The name of the version.
        public let name: String?
        /// The size of the document, in bytes.
        public let size: Int64?
        /// The signature of the document.
        public let signature: String?
        /// The thumbnail of the document.
        public let thumbnail: [DocumentThumbnailType: String]?
        /// The status of the document.
        public let status: DocumentStatusType?
        /// The ID of the creator.
        public let creatorId: String?

        public init(modifiedTimestamp: TimeStamp? = nil, source: [DocumentSourceType: String]? = nil, id: String? = nil, contentType: String? = nil, createdTimestamp: TimeStamp? = nil, contentCreatedTimestamp: TimeStamp? = nil, contentModifiedTimestamp: TimeStamp? = nil, name: String? = nil, size: Int64? = nil, signature: String? = nil, thumbnail: [DocumentThumbnailType: String]? = nil, status: DocumentStatusType? = nil, creatorId: String? = nil) {
            self.modifiedTimestamp = modifiedTimestamp
            self.source = source
            self.id = id
            self.contentType = contentType
            self.createdTimestamp = createdTimestamp
            self.contentCreatedTimestamp = contentCreatedTimestamp
            self.contentModifiedTimestamp = contentModifiedTimestamp
            self.name = name
            self.size = size
            self.signature = signature
            self.thumbnail = thumbnail
            self.status = status
            self.creatorId = creatorId
        }

        private enum CodingKeys: String, CodingKey {
            case modifiedTimestamp = "ModifiedTimestamp"
            case source = "Source"
            case id = "Id"
            case contentType = "ContentType"
            case createdTimestamp = "CreatedTimestamp"
            case contentCreatedTimestamp = "ContentCreatedTimestamp"
            case contentModifiedTimestamp = "ContentModifiedTimestamp"
            case name = "Name"
            case size = "Size"
            case signature = "Signature"
            case thumbnail = "Thumbnail"
            case status = "Status"
            case creatorId = "CreatorId"
        }
    }

    public enum RoleType: String, CustomStringConvertible, Codable {
        case viewer = "VIEWER"
        case contributor = "CONTRIBUTOR"
        case owner = "OWNER"
        case coowner = "COOWNER"
        public var description: String { return self.rawValue }
    }

    public struct DeleteCommentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "CommentId", location: .uri(locationName: "CommentId"), required: true, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string)
        ]
        /// The ID of the document version.
        public let versionId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the comment.
        public let commentId: String
        /// The ID of the document.
        public let documentId: String

        public init(versionId: String, authenticationToken: String? = nil, commentId: String, documentId: String) {
            self.versionId = versionId
            self.authenticationToken = authenticationToken
            self.commentId = commentId
            self.documentId = documentId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case authenticationToken = "Authentication"
            case commentId = "CommentId"
            case documentId = "DocumentId"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case group = "GROUP"
        case invite = "INVITE"
        case anonymous = "ANONYMOUS"
        case organization = "ORGANIZATION"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourceState", required: false, type: .enum), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// The ID of the parent folder.
        public let parentFolderId: String?
        /// The name of the folder.
        public let name: String?
        /// The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.
        public let resourceState: ResourceStateType?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(parentFolderId: String? = nil, name: String? = nil, resourceState: ResourceStateType? = nil, authenticationToken: String? = nil, folderId: String) {
            self.parentFolderId = parentFolderId
            self.name = name
            self.resourceState = resourceState
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case parentFolderId = "ParentFolderId"
            case name = "Name"
            case resourceState = "ResourceState"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public struct GetFolderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure), 
            AWSShapeMember(label: "CustomMetadata", required: false, type: .map)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?
        /// The custom metadata on the folder.
        public let customMetadata: [String: String]?

        public init(metadata: FolderMetadata? = nil, customMetadata: [String: String]? = nil) {
            self.metadata = metadata
            self.customMetadata = customMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case customMetadata = "CustomMetadata"
        }
    }

    public enum FolderContentType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case document = "DOCUMENT"
        case folder = "FOLDER"
        public var description: String { return self.rawValue }
    }

    public struct InitiateDocumentVersionUploadResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "Metadata", required: false, type: .structure)
        ]
        /// The upload metadata.
        public let uploadMetadata: UploadMetadata?
        /// The document metadata.
        public let metadata: DocumentMetadata?

        public init(uploadMetadata: UploadMetadata? = nil, metadata: DocumentMetadata? = nil) {
            self.uploadMetadata = uploadMetadata
            self.metadata = metadata
        }

        private enum CodingKeys: String, CodingKey {
            case uploadMetadata = "UploadMetadata"
            case metadata = "Metadata"
        }
    }

    public struct DeleteDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the document.
        public let documentId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(documentId: String, authenticationToken: String? = nil) {
            self.documentId = documentId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case documentId = "DocumentId"
            case authenticationToken = "Authentication"
        }
    }

    public struct DeactivateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the user.
        public let userId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(userId: String, authenticationToken: String? = nil) {
            self.userId = userId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case authenticationToken = "Authentication"
        }
    }

    public struct ResourcePath: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Components", required: false, type: .list)
        ]
        /// The components of the resource path.
        public let components: [ResourcePathComponent]?

        public init(components: [ResourcePathComponent]? = nil) {
            self.components = components
        }

        private enum CodingKeys: String, CodingKey {
            case components = "Components"
        }
    }

    public struct DescribeNotificationSubscriptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", location: .uri(locationName: "OrganizationId"), required: true, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The ID of the organization.
        public let organizationId: String

        public init(limit: Int32? = nil, marker: String? = nil, organizationId: String) {
            self.limit = limit
            self.marker = marker
            self.organizationId = organizationId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case marker = "marker"
            case organizationId = "OrganizationId"
        }
    }

    public struct AddResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Principals", required: true, type: .list), 
            AWSShapeMember(label: "NotificationOptions", required: false, type: .structure)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The users, groups, or organization being granted permission.
        public let principals: [SharePrincipal]
        /// The notification options.
        public let notificationOptions: NotificationOptions?

        public init(resourceId: String, authenticationToken: String? = nil, principals: [SharePrincipal], notificationOptions: NotificationOptions? = nil) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
            self.principals = principals
            self.notificationOptions = notificationOptions
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
            case principals = "Principals"
            case notificationOptions = "NotificationOptions"
        }
    }

    public struct Comment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "RecipientId", required: false, type: .string), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "CommentId", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Visibility", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp)
        ]
        /// The ID of the root comment in the thread.
        public let threadId: String?
        /// The details of the user who made the comment.
        public let contributor: User?
        /// The ID of the parent comment.
        public let parentId: String?
        /// If the comment is a reply to another user's comment, this field contains the user ID of the user being replied to.
        public let recipientId: String?
        /// The text of the comment.
        public let text: String?
        /// The ID of the comment.
        public let commentId: String
        /// The status of the comment.
        public let status: CommentStatusType?
        /// The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.
        public let visibility: CommentVisibilityType?
        /// The time that the comment was created.
        public let createdTimestamp: TimeStamp?

        public init(threadId: String? = nil, contributor: User? = nil, parentId: String? = nil, recipientId: String? = nil, text: String? = nil, commentId: String, status: CommentStatusType? = nil, visibility: CommentVisibilityType? = nil, createdTimestamp: TimeStamp? = nil) {
            self.threadId = threadId
            self.contributor = contributor
            self.parentId = parentId
            self.recipientId = recipientId
            self.text = text
            self.commentId = commentId
            self.status = status
            self.visibility = visibility
            self.createdTimestamp = createdTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case threadId = "ThreadId"
            case contributor = "Contributor"
            case parentId = "ParentId"
            case recipientId = "RecipientId"
            case text = "Text"
            case commentId = "CommentId"
            case status = "Status"
            case visibility = "Visibility"
            case createdTimestamp = "CreatedTimestamp"
        }
    }

    public struct CreateCustomMetadataResponse: AWSShape {

    }

    public struct DescribeFolderContentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Documents", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Folders", required: false, type: .list)
        ]
        /// The documents in the specified folder.
        public let documents: [DocumentMetadata]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let marker: String?
        /// The subfolders in the specified folder.
        public let folders: [FolderMetadata]?

        public init(documents: [DocumentMetadata]? = nil, marker: String? = nil, folders: [FolderMetadata]? = nil) {
            self.documents = documents
            self.marker = marker
            self.folders = folders
        }

        private enum CodingKeys: String, CodingKey {
            case documents = "Documents"
            case marker = "Marker"
            case folders = "Folders"
        }
    }

    public struct DeleteCustomMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "Keys", location: .querystring(locationName: "keys"), required: false, type: .list), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteAll", location: .querystring(locationName: "deleteAll"), required: false, type: .boolean)
        ]
        /// The ID of the version, if the custom metadata is being deleted from a document version.
        public let versionId: String?
        /// The ID of the resource, either a document or folder.
        public let resourceId: String
        /// List of properties to remove.
        public let keys: [String]?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Flag to indicate removal of all custom metadata properties from the specified resource.
        public let deleteAll: Bool?

        public init(versionId: String? = nil, resourceId: String, keys: [String]? = nil, authenticationToken: String? = nil, deleteAll: Bool? = nil) {
            self.versionId = versionId
            self.resourceId = resourceId
            self.keys = keys
            self.authenticationToken = authenticationToken
            self.deleteAll = deleteAll
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case resourceId = "ResourceId"
            case keys = "keys"
            case authenticationToken = "Authentication"
            case deleteAll = "deleteAll"
        }
    }

    public struct GetFolderPathRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// This value is not supported.
        public let marker: String?
        /// The maximum number of levels in the hierarchy to return.
        public let limit: Int32?
        /// A comma-separated list of values. Specify "NAME" to include the names of the parent folders.
        public let fields: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(marker: String? = nil, limit: Int32? = nil, fields: String? = nil, authenticationToken: String? = nil, folderId: String) {
            self.marker = marker
            self.limit = limit
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case limit = "limit"
            case fields = "fields"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public enum OrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct CommentMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "CommentId", required: false, type: .string), 
            AWSShapeMember(label: "Contributor", required: false, type: .structure), 
            AWSShapeMember(label: "RecipientId", required: false, type: .string), 
            AWSShapeMember(label: "CommentStatus", required: false, type: .enum)
        ]
        /// The timestamp that the comment was created.
        public let createdTimestamp: TimeStamp?
        /// The ID of the comment.
        public let commentId: String?
        /// The user who made the comment.
        public let contributor: User?
        /// The ID of the user being replied to.
        public let recipientId: String?
        /// The status of the comment.
        public let commentStatus: CommentStatusType?

        public init(createdTimestamp: TimeStamp? = nil, commentId: String? = nil, contributor: User? = nil, recipientId: String? = nil, commentStatus: CommentStatusType? = nil) {
            self.createdTimestamp = createdTimestamp
            self.commentId = commentId
            self.contributor = contributor
            self.recipientId = recipientId
            self.commentStatus = commentStatus
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case commentId = "CommentId"
            case contributor = "Contributor"
            case recipientId = "RecipientId"
            case commentStatus = "CommentStatus"
        }
    }

    public struct CreateFolderResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metadata", required: false, type: .structure)
        ]
        /// The metadata of the folder.
        public let metadata: FolderMetadata?

        public init(metadata: FolderMetadata? = nil) {
            self.metadata = metadata
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
        }
    }

    public struct CreateCommentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .structure)
        ]
        /// The comment that has been created.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
        }
    }

    public enum SubscriptionProtocolType: String, CustomStringConvertible, Codable {
        case https = "HTTPS"
        public var description: String { return self.rawValue }
    }

    public struct GroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the group.
        public let name: String?
        /// The ID of the user group.
        public let id: String?

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
        }
    }

    public struct UploadMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UploadUrl", required: false, type: .string), 
            AWSShapeMember(label: "SignedHeaders", required: false, type: .map)
        ]
        /// The URL of the upload.
        public let uploadUrl: String?
        /// The signed headers.
        public let signedHeaders: [String: String]?

        public init(uploadUrl: String? = nil, signedHeaders: [String: String]? = nil) {
            self.uploadUrl = uploadUrl
            self.signedHeaders = signedHeaders
        }

        private enum CodingKeys: String, CodingKey {
            case uploadUrl = "UploadUrl"
            case signedHeaders = "SignedHeaders"
        }
    }

    public enum StorageType: String, CustomStringConvertible, Codable {
        case unlimited = "UNLIMITED"
        case quota = "QUOTA"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "SearchQuery", location: .querystring(locationName: "searchQuery"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The ID of the organization.
        public let organizationId: String?
        /// A query to describe groups by group name.
        public let searchQuery: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The maximum number of items to return with this call.
        public let limit: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(organizationId: String? = nil, searchQuery: String, authenticationToken: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.organizationId = organizationId
            self.searchQuery = searchQuery
            self.authenticationToken = authenticationToken
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case organizationId = "organizationId"
            case searchQuery = "searchQuery"
            case authenticationToken = "Authentication"
            case limit = "limit"
            case marker = "marker"
        }
    }

    public struct RemoveResourcePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "PrincipalId", location: .uri(locationName: "PrincipalId"), required: true, type: .string)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The principal type of the resource.
        public let principalType: PrincipalType?
        /// The principal ID of the resource.
        public let principalId: String

        public init(resourceId: String, authenticationToken: String? = nil, principalType: PrincipalType? = nil, principalId: String) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
            self.principalType = principalType
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
            case principalType = "type"
            case principalId = "PrincipalId"
        }
    }

    public struct UserStorageMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageRule", required: false, type: .structure), 
            AWSShapeMember(label: "StorageUtilizedInBytes", required: false, type: .long)
        ]
        /// The storage for a user.
        public let storageRule: StorageRuleType?
        /// The amount of storage used, in bytes.
        public let storageUtilizedInBytes: Int64?

        public init(storageRule: StorageRuleType? = nil, storageUtilizedInBytes: Int64? = nil) {
            self.storageRule = storageRule
            self.storageUtilizedInBytes = storageUtilizedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case storageRule = "StorageRule"
            case storageUtilizedInBytes = "StorageUtilizedInBytes"
        }
    }

    public enum ActivityType: String, CustomStringConvertible, Codable {
        case documentCheckedIn = "DOCUMENT_CHECKED_IN"
        case documentCheckedOut = "DOCUMENT_CHECKED_OUT"
        case documentRenamed = "DOCUMENT_RENAMED"
        case documentVersionUploaded = "DOCUMENT_VERSION_UPLOADED"
        case documentVersionDeleted = "DOCUMENT_VERSION_DELETED"
        case documentVersionViewed = "DOCUMENT_VERSION_VIEWED"
        case documentVersionDownloaded = "DOCUMENT_VERSION_DOWNLOADED"
        case documentRecycled = "DOCUMENT_RECYCLED"
        case documentRestored = "DOCUMENT_RESTORED"
        case documentReverted = "DOCUMENT_REVERTED"
        case documentShared = "DOCUMENT_SHARED"
        case documentUnshared = "DOCUMENT_UNSHARED"
        case documentSharePermissionChanged = "DOCUMENT_SHARE_PERMISSION_CHANGED"
        case documentShareableLinkCreated = "DOCUMENT_SHAREABLE_LINK_CREATED"
        case documentShareableLinkRemoved = "DOCUMENT_SHAREABLE_LINK_REMOVED"
        case documentShareableLinkPermissionChanged = "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED"
        case documentMoved = "DOCUMENT_MOVED"
        case documentCommentAdded = "DOCUMENT_COMMENT_ADDED"
        case documentCommentDeleted = "DOCUMENT_COMMENT_DELETED"
        case documentAnnotationAdded = "DOCUMENT_ANNOTATION_ADDED"
        case documentAnnotationDeleted = "DOCUMENT_ANNOTATION_DELETED"
        case folderCreated = "FOLDER_CREATED"
        case folderDeleted = "FOLDER_DELETED"
        case folderRenamed = "FOLDER_RENAMED"
        case folderRecycled = "FOLDER_RECYCLED"
        case folderRestored = "FOLDER_RESTORED"
        case folderShared = "FOLDER_SHARED"
        case folderUnshared = "FOLDER_UNSHARED"
        case folderSharePermissionChanged = "FOLDER_SHARE_PERMISSION_CHANGED"
        case folderShareableLinkCreated = "FOLDER_SHAREABLE_LINK_CREATED"
        case folderShareableLinkRemoved = "FOLDER_SHAREABLE_LINK_REMOVED"
        case folderShareableLinkPermissionChanged = "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED"
        case folderMoved = "FOLDER_MOVED"
        public var description: String { return self.rawValue }
    }

    public struct GetFolderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeCustomMetadata", location: .querystring(locationName: "includeCustomMetadata"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "FolderId", location: .uri(locationName: "FolderId"), required: true, type: .string)
        ]
        /// Set to TRUE to include custom metadata in the response.
        public let includeCustomMetadata: Bool?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the folder.
        public let folderId: String

        public init(includeCustomMetadata: Bool? = nil, authenticationToken: String? = nil, folderId: String) {
            self.includeCustomMetadata = includeCustomMetadata
            self.authenticationToken = authenticationToken
            self.folderId = folderId
        }

        private enum CodingKeys: String, CodingKey {
            case includeCustomMetadata = "includeCustomMetadata"
            case authenticationToken = "Authentication"
            case folderId = "FolderId"
        }
    }

    public struct ShareResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: false, type: .enum), 
            AWSShapeMember(label: "InviteePrincipalId", required: false, type: .string), 
            AWSShapeMember(label: "ShareId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The status message.
        public let statusMessage: String?
        /// The ID of the principal.
        public let principalId: String?
        /// The role.
        public let role: RoleType?
        /// The ID of the invited user.
        public let inviteePrincipalId: String?
        /// The ID of the resource that was shared.
        public let shareId: String?
        /// The status.
        public let status: ShareStatusType?

        public init(statusMessage: String? = nil, principalId: String? = nil, role: RoleType? = nil, inviteePrincipalId: String? = nil, shareId: String? = nil, status: ShareStatusType? = nil) {
            self.statusMessage = statusMessage
            self.principalId = principalId
            self.role = role
            self.inviteePrincipalId = inviteePrincipalId
            self.shareId = shareId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case statusMessage = "StatusMessage"
            case principalId = "PrincipalId"
            case role = "Role"
            case inviteePrincipalId = "InviteePrincipalId"
            case shareId = "ShareId"
            case status = "Status"
        }
    }

    public struct ResourceMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ParentId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OriginalName", required: false, type: .string)
        ]
        /// The version ID of the resource. This is an optional field and is filled for action on document version.
        public let versionId: String?
        /// The owner of the resource.
        public let owner: UserMetadata?
        /// The ID of the resource.
        public let id: String?
        /// The type of resource.
        public let `type`: ResourceType?
        /// The parent ID of the resource before a rename operation.
        public let parentId: String?
        /// The name of the resource.
        public let name: String?
        /// The original name of the resource before a rename operation.
        public let originalName: String?

        public init(versionId: String? = nil, owner: UserMetadata? = nil, id: String? = nil, type: ResourceType? = nil, parentId: String? = nil, name: String? = nil, originalName: String? = nil) {
            self.versionId = versionId
            self.owner = owner
            self.id = id
            self.`type` = `type`
            self.parentId = parentId
            self.name = name
            self.originalName = originalName
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case owner = "Owner"
            case id = "Id"
            case `type` = "Type"
            case parentId = "ParentId"
            case name = "Name"
            case originalName = "OriginalName"
        }
    }

    public struct CreateCustomMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "CustomMetadata", required: true, type: .map), 
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionid"), required: false, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// Custom metadata in the form of name-value pairs.
        public let customMetadata: [String: String]
        /// The ID of the resource.
        public let resourceId: String
        /// The ID of the version, if the custom metadata is being added to a document version.
        public let versionId: String?

        public init(authenticationToken: String? = nil, customMetadata: [String: String], resourceId: String, versionId: String? = nil) {
            self.authenticationToken = authenticationToken
            self.customMetadata = customMetadata
            self.resourceId = resourceId
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case customMetadata = "CustomMetadata"
            case resourceId = "ResourceId"
            case versionId = "versionid"
        }
    }

    public struct DescribeDocumentVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .string)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The ID of the document.
        public let documentId: String
        /// The maximum number of versions to return with this call.
        public let limit: Int32?
        /// Specify "SOURCE" to include initialized versions and a URL for the source document.
        public let fields: String?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// A comma-separated list of values. Specify "INITIALIZED" to include incomplete versions.
        public let include: String?

        public init(marker: String? = nil, documentId: String, limit: Int32? = nil, fields: String? = nil, authenticationToken: String? = nil, include: String? = nil) {
            self.marker = marker
            self.documentId = documentId
            self.limit = limit
            self.fields = fields
            self.authenticationToken = authenticationToken
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case documentId = "DocumentId"
            case limit = "limit"
            case fields = "fields"
            case authenticationToken = "Authentication"
            case include = "include"
        }
    }

    public struct RemoveAllResourcePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .uri(locationName: "ResourceId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The ID of the resource.
        public let resourceId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(resourceId: String, authenticationToken: String? = nil) {
            self.resourceId = resourceId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case authenticationToken = "Authentication"
        }
    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .uri(locationName: "UserId"), required: true, type: .string)
        ]
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The ID of the user.
        public let userId: String

        public init(authenticationToken: String? = nil, userId: String) {
            self.authenticationToken = authenticationToken
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationToken = "Authentication"
            case userId = "UserId"
        }
    }

    public struct User: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Locale", required: false, type: .enum), 
            AWSShapeMember(label: "RecycleBinFolderId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "RootFolderId", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "Storage", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "OrganizationId", required: false, type: .string), 
            AWSShapeMember(label: "Surname", required: false, type: .string), 
            AWSShapeMember(label: "TimeZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "GivenName", required: false, type: .string)
        ]
        /// The locale of the user.
        public let locale: LocaleType?
        /// The ID of the recycle bin folder.
        public let recycleBinFolderId: String?
        /// The status of the user.
        public let status: UserStatusType?
        /// The ID of the root folder.
        public let rootFolderId: String?
        /// The email address of the user.
        public let emailAddress: String?
        /// The storage for the user.
        public let storage: UserStorageMetadata?
        /// The type of user.
        public let `type`: UserType?
        /// The ID of the organization.
        public let organizationId: String?
        /// The surname of the user.
        public let surname: String?
        /// The time zone ID of the user.
        public let timeZoneId: String?
        /// The ID of the user.
        public let id: String?
        /// The time when the user was created.
        public let createdTimestamp: TimeStamp?
        /// The time when the user was modified.
        public let modifiedTimestamp: TimeStamp?
        /// The login name of the user.
        public let username: String?
        /// The given name of the user.
        public let givenName: String?

        public init(locale: LocaleType? = nil, recycleBinFolderId: String? = nil, status: UserStatusType? = nil, rootFolderId: String? = nil, emailAddress: String? = nil, storage: UserStorageMetadata? = nil, type: UserType? = nil, organizationId: String? = nil, surname: String? = nil, timeZoneId: String? = nil, id: String? = nil, createdTimestamp: TimeStamp? = nil, modifiedTimestamp: TimeStamp? = nil, username: String? = nil, givenName: String? = nil) {
            self.locale = locale
            self.recycleBinFolderId = recycleBinFolderId
            self.status = status
            self.rootFolderId = rootFolderId
            self.emailAddress = emailAddress
            self.storage = storage
            self.`type` = `type`
            self.organizationId = organizationId
            self.surname = surname
            self.timeZoneId = timeZoneId
            self.id = id
            self.createdTimestamp = createdTimestamp
            self.modifiedTimestamp = modifiedTimestamp
            self.username = username
            self.givenName = givenName
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "Locale"
            case recycleBinFolderId = "RecycleBinFolderId"
            case status = "Status"
            case rootFolderId = "RootFolderId"
            case emailAddress = "EmailAddress"
            case storage = "Storage"
            case `type` = "Type"
            case organizationId = "OrganizationId"
            case surname = "Surname"
            case timeZoneId = "TimeZoneId"
            case id = "Id"
            case createdTimestamp = "CreatedTimestamp"
            case modifiedTimestamp = "ModifiedTimestamp"
            case username = "Username"
            case givenName = "GivenName"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case folder = "FOLDER"
        case document = "DOCUMENT"
        public var description: String { return self.rawValue }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "EndPoint", required: false, type: .string)
        ]
        /// The ID of the subscription.
        public let subscriptionId: String?
        /// The protocol of the subscription.
        public let `protocol`: SubscriptionProtocolType?
        /// The endpoint of the subscription.
        public let endPoint: String?

        public init(subscriptionId: String? = nil, protocol: SubscriptionProtocolType? = nil, endPoint: String? = nil) {
            self.subscriptionId = subscriptionId
            self.`protocol` = `protocol`
            self.endPoint = endPoint
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionId = "SubscriptionId"
            case `protocol` = "Protocol"
            case endPoint = "EndPoint"
        }
    }

    public struct UpdateDocumentVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .uri(locationName: "VersionId"), required: true, type: .string), 
            AWSShapeMember(label: "VersionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DocumentId", location: .uri(locationName: "DocumentId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string)
        ]
        /// The version ID of the document.
        public let versionId: String
        /// The status of the version.
        public let versionStatus: DocumentVersionStatus?
        /// The ID of the document.
        public let documentId: String
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?

        public init(versionId: String, versionStatus: DocumentVersionStatus? = nil, documentId: String, authenticationToken: String? = nil) {
            self.versionId = versionId
            self.versionStatus = versionStatus
            self.documentId = documentId
            self.authenticationToken = authenticationToken
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case versionStatus = "VersionStatus"
            case documentId = "DocumentId"
            case authenticationToken = "Authentication"
        }
    }

    public enum DocumentStatusType: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Include", location: .querystring(locationName: "include"), required: false, type: .enum), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "UserIds", location: .querystring(locationName: "userIds"), required: false, type: .string), 
            AWSShapeMember(label: "Order", location: .querystring(locationName: "order"), required: false, type: .enum), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthenticationToken", location: .header(locationName: "Authentication"), required: false, type: .string), 
            AWSShapeMember(label: "Sort", location: .querystring(locationName: "sort"), required: false, type: .enum), 
            AWSShapeMember(label: "Fields", location: .querystring(locationName: "fields"), required: false, type: .string), 
            AWSShapeMember(label: "OrganizationId", location: .querystring(locationName: "organizationId"), required: false, type: .string), 
            AWSShapeMember(label: "Query", location: .querystring(locationName: "query"), required: false, type: .string)
        ]
        /// The state of the users. Specify "ALL" to include inactive users.
        public let include: UserFilterType?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The IDs of the users.
        public let userIds: String?
        /// The order for the results.
        public let order: OrderType?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// Amazon WorkDocs authentication token. Do not set this field when using administrative API actions, as in accessing the API using AWS credentials.
        public let authenticationToken: String?
        /// The sorting criteria.
        public let sort: UserSortType?
        /// A comma-separated list of values. Specify "STORAGE_METADATA" to include the user storage quota and utilization information.
        public let fields: String?
        /// The ID of the organization.
        public let organizationId: String?
        /// A query to filter users by user name.
        public let query: String?

        public init(include: UserFilterType? = nil, marker: String? = nil, userIds: String? = nil, order: OrderType? = nil, limit: Int32? = nil, authenticationToken: String? = nil, sort: UserSortType? = nil, fields: String? = nil, organizationId: String? = nil, query: String? = nil) {
            self.include = include
            self.marker = marker
            self.userIds = userIds
            self.order = order
            self.limit = limit
            self.authenticationToken = authenticationToken
            self.sort = sort
            self.fields = fields
            self.organizationId = organizationId
            self.query = query
        }

        private enum CodingKeys: String, CodingKey {
            case include = "include"
            case marker = "marker"
            case userIds = "userIds"
            case order = "order"
            case limit = "limit"
            case authenticationToken = "Authentication"
            case sort = "sort"
            case fields = "fields"
            case organizationId = "organizationId"
            case query = "query"
        }
    }

}