// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Firehose {

    public struct DescribeDeliveryStreamOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the delivery stream.
        public let deliveryStreamDescription: DeliveryStreamDescription

        public init(deliveryStreamDescription: DeliveryStreamDescription) {
            self.deliveryStreamDescription = deliveryStreamDescription
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryStreamDescription = dictionary["DeliveryStreamDescription"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DeliveryStreamDescription") }
            self.deliveryStreamDescription = try Firehose.DeliveryStreamDescription(dictionary: deliveryStreamDescription)
        }
    }

    public enum ProcessorParameterName: String, CustomStringConvertible {
        case lambdaarn = "LambdaArn"
        case numberofretries = "NumberOfRetries"
        public var description: String { return self.rawValue }
    }

    public struct ProcessingConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data processors.
        public let processors: [Processor]?
        /// Enables or disables data processing.
        public let enabled: Bool?

        public init(processors: [Processor]? = nil, enabled: Bool? = nil) {
            self.processors = processors
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            if let processors = dictionary["Processors"] as? [[String: Any]] {
                self.processors = try processors.map({ try Processor(dictionary: $0) })
            } else { 
                self.processors = nil
            }
            self.enabled = dictionary["Enabled"] as? Bool
        }
    }

    public enum NoEncryptionConfig: String, CustomStringConvertible {
        case noencryption = "NoEncryption"
        public var description: String { return self.rawValue }
    }

    public struct RedshiftDestinationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for CreateDeliveryStream. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationConfiguration.S3Configuration because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Configuration: S3DestinationConfiguration
        /// The name of the user.
        public let username: String
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The user password.
        public let password: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in the event that Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?

        public init(copyCommand: CopyCommand, s3Configuration: S3DestinationConfiguration, username: String, s3BackupConfiguration: S3DestinationConfiguration? = nil, clusterJDBCURL: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, password: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil, s3BackupMode: RedshiftS3BackupMode? = nil) {
            self.copyCommand = copyCommand
            self.s3Configuration = s3Configuration
            self.username = username
            self.s3BackupConfiguration = s3BackupConfiguration
            self.clusterJDBCURL = clusterJDBCURL
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.password = password
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
        }

        public init(dictionary: [String: Any]) throws {
            guard let copyCommand = dictionary["CopyCommand"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CopyCommand") }
            self.copyCommand = try Firehose.CopyCommand(dictionary: copyCommand)
            guard let s3Configuration = dictionary["S3Configuration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3Configuration") }
            self.s3Configuration = try Firehose.S3DestinationConfiguration(dictionary: s3Configuration)
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            if let s3BackupConfiguration = dictionary["S3BackupConfiguration"] as? [String: Any] { self.s3BackupConfiguration = try Firehose.S3DestinationConfiguration(dictionary: s3BackupConfiguration) } else { self.s3BackupConfiguration = nil }
            guard let clusterJDBCURL = dictionary["ClusterJDBCURL"] as? String else { throw InitializableError.missingRequiredParam("ClusterJDBCURL") }
            self.clusterJDBCURL = clusterJDBCURL
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.RedshiftRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = RedshiftS3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
        }
    }

    public struct CopyCommand: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the target table. The table must already exist in the database.
        public let dataTableName: String
        /// A comma-separated list of column names.
        public let dataTableColumns: String?
        /// Optional parameters to use with the Amazon Redshift COPY command. For more information, see the "Optional Parameters" section of Amazon Redshift COPY command. Some possible examples that would apply to Firehose are as follows:  delimiter '\t' lzop; - fields are delimited with "\t" (TAB character) and compressed using lzop.  delimiter '| - fields are delimited with "|" (this is the default delimiter).  delimiter '|' escape - the delimiter should be escaped.  fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6' - fields are fixed width in the source, with each width specified after every column in the table.  JSON 's3://mybucket/jsonpaths.txt' - data is in JSON format, and the path specified is the format of the data. For more examples, see Amazon Redshift COPY command examples.
        public let copyOptions: String?

        public init(dataTableName: String, dataTableColumns: String? = nil, copyOptions: String? = nil) {
            self.dataTableName = dataTableName
            self.dataTableColumns = dataTableColumns
            self.copyOptions = copyOptions
        }

        public init(dictionary: [String: Any]) throws {
            guard let dataTableName = dictionary["DataTableName"] as? String else { throw InitializableError.missingRequiredParam("DataTableName") }
            self.dataTableName = dataTableName
            self.dataTableColumns = dictionary["DataTableColumns"] as? String
            self.copyOptions = dictionary["CopyOptions"] as? String
        }
    }

    public struct ExtendedS3DestinationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat?
        /// The buffering option.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration? = nil, roleARN: String, s3BackupConfiguration: S3DestinationConfiguration? = nil, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            if let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] { self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration) } else { self.encryptionConfiguration = nil }
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let s3BackupConfiguration = dictionary["S3BackupConfiguration"] as? [String: Any] { self.s3BackupConfiguration = try Firehose.S3DestinationConfiguration(dictionary: s3BackupConfiguration) } else { self.s3BackupConfiguration = nil }
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            self.prefix = dictionary["Prefix"] as? String
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = S3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let compressionFormat = dictionary["CompressionFormat"] as? String { self.compressionFormat = CompressionFormat(rawValue: compressionFormat) } else { self.compressionFormat = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public enum S3BackupMode: String, CustomStringConvertible {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct ElasticsearchRetryOptions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// After an initial failure to deliver to Amazon ES, the total amount of time during which Firehose re-attempts delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.durationInSeconds = dictionary["DurationInSeconds"] as? Int32
        }
    }

    public struct PutRecordOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the record.
        public let recordId: String

        public init(recordId: String) {
            self.recordId = recordId
        }

        public init(dictionary: [String: Any]) throws {
            guard let recordId = dictionary["RecordId"] as? String else { throw InitializableError.missingRequiredParam("RecordId") }
            self.recordId = recordId
        }
    }

    public enum ElasticsearchS3BackupMode: String, CustomStringConvertible {
        case faileddocumentsonly = "FailedDocumentsOnly"
        case alldocuments = "AllDocuments"
        public var description: String { return self.rawValue }
    }

    public struct DestinationDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// [Deprecated] The destination in Amazon S3.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The ID of the destination.
        public let destinationId: String
        /// The destination in Amazon Redshift.
        public let redshiftDestinationDescription: RedshiftDestinationDescription?
        /// The destination in Amazon S3.
        public let extendedS3DestinationDescription: ExtendedS3DestinationDescription?
        /// The destination in Amazon ES.
        public let elasticsearchDestinationDescription: ElasticsearchDestinationDescription?

        public init(s3DestinationDescription: S3DestinationDescription? = nil, destinationId: String, redshiftDestinationDescription: RedshiftDestinationDescription? = nil, extendedS3DestinationDescription: ExtendedS3DestinationDescription? = nil, elasticsearchDestinationDescription: ElasticsearchDestinationDescription? = nil) {
            self.s3DestinationDescription = s3DestinationDescription
            self.destinationId = destinationId
            self.redshiftDestinationDescription = redshiftDestinationDescription
            self.extendedS3DestinationDescription = extendedS3DestinationDescription
            self.elasticsearchDestinationDescription = elasticsearchDestinationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let s3DestinationDescription = dictionary["S3DestinationDescription"] as? [String: Any] { self.s3DestinationDescription = try Firehose.S3DestinationDescription(dictionary: s3DestinationDescription) } else { self.s3DestinationDescription = nil }
            guard let destinationId = dictionary["DestinationId"] as? String else { throw InitializableError.missingRequiredParam("DestinationId") }
            self.destinationId = destinationId
            if let redshiftDestinationDescription = dictionary["RedshiftDestinationDescription"] as? [String: Any] { self.redshiftDestinationDescription = try Firehose.RedshiftDestinationDescription(dictionary: redshiftDestinationDescription) } else { self.redshiftDestinationDescription = nil }
            if let extendedS3DestinationDescription = dictionary["ExtendedS3DestinationDescription"] as? [String: Any] { self.extendedS3DestinationDescription = try Firehose.ExtendedS3DestinationDescription(dictionary: extendedS3DestinationDescription) } else { self.extendedS3DestinationDescription = nil }
            if let elasticsearchDestinationDescription = dictionary["ElasticsearchDestinationDescription"] as? [String: Any] { self.elasticsearchDestinationDescription = try Firehose.ElasticsearchDestinationDescription(dictionary: elasticsearchDestinationDescription) } else { self.elasticsearchDestinationDescription = nil }
        }
    }

    public struct UpdateDestinationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes an update for a destination in Amazon ES.
        public let elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate?
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// Obtain this value from the VersionId result of DeliveryStreamDescription. This value is required, and helps the service to perform conditional operations. For example, if there is a interleaving update and this value is null, then the update destination fails. After the update is successful, the VersionId value is updated. The service then performs a merge of the old configuration with the new configuration.
        public let currentDeliveryStreamVersionId: String
        /// The ID of the destination.
        public let destinationId: String
        /// Describes an update for a destination in Amazon S3.
        public let extendedS3DestinationUpdate: ExtendedS3DestinationUpdate?
        /// Describes an update for a destination in Amazon Redshift.
        public let redshiftDestinationUpdate: RedshiftDestinationUpdate?
        /// [Deprecated] Describes an update for a destination in Amazon S3.
        public let s3DestinationUpdate: S3DestinationUpdate?

        public init(elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate? = nil, deliveryStreamName: String, currentDeliveryStreamVersionId: String, destinationId: String, extendedS3DestinationUpdate: ExtendedS3DestinationUpdate? = nil, redshiftDestinationUpdate: RedshiftDestinationUpdate? = nil, s3DestinationUpdate: S3DestinationUpdate? = nil) {
            self.elasticsearchDestinationUpdate = elasticsearchDestinationUpdate
            self.deliveryStreamName = deliveryStreamName
            self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
            self.destinationId = destinationId
            self.extendedS3DestinationUpdate = extendedS3DestinationUpdate
            self.redshiftDestinationUpdate = redshiftDestinationUpdate
            self.s3DestinationUpdate = s3DestinationUpdate
        }

        public init(dictionary: [String: Any]) throws {
            if let elasticsearchDestinationUpdate = dictionary["ElasticsearchDestinationUpdate"] as? [String: Any] { self.elasticsearchDestinationUpdate = try Firehose.ElasticsearchDestinationUpdate(dictionary: elasticsearchDestinationUpdate) } else { self.elasticsearchDestinationUpdate = nil }
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
            guard let currentDeliveryStreamVersionId = dictionary["CurrentDeliveryStreamVersionId"] as? String else { throw InitializableError.missingRequiredParam("CurrentDeliveryStreamVersionId") }
            self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
            guard let destinationId = dictionary["DestinationId"] as? String else { throw InitializableError.missingRequiredParam("DestinationId") }
            self.destinationId = destinationId
            if let extendedS3DestinationUpdate = dictionary["ExtendedS3DestinationUpdate"] as? [String: Any] { self.extendedS3DestinationUpdate = try Firehose.ExtendedS3DestinationUpdate(dictionary: extendedS3DestinationUpdate) } else { self.extendedS3DestinationUpdate = nil }
            if let redshiftDestinationUpdate = dictionary["RedshiftDestinationUpdate"] as? [String: Any] { self.redshiftDestinationUpdate = try Firehose.RedshiftDestinationUpdate(dictionary: redshiftDestinationUpdate) } else { self.redshiftDestinationUpdate = nil }
            if let s3DestinationUpdate = dictionary["S3DestinationUpdate"] as? [String: Any] { self.s3DestinationUpdate = try Firehose.S3DestinationUpdate(dictionary: s3DestinationUpdate) } else { self.s3DestinationUpdate = nil }
        }
    }

    public struct ListDeliveryStreamsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the delivery streams.
        public let deliveryStreamNames: [String]
        /// Indicates whether there are more delivery streams available to list.
        public let hasMoreDeliveryStreams: Bool

        public init(deliveryStreamNames: [String], hasMoreDeliveryStreams: Bool) {
            self.deliveryStreamNames = deliveryStreamNames
            self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryStreamNames = dictionary["DeliveryStreamNames"] as? [String] else { throw InitializableError.missingRequiredParam("DeliveryStreamNames") }
            self.deliveryStreamNames = deliveryStreamNames
            guard let hasMoreDeliveryStreams = dictionary["HasMoreDeliveryStreams"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreDeliveryStreams") }
            self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
        }
    }

    public struct RedshiftDestinationDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The name of the user.
        public let username: String
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in the event that Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?

        public init(s3BackupDescription: S3DestinationDescription? = nil, copyCommand: CopyCommand, username: String, s3DestinationDescription: S3DestinationDescription, clusterJDBCURL: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: RedshiftS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil) {
            self.s3BackupDescription = s3BackupDescription
            self.copyCommand = copyCommand
            self.username = username
            self.s3DestinationDescription = s3DestinationDescription
            self.clusterJDBCURL = clusterJDBCURL
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
        }

        public init(dictionary: [String: Any]) throws {
            if let s3BackupDescription = dictionary["S3BackupDescription"] as? [String: Any] { self.s3BackupDescription = try Firehose.S3DestinationDescription(dictionary: s3BackupDescription) } else { self.s3BackupDescription = nil }
            guard let copyCommand = dictionary["CopyCommand"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CopyCommand") }
            self.copyCommand = try Firehose.CopyCommand(dictionary: copyCommand)
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            guard let s3DestinationDescription = dictionary["S3DestinationDescription"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3DestinationDescription") }
            self.s3DestinationDescription = try Firehose.S3DestinationDescription(dictionary: s3DestinationDescription)
            guard let clusterJDBCURL = dictionary["ClusterJDBCURL"] as? String else { throw InitializableError.missingRequiredParam("ClusterJDBCURL") }
            self.clusterJDBCURL = clusterJDBCURL
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = RedshiftS3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.RedshiftRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
        }
    }

    public struct ListDeliveryStreamsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of delivery streams to list.
        public let limit: Int32?
        /// The name of the delivery stream to start the list with.
        public let exclusiveStartDeliveryStreamName: String?

        public init(limit: Int32? = nil, exclusiveStartDeliveryStreamName: String? = nil) {
            self.limit = limit
            self.exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.exclusiveStartDeliveryStreamName = dictionary["ExclusiveStartDeliveryStreamName"] as? String
        }
    }

    public enum DeliveryStreamStatus: String, CustomStringConvertible {
        case creating = "CREATING"
        case deleting = "DELETING"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum ProcessorType: String, CustomStringConvertible {
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct S3DestinationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration? = nil, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            if let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] { self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration) } else { self.encryptionConfiguration = nil }
            self.prefix = dictionary["Prefix"] as? String
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let compressionFormat = dictionary["CompressionFormat"] as? String { self.compressionFormat = CompressionFormat(rawValue: compressionFormat) } else { self.compressionFormat = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct S3DestinationDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat, bufferingHints: BufferingHints) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            guard let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("EncryptionConfiguration") }
            self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration)
            self.prefix = dictionary["Prefix"] as? String
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            guard let rawCompressionFormat = dictionary["CompressionFormat"] as? String, let compressionFormat = CompressionFormat(rawValue: rawCompressionFormat) else { throw InitializableError.missingRequiredParam("CompressionFormat") }
            self.compressionFormat = compressionFormat
            guard let bufferingHints = dictionary["BufferingHints"] as? [String: Any] else { throw InitializableError.missingRequiredParam("BufferingHints") }
            self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints)
        }
    }

    public struct DeleteDeliveryStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(deliveryStreamName: String) {
            self.deliveryStreamName = deliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
        }
    }

    public struct UpdateDestinationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct RedshiftDestinationUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The COPY command.
        public let copyCommand: CopyCommand?
        /// The name of the user.
        public let username: String?
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The database connection string.
        public let clusterJDBCURL: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Update: S3DestinationUpdate?
        /// The user password.
        public let password: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in the event that Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?

        public init(processingConfiguration: ProcessingConfiguration? = nil, copyCommand: CopyCommand? = nil, username: String? = nil, s3BackupUpdate: S3DestinationUpdate? = nil, clusterJDBCURL: String? = nil, s3BackupMode: RedshiftS3BackupMode? = nil, roleARN: String? = nil, s3Update: S3DestinationUpdate? = nil, password: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil) {
            self.processingConfiguration = processingConfiguration
            self.copyCommand = copyCommand
            self.username = username
            self.s3BackupUpdate = s3BackupUpdate
            self.clusterJDBCURL = clusterJDBCURL
            self.s3BackupMode = s3BackupMode
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.password = password
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
        }

        public init(dictionary: [String: Any]) throws {
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            if let copyCommand = dictionary["CopyCommand"] as? [String: Any] { self.copyCommand = try Firehose.CopyCommand(dictionary: copyCommand) } else { self.copyCommand = nil }
            self.username = dictionary["Username"] as? String
            if let s3BackupUpdate = dictionary["S3BackupUpdate"] as? [String: Any] { self.s3BackupUpdate = try Firehose.S3DestinationUpdate(dictionary: s3BackupUpdate) } else { self.s3BackupUpdate = nil }
            self.clusterJDBCURL = dictionary["ClusterJDBCURL"] as? String
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = RedshiftS3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            self.roleARN = dictionary["RoleARN"] as? String
            if let s3Update = dictionary["S3Update"] as? [String: Any] { self.s3Update = try Firehose.S3DestinationUpdate(dictionary: s3Update) } else { self.s3Update = nil }
            self.password = dictionary["Password"] as? String
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.RedshiftRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
        }
    }

    public struct BufferingHints: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        public let intervalInSeconds: Int32?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?

        public init(intervalInSeconds: Int32? = nil, sizeInMBs: Int32? = nil) {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }

        public init(dictionary: [String: Any]) throws {
            self.intervalInSeconds = dictionary["IntervalInSeconds"] as? Int32
            self.sizeInMBs = dictionary["SizeInMBs"] as? Int32
        }
    }

    public struct RedshiftRetryOptions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.durationInSeconds = dictionary["DurationInSeconds"] as? Int32
        }
    }

    public struct S3DestinationUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the S3 bucket.
        public let bucketARN: String?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, prefix: String? = nil, roleARN: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            self.bucketARN = dictionary["BucketARN"] as? String
            if let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] { self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration) } else { self.encryptionConfiguration = nil }
            self.prefix = dictionary["Prefix"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let compressionFormat = dictionary["CompressionFormat"] as? String { self.compressionFormat = CompressionFormat(rawValue: compressionFormat) } else { self.compressionFormat = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct PutRecordBatchOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The results array. For each record, the index of the response element is the same as the index used in the request array.
        public let requestResponses: [PutRecordBatchResponseEntry]
        /// The number of records that might have failed processing.
        public let failedPutCount: Int32

        public init(requestResponses: [PutRecordBatchResponseEntry], failedPutCount: Int32) {
            self.requestResponses = requestResponses
            self.failedPutCount = failedPutCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let requestResponses = dictionary["RequestResponses"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("RequestResponses") }
            self.requestResponses = try requestResponses.map({ try PutRecordBatchResponseEntry(dictionary: $0) })
            guard let failedPutCount = dictionary["FailedPutCount"] as? Int32 else { throw InitializableError.missingRequiredParam("FailedPutCount") }
            self.failedPutCount = failedPutCount
        }
    }

    public enum RedshiftS3BackupMode: String, CustomStringConvertible {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeliveryStreamOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the delivery stream.
        public let deliveryStreamARN: String?

        public init(deliveryStreamARN: String? = nil) {
            self.deliveryStreamARN = deliveryStreamARN
        }

        public init(dictionary: [String: Any]) throws {
            self.deliveryStreamARN = dictionary["DeliveryStreamARN"] as? String
        }
    }

    public struct ElasticsearchDestinationUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Elasticsearch type name.
        public let typeName: String?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to IndexName to facilitate the expiration of old data. For more information, see Index Rotation for Amazon Elasticsearch Service Destination. Default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the IAM role specified in RoleARN.
        public let domainARN: String?
        /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Amazon S3 Bucket Access.
        public let roleARN: String?
        /// The Amazon S3 destination.
        public let s3Update: S3DestinationUpdate?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in the event that Firehose is unable to deliver documents to Amazon ES. Default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options. If no value is specified, ElasticsearchBufferingHints object default values are used. 
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String? = nil, indexName: String? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String? = nil, roleARN: String? = nil, s3Update: S3DestinationUpdate? = nil, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            self.typeName = dictionary["TypeName"] as? String
            self.indexName = dictionary["IndexName"] as? String
            if let indexRotationPeriod = dictionary["IndexRotationPeriod"] as? String { self.indexRotationPeriod = ElasticsearchIndexRotationPeriod(rawValue: indexRotationPeriod) } else { self.indexRotationPeriod = nil }
            self.domainARN = dictionary["DomainARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let s3Update = dictionary["S3Update"] as? [String: Any] { self.s3Update = try Firehose.S3DestinationUpdate(dictionary: s3Update) } else { self.s3Update = nil }
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.ElasticsearchRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.ElasticsearchBufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct CreateDeliveryStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The destination in Amazon ES. You can specify only one destination.
        public let elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration?
        /// The destination in Amazon S3. You can specify only one destination.
        public let extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration?
        /// [Deprecated] The destination in Amazon S3. You can specify only one destination.
        public let s3DestinationConfiguration: S3DestinationConfiguration?
        /// The destination in Amazon Redshift. You can specify only one destination.
        public let redshiftDestinationConfiguration: RedshiftDestinationConfiguration?
        /// The name of the delivery stream. This name must be unique per AWS account in the same region. You can have multiple delivery streams with the same name if they are in different accounts or different regions.
        public let deliveryStreamName: String

        public init(elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration? = nil, extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration? = nil, s3DestinationConfiguration: S3DestinationConfiguration? = nil, redshiftDestinationConfiguration: RedshiftDestinationConfiguration? = nil, deliveryStreamName: String) {
            self.elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration
            self.extendedS3DestinationConfiguration = extendedS3DestinationConfiguration
            self.s3DestinationConfiguration = s3DestinationConfiguration
            self.redshiftDestinationConfiguration = redshiftDestinationConfiguration
            self.deliveryStreamName = deliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            if let elasticsearchDestinationConfiguration = dictionary["ElasticsearchDestinationConfiguration"] as? [String: Any] { self.elasticsearchDestinationConfiguration = try Firehose.ElasticsearchDestinationConfiguration(dictionary: elasticsearchDestinationConfiguration) } else { self.elasticsearchDestinationConfiguration = nil }
            if let extendedS3DestinationConfiguration = dictionary["ExtendedS3DestinationConfiguration"] as? [String: Any] { self.extendedS3DestinationConfiguration = try Firehose.ExtendedS3DestinationConfiguration(dictionary: extendedS3DestinationConfiguration) } else { self.extendedS3DestinationConfiguration = nil }
            if let s3DestinationConfiguration = dictionary["S3DestinationConfiguration"] as? [String: Any] { self.s3DestinationConfiguration = try Firehose.S3DestinationConfiguration(dictionary: s3DestinationConfiguration) } else { self.s3DestinationConfiguration = nil }
            if let redshiftDestinationConfiguration = dictionary["RedshiftDestinationConfiguration"] as? [String: Any] { self.redshiftDestinationConfiguration = try Firehose.RedshiftDestinationConfiguration(dictionary: redshiftDestinationConfiguration) } else { self.redshiftDestinationConfiguration = nil }
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
        }
    }

    public struct ElasticsearchDestinationConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Elasticsearch type name.
        public let typeName: String
        /// The Elasticsearch index name.
        public let indexName: String
        /// The configuration for the intermediate Amazon S3 location from which Amazon ES obtains data.
        public let s3Configuration: S3DestinationConfiguration
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to the IndexName to facilitate expiration of old data. For more information, see Index Rotation for Amazon Elasticsearch Service Destination. The default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN.
        public let domainARN: String
        /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Amazon S3 Bucket Access.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with elasticsearch-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with elasticsearch-failed/ appended to the prefix. For more information, see Amazon S3 Backup for Amazon Elasticsearch Service Destination. Default value is FailedDocumentsOnly.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in the event that Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String, indexName: String, s3Configuration: S3DestinationConfiguration, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: ElasticsearchS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.s3Configuration = s3Configuration
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            guard let typeName = dictionary["TypeName"] as? String else { throw InitializableError.missingRequiredParam("TypeName") }
            self.typeName = typeName
            guard let indexName = dictionary["IndexName"] as? String else { throw InitializableError.missingRequiredParam("IndexName") }
            self.indexName = indexName
            guard let s3Configuration = dictionary["S3Configuration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3Configuration") }
            self.s3Configuration = try Firehose.S3DestinationConfiguration(dictionary: s3Configuration)
            if let indexRotationPeriod = dictionary["IndexRotationPeriod"] as? String { self.indexRotationPeriod = ElasticsearchIndexRotationPeriod(rawValue: indexRotationPeriod) } else { self.indexRotationPeriod = nil }
            guard let domainARN = dictionary["DomainARN"] as? String else { throw InitializableError.missingRequiredParam("DomainARN") }
            self.domainARN = domainARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = ElasticsearchS3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.ElasticsearchRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.ElasticsearchBufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct Record: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KB.
        public let data: Data

        public init(data: Data) {
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            guard let data = dictionary["Data"] as? Data else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
        }
    }

    public struct PutRecordBatchInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more records.
        public let records: [Record]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(records: [Record], deliveryStreamName: String) {
            self.records = records
            self.deliveryStreamName = deliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let records = dictionary["Records"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Records") }
            self.records = try records.map({ try Record(dictionary: $0) })
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
        }
    }

    public struct ProcessorParameter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the parameter.
        public let parameterName: ProcessorParameterName
        /// The parameter value.
        public let parameterValue: String

        public init(parameterName: ProcessorParameterName, parameterValue: String) {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawParameterName = dictionary["ParameterName"] as? String, let parameterName = ProcessorParameterName(rawValue: rawParameterName) else { throw InitializableError.missingRequiredParam("ParameterName") }
            self.parameterName = parameterName
            guard let parameterValue = dictionary["ParameterValue"] as? String else { throw InitializableError.missingRequiredParam("ParameterValue") }
            self.parameterValue = parameterValue
        }
    }

    public struct KMSEncryptionConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket.
        public let aWSKMSKeyARN: String

        public init(aWSKMSKeyARN: String) {
            self.aWSKMSKeyARN = aWSKMSKeyARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let aWSKMSKeyARN = dictionary["AWSKMSKeyARN"] as? String else { throw InitializableError.missingRequiredParam("AWSKMSKeyARN") }
            self.aWSKMSKeyARN = aWSKMSKeyARN
        }
    }

    public struct ExtendedS3DestinationDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The buffering option.
        public let bufferingHints: BufferingHints

        public init(s3BackupDescription: S3DestinationDescription? = nil, bucketARN: String, encryptionConfiguration: EncryptionConfiguration, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat, bufferingHints: BufferingHints) {
            self.s3BackupDescription = s3BackupDescription
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            if let s3BackupDescription = dictionary["S3BackupDescription"] as? [String: Any] { self.s3BackupDescription = try Firehose.S3DestinationDescription(dictionary: s3BackupDescription) } else { self.s3BackupDescription = nil }
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            guard let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("EncryptionConfiguration") }
            self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration)
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            self.prefix = dictionary["Prefix"] as? String
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = S3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            guard let rawCompressionFormat = dictionary["CompressionFormat"] as? String, let compressionFormat = CompressionFormat(rawValue: rawCompressionFormat) else { throw InitializableError.missingRequiredParam("CompressionFormat") }
            self.compressionFormat = compressionFormat
            guard let bufferingHints = dictionary["BufferingHints"] as? [String: Any] else { throw InitializableError.missingRequiredParam("BufferingHints") }
            self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints)
        }
    }

    public enum CompressionFormat: String, CustomStringConvertible {
        case uncompressed = "UNCOMPRESSED"
        case gzip = "GZIP"
        case zip = "ZIP"
        case snappy = "Snappy"
        public var description: String { return self.rawValue }
    }

    public struct PutRecordInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The record.
        public let record: Record
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(record: Record, deliveryStreamName: String) {
            self.record = record
            self.deliveryStreamName = deliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let record = dictionary["Record"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Record") }
            self.record = try Firehose.Record(dictionary: record)
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
        }
    }

    public struct DeleteDeliveryStreamOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ElasticsearchIndexRotationPeriod: String, CustomStringConvertible {
        case norotation = "NoRotation"
        case onehour = "OneHour"
        case oneday = "OneDay"
        case oneweek = "OneWeek"
        case onemonth = "OneMonth"
        public var description: String { return self.rawValue }
    }

    public struct Processor: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of processor.
        public let `type`: ProcessorType
        /// The processor parameters.
        public let parameters: [ProcessorParameter]?

        public init(type: ProcessorType, parameters: [ProcessorParameter]? = nil) {
            self.`type` = `type`
            self.parameters = parameters
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawType = dictionary["Type"] as? String, let `type` = ProcessorType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            if let parameters = dictionary["Parameters"] as? [[String: Any]] {
                self.parameters = try parameters.map({ try ProcessorParameter(dictionary: $0) })
            } else { 
                self.parameters = nil
            }
        }
    }

    public struct ExtendedS3DestinationUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the S3 bucket.
        public let bucketARN: String?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// Enables or disables Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. 
        public let compressionFormat: CompressionFormat?
        /// The buffering option.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, roleARN: String? = nil, s3BackupUpdate: S3DestinationUpdate? = nil, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.s3BackupUpdate = s3BackupUpdate
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            self.bucketARN = dictionary["BucketARN"] as? String
            if let encryptionConfiguration = dictionary["EncryptionConfiguration"] as? [String: Any] { self.encryptionConfiguration = try Firehose.EncryptionConfiguration(dictionary: encryptionConfiguration) } else { self.encryptionConfiguration = nil }
            self.roleARN = dictionary["RoleARN"] as? String
            if let s3BackupUpdate = dictionary["S3BackupUpdate"] as? [String: Any] { self.s3BackupUpdate = try Firehose.S3DestinationUpdate(dictionary: s3BackupUpdate) } else { self.s3BackupUpdate = nil }
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            self.prefix = dictionary["Prefix"] as? String
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = S3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let compressionFormat = dictionary["CompressionFormat"] as? String { self.compressionFormat = CompressionFormat(rawValue: compressionFormat) } else { self.compressionFormat = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.BufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct CloudWatchLoggingOptions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
        public let logStreamName: String?
        /// The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
        public let logGroupName: String?
        /// Enables or disables CloudWatch logging.
        public let enabled: Bool?

        public init(logStreamName: String? = nil, logGroupName: String? = nil, enabled: Bool? = nil) {
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            self.logStreamName = dictionary["LogStreamName"] as? String
            self.logGroupName = dictionary["LogGroupName"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
        }
    }

    public struct DescribeDeliveryStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the destination to start returning the destination information. Currently Firehose supports one destination per delivery stream.
        public let exclusiveStartDestinationId: String?
        /// The limit on the number of destinations to return. Currently, you can have one destination per delivery stream.
        public let limit: Int32?
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(exclusiveStartDestinationId: String? = nil, limit: Int32? = nil, deliveryStreamName: String) {
            self.exclusiveStartDestinationId = exclusiveStartDestinationId
            self.limit = limit
            self.deliveryStreamName = deliveryStreamName
        }

        public init(dictionary: [String: Any]) throws {
            self.exclusiveStartDestinationId = dictionary["ExclusiveStartDestinationId"] as? String
            self.limit = dictionary["Limit"] as? Int32
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The encryption key.
        public let kMSEncryptionConfig: KMSEncryptionConfig?
        /// Specifically override existing encryption information to ensure no encryption is used.
        public let noEncryptionConfig: NoEncryptionConfig?

        public init(kMSEncryptionConfig: KMSEncryptionConfig? = nil, noEncryptionConfig: NoEncryptionConfig? = nil) {
            self.kMSEncryptionConfig = kMSEncryptionConfig
            self.noEncryptionConfig = noEncryptionConfig
        }

        public init(dictionary: [String: Any]) throws {
            if let kMSEncryptionConfig = dictionary["KMSEncryptionConfig"] as? [String: Any] { self.kMSEncryptionConfig = try Firehose.KMSEncryptionConfig(dictionary: kMSEncryptionConfig) } else { self.kMSEncryptionConfig = nil }
            if let noEncryptionConfig = dictionary["NoEncryptionConfig"] as? String { self.noEncryptionConfig = NoEncryptionConfig(rawValue: noEncryptionConfig) } else { self.noEncryptionConfig = nil }
        }
    }

    public struct DeliveryStreamDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The destinations.
        public let destinations: [DestinationDescription]
        /// The status of the delivery stream.
        public let deliveryStreamStatus: DeliveryStreamStatus
        /// The date and time that the delivery stream was last updated.
        public let lastUpdateTimestamp: Date?
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
        public let versionId: String
        /// The date and time that the delivery stream was created.
        public let createTimestamp: Date?
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let deliveryStreamARN: String
        /// Indicates whether there are more destinations available to list.
        public let hasMoreDestinations: Bool

        public init(destinations: [DestinationDescription], deliveryStreamStatus: DeliveryStreamStatus, lastUpdateTimestamp: Date? = nil, deliveryStreamName: String, versionId: String, createTimestamp: Date? = nil, deliveryStreamARN: String, hasMoreDestinations: Bool) {
            self.destinations = destinations
            self.deliveryStreamStatus = deliveryStreamStatus
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.deliveryStreamName = deliveryStreamName
            self.versionId = versionId
            self.createTimestamp = createTimestamp
            self.deliveryStreamARN = deliveryStreamARN
            self.hasMoreDestinations = hasMoreDestinations
        }

        public init(dictionary: [String: Any]) throws {
            guard let destinations = dictionary["Destinations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Destinations") }
            self.destinations = try destinations.map({ try DestinationDescription(dictionary: $0) })
            guard let rawDeliveryStreamStatus = dictionary["DeliveryStreamStatus"] as? String, let deliveryStreamStatus = DeliveryStreamStatus(rawValue: rawDeliveryStreamStatus) else { throw InitializableError.missingRequiredParam("DeliveryStreamStatus") }
            self.deliveryStreamStatus = deliveryStreamStatus
            self.lastUpdateTimestamp = dictionary["LastUpdateTimestamp"] as? Date
            guard let deliveryStreamName = dictionary["DeliveryStreamName"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamName") }
            self.deliveryStreamName = deliveryStreamName
            guard let versionId = dictionary["VersionId"] as? String else { throw InitializableError.missingRequiredParam("VersionId") }
            self.versionId = versionId
            self.createTimestamp = dictionary["CreateTimestamp"] as? Date
            guard let deliveryStreamARN = dictionary["DeliveryStreamARN"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamARN") }
            self.deliveryStreamARN = deliveryStreamARN
            guard let hasMoreDestinations = dictionary["HasMoreDestinations"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreDestinations") }
            self.hasMoreDestinations = hasMoreDestinations
        }
    }

    public struct ElasticsearchDestinationDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Elasticsearch type name.
        public let typeName: String?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The Elasticsearch index rotation period
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain.
        public let domainARN: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The CloudWatch logging options.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon ES retry options.
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options.
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String? = nil, indexName: String? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String? = nil, roleARN: String? = nil, s3DestinationDescription: S3DestinationDescription? = nil, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: ElasticsearchS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.s3DestinationDescription = s3DestinationDescription
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        public init(dictionary: [String: Any]) throws {
            self.typeName = dictionary["TypeName"] as? String
            self.indexName = dictionary["IndexName"] as? String
            if let indexRotationPeriod = dictionary["IndexRotationPeriod"] as? String { self.indexRotationPeriod = ElasticsearchIndexRotationPeriod(rawValue: indexRotationPeriod) } else { self.indexRotationPeriod = nil }
            self.domainARN = dictionary["DomainARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
            if let s3DestinationDescription = dictionary["S3DestinationDescription"] as? [String: Any] { self.s3DestinationDescription = try Firehose.S3DestinationDescription(dictionary: s3DestinationDescription) } else { self.s3DestinationDescription = nil }
            if let processingConfiguration = dictionary["ProcessingConfiguration"] as? [String: Any] { self.processingConfiguration = try Firehose.ProcessingConfiguration(dictionary: processingConfiguration) } else { self.processingConfiguration = nil }
            if let s3BackupMode = dictionary["S3BackupMode"] as? String { self.s3BackupMode = ElasticsearchS3BackupMode(rawValue: s3BackupMode) } else { self.s3BackupMode = nil }
            if let cloudWatchLoggingOptions = dictionary["CloudWatchLoggingOptions"] as? [String: Any] { self.cloudWatchLoggingOptions = try Firehose.CloudWatchLoggingOptions(dictionary: cloudWatchLoggingOptions) } else { self.cloudWatchLoggingOptions = nil }
            if let retryOptions = dictionary["RetryOptions"] as? [String: Any] { self.retryOptions = try Firehose.ElasticsearchRetryOptions(dictionary: retryOptions) } else { self.retryOptions = nil }
            if let bufferingHints = dictionary["BufferingHints"] as? [String: Any] { self.bufferingHints = try Firehose.ElasticsearchBufferingHints(dictionary: bufferingHints) } else { self.bufferingHints = nil }
        }
    }

    public struct ElasticsearchBufferingHints: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public let intervalInSeconds: Int32?

        public init(sizeInMBs: Int32? = nil, intervalInSeconds: Int32? = nil) {
            self.sizeInMBs = sizeInMBs
            self.intervalInSeconds = intervalInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.sizeInMBs = dictionary["SizeInMBs"] as? Int32
            self.intervalInSeconds = dictionary["IntervalInSeconds"] as? Int32
        }
    }

    public struct PutRecordBatchResponseEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the record.
        public let recordId: String?
        /// The error code for an individual record result.
        public let errorCode: String?
        /// The error message for an individual record result.
        public let errorMessage: String?

        public init(recordId: String? = nil, errorCode: String? = nil, errorMessage: String? = nil) {
            self.recordId = recordId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        public init(dictionary: [String: Any]) throws {
            self.recordId = dictionary["RecordId"] as? String
            self.errorCode = dictionary["ErrorCode"] as? String
            self.errorMessage = dictionary["ErrorMessage"] as? String
        }
    }

}