// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ServiceCatalog {

    public struct ListProvisioningArtifactsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the provisioning artifacts.
        public let provisioningArtifactDetails: [ProvisioningArtifactDetail]?

        public init(nextPageToken: String? = nil, provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.provisioningArtifactDetails = provisioningArtifactDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case provisioningArtifactDetails = "ProvisioningArtifactDetails"
        }
    }

    public struct SearchProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SortBy", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure)
        ]
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The sort field. If no value is specified, the results are not sorted. The valid values are arn, id, name, and lastRecordId.
        public let sortBy: String?
        /// The search filters. When the key is SearchQuery, the searchable fields are arn, createdTime, id, lastRecordId, idempotencyToken, name, physicalId, productId, provisioningArtifact, type, status, tags, userArn, and userArnSession. Example: "SearchQuery":["status:AVAILABLE"] 
        public let filters: [ProvisionedProductViewFilterBy: [String]]?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?

        public init(sortOrder: SortOrder? = nil, acceptLanguage: String? = nil, pageToken: String? = nil, pageSize: Int32? = nil, sortBy: String? = nil, filters: [ProvisionedProductViewFilterBy: [String]]? = nil, accessLevelFilter: AccessLevelFilter? = nil) {
            self.sortOrder = sortOrder
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.filters = filters
            self.accessLevelFilter = accessLevelFilter
        }

        private enum CodingKeys: String, CodingKey {
            case sortOrder = "SortOrder"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
            case pageSize = "PageSize"
            case sortBy = "SortBy"
            case filters = "Filters"
            case accessLevelFilter = "AccessLevelFilter"
        }
    }

    public struct UpdateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of the request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct UpdateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the tags associated with the product.
        public let tags: [Tag]?

        public init(productViewDetail: ProductViewDetail? = nil, tags: [Tag]? = nil) {
            self.productViewDetail = productViewDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetail = "ProductViewDetail"
            case tags = "Tags"
        }
    }

    public enum ProvisioningArtifactPropertyName: String, CustomStringConvertible, Codable {
        case id = "Id"
        public var description: String { return self.rawValue }
    }

    public struct ListRecordHistoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "RecordDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// The records, in reverse chronological order.
        public let recordDetails: [RecordDetail]?

        public init(nextPageToken: String? = nil, recordDetails: [RecordDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.recordDetails = recordDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case recordDetails = "RecordDetails"
        }
    }

    public struct ListServiceActionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceActionSummaries", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// An object containing information about the service actions associated with the provisioning artifact.
        public let serviceActionSummaries: [ServiceActionSummary]?

        public init(nextPageToken: String? = nil, serviceActionSummaries: [ServiceActionSummary]? = nil) {
            self.nextPageToken = nextPageToken
            self.serviceActionSummaries = serviceActionSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case serviceActionSummaries = "ServiceActionSummaries"
        }
    }

    public struct ListPortfoliosInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum ProvisionedProductPlanType: String, CustomStringConvertible, Codable {
        case cloudformation = "CLOUDFORMATION"
        public var description: String { return self.rawValue }
    }

    public enum OrganizationNodeType: String, CustomStringConvertible, Codable {
        case organization = "ORGANIZATION"
        case organizationalUnit = "ORGANIZATIONAL_UNIT"
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public enum ProductSource: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct ShareError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Error", required: false, type: .string), 
            AWSShapeMember(label: "Accounts", required: false, type: .list)
        ]
        /// Information about the error.
        public let message: String?
        /// Error type that happened when processing the operation.
        public let error: String?
        /// List of accounts impacted by the error.
        public let accounts: [String]?

        public init(message: String? = nil, error: String? = nil, accounts: [String]? = nil) {
            self.message = message
            self.error = error
            self.accounts = accounts
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case error = "Error"
            case accounts = "Accounts"
        }
    }

    public struct AccessLevelFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The access level.    Account - Filter results based on the account.    Role - Filter results based on the federated role of the specified user.    User - Filter results based on the specified user.  
        public let key: AccessLevelFilterKey?
        /// The user to which the access level applies. The only supported value is Self.
        public let value: String?

        public init(key: AccessLevelFilterKey? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagOptionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean)
        ]
        /// The TagOption identifier.
        public let id: String?
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let value: String?
        /// The TagOption active state.
        public let active: Bool?

        public init(id: String? = nil, key: String? = nil, value: String? = nil, active: Bool? = nil) {
            self.id = id
            self.key = key
            self.value = value
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case key = "Key"
            case value = "Value"
            case active = "Active"
        }
    }

    public struct UpdateProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UsePreviousValue", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The parameter key.
        public let key: String?
        /// If set to true, Value is ignored and the previous parameter value is kept.
        public let usePreviousValue: Bool?
        /// The parameter value.
        public let value: String?

        public init(key: String? = nil, usePreviousValue: Bool? = nil, value: String? = nil) {
            self.key = key
            self.usePreviousValue = usePreviousValue
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case usePreviousValue = "UsePreviousValue"
            case value = "Value"
        }
    }

    public struct UpdatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct DescribeCopyProductStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusDetail", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductId", required: false, type: .string), 
            AWSShapeMember(label: "CopyProductStatus", required: false, type: .enum)
        ]
        /// The status message.
        public let statusDetail: String?
        /// The identifier of the copied product.
        public let targetProductId: String?
        /// The status of the copy product operation.
        public let copyProductStatus: CopyProductStatus?

        public init(statusDetail: String? = nil, targetProductId: String? = nil, copyProductStatus: CopyProductStatus? = nil) {
            self.statusDetail = statusDetail
            self.targetProductId = targetProductId
            self.copyProductStatus = copyProductStatus
        }

        private enum CodingKeys: String, CodingKey {
            case statusDetail = "StatusDetail"
            case targetProductId = "TargetProductId"
            case copyProductStatus = "CopyProductStatus"
        }
    }

    public struct CreateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of constraint.    LAUNCH     NOTIFICATION     STACKSET     TEMPLATE   
        public let `type`: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The product identifier.
        public let productId: String
        /// The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:  LAUNCH  Specify the RoleArn property as follows:  {"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one LAUNCH constraint on a product and portfolio.  NOTIFICATION  Specify the NotificationArns property as follows:  {"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}   STACKSET  Specify the Parameters property as follows:  {"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one STACKSET constraint on a product and portfolio. Products with a STACKSET constraint will launch an AWS CloudFormation stack set.  TEMPLATE  Specify the Rules property. For more information, see Template Constraint Rules.  
        public let parameters: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The description of the constraint.
        public let description: String?

        public init(type: String, acceptLanguage: String? = nil, idempotencyToken: String, productId: String, parameters: String, portfolioId: String, description: String? = nil) {
            self.`type` = `type`
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
            self.productId = productId
            self.parameters = parameters
            self.portfolioId = portfolioId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
            case productId = "ProductId"
            case parameters = "Parameters"
            case portfolioId = "PortfolioId"
            case description = "Description"
        }
    }

    public struct CreateProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "PlanType", required: true, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// One or more tags.
        public let tags: [Tag]?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The name of the plan.
        public let planName: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The plan type.
        public let planType: ProvisionedProductPlanType
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String

        public init(tags: [Tag]? = nil, notificationArns: [String]? = nil, pathId: String? = nil, acceptLanguage: String? = nil, planName: String, idempotencyToken: String, provisionedProductName: String, provisioningParameters: [UpdateProvisioningParameter]? = nil, planType: ProvisionedProductPlanType, provisioningArtifactId: String, productId: String) {
            self.tags = tags
            self.notificationArns = notificationArns
            self.pathId = pathId
            self.acceptLanguage = acceptLanguage
            self.planName = planName
            self.idempotencyToken = idempotencyToken
            self.provisionedProductName = provisionedProductName
            self.provisioningParameters = provisioningParameters
            self.planType = planType
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case notificationArns = "NotificationArns"
            case pathId = "PathId"
            case acceptLanguage = "AcceptLanguage"
            case planName = "PlanName"
            case idempotencyToken = "IdempotencyToken"
            case provisionedProductName = "ProvisionedProductName"
            case provisioningParameters = "ProvisioningParameters"
            case planType = "PlanType"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
        }
    }

    public struct ListResourcesForTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The TagOption identifier.
        public let tagOptionId: String
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The resource type.    Portfolio     Product   
        public let resourceType: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(tagOptionId: String, pageSize: Int32? = nil, resourceType: String? = nil, pageToken: String? = nil) {
            self.tagOptionId = tagOptionId
            self.pageSize = pageSize
            self.resourceType = resourceType
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionId = "TagOptionId"
            case pageSize = "PageSize"
            case resourceType = "ResourceType"
            case pageToken = "PageToken"
        }
    }

    public struct AssociateTagOptionWithResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let tagOptionId: String
        /// The resource identifier.
        public let resourceId: String

        public init(tagOptionId: String, resourceId: String) {
            self.tagOptionId = tagOptionId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionId = "TagOptionId"
            case resourceId = "ResourceId"
        }
    }

    public struct UpdateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String
        /// The updated active state.
        public let active: Bool?
        /// The updated value.
        public let value: String?

        public init(id: String, active: Bool? = nil, value: String? = nil) {
            self.id = id
            self.active = active
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case active = "Active"
            case value = "Value"
        }
    }

    public struct DeletePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationNode", required: false, type: .structure), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The organization node to whom you are going to stop sharing.
        public let organizationNode: OrganizationNode?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The AWS account ID.
        public let accountId: String?

        public init(acceptLanguage: String? = nil, organizationNode: OrganizationNode? = nil, portfolioId: String, accountId: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.organizationNode = organizationNode
            self.portfolioId = portfolioId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case organizationNode = "OrganizationNode"
            case portfolioId = "PortfolioId"
            case accountId = "AccountId"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum ProductType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplace = "MARKETPLACE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The status of the current request.
        public let status: Status?
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?

        public init(provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, status: Status? = nil, info: [String: String]? = nil) {
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.status = status
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case status = "Status"
            case info = "Info"
        }
    }

    public struct DeleteTagOptionOutput: AWSShape {

    }

    public struct ProvisionProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionToken", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningPreferences", required: false, type: .structure)
        ]
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// The product identifier.
        public let productId: String
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [ProvisioningParameter]?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// An idempotency token that uniquely identifies the provisioning request.
        public let provisionToken: String
        /// One or more tags.
        public let tags: [Tag]?
        /// An object that contains information about the provisioning preferences for a stack set.
        public let provisioningPreferences: ProvisioningPreferences?

        public init(notificationArns: [String]? = nil, pathId: String? = nil, productId: String, provisionedProductName: String, acceptLanguage: String? = nil, provisioningParameters: [ProvisioningParameter]? = nil, provisioningArtifactId: String, provisionToken: String, tags: [Tag]? = nil, provisioningPreferences: ProvisioningPreferences? = nil) {
            self.notificationArns = notificationArns
            self.pathId = pathId
            self.productId = productId
            self.provisionedProductName = provisionedProductName
            self.acceptLanguage = acceptLanguage
            self.provisioningParameters = provisioningParameters
            self.provisioningArtifactId = provisioningArtifactId
            self.provisionToken = provisionToken
            self.tags = tags
            self.provisioningPreferences = provisioningPreferences
        }

        private enum CodingKeys: String, CodingKey {
            case notificationArns = "NotificationArns"
            case pathId = "PathId"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
            case acceptLanguage = "AcceptLanguage"
            case provisioningParameters = "ProvisioningParameters"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisionToken = "ProvisionToken"
            case tags = "Tags"
            case provisioningPreferences = "ProvisioningPreferences"
        }
    }

    public struct ConstraintSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of constraint.    LAUNCH     NOTIFICATION    STACKSET    TEMPLATE   
        public let `type`: String?
        /// The description of the constraint.
        public let description: String?

        public init(type: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case description = "Description"
        }
    }

    public struct DisassociateServiceActionFromProvisioningArtifactOutput: AWSShape {

    }

    public struct AssociateTagOptionWithResourceOutput: AWSShape {

    }

    public struct DescribePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListPortfolioAccessInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
        }
    }

    public struct ListOrganizationPortfolioAccessInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationNodeType", required: true, type: .enum)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The portfolio identifier. For example, port-2abcdext3y5fk.
        public let portfolioId: String
        /// The organization node type that will be returned in the output.    ORGANIZATION - Organization that has access to the portfolio.     ORGANIZATIONAL_UNIT - Organizational unit that has access to the portfolio within your organization.    ACCOUNT - Account that has access to the portfolio within your organization.  
        public let organizationNodeType: OrganizationNodeType

        public init(acceptLanguage: String? = nil, pageToken: String? = nil, pageSize: Int32? = nil, portfolioId: String, organizationNodeType: OrganizationNodeType) {
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
            self.pageSize = pageSize
            self.portfolioId = portfolioId
            self.organizationNodeType = organizationNodeType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
            case pageSize = "PageSize"
            case portfolioId = "PortfolioId"
            case organizationNodeType = "OrganizationNodeType"
        }
    }

    public struct OrganizationNode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        public let value: String?
        public let `type`: OrganizationNodeType?

        public init(value: String? = nil, type: OrganizationNodeType? = nil) {
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case `type` = "Type"
        }
    }

    public struct DescribeServiceActionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionDetail", required: false, type: .structure)
        ]
        /// Detailed information about the self-service action.
        public let serviceActionDetail: ServiceActionDetail?

        public init(serviceActionDetail: ServiceActionDetail? = nil) {
            self.serviceActionDetail = serviceActionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionDetail = "ServiceActionDetail"
        }
    }

    public enum ProductViewFilterBy: String, CustomStringConvertible, Codable {
        case fulltextsearch = "FullTextSearch"
        case owner = "Owner"
        case producttype = "ProductType"
        case sourceproductid = "SourceProductId"
        public var description: String { return self.rawValue }
    }

    public struct ListPrincipalsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case pageToken = "PageToken"
        }
    }

    public enum AccessStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case underChange = "UNDER_CHANGE"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure)
        ]
        /// Information about the provisioning artifacts for the specified product.
        public let provisioningArtifacts: [ProvisioningArtifact]?
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?

        public init(provisioningArtifacts: [ProvisioningArtifact]? = nil, productViewSummary: ProductViewSummary? = nil) {
            self.provisioningArtifacts = provisioningArtifacts
            self.productViewSummary = productViewSummary
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifacts = "ProvisioningArtifacts"
            case productViewSummary = "ProductViewSummary"
        }
    }

    public struct DescribePortfolioShareStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioShareToken", required: true, type: .string)
        ]
        /// The token for the portfolio share operation. This token is returned either by CreatePortfolioShare or by DeletePortfolioShare.
        public let portfolioShareToken: String

        public init(portfolioShareToken: String) {
            self.portfolioShareToken = portfolioShareToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioShareToken = "PortfolioShareToken"
        }
    }

    public enum ServiceActionDefinitionType: String, CustomStringConvertible, Codable {
        case ssmAutomation = "SSM_AUTOMATION"
        public var description: String { return self.rawValue }
    }

    public struct DisassociatePrincipalFromPortfolioOutput: AWSShape {

    }

    public struct SearchProductsAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the product views.
        public let productViewDetails: [ProductViewDetail]?

        public init(nextPageToken: String? = nil, productViewDetails: [ProductViewDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.productViewDetails = productViewDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case productViewDetails = "ProductViewDetails"
        }
    }

    public struct BatchDisassociateServiceActionFromProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionAssociations", required: true, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.
        public let serviceActionAssociations: [ServiceActionAssociation]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(serviceActionAssociations: [ServiceActionAssociation], acceptLanguage: String? = nil) {
            self.serviceActionAssociations = serviceActionAssociations
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionAssociations = "ServiceActionAssociations"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListAcceptedPortfolioSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?

        public init(nextPageToken: String? = nil, portfolioDetails: [PortfolioDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.portfolioDetails = portfolioDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case portfolioDetails = "PortfolioDetails"
        }
    }

    public struct DescribeServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The self-service action identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct SearchProductsAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "ProductSource", required: false, type: .enum), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// The search filters. If no search filters are specified, the output includes all products to which the administrator has access.
        public let filters: [ProductViewFilterBy: [String]]?
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// Access level of the source of the product.
        public let productSource: ProductSource?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, portfolioId: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil, sortBy: ProductViewSortBy? = nil, productSource: ProductSource? = nil, pageSize: Int32? = nil, sortOrder: SortOrder? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.filters = filters
            self.sortBy = sortBy
            self.productSource = productSource
            self.pageSize = pageSize
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case filters = "Filters"
            case sortBy = "SortBy"
            case productSource = "ProductSource"
            case pageSize = "PageSize"
            case sortOrder = "SortOrder"
        }
    }

    public struct UpdateServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .map), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The self-service action identifier.
        public let id: String
        /// A map that defines the self-service action.
        public let definition: [ServiceActionDefinitionKey: String]?
        /// The self-service action description.
        public let description: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The self-service action name.
        public let name: String?

        public init(id: String, definition: [ServiceActionDefinitionKey: String]? = nil, description: String? = nil, acceptLanguage: String? = nil, name: String? = nil) {
            self.id = id
            self.definition = definition
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case definition = "Definition"
            case description = "Description"
            case acceptLanguage = "AcceptLanguage"
            case name = "Name"
        }
    }

    public struct ListProvisioningArtifactsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
        }
    }

    public struct DeleteTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct ListRecordHistorySearchFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The filter value.
        public let value: String?
        /// The filter key.    product - Filter results based on the specified product identifier.    provisionedproduct - Filter results based on the provisioned product identifier.  
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct RecordDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordErrors", required: false, type: .list), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RecordTags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductType", required: false, type: .string), 
            AWSShapeMember(label: "RecordType", required: false, type: .string), 
            AWSShapeMember(label: "RecordId", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp)
        ]
        /// The errors that occurred.
        public let recordErrors: [RecordError]?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// One or more tags.
        public let recordTags: [RecordTag]?
        /// The identifier of the provisioned product.
        public let provisionedProductId: String?
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?
        /// The status of the provisioned product.    CREATED - The request was created but the operation has not started.    IN_PROGRESS - The requested operation is in progress.    IN_PROGRESS_IN_ERROR - The provisioned product is under change but the requested operation failed and some remediation is occurring. For example, a rollback.    SUCCEEDED - The requested operation has successfully completed.    FAILED - The requested operation has unsuccessfully completed. Investigate using the error messages returned.  
        public let status: RecordStatus?
        /// The product identifier.
        public let productId: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The type of provisioned product. The supported values are CFN_STACK and CFN_STACKSET.
        public let provisionedProductType: String?
        /// The record type.    PROVISION_PRODUCT     UPDATE_PROVISIONED_PRODUCT     TERMINATE_PROVISIONED_PRODUCT   
        public let recordType: String?
        /// The identifier of the record.
        public let recordId: String?
        /// The path identifier.
        public let pathId: String?
        /// The time when the record was last updated.
        public let updatedTime: TimeStamp?

        public init(recordErrors: [RecordError]? = nil, createdTime: TimeStamp? = nil, recordTags: [RecordTag]? = nil, provisionedProductId: String? = nil, provisionedProductName: String? = nil, status: RecordStatus? = nil, productId: String? = nil, provisioningArtifactId: String? = nil, provisionedProductType: String? = nil, recordType: String? = nil, recordId: String? = nil, pathId: String? = nil, updatedTime: TimeStamp? = nil) {
            self.recordErrors = recordErrors
            self.createdTime = createdTime
            self.recordTags = recordTags
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
            self.status = status
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
            self.provisionedProductType = provisionedProductType
            self.recordType = recordType
            self.recordId = recordId
            self.pathId = pathId
            self.updatedTime = updatedTime
        }

        private enum CodingKeys: String, CodingKey {
            case recordErrors = "RecordErrors"
            case createdTime = "CreatedTime"
            case recordTags = "RecordTags"
            case provisionedProductId = "ProvisionedProductId"
            case provisionedProductName = "ProvisionedProductName"
            case status = "Status"
            case productId = "ProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisionedProductType = "ProvisionedProductType"
            case recordType = "RecordType"
            case recordId = "RecordId"
            case pathId = "PathId"
            case updatedTime = "UpdatedTime"
        }
    }

    public struct ListResourcesForTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDetails", required: false, type: .list)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// Information about the resources.
        public let resourceDetails: [ResourceDetail]?

        public init(pageToken: String? = nil, resourceDetails: [ResourceDetail]? = nil) {
            self.pageToken = pageToken
            self.resourceDetails = resourceDetails
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case resourceDetails = "ResourceDetails"
        }
    }

    public struct ProvisioningArtifactPreferences: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StackSetAccounts", required: false, type: .list), 
            AWSShapeMember(label: "StackSetRegions", required: false, type: .list)
        ]
        /// One or more AWS accounts where stack instances are deployed from the stack set. These accounts can be scoped in ProvisioningPreferences$StackSetAccounts and UpdateProvisioningPreferences$StackSetAccounts. Applicable only to a CFN_STACKSET provisioned product type.
        public let stackSetAccounts: [String]?
        /// One or more AWS Regions where stack instances are deployed from the stack set. These regions can be scoped in ProvisioningPreferences$StackSetRegions and UpdateProvisioningPreferences$StackSetRegions. Applicable only to a CFN_STACKSET provisioned product type.
        public let stackSetRegions: [String]?

        public init(stackSetAccounts: [String]? = nil, stackSetRegions: [String]? = nil) {
            self.stackSetAccounts = stackSetAccounts
            self.stackSetRegions = stackSetRegions
        }

        private enum CodingKeys: String, CodingKey {
            case stackSetAccounts = "StackSetAccounts"
            case stackSetRegions = "StackSetRegions"
        }
    }

    public struct UpdateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(status: Status? = nil, constraintDetail: ConstraintDetail? = nil, constraintParameters: String? = nil) {
            self.status = status
            self.constraintDetail = constraintDetail
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case constraintDetail = "ConstraintDetail"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct ListProvisioningArtifactsForServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceActionId", required: true, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil, serviceActionId: String) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
            self.serviceActionId = serviceActionId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
            case serviceActionId = "ServiceActionId"
        }
    }

    public struct ProvisioningArtifactProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: true, type: .map), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The URL of the CloudFormation template in Amazon S3. Specify the URL in JSON format as follows:  "LoadTemplateFromURL": "https://s3.amazonaws.com/cf-templates-ozkq9d3hgiq2-us-east-1/..." 
        public let info: [String: String]
        /// The name of the provisioning artifact (for example, v1 v2beta). No spaces are allowed.
        public let name: String?
        /// The description of the provisioning artifact, including how it differs from the previous provisioning artifact.
        public let description: String?

        public init(type: ProvisioningArtifactType? = nil, info: [String: String], name: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.info = info
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case info = "Info"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct TagOptionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct CopyProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyProductToken", required: false, type: .string)
        ]
        /// The token to use to track the progress of the operation.
        public let copyProductToken: String?

        public init(copyProductToken: String? = nil) {
            self.copyProductToken = copyProductToken
        }

        private enum CodingKeys: String, CodingKey {
            case copyProductToken = "CopyProductToken"
        }
    }

    public struct AssociateServiceActionWithProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ServiceActionId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String

        public init(acceptLanguage: String? = nil, serviceActionId: String, productId: String, provisioningArtifactId: String) {
            self.acceptLanguage = acceptLanguage
            self.serviceActionId = serviceActionId
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case serviceActionId = "ServiceActionId"
            case productId = "ProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public enum EvaluationType: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct ProvisionedProductPlanSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string)
        ]
        /// The plan identifier.
        public let planId: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?
        /// The product identifier.
        public let provisionProductId: String?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The name of the plan.
        public let planName: String?

        public init(planId: String? = nil, planType: ProvisionedProductPlanType? = nil, provisionProductId: String? = nil, provisionProductName: String? = nil, provisioningArtifactId: String? = nil, planName: String? = nil) {
            self.planId = planId
            self.planType = planType
            self.provisionProductId = provisionProductId
            self.provisionProductName = provisionProductName
            self.provisioningArtifactId = provisioningArtifactId
            self.planName = planName
        }

        private enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case planType = "PlanType"
            case provisionProductId = "ProvisionProductId"
            case provisionProductName = "ProvisionProductName"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case planName = "PlanName"
        }
    }

    public struct BatchAssociateServiceActionWithProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionAssociations", required: true, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.
        public let serviceActionAssociations: [ServiceActionAssociation]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(serviceActionAssociations: [ServiceActionAssociation], acceptLanguage: String? = nil) {
            self.serviceActionAssociations = serviceActionAssociations
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionAssociations = "ServiceActionAssociations"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum AccessLevelFilterKey: String, CustomStringConvertible, Codable {
        case account = "Account"
        case role = "Role"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public struct ResourceChangeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CausingEntity", required: false, type: .string), 
            AWSShapeMember(label: "Target", required: false, type: .structure), 
            AWSShapeMember(label: "Evaluation", required: false, type: .enum)
        ]
        /// The ID of the entity that caused the change.
        public let causingEntity: String?
        /// Information about the resource attribute to be modified.
        public let target: ResourceTargetDefinition?
        /// For static evaluations, the value of the resource attribute will change and the new value is known. For dynamic evaluations, the value might change, and any new value will be determined when the plan is updated.
        public let evaluation: EvaluationType?

        public init(causingEntity: String? = nil, target: ResourceTargetDefinition? = nil, evaluation: EvaluationType? = nil) {
            self.causingEntity = causingEntity
            self.target = target
            self.evaluation = evaluation
        }

        private enum CodingKeys: String, CodingKey {
            case causingEntity = "CausingEntity"
            case target = "Target"
            case evaluation = "Evaluation"
        }
    }

    public struct UpdateServiceActionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionDetail", required: false, type: .structure)
        ]
        /// Detailed information about the self-service action.
        public let serviceActionDetail: ServiceActionDetail?

        public init(serviceActionDetail: ServiceActionDetail? = nil) {
            self.serviceActionDetail = serviceActionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionDetail = "ServiceActionDetail"
        }
    }

    public struct DisableAWSOrganizationsAccessInput: AWSShape {

    }

    public struct ParameterConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedValues", required: false, type: .list)
        ]
        /// The values that the administrator has allowed for the parameter.
        public let allowedValues: [String]?

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
        }
    }

    public struct ProvisioningPreferences: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StackSetRegions", required: false, type: .list), 
            AWSShapeMember(label: "StackSetMaxConcurrencyPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetFailureToleranceCount", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetMaxConcurrencyCount", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetAccounts", required: false, type: .list), 
            AWSShapeMember(label: "StackSetFailureTolerancePercentage", required: false, type: .integer)
        ]
        /// One or more AWS Regions where the provisioned product will be available. Applicable only to a CFN_STACKSET provisioned product type. The specified regions should be within the list of regions from the STACKSET constraint. To get the list of regions in the STACKSET constraint, use the DescribeProvisioningParameters operation. If no values are specified, the default value is all regions from the STACKSET constraint.
        public let stackSetRegions: [String]?
        /// The maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, AWS Service Catalog sets the number as 1 instead. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetMaxConcurrentCount or StackSetMaxConcurrentPercentage, but not both.
        public let stackSetMaxConcurrencyPercentage: Int32?
        /// The number of accounts, per region, for which this operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn't attempt the operation in any subsequent regions. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetFailureToleranceCount or StackSetFailureTolerancePercentage, but not both. The default value is 0 if no value is specified.
        public let stackSetFailureToleranceCount: Int32?
        /// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of StackSetFailureToleranceCount. StackSetMaxConcurrentCount is at most one more than the StackSetFailureToleranceCount. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetMaxConcurrentCount or StackSetMaxConcurrentPercentage, but not both.
        public let stackSetMaxConcurrencyCount: Int32?
        /// One or more AWS accounts that will have access to the provisioned product. Applicable only to a CFN_STACKSET provisioned product type. The AWS accounts specified should be within the list of accounts in the STACKSET constraint. To get the list of accounts in the STACKSET constraint, use the DescribeProvisioningParameters operation. If no values are specified, the default value is all accounts from the STACKSET constraint.
        public let stackSetAccounts: [String]?
        /// The percentage of accounts, per region, for which this stack operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn't attempt the operation in any subsequent regions. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetFailureToleranceCount or StackSetFailureTolerancePercentage, but not both.
        public let stackSetFailureTolerancePercentage: Int32?

        public init(stackSetRegions: [String]? = nil, stackSetMaxConcurrencyPercentage: Int32? = nil, stackSetFailureToleranceCount: Int32? = nil, stackSetMaxConcurrencyCount: Int32? = nil, stackSetAccounts: [String]? = nil, stackSetFailureTolerancePercentage: Int32? = nil) {
            self.stackSetRegions = stackSetRegions
            self.stackSetMaxConcurrencyPercentage = stackSetMaxConcurrencyPercentage
            self.stackSetFailureToleranceCount = stackSetFailureToleranceCount
            self.stackSetMaxConcurrencyCount = stackSetMaxConcurrencyCount
            self.stackSetAccounts = stackSetAccounts
            self.stackSetFailureTolerancePercentage = stackSetFailureTolerancePercentage
        }

        private enum CodingKeys: String, CodingKey {
            case stackSetRegions = "StackSetRegions"
            case stackSetMaxConcurrencyPercentage = "StackSetMaxConcurrencyPercentage"
            case stackSetFailureToleranceCount = "StackSetFailureToleranceCount"
            case stackSetMaxConcurrencyCount = "StackSetMaxConcurrencyCount"
            case stackSetAccounts = "StackSetAccounts"
            case stackSetFailureTolerancePercentage = "StackSetFailureTolerancePercentage"
        }
    }

    public struct CreateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The configuration for the provisioning artifact.
        public let parameters: ProvisioningArtifactProperties
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, idempotencyToken: String, parameters: ProvisioningArtifactProperties, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
            self.parameters = parameters
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
            case parameters = "Parameters"
            case productId = "ProductId"
        }
    }

    public struct ProvisionedProductAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "UserArnSession", required: false, type: .string), 
            AWSShapeMember(label: "UserArn", required: false, type: .string), 
            AWSShapeMember(label: "PhysicalId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string)
        ]
        /// One or more tags.
        public let tags: [Tag]?
        /// The user-friendly name of the provisioned product.
        public let name: String?
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The identifier of the provisioned product.
        public let id: String?
        /// The ARN of the provisioned product.
        public let arn: String?
        /// The type of provisioned product. The supported values are CFN_STACK and CFN_STACKSET.
        public let `type`: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The ARN of the IAM user in the session. This ARN might contain a session ID.
        public let userArnSession: String?
        /// The Amazon Resource Name (ARN) of the IAM user.
        public let userArn: String?
        /// The assigned identifier for the resource, such as an EC2 instance ID or an S3 bucket name.
        public let physicalId: String?
        /// The product identifier.
        public let productId: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?

        public init(tags: [Tag]? = nil, name: String? = nil, status: ProvisionedProductStatus? = nil, lastRecordId: String? = nil, provisioningArtifactId: String? = nil, id: String? = nil, arn: String? = nil, type: String? = nil, statusMessage: String? = nil, userArnSession: String? = nil, userArn: String? = nil, physicalId: String? = nil, productId: String? = nil, createdTime: TimeStamp? = nil, idempotencyToken: String? = nil) {
            self.tags = tags
            self.name = name
            self.status = status
            self.lastRecordId = lastRecordId
            self.provisioningArtifactId = provisioningArtifactId
            self.id = id
            self.arn = arn
            self.`type` = `type`
            self.statusMessage = statusMessage
            self.userArnSession = userArnSession
            self.userArn = userArn
            self.physicalId = physicalId
            self.productId = productId
            self.createdTime = createdTime
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case name = "Name"
            case status = "Status"
            case lastRecordId = "LastRecordId"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case id = "Id"
            case arn = "Arn"
            case `type` = "Type"
            case statusMessage = "StatusMessage"
            case userArnSession = "UserArnSession"
            case userArn = "UserArn"
            case physicalId = "PhysicalId"
            case productId = "ProductId"
            case createdTime = "CreatedTime"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct DescribePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure)
        ]
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?
        /// Information about the TagOptions associated with the portfolio.
        public let tagOptions: [TagOptionDetail]?
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?

        public init(tags: [Tag]? = nil, tagOptions: [TagOptionDetail]? = nil, portfolioDetail: PortfolioDetail? = nil) {
            self.tags = tags
            self.tagOptions = tagOptions
            self.portfolioDetail = portfolioDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case tagOptions = "TagOptions"
            case portfolioDetail = "PortfolioDetail"
        }
    }

    public struct DescribeProvisioningParametersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactPreferences", required: false, type: .structure), 
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: false, type: .list), 
            AWSShapeMember(label: "UsageInstructions", required: false, type: .list)
        ]
        /// Information about the TagOptions associated with the resource.
        public let tagOptions: [TagOptionSummary]?
        /// An object that contains information about preferences, such as regions and accounts, for the provisioning artifact.
        public let provisioningArtifactPreferences: ProvisioningArtifactPreferences?
        /// Information about the constraints used to provision the product.
        public let constraintSummaries: [ConstraintSummary]?
        /// Information about the parameters used to provision the product.
        public let provisioningArtifactParameters: [ProvisioningArtifactParameter]?
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        public let usageInstructions: [UsageInstruction]?

        public init(tagOptions: [TagOptionSummary]? = nil, provisioningArtifactPreferences: ProvisioningArtifactPreferences? = nil, constraintSummaries: [ConstraintSummary]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil, usageInstructions: [UsageInstruction]? = nil) {
            self.tagOptions = tagOptions
            self.provisioningArtifactPreferences = provisioningArtifactPreferences
            self.constraintSummaries = constraintSummaries
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.usageInstructions = usageInstructions
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case provisioningArtifactPreferences = "ProvisioningArtifactPreferences"
            case constraintSummaries = "ConstraintSummaries"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case usageInstructions = "UsageInstructions"
        }
    }

    public struct SearchProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "TotalResultsCount", required: false, type: .integer)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductAttribute]?
        /// The number of provisioned products found.
        public let totalResultsCount: Int32?

        public init(nextPageToken: String? = nil, provisionedProducts: [ProvisionedProductAttribute]? = nil, totalResultsCount: Int32? = nil) {
            self.nextPageToken = nextPageToken
            self.provisionedProducts = provisionedProducts
            self.totalResultsCount = totalResultsCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case provisionedProducts = "ProvisionedProducts"
            case totalResultsCount = "TotalResultsCount"
        }
    }

    public struct ListTagOptionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The search filters. If no search filters are specified, the output includes all TagOptions.
        public let filters: ListTagOptionsFilters?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?

        public init(pageToken: String? = nil, filters: ListTagOptionsFilters? = nil, pageSize: Int32? = nil) {
            self.pageToken = pageToken
            self.filters = filters
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case filters = "Filters"
            case pageSize = "PageSize"
        }
    }

    public struct DescribeProductViewOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure)
        ]
        /// Information about the provisioning artifacts for the product.
        public let provisioningArtifacts: [ProvisioningArtifact]?
        /// Summary information about the product.
        public let productViewSummary: ProductViewSummary?

        public init(provisioningArtifacts: [ProvisioningArtifact]? = nil, productViewSummary: ProductViewSummary? = nil) {
            self.provisioningArtifacts = provisioningArtifacts
            self.productViewSummary = productViewSummary
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifacts = "ProvisioningArtifacts"
            case productViewSummary = "ProductViewSummary"
        }
    }

    public struct DisableAWSOrganizationsAccessOutput: AWSShape {

    }

    public struct DeleteServiceActionOutput: AWSShape {

    }

    public struct RejectPortfolioShareOutput: AWSShape {

    }

    public struct AssociateServiceActionWithProvisioningArtifactOutput: AWSShape {

    }

    public struct DeletePortfolioShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioShareToken", required: false, type: .string)
        ]
        /// The portfolio share unique identifier. This will only be returned if delete is made to an organization node.
        public let portfolioShareToken: String?

        public init(portfolioShareToken: String? = nil) {
            self.portfolioShareToken = portfolioShareToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioShareToken = "PortfolioShareToken"
        }
    }

    public struct ExecuteProvisionedProductServiceActionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// An object containing detailed information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct CreateProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// The name of the plan.
        public let planName: String?
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?
        /// The plan identifier.
        public let planId: String?

        public init(provisioningArtifactId: String? = nil, provisionProductId: String? = nil, planName: String? = nil, provisionedProductName: String? = nil, planId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.provisionProductId = provisionProductId
            self.planName = planName
            self.provisionedProductName = provisionedProductName
            self.planId = planId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisionProductId = "ProvisionProductId"
            case planName = "PlanName"
            case provisionedProductName = "ProvisionedProductName"
            case planId = "PlanId"
        }
    }

    public struct AcceptPortfolioShareOutput: AWSShape {

    }

    public struct UpdateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// The updated description of the provisioning artifact.
        public let description: String?
        /// The updated name of the provisioning artifact.
        public let name: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String

        public init(productId: String, description: String? = nil, name: String? = nil, acceptLanguage: String? = nil, active: Bool? = nil, provisioningArtifactId: String) {
            self.productId = productId
            self.description = description
            self.name = name
            self.acceptLanguage = acceptLanguage
            self.active = active
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case description = "Description"
            case name = "Name"
            case acceptLanguage = "AcceptLanguage"
            case active = "Active"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public enum StackSetOperationType: String, CustomStringConvertible, Codable {
        case create = "CREATE"
        case update = "UPDATE"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct CreateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The TagOption value.
        public let value: String
        /// The TagOption key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct BatchAssociateServiceActionWithProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedServiceActionAssociations", required: false, type: .list)
        ]
        /// An object that contains a list of errors, along with information to help you identify the self-service action.
        public let failedServiceActionAssociations: [FailedServiceActionAssociation]?

        public init(failedServiceActionAssociations: [FailedServiceActionAssociation]? = nil) {
            self.failedServiceActionAssociations = failedServiceActionAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case failedServiceActionAssociations = "FailedServiceActionAssociations"
        }
    }

    public struct TerminateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "TerminateToken", required: true, type: .string)
        ]
        /// The name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the provisioned product is terminated, subsequent requests to terminate the same provisioned product always return ResourceNotFound.
        public let terminateToken: String

        public init(provisionedProductName: String? = nil, provisionedProductId: String? = nil, ignoreErrors: Bool? = nil, acceptLanguage: String? = nil, terminateToken: String) {
            self.provisionedProductName = provisionedProductName
            self.provisionedProductId = provisionedProductId
            self.ignoreErrors = ignoreErrors
            self.acceptLanguage = acceptLanguage
            self.terminateToken = terminateToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductName = "ProvisionedProductName"
            case provisionedProductId = "ProvisionedProductId"
            case ignoreErrors = "IgnoreErrors"
            case acceptLanguage = "AcceptLanguage"
            case terminateToken = "TerminateToken"
        }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalType", required: false, type: .enum), 
            AWSShapeMember(label: "PrincipalARN", required: false, type: .string)
        ]
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType?
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String?

        public init(principalType: PrincipalType? = nil, principalARN: String? = nil) {
            self.principalType = principalType
            self.principalARN = principalARN
        }

        private enum CodingKeys: String, CodingKey {
            case principalType = "PrincipalType"
            case principalARN = "PrincipalARN"
        }
    }

    public struct ExecuteProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct ResourceChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "LogicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "PhysicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Scope", required: false, type: .list), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Details", required: false, type: .list), 
            AWSShapeMember(label: "Replacement", required: false, type: .enum)
        ]
        /// The type of resource.
        public let resourceType: String?
        /// The ID of the resource, as defined in the CloudFormation template.
        public let logicalResourceId: String?
        /// The ID of the resource, if it was already created.
        public let physicalResourceId: String?
        /// The change scope.
        public let scope: [ResourceAttribute]?
        /// The change action.
        public let action: ChangeAction?
        /// Information about the resource changes.
        public let details: [ResourceChangeDetail]?
        /// If the change type is Modify, indicates whether the existing resource is deleted and replaced with a new one.
        public let replacement: Replacement?

        public init(resourceType: String? = nil, logicalResourceId: String? = nil, physicalResourceId: String? = nil, scope: [ResourceAttribute]? = nil, action: ChangeAction? = nil, details: [ResourceChangeDetail]? = nil, replacement: Replacement? = nil) {
            self.resourceType = resourceType
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.scope = scope
            self.action = action
            self.details = details
            self.replacement = replacement
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case logicalResourceId = "LogicalResourceId"
            case physicalResourceId = "PhysicalResourceId"
            case scope = "Scope"
            case action = "Action"
            case details = "Details"
            case replacement = "Replacement"
        }
    }

    public struct CreateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Information about the tags associated with the product.
        public let tags: [Tag]?

        public init(productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, tags: [Tag]? = nil) {
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetail = "ProductViewDetail"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case tags = "Tags"
        }
    }

    public struct ProvisioningArtifactView: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifact", required: false, type: .structure), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure)
        ]
        /// Information about a provisioning artifact. A provisioning artifact is also known as a product version.
        public let provisioningArtifact: ProvisioningArtifact?
        /// Summary information about a product view.
        public let productViewSummary: ProductViewSummary?

        public init(provisioningArtifact: ProvisioningArtifact? = nil, productViewSummary: ProductViewSummary? = nil) {
            self.provisioningArtifact = provisioningArtifact
            self.productViewSummary = productViewSummary
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifact = "ProvisioningArtifact"
            case productViewSummary = "ProductViewSummary"
        }
    }

    public struct LaunchPathSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The constraints on the portfolio-product relationship.
        public let constraintSummaries: [ConstraintSummary]?
        /// The identifier of the product path.
        public let id: String?
        /// The tags associated with this product path.
        public let tags: [Tag]?
        /// The name of the portfolio to which the user was assigned.
        public let name: String?

        public init(constraintSummaries: [ConstraintSummary]? = nil, id: String? = nil, tags: [Tag]? = nil, name: String? = nil) {
            self.constraintSummaries = constraintSummaries
            self.id = id
            self.tags = tags
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case constraintSummaries = "ConstraintSummaries"
            case id = "Id"
            case tags = "Tags"
            case name = "Name"
        }
    }

    public struct DescribeProductAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListProvisionedProductPlansInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let provisionProductId: String?

        public init(acceptLanguage: String? = nil, pageToken: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageSize: Int32? = nil, provisionProductId: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
            self.accessLevelFilter = accessLevelFilter
            self.pageSize = pageSize
            self.provisionProductId = provisionProductId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
            case accessLevelFilter = "AccessLevelFilter"
            case pageSize = "PageSize"
            case provisionProductId = "ProvisionProductId"
        }
    }

    public struct SearchProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummaries", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewAggregations", required: false, type: .map), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the product views.
        public let productViewSummaries: [ProductViewSummary]?
        /// The product view aggregations.
        public let productViewAggregations: [String: [ProductViewAggregationValue]]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(productViewSummaries: [ProductViewSummary]? = nil, productViewAggregations: [String: [ProductViewAggregationValue]]? = nil, nextPageToken: String? = nil) {
            self.productViewSummaries = productViewSummaries
            self.productViewAggregations = productViewAggregations
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummaries = "ProductViewSummaries"
            case productViewAggregations = "ProductViewAggregations"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct CopyProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetProductId", required: false, type: .string), 
            AWSShapeMember(label: "CopyOptions", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductName", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "SourceProvisioningArtifactIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "SourceProductArn", required: true, type: .string)
        ]
        /// The identifier of the target product. By default, a new product is created.
        public let targetProductId: String?
        /// The copy options. If the value is CopyTags, the tags from the source product are copied to the target product.
        public let copyOptions: [CopyOption]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A name for the target product. The default is the name of the source product.
        public let targetProductName: String?
        ///  A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. 
        public let idempotencyToken: String
        /// The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied.
        public let sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]?
        /// The Amazon Resource Name (ARN) of the source product.
        public let sourceProductArn: String

        public init(targetProductId: String? = nil, copyOptions: [CopyOption]? = nil, acceptLanguage: String? = nil, targetProductName: String? = nil, idempotencyToken: String, sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]? = nil, sourceProductArn: String) {
            self.targetProductId = targetProductId
            self.copyOptions = copyOptions
            self.acceptLanguage = acceptLanguage
            self.targetProductName = targetProductName
            self.idempotencyToken = idempotencyToken
            self.sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers
            self.sourceProductArn = sourceProductArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetProductId = "TargetProductId"
            case copyOptions = "CopyOptions"
            case acceptLanguage = "AcceptLanguage"
            case targetProductName = "TargetProductName"
            case idempotencyToken = "IdempotencyToken"
            case sourceProvisioningArtifactIdentifiers = "SourceProvisioningArtifactIdentifiers"
            case sourceProductArn = "SourceProductArn"
        }
    }

    public struct ListAcceptedPortfolioSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioShareType", required: false, type: .enum), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The type of shared portfolios to list. The default is to list imported portfolios.    AWS_ORGANIZATIONS - List portfolios shared by the master account of your organization    AWS_SERVICECATALOG - List default portfolios    IMPORTED - List imported portfolios  
        public let portfolioShareType: PortfolioShareType?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, portfolioShareType: PortfolioShareType? = nil, pageSize: Int32? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.portfolioShareType = portfolioShareType
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case portfolioShareType = "PortfolioShareType"
            case pageSize = "PageSize"
        }
    }

    public struct DescribePortfolioShareStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareDetails", required: false, type: .structure), 
            AWSShapeMember(label: "OrganizationNodeValue", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "PortfolioShareToken", required: false, type: .string)
        ]
        /// Information about the portfolio share operation.
        public let shareDetails: ShareDetails?
        /// Organization node identifier. It can be either account id, organizational unit id or organization id.
        public let organizationNodeValue: String?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// Status of the portfolio share operation.
        public let status: ShareStatus?
        /// The token for the portfolio share operation. For example, share-6v24abcdefghi.
        public let portfolioShareToken: String?

        public init(shareDetails: ShareDetails? = nil, organizationNodeValue: String? = nil, portfolioId: String? = nil, status: ShareStatus? = nil, portfolioShareToken: String? = nil) {
            self.shareDetails = shareDetails
            self.organizationNodeValue = organizationNodeValue
            self.portfolioId = portfolioId
            self.status = status
            self.portfolioShareToken = portfolioShareToken
        }

        private enum CodingKeys: String, CodingKey {
            case shareDetails = "ShareDetails"
            case organizationNodeValue = "OrganizationNodeValue"
            case portfolioId = "PortfolioId"
            case status = "Status"
            case portfolioShareToken = "PortfolioShareToken"
        }
    }

    public struct AssociateProductWithPortfolioOutput: AWSShape {

    }

    public struct ScanProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageSize: Int32? = nil, pageToken: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageSize = pageSize
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case pageSize = "PageSize"
            case pageToken = "PageToken"
        }
    }

    public struct DescribeRecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordOutputs", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.
        public let recordOutputs: [RecordOutput]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the product.
        public let recordDetail: RecordDetail?

        public init(recordOutputs: [RecordOutput]? = nil, nextPageToken: String? = nil, recordDetail: RecordDetail? = nil) {
            self.recordOutputs = recordOutputs
            self.nextPageToken = nextPageToken
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordOutputs = "RecordOutputs"
            case nextPageToken = "NextPageToken"
            case recordDetail = "RecordDetail"
        }
    }

    public struct DescribeProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The provisioned product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListRecordHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "SearchFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The search filter to scope the results.
        public let searchFilter: ListRecordHistorySearchFilter?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?

        public init(accessLevelFilter: AccessLevelFilter? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil) {
            self.accessLevelFilter = accessLevelFilter
            self.searchFilter = searchFilter
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case accessLevelFilter = "AccessLevelFilter"
            case searchFilter = "SearchFilter"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
        }
    }

    public struct ListServiceActionsForProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceActionSummaries", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// An object containing information about the self-service actions associated with the provisioning artifact.
        public let serviceActionSummaries: [ServiceActionSummary]?

        public init(nextPageToken: String? = nil, serviceActionSummaries: [ServiceActionSummary]? = nil) {
            self.nextPageToken = nextPageToken
            self.serviceActionSummaries = serviceActionSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case serviceActionSummaries = "ServiceActionSummaries"
        }
    }

    public struct ServiceActionAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceActionId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string)
        ]
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String

        public init(productId: String, serviceActionId: String, provisioningArtifactId: String) {
            self.productId = productId
            self.serviceActionId = serviceActionId
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case serviceActionId = "ServiceActionId"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public enum RequiresRecreation: String, CustomStringConvertible, Codable {
        case never = "NEVER"
        case conditionally = "CONDITIONALLY"
        case always = "ALWAYS"
        public var description: String { return self.rawValue }
    }

    public struct ListServiceActionsForProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(provisioningArtifactId: String, productId: String, pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case pageSize = "PageSize"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum ProvisionedProductViewFilterBy: String, CustomStringConvertible, Codable {
        case searchquery = "SearchQuery"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateProductFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, productId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UsageInstruction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The usage instruction value for this type.
        public let value: String?
        /// The usage instruction type for the value.
        public let `type`: String?

        public init(value: String? = nil, type: String? = nil) {
            self.value = value
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case `type` = "Type"
        }
    }

    public struct AssociateProductWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourcePortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The identifier of the source portfolio.
        public let sourcePortfolioId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The portfolio identifier.
        public let portfolioId: String

        public init(sourcePortfolioId: String? = nil, acceptLanguage: String? = nil, productId: String, portfolioId: String) {
            self.sourcePortfolioId = sourcePortfolioId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case sourcePortfolioId = "SourcePortfolioId"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case portfolioId = "PortfolioId"
        }
    }

    public struct RecordError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The numeric value of the error.
        public let code: String?
        /// The description of the error.
        public let description: String?

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case description = "Description"
        }
    }

    public struct UpdatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name to use for display purposes.
        public let displayName: String?
        /// The updated name of the portfolio provider.
        public let providerName: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The tags to add.
        public let addTags: [Tag]?
        /// The tags to remove.
        public let removeTags: [String]?
        /// The portfolio identifier.
        public let id: String
        /// The updated description of the portfolio.
        public let description: String?

        public init(displayName: String? = nil, providerName: String? = nil, acceptLanguage: String? = nil, addTags: [Tag]? = nil, removeTags: [String]? = nil, id: String, description: String? = nil) {
            self.displayName = displayName
            self.providerName = providerName
            self.acceptLanguage = acceptLanguage
            self.addTags = addTags
            self.removeTags = removeTags
            self.id = id
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case providerName = "ProviderName"
            case acceptLanguage = "AcceptLanguage"
            case addTags = "AddTags"
            case removeTags = "RemoveTags"
            case id = "Id"
            case description = "Description"
        }
    }

    public struct DeleteConstraintOutput: AWSShape {

    }

    public struct DeletePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum ServiceActionAssociationErrorCode: String, CustomStringConvertible, Codable {
        case duplicateResource = "DUPLICATE_RESOURCE"
        case internalFailure = "INTERNAL_FAILURE"
        case limitExceeded = "LIMIT_EXCEEDED"
        case resourceNotFound = "RESOURCE_NOT_FOUND"
        case throttling = "THROTTLING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the constraint.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListConstraintsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The product identifier.
        public let productId: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(pageSize: Int32? = nil, pageToken: String? = nil, productId: String? = nil, portfolioId: String, acceptLanguage: String? = nil) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.productId = productId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageToken = "PageToken"
            case productId = "ProductId"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct RejectPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioShareType", required: false, type: .enum)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The type of shared portfolios to reject. The default is to reject imported portfolios.    AWS_ORGANIZATIONS - Reject portfolios shared by the master account of your organization.    IMPORTED - Reject imported portfolios.    AWS_SERVICECATALOG - Not supported. (Throws ResourceNotFoundException.)   For example, aws servicecatalog reject-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS 
        public let portfolioShareType: PortfolioShareType?

        public init(acceptLanguage: String? = nil, portfolioId: String, portfolioShareType: PortfolioShareType? = nil) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.portfolioShareType = portfolioShareType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case portfolioShareType = "PortfolioShareType"
        }
    }

    public enum RecordStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case inProgress = "IN_PROGRESS"
        case inProgressInError = "IN_PROGRESS_IN_ERROR"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ProvisionedProductDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String?
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String?
        /// The user-friendly name of the provisioned product.
        public let name: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// The identifier of the provisioned product.
        public let id: String?
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// The ARN of the provisioned product.
        public let arn: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The type of provisioned product. The supported values are CFN_STACK and CFN_STACKSET.
        public let `type`: String?

        public init(createdTime: TimeStamp? = nil, productId: String? = nil, provisioningArtifactId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, lastRecordId: String? = nil, id: String? = nil, status: ProvisionedProductStatus? = nil, arn: String? = nil, statusMessage: String? = nil, type: String? = nil) {
            self.createdTime = createdTime
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.lastRecordId = lastRecordId
            self.id = id
            self.status = status
            self.arn = arn
            self.statusMessage = statusMessage
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case createdTime = "CreatedTime"
            case productId = "ProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case name = "Name"
            case idempotencyToken = "IdempotencyToken"
            case lastRecordId = "LastRecordId"
            case id = "Id"
            case status = "Status"
            case arn = "Arn"
            case statusMessage = "StatusMessage"
            case `type` = "Type"
        }
    }

    public struct UpdateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct UpdateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated description of the constraint.
        public let description: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, description: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case description = "Description"
            case id = "Id"
        }
    }

    public struct CreatePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationNode", required: false, type: .structure), 
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The organization node to whom you are going to share. If OrganizationNode is passed in, PortfolioShare will be created for the node and its children (when applies), and a PortfolioShareToken will be returned in the output in order for the administrator to monitor the status of the PortfolioShare creation process.
        public let organizationNode: OrganizationNode?
        /// The AWS account ID. For example, 123456789012.
        public let accountId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, organizationNode: OrganizationNode? = nil, accountId: String? = nil, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.organizationNode = organizationNode
            self.accountId = accountId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case organizationNode = "OrganizationNode"
            case accountId = "AccountId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreatePortfolioShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioShareToken", required: false, type: .string)
        ]
        /// The portfolio share unique identifier. This will only be returned if portfolio is shared to an organization node.
        public let portfolioShareToken: String?

        public init(portfolioShareToken: String? = nil) {
            self.portfolioShareToken = portfolioShareToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioShareToken = "PortfolioShareToken"
        }
    }

    public enum ShareStatus: String, CustomStringConvertible, Codable {
        case notStarted = "NOT_STARTED"
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case completedWithErrors = "COMPLETED_WITH_ERRORS"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRecordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The record identifier of the provisioned product. This identifier is returned by the request operation.
        public let id: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(pageSize: Int32? = nil, id: String, pageToken: String? = nil, acceptLanguage: String? = nil) {
            self.pageSize = pageSize
            self.id = id
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case id = "Id"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct GetAWSOrganizationsAccessStatusInput: AWSShape {

    }

    public struct ServiceActionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definition", required: false, type: .map), 
            AWSShapeMember(label: "ServiceActionSummary", required: false, type: .structure)
        ]
        /// A map that defines the self-service action.
        public let definition: [ServiceActionDefinitionKey: String]?
        /// Summary information about the self-service action.
        public let serviceActionSummary: ServiceActionSummary?

        public init(definition: [ServiceActionDefinitionKey: String]? = nil, serviceActionSummary: ServiceActionSummary? = nil) {
            self.definition = definition
            self.serviceActionSummary = serviceActionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case serviceActionSummary = "ServiceActionSummary"
        }
    }

    public struct DescribeConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum ProductViewSortBy: String, CustomStringConvertible, Codable {
        case title = "Title"
        case versioncount = "VersionCount"
        case creationdate = "CreationDate"
        public var description: String { return self.rawValue }
    }

    public struct BatchDisassociateServiceActionFromProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedServiceActionAssociations", required: false, type: .list)
        ]
        /// An object that contains a list of errors, along with information to help you identify the self-service action.
        public let failedServiceActionAssociations: [FailedServiceActionAssociation]?

        public init(failedServiceActionAssociations: [FailedServiceActionAssociation]? = nil) {
            self.failedServiceActionAssociations = failedServiceActionAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case failedServiceActionAssociations = "FailedServiceActionAssociations"
        }
    }

    public enum CopyProductStatus: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case inProgress = "IN_PROGRESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct RecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "OutputValue", required: false, type: .string), 
            AWSShapeMember(label: "OutputKey", required: false, type: .string)
        ]
        /// The description of the output.
        public let description: String?
        /// The output value.
        public let outputValue: String?
        /// The output key.
        public let outputKey: String?

        public init(description: String? = nil, outputValue: String? = nil, outputKey: String? = nil) {
            self.description = description
            self.outputValue = outputValue
            self.outputKey = outputKey
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case outputValue = "OutputValue"
            case outputKey = "OutputKey"
        }
    }

    public enum ServiceActionDefinitionKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case version = "Version"
        case assumerole = "AssumeRole"
        case parameters = "Parameters"
        public var description: String { return self.rawValue }
    }

    public struct ServiceActionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DefinitionType", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The self-service action description.
        public let description: String?
        /// The self-service action name.
        public let name: String?
        /// The self-service action definition type. For example, SSM_AUTOMATION.
        public let definitionType: ServiceActionDefinitionType?
        /// The self-service action identifier.
        public let id: String?

        public init(description: String? = nil, name: String? = nil, definitionType: ServiceActionDefinitionType? = nil, id: String? = nil) {
            self.description = description
            self.name = name
            self.definitionType = definitionType
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case definitionType = "DefinitionType"
            case id = "Id"
        }
    }

    public struct DescribeCopyProductStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "CopyProductToken", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The token for the copy product operation. This token is returned by CopyProduct.
        public let copyProductToken: String

        public init(acceptLanguage: String? = nil, copyProductToken: String) {
            self.acceptLanguage = acceptLanguage
            self.copyProductToken = copyProductToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case copyProductToken = "CopyProductToken"
        }
    }

    public enum ChangeAction: String, CustomStringConvertible, Codable {
        case add = "ADD"
        case modify = "MODIFY"
        case remove = "REMOVE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct GetAWSOrganizationsAccessStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessStatus", required: false, type: .enum)
        ]
        /// The status of the portfolio share feature.
        public let accessStatus: AccessStatus?

        public init(accessStatus: AccessStatus? = nil) {
            self.accessStatus = accessStatus
        }

        private enum CodingKeys: String, CodingKey {
            case accessStatus = "AccessStatus"
        }
    }

    public struct ListPortfoliosForProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(pageToken: String? = nil, pageSize: Int32? = nil, productId: String, acceptLanguage: String? = nil) {
            self.pageToken = pageToken
            self.pageSize = pageSize
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case pageSize = "PageSize"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DeleteProductOutput: AWSShape {

    }

    public struct CreatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure)
        ]
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?

        public init(tags: [Tag]? = nil, portfolioDetail: PortfolioDetail? = nil) {
            self.tags = tags
            self.portfolioDetail = portfolioDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case portfolioDetail = "PortfolioDetail"
        }
    }

    public struct DisassociateTagOptionFromResourceOutput: AWSShape {

    }

    public struct ProductViewSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "HasDefaultPath", required: false, type: .boolean), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ShortDescription", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string)
        ]
        /// The product type. Contact the product administrator for the significance of this value. If this value is MARKETPLACE, the product was created by AWS Marketplace.
        public let `type`: ProductType?
        /// The URL information to obtain support for this Product.
        public let supportUrl: String?
        /// The name of the product.
        public let name: String?
        /// The owner of the product. Contact the product administrator for the significance of this value.
        public let owner: String?
        /// The product view identifier.
        public let id: String?
        /// Indicates whether the product has a default path. If the product does not have a default path, call ListLaunchPaths to disambiguate between paths. Otherwise, ListLaunchPaths is not required, and the output of ProductViewSummary can be used directly with DescribeProvisioningParameters.
        public let hasDefaultPath: Bool?
        /// The description of the support for this Product.
        public let supportDescription: String?
        /// The email contact information to obtain support for this Product.
        public let supportEmail: String?
        /// The product identifier.
        public let productId: String?
        /// Short description of the product.
        public let shortDescription: String?
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        public let distributor: String?

        public init(type: ProductType? = nil, supportUrl: String? = nil, name: String? = nil, owner: String? = nil, id: String? = nil, hasDefaultPath: Bool? = nil, supportDescription: String? = nil, supportEmail: String? = nil, productId: String? = nil, shortDescription: String? = nil, distributor: String? = nil) {
            self.`type` = `type`
            self.supportUrl = supportUrl
            self.name = name
            self.owner = owner
            self.id = id
            self.hasDefaultPath = hasDefaultPath
            self.supportDescription = supportDescription
            self.supportEmail = supportEmail
            self.productId = productId
            self.shortDescription = shortDescription
            self.distributor = distributor
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case supportUrl = "SupportUrl"
            case name = "Name"
            case owner = "Owner"
            case id = "Id"
            case hasDefaultPath = "HasDefaultPath"
            case supportDescription = "SupportDescription"
            case supportEmail = "SupportEmail"
            case productId = "ProductId"
            case shortDescription = "ShortDescription"
            case distributor = "Distributor"
        }
    }

    public enum CopyOption: String, CustomStringConvertible, Codable {
        case copytags = "CopyTags"
        public var description: String { return self.rawValue }
    }

    public struct ProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The parameter value.
        public let value: String?
        /// The parameter key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public enum ProvisionedProductPlanStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case createSuccess = "CREATE_SUCCESS"
        case createFailed = "CREATE_FAILED"
        case executeInProgress = "EXECUTE_IN_PROGRESS"
        case executeSuccess = "EXECUTE_SUCCESS"
        case executeFailed = "EXECUTE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ListPrincipalsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The IAM principals (users or roles) associated with the portfolio.
        public let principals: [Principal]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListTagOptionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "TagOptionDetails", required: false, type: .list)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// Information about the TagOptions.
        public let tagOptionDetails: [TagOptionDetail]?

        public init(pageToken: String? = nil, tagOptionDetails: [TagOptionDetail]? = nil) {
            self.pageToken = pageToken
            self.tagOptionDetails = tagOptionDetails
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case tagOptionDetails = "TagOptionDetails"
        }
    }

    public struct DescribeProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceChanges", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductPlanDetails", required: false, type: .structure)
        ]
        /// Information about the resource changes that will occur when the plan is executed.
        public let resourceChanges: [ResourceChange]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the plan.
        public let provisionedProductPlanDetails: ProvisionedProductPlanDetails?

        public init(resourceChanges: [ResourceChange]? = nil, nextPageToken: String? = nil, provisionedProductPlanDetails: ProvisionedProductPlanDetails? = nil) {
            self.resourceChanges = resourceChanges
            self.nextPageToken = nextPageToken
            self.provisionedProductPlanDetails = provisionedProductPlanDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resourceChanges = "ResourceChanges"
            case nextPageToken = "NextPageToken"
            case provisionedProductPlanDetails = "ProvisionedProductPlanDetails"
        }
    }

    public struct CreateServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definition", required: true, type: .map), 
            AWSShapeMember(label: "DefinitionType", required: true, type: .enum), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The self-service action definition. Can be one of the following:  Name  The name of the AWS Systems Manager Document. For example, AWS-RestartEC2Instance.  Version  The AWS Systems Manager automation document version. For example, "Version": "1"   AssumeRole  The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, "AssumeRole": "arn:aws:iam::12345678910:role/ActionRole". To reuse the provisioned product launch role, set to "AssumeRole": "LAUNCH_ROLE".  Parameters  The list of parameters in JSON format. For example: [{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}].  
        public let definition: [ServiceActionDefinitionKey: String]
        /// The service action definition type. For example, SSM_AUTOMATION.
        public let definitionType: ServiceActionDefinitionType
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The self-service action name.
        public let name: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The self-service action description.
        public let description: String?

        public init(definition: [ServiceActionDefinitionKey: String], definitionType: ServiceActionDefinitionType, idempotencyToken: String, name: String, acceptLanguage: String? = nil, description: String? = nil) {
            self.definition = definition
            self.definitionType = definitionType
            self.idempotencyToken = idempotencyToken
            self.name = name
            self.acceptLanguage = acceptLanguage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case definition = "Definition"
            case definitionType = "DefinitionType"
            case idempotencyToken = "IdempotencyToken"
            case name = "Name"
            case acceptLanguage = "AcceptLanguage"
            case description = "Description"
        }
    }

    public struct ListLaunchPathsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let productId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(pageSize: Int32? = nil, productId: String, pageToken: String? = nil, acceptLanguage: String? = nil) {
            self.pageSize = pageSize
            self.productId = productId
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case productId = "ProductId"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListServiceActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
        }
    }

    public struct UpdateProvisioningPreferences: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StackSetMaxConcurrencyCount", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetAccounts", required: false, type: .list), 
            AWSShapeMember(label: "StackSetRegions", required: false, type: .list), 
            AWSShapeMember(label: "StackSetOperationType", required: false, type: .enum), 
            AWSShapeMember(label: "StackSetMaxConcurrencyPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetFailureToleranceCount", required: false, type: .integer), 
            AWSShapeMember(label: "StackSetFailureTolerancePercentage", required: false, type: .integer)
        ]
        /// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of StackSetFailureToleranceCount. StackSetMaxConcurrentCount is at most one more than the StackSetFailureToleranceCount. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetMaxConcurrentCount or StackSetMaxConcurrentPercentage, but not both.
        public let stackSetMaxConcurrencyCount: Int32?
        /// One or more AWS accounts that will have access to the provisioned product. Applicable only to a CFN_STACKSET provisioned product type. The AWS accounts specified should be within the list of accounts in the STACKSET constraint. To get the list of accounts in the STACKSET constraint, use the DescribeProvisioningParameters operation. If no values are specified, the default value is all accounts from the STACKSET constraint.
        public let stackSetAccounts: [String]?
        /// One or more AWS Regions where the provisioned product will be available. Applicable only to a CFN_STACKSET provisioned product type. The specified regions should be within the list of regions from the STACKSET constraint. To get the list of regions in the STACKSET constraint, use the DescribeProvisioningParameters operation. If no values are specified, the default value is all regions from the STACKSET constraint.
        public let stackSetRegions: [String]?
        /// Determines what action AWS Service Catalog performs to a stack set or a stack instance represented by the provisioned product. The default value is UPDATE if nothing is specified. Applicable only to a CFN_STACKSET provisioned product type.  CREATE  Creates a new stack instance in the stack set represented by the provisioned product. In this case, only new stack instances are created based on accounts and regions; if new ProductId or ProvisioningArtifactID are passed, they will be ignored.  UPDATE  Updates the stack set represented by the provisioned product and also its stack instances.  DELETE  Deletes a stack instance in the stack set represented by the provisioned product.  
        public let stackSetOperationType: StackSetOperationType?
        /// The maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, AWS Service Catalog sets the number as 1 instead. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetMaxConcurrentCount or StackSetMaxConcurrentPercentage, but not both.
        public let stackSetMaxConcurrencyPercentage: Int32?
        /// The number of accounts, per region, for which this operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn't attempt the operation in any subsequent regions. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetFailureToleranceCount or StackSetFailureTolerancePercentage, but not both. The default value is 0 if no value is specified.
        public let stackSetFailureToleranceCount: Int32?
        /// The percentage of accounts, per region, for which this stack operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn't attempt the operation in any subsequent regions. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. Applicable only to a CFN_STACKSET provisioned product type. Conditional: You must specify either StackSetFailureToleranceCount or StackSetFailureTolerancePercentage, but not both.
        public let stackSetFailureTolerancePercentage: Int32?

        public init(stackSetMaxConcurrencyCount: Int32? = nil, stackSetAccounts: [String]? = nil, stackSetRegions: [String]? = nil, stackSetOperationType: StackSetOperationType? = nil, stackSetMaxConcurrencyPercentage: Int32? = nil, stackSetFailureToleranceCount: Int32? = nil, stackSetFailureTolerancePercentage: Int32? = nil) {
            self.stackSetMaxConcurrencyCount = stackSetMaxConcurrencyCount
            self.stackSetAccounts = stackSetAccounts
            self.stackSetRegions = stackSetRegions
            self.stackSetOperationType = stackSetOperationType
            self.stackSetMaxConcurrencyPercentage = stackSetMaxConcurrencyPercentage
            self.stackSetFailureToleranceCount = stackSetFailureToleranceCount
            self.stackSetFailureTolerancePercentage = stackSetFailureTolerancePercentage
        }

        private enum CodingKeys: String, CodingKey {
            case stackSetMaxConcurrencyCount = "StackSetMaxConcurrencyCount"
            case stackSetAccounts = "StackSetAccounts"
            case stackSetRegions = "StackSetRegions"
            case stackSetOperationType = "StackSetOperationType"
            case stackSetMaxConcurrencyPercentage = "StackSetMaxConcurrencyPercentage"
            case stackSetFailureToleranceCount = "StackSetFailureToleranceCount"
            case stackSetFailureTolerancePercentage = "StackSetFailureTolerancePercentage"
        }
    }

    public struct DeleteProvisioningArtifactOutput: AWSShape {

    }

    public struct ScanProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductDetail]?

        public init(nextPageToken: String? = nil, provisionedProducts: [ProvisionedProductDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.provisionedProducts = provisionedProducts
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case provisionedProducts = "ProvisionedProducts"
        }
    }

    public struct PortfolioDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the portfolio provider.
        public let providerName: String?
        /// The ARN assigned to the portfolio.
        public let arn: String?
        /// The description of the portfolio.
        public let description: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The name to use for display purposes.
        public let displayName: String?
        /// The portfolio identifier.
        public let id: String?

        public init(providerName: String? = nil, arn: String? = nil, description: String? = nil, createdTime: TimeStamp? = nil, displayName: String? = nil, id: String? = nil) {
            self.providerName = providerName
            self.arn = arn
            self.description = description
            self.createdTime = createdTime
            self.displayName = displayName
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case arn = "ARN"
            case description = "Description"
            case createdTime = "CreatedTime"
            case displayName = "DisplayName"
            case id = "Id"
        }
    }

    public struct DisassociateTagOptionFromResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let tagOptionId: String
        /// The resource identifier.
        public let resourceId: String

        public init(tagOptionId: String, resourceId: String) {
            self.tagOptionId = tagOptionId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionId = "TagOptionId"
            case resourceId = "ResourceId"
        }
    }

    public struct ListProvisionedProductPlansOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductPlans", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the plans.
        public let provisionedProductPlans: [ProvisionedProductPlanSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProductPlans: [ProvisionedProductPlanSummary]? = nil, nextPageToken: String? = nil) {
            self.provisionedProductPlans = provisionedProductPlans
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductPlans = "ProvisionedProductPlans"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct CloudWatchDashboard: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the CloudWatch dashboard.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum Replacement: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        case conditional = "CONDITIONAL"
        public var description: String { return self.rawValue }
    }

    public struct CreatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "DisplayName", required: true, type: .string)
        ]
        /// One or more tags.
        public let tags: [Tag]?
        /// The description of the portfolio.
        public let description: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The name of the portfolio provider.
        public let providerName: String
        /// The name to use for display purposes.
        public let displayName: String

        public init(tags: [Tag]? = nil, description: String? = nil, acceptLanguage: String? = nil, idempotencyToken: String, providerName: String, displayName: String) {
            self.tags = tags
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
            self.providerName = providerName
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case description = "Description"
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
            case providerName = "ProviderName"
            case displayName = "DisplayName"
        }
    }

    public struct EnableAWSOrganizationsAccessInput: AWSShape {

    }

    public struct DisassociatePrincipalFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(principalARN: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.principalARN = principalARN
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Owner", required: true, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "ProductType", required: true, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The owner of the product.
        public let owner: String
        /// The contact email for product support.
        public let supportEmail: String?
        /// The support information about the product.
        public let supportDescription: String?
        /// The configuration of the provisioning artifact.
        public let provisioningArtifactParameters: ProvisioningArtifactProperties
        /// The description of the product.
        public let description: String?
        /// The distributor of the product.
        public let distributor: String?
        /// The name of the product.
        public let name: String
        /// The contact URL for product support.
        public let supportUrl: String?
        /// The type of product.
        public let productType: ProductType
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// One or more tags.
        public let tags: [Tag]?

        public init(idempotencyToken: String, owner: String, supportEmail: String? = nil, supportDescription: String? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, description: String? = nil, distributor: String? = nil, name: String, supportUrl: String? = nil, productType: ProductType, acceptLanguage: String? = nil, tags: [Tag]? = nil) {
            self.idempotencyToken = idempotencyToken
            self.owner = owner
            self.supportEmail = supportEmail
            self.supportDescription = supportDescription
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.description = description
            self.distributor = distributor
            self.name = name
            self.supportUrl = supportUrl
            self.productType = productType
            self.acceptLanguage = acceptLanguage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case idempotencyToken = "IdempotencyToken"
            case owner = "Owner"
            case supportEmail = "SupportEmail"
            case supportDescription = "SupportDescription"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case description = "Description"
            case distributor = "Distributor"
            case name = "Name"
            case supportUrl = "SupportUrl"
            case productType = "ProductType"
            case acceptLanguage = "AcceptLanguage"
            case tags = "Tags"
        }
    }

    public struct DescribeTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public enum ProvisionedProductStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case underChange = "UNDER_CHANGE"
        case tainted = "TAINTED"
        case error = "ERROR"
        case planInProgress = "PLAN_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct ProvisionedProductPlanDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The time when the plan was last updated.
        public let updatedTime: TimeStamp?
        /// One or more tags.
        public let tags: [Tag]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?
        /// The status message.
        public let statusMessage: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The name of the plan.
        public let planName: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The plan identifier.
        public let planId: String?
        /// The product identifier.
        public let productId: String?
        /// The status.
        public let status: ProvisionedProductPlanStatus?

        public init(updatedTime: TimeStamp? = nil, tags: [Tag]? = nil, pathId: String? = nil, planType: ProvisionedProductPlanType? = nil, statusMessage: String? = nil, provisionProductId: String? = nil, createdTime: TimeStamp? = nil, provisionProductName: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, notificationArns: [String]? = nil, planName: String? = nil, provisioningArtifactId: String? = nil, planId: String? = nil, productId: String? = nil, status: ProvisionedProductPlanStatus? = nil) {
            self.updatedTime = updatedTime
            self.tags = tags
            self.pathId = pathId
            self.planType = planType
            self.statusMessage = statusMessage
            self.provisionProductId = provisionProductId
            self.createdTime = createdTime
            self.provisionProductName = provisionProductName
            self.provisioningParameters = provisioningParameters
            self.notificationArns = notificationArns
            self.planName = planName
            self.provisioningArtifactId = provisioningArtifactId
            self.planId = planId
            self.productId = productId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case updatedTime = "UpdatedTime"
            case tags = "Tags"
            case pathId = "PathId"
            case planType = "PlanType"
            case statusMessage = "StatusMessage"
            case provisionProductId = "ProvisionProductId"
            case createdTime = "CreatedTime"
            case provisionProductName = "ProvisionProductName"
            case provisioningParameters = "ProvisioningParameters"
            case notificationArns = "NotificationArns"
            case planName = "PlanName"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case planId = "PlanId"
            case productId = "ProductId"
            case status = "Status"
        }
    }

    public struct ListPortfoliosForProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductDetail", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchDashboards", required: false, type: .list)
        ]
        /// Information about the provisioned product.
        public let provisionedProductDetail: ProvisionedProductDetail?
        /// Any CloudWatch dashboards that were created when provisioning the product.
        public let cloudWatchDashboards: [CloudWatchDashboard]?

        public init(provisionedProductDetail: ProvisionedProductDetail? = nil, cloudWatchDashboards: [CloudWatchDashboard]? = nil) {
            self.provisionedProductDetail = provisionedProductDetail
            self.cloudWatchDashboards = cloudWatchDashboards
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductDetail = "ProvisionedProductDetail"
            case cloudWatchDashboards = "CloudWatchDashboards"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "PlanId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The plan identifier.
        public let planId: String

        public init(acceptLanguage: String? = nil, ignoreErrors: Bool? = nil, planId: String) {
            self.acceptLanguage = acceptLanguage
            self.ignoreErrors = ignoreErrors
            self.planId = planId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case ignoreErrors = "IgnoreErrors"
            case planId = "PlanId"
        }
    }

    public struct ResourceTargetDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "RequiresRecreation", required: false, type: .enum)
        ]
        /// If the attribute is Properties, the value is the name of the property. Otherwise, the value is null.
        public let name: String?
        /// The attribute to be changed.
        public let attribute: ResourceAttribute?
        /// If the attribute is Properties, indicates whether a change to this property causes the resource to be re-created.
        public let requiresRecreation: RequiresRecreation?

        public init(name: String? = nil, attribute: ResourceAttribute? = nil, requiresRecreation: RequiresRecreation? = nil) {
            self.name = name
            self.attribute = attribute
            self.requiresRecreation = requiresRecreation
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case attribute = "Attribute"
            case requiresRecreation = "RequiresRecreation"
        }
    }

    public struct DescribeProductViewInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product view identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DeletePortfolioOutput: AWSShape {

    }

    public struct AssociatePrincipalWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: true, type: .enum), 
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String

        public init(acceptLanguage: String? = nil, portfolioId: String, principalType: PrincipalType, principalARN: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.principalType = principalType
            self.principalARN = principalARN
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case principalType = "PrincipalType"
            case principalARN = "PrincipalARN"
        }
    }

    public struct ProductViewDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProductARN", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure)
        ]
        /// The status of the product.    AVAILABLE - The product is ready for use.    CREATING - Product creation has started; the product is not ready for use.    FAILED - An action failed.  
        public let status: Status?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The ARN of the product.
        public let productARN: String?
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?

        public init(status: Status? = nil, createdTime: TimeStamp? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil) {
            self.status = status
            self.createdTime = createdTime
            self.productARN = productARN
            self.productViewSummary = productViewSummary
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case createdTime = "CreatedTime"
            case productARN = "ProductARN"
            case productViewSummary = "ProductViewSummary"
        }
    }

    public struct UpdateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "UpdateToken", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningPreferences", required: false, type: .structure)
        ]
        /// The new parameters.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The identifier of the product.
        public let productId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The idempotency token that uniquely identifies the provisioning update request.
        public let updateToken: String
        /// The new path identifier. This value is optional if the product has a default path, and required if the product has more than one path.
        public let pathId: String?
        /// The updated name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// An object that contains information about the provisioning preferences for a stack set.
        public let provisioningPreferences: UpdateProvisioningPreferences?

        public init(provisioningParameters: [UpdateProvisioningParameter]? = nil, productId: String? = nil, acceptLanguage: String? = nil, updateToken: String, pathId: String? = nil, provisionedProductName: String? = nil, provisionedProductId: String? = nil, provisioningArtifactId: String? = nil, provisioningPreferences: UpdateProvisioningPreferences? = nil) {
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.acceptLanguage = acceptLanguage
            self.updateToken = updateToken
            self.pathId = pathId
            self.provisionedProductName = provisionedProductName
            self.provisionedProductId = provisionedProductId
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningPreferences = provisioningPreferences
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningParameters = "ProvisioningParameters"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
            case updateToken = "UpdateToken"
            case pathId = "PathId"
            case provisionedProductName = "ProvisionedProductName"
            case provisionedProductId = "ProvisionedProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisioningPreferences = "ProvisioningPreferences"
        }
    }

    public struct FailedServiceActionAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionId", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .enum), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string)
        ]
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String?
        /// A text description of the error.
        public let errorMessage: String?
        /// The error code. Valid values are listed below.
        public let errorCode: ServiceActionAssociationErrorCode?
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String?
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String?

        public init(serviceActionId: String? = nil, errorMessage: String? = nil, errorCode: ServiceActionAssociationErrorCode? = nil, productId: String? = nil, provisioningArtifactId: String? = nil) {
            self.serviceActionId = serviceActionId
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionId = "ServiceActionId"
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case productId = "ProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public struct UpdateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string)
        ]
        /// The updated support URL for the product.
        public let supportUrl: String?
        /// The tags to remove from the product.
        public let removeTags: [String]?
        /// The updated support description for the product.
        public let supportDescription: String?
        /// The updated support email for the product.
        public let supportEmail: String?
        /// The updated distributor of the product.
        public let distributor: String?
        /// The tags to add to the product.
        public let addTags: [Tag]?
        /// The updated product name.
        public let name: String?
        /// The updated description of the product.
        public let description: String?
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated owner of the product.
        public let owner: String?

        public init(supportUrl: String? = nil, removeTags: [String]? = nil, supportDescription: String? = nil, supportEmail: String? = nil, distributor: String? = nil, addTags: [Tag]? = nil, name: String? = nil, description: String? = nil, id: String, acceptLanguage: String? = nil, owner: String? = nil) {
            self.supportUrl = supportUrl
            self.removeTags = removeTags
            self.supportDescription = supportDescription
            self.supportEmail = supportEmail
            self.distributor = distributor
            self.addTags = addTags
            self.name = name
            self.description = description
            self.id = id
            self.acceptLanguage = acceptLanguage
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case supportUrl = "SupportUrl"
            case removeTags = "RemoveTags"
            case supportDescription = "SupportDescription"
            case supportEmail = "SupportEmail"
            case distributor = "Distributor"
            case addTags = "AddTags"
            case name = "Name"
            case description = "Description"
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
            case owner = "Owner"
        }
    }

    public struct DescribeTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct ProvisionProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct AcceptPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioShareType", required: false, type: .enum), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The type of shared portfolios to accept. The default is to accept imported portfolios.    AWS_ORGANIZATIONS - Accept portfolios shared by the master account of your organization.    IMPORTED - Accept imported portfolios.    AWS_SERVICECATALOG - Not supported. (Throws ResourceNotFoundException.)   For example, aws servicecatalog accept-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS 
        public let portfolioShareType: PortfolioShareType?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioShareType: PortfolioShareType? = nil, portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioShareType = portfolioShareType
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioShareType = "PortfolioShareType"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The URL of the CloudFormation template in Amazon S3, in JSON format.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct RecordTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value for this tag.
        public let value: String?
        /// The key for this tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeProvisioningParametersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?

        public init(productId: String, acceptLanguage: String? = nil, provisioningArtifactId: String, pathId: String? = nil) {
            self.productId = productId
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case pathId = "PathId"
        }
    }

    public enum ProvisioningArtifactType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplaceAmi = "MARKETPLACE_AMI"
        case marketplaceCar = "MARKETPLACE_CAR"
        public var description: String { return self.rawValue }
    }

    public struct TerminateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of this request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DeleteProvisionedProductPlanOutput: AWSShape {

    }

    public struct ListPortfoliosOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListLaunchPathsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchPathSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the launch path.
        public let launchPathSummaries: [LaunchPathSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchPathSummaries = "LaunchPathSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DeleteServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public struct CreateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct ProvisioningArtifactDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// The name of the provisioning artifact.
        public let name: String?
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The identifier of the provisioning artifact.
        public let id: String?
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?

        public init(name: String? = nil, active: Bool? = nil, description: String? = nil, id: String? = nil, type: ProvisioningArtifactType? = nil, createdTime: TimeStamp? = nil) {
            self.name = name
            self.active = active
            self.description = description
            self.id = id
            self.`type` = `type`
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case active = "Active"
            case description = "Description"
            case id = "Id"
            case `type` = "Type"
            case createdTime = "CreatedTime"
        }
    }

    public struct ProvisioningArtifactSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisioningArtifactMetadata", required: false, type: .map)
        ]
        /// The description of the provisioning artifact.
        public let description: String?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The identifier of the provisioning artifact.
        public let id: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The metadata for the provisioning artifact. This is used with AWS Marketplace products.
        public let provisioningArtifactMetadata: [String: String]?

        public init(description: String? = nil, name: String? = nil, id: String? = nil, createdTime: TimeStamp? = nil, provisioningArtifactMetadata: [String: String]? = nil) {
            self.description = description
            self.name = name
            self.id = id
            self.createdTime = createdTime
            self.provisioningArtifactMetadata = provisioningArtifactMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case id = "Id"
            case createdTime = "CreatedTime"
            case provisioningArtifactMetadata = "ProvisioningArtifactMetadata"
        }
    }

    public struct ResourceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The name of the resource.
        public let name: String?
        /// The creation time of the resource.
        public let createdTime: TimeStamp?
        /// The identifier of the resource.
        public let id: String?
        /// The description of the resource.
        public let description: String?
        /// The ARN of the resource.
        public let arn: String?

        public init(name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil, description: String? = nil, arn: String? = nil) {
            self.name = name
            self.createdTime = createdTime
            self.id = id
            self.description = description
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
            case description = "Description"
            case arn = "ARN"
        }
    }

    public struct ListPortfolioAccessOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the AWS accounts with access to the portfolio.
        public let accountIds: [String]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(accountIds: [String]? = nil, nextPageToken: String? = nil) {
            self.accountIds = accountIds
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ConstraintDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "ConstraintId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The owner of the constraint.
        public let owner: String?
        /// The identifier of the constraint.
        public let constraintId: String?
        /// The description of the constraint.
        public let description: String?
        /// The type of constraint.    LAUNCH     NOTIFICATION    STACKSET    TEMPLATE   
        public let `type`: String?

        public init(owner: String? = nil, constraintId: String? = nil, description: String? = nil, type: String? = nil) {
            self.owner = owner
            self.constraintId = constraintId
            self.description = description
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case constraintId = "ConstraintId"
            case description = "Description"
            case `type` = "Type"
        }
    }

    public struct DescribeProductAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactSummaries", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list)
        ]
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the provisioning artifacts (also known as versions) for the specified product.
        public let provisioningArtifactSummaries: [ProvisioningArtifactSummary]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the TagOptions associated with the product.
        public let tagOptions: [TagOptionDetail]?

        public init(tags: [Tag]? = nil, provisioningArtifactSummaries: [ProvisioningArtifactSummary]? = nil, productViewDetail: ProductViewDetail? = nil, tagOptions: [TagOptionDetail]? = nil) {
            self.tags = tags
            self.provisioningArtifactSummaries = provisioningArtifactSummaries
            self.productViewDetail = productViewDetail
            self.tagOptions = tagOptions
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case provisioningArtifactSummaries = "ProvisioningArtifactSummaries"
            case productViewDetail = "ProductViewDetail"
            case tagOptions = "TagOptions"
        }
    }

    public struct ListProvisioningArtifactsForServiceActionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactViews", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// An array of objects with information about product views and provisioning artifacts.
        public let provisioningArtifactViews: [ProvisioningArtifactView]?

        public init(nextPageToken: String? = nil, provisioningArtifactViews: [ProvisioningArtifactView]? = nil) {
            self.nextPageToken = nextPageToken
            self.provisioningArtifactViews = provisioningArtifactViews
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case provisioningArtifactViews = "ProvisioningArtifactViews"
        }
    }

    public struct DescribeProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Verbose", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// Indicates whether a verbose level of detail is enabled.
        public let verbose: Bool?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String

        public init(productId: String, verbose: Bool? = nil, acceptLanguage: String? = nil, provisioningArtifactId: String) {
            self.productId = productId
            self.verbose = verbose
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case verbose = "Verbose"
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public struct DisassociateServiceActionFromProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceActionId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
        public let provisioningArtifactId: String
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String
        /// The product identifier. For example, prod-abcdzk7xy33qa.
        public let productId: String

        public init(acceptLanguage: String? = nil, provisioningArtifactId: String, serviceActionId: String, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
            self.serviceActionId = serviceActionId
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case serviceActionId = "ServiceActionId"
            case productId = "ProductId"
        }
    }

    public struct ProvisioningArtifactParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterKey", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "ParameterType", required: false, type: .string), 
            AWSShapeMember(label: "IsNoEcho", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterConstraints", required: false, type: .structure)
        ]
        /// The description of the parameter.
        public let description: String?
        /// The parameter key.
        public let parameterKey: String?
        /// The default value.
        public let defaultValue: String?
        /// The parameter type.
        public let parameterType: String?
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        public let isNoEcho: Bool?
        /// Constraints that the administrator has put on a parameter.
        public let parameterConstraints: ParameterConstraints?

        public init(description: String? = nil, parameterKey: String? = nil, defaultValue: String? = nil, parameterType: String? = nil, isNoEcho: Bool? = nil, parameterConstraints: ParameterConstraints? = nil) {
            self.description = description
            self.parameterKey = parameterKey
            self.defaultValue = defaultValue
            self.parameterType = parameterType
            self.isNoEcho = isNoEcho
            self.parameterConstraints = parameterConstraints
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case parameterKey = "ParameterKey"
            case defaultValue = "DefaultValue"
            case parameterType = "ParameterType"
            case isNoEcho = "IsNoEcho"
            case parameterConstraints = "ParameterConstraints"
        }
    }

    public struct ListConstraintsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ConstraintDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the constraints.
        public let constraintDetails: [ConstraintDetail]?

        public init(nextPageToken: String? = nil, constraintDetails: [ConstraintDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.constraintDetails = constraintDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case constraintDetails = "ConstraintDetails"
        }
    }

    public struct ExecuteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The plan identifier.
        public let planId: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(planId: String, idempotencyToken: String, acceptLanguage: String? = nil) {
            self.planId = planId
            self.idempotencyToken = idempotencyToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case idempotencyToken = "IdempotencyToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DescribeConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListOrganizationPortfolioAccessOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationNodes", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Displays information about the organization nodes.
        public let organizationNodes: [OrganizationNode]?

        public init(nextPageToken: String? = nil, organizationNodes: [OrganizationNode]? = nil) {
            self.nextPageToken = nextPageToken
            self.organizationNodes = organizationNodes
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case organizationNodes = "OrganizationNodes"
        }
    }

    public struct CreateServiceActionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceActionDetail", required: false, type: .structure)
        ]
        /// An object containing information about the self-service action.
        public let serviceActionDetail: ServiceActionDetail?

        public init(serviceActionDetail: ServiceActionDetail? = nil) {
            self.serviceActionDetail = serviceActionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case serviceActionDetail = "ServiceActionDetail"
        }
    }

    public struct ProductViewAggregationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApproximateCount", required: false, type: .integer), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// An approximate count of the products that match the value.
        public let approximateCount: Int32?
        /// The value of the product view aggregation.
        public let value: String?

        public init(approximateCount: Int32? = nil, value: String? = nil) {
            self.approximateCount = approximateCount
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case approximateCount = "ApproximateCount"
            case value = "Value"
        }
    }

    public struct ExecuteProvisionedProductServiceActionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: true, type: .string), 
            AWSShapeMember(label: "ExecuteToken", required: true, type: .string), 
            AWSShapeMember(label: "ServiceActionId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioned product.
        public let provisionedProductId: String
        /// An idempotency token that uniquely identifies the execute request.
        public let executeToken: String
        /// The self-service action identifier. For example, act-fs7abcd89wxyz.
        public let serviceActionId: String

        public init(acceptLanguage: String? = nil, provisionedProductId: String, executeToken: String, serviceActionId: String) {
            self.acceptLanguage = acceptLanguage
            self.provisionedProductId = provisionedProductId
            self.executeToken = executeToken
            self.serviceActionId = serviceActionId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case provisionedProductId = "ProvisionedProductId"
            case executeToken = "ExecuteToken"
            case serviceActionId = "ServiceActionId"
        }
    }

    public struct DeleteProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
        }
    }

    public struct ProvisioningArtifact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The description of the provisioning artifact.
        public let description: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(description: String? = nil, createdTime: TimeStamp? = nil, name: String? = nil, id: String? = nil) {
            self.description = description
            self.createdTime = createdTime
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case createdTime = "CreatedTime"
            case name = "Name"
            case id = "Id"
        }
    }

    public enum ResourceAttribute: String, CustomStringConvertible, Codable {
        case properties = "PROPERTIES"
        case metadata = "METADATA"
        case creationpolicy = "CREATIONPOLICY"
        case updatepolicy = "UPDATEPOLICY"
        case deletionpolicy = "DELETIONPOLICY"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The tag key.
        public let key: String
        /// The value for this key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DescribeProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct SearchProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The search filters. If no search filters are specified, the output includes all products to which the caller has access.
        public let filters: [ProductViewFilterBy: [String]]?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, sortBy: ProductViewSortBy? = nil, sortOrder: SortOrder? = nil, pageToken: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.pageToken = pageToken
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case pageToken = "PageToken"
            case filters = "Filters"
        }
    }

    public struct DisassociateProductFromPortfolioOutput: AWSShape {

    }

    public struct ListTagOptionsFilters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The active state.
        public let active: Bool?
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let value: String?

        public init(active: Bool? = nil, key: String? = nil, value: String? = nil) {
            self.active = active
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case active = "Active"
            case key = "Key"
            case value = "Value"
        }
    }

    public enum PortfolioShareType: String, CustomStringConvertible, Codable {
        case imported = "IMPORTED"
        case awsServicecatalog = "AWS_SERVICECATALOG"
        case awsOrganizations = "AWS_ORGANIZATIONS"
        public var description: String { return self.rawValue }
    }

    public struct AssociatePrincipalWithPortfolioOutput: AWSShape {

    }

    public struct DescribeProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The plan identifier.
        public let planId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(planId: String, acceptLanguage: String? = nil, pageSize: Int32? = nil, pageToken: String? = nil) {
            self.planId = planId
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case pageToken = "PageToken"
        }
    }

    public struct UpdateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Info", required: false, type: .map), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The status of the current request.
        public let status: Status?

        public init(info: [String: String]? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, status: Status? = nil) {
            self.info = info
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case info = "Info"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case status = "Status"
        }
    }

    public struct EnableAWSOrganizationsAccessOutput: AWSShape {

    }

    public struct ShareDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareErrors", required: false, type: .list), 
            AWSShapeMember(label: "SuccessfulShares", required: false, type: .list)
        ]
        /// List of errors.
        public let shareErrors: [ShareError]?
        /// List of accounts for whom the operation succeeded.
        public let successfulShares: [String]?

        public init(shareErrors: [ShareError]? = nil, successfulShares: [String]? = nil) {
            self.shareErrors = shareErrors
            self.successfulShares = successfulShares
        }

        private enum CodingKeys: String, CodingKey {
            case shareErrors = "ShareErrors"
            case successfulShares = "SuccessfulShares"
        }
    }

}