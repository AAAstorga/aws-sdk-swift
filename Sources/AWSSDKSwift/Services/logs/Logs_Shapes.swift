// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Logs {

    public struct CreateLogStreamRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String
        /// The name of the log stream.
        public let logStreamName: String

        public init(logGroupName: String, logStreamName: String) {
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let logStreamName = dictionary["logStreamName"] as? String else { throw InitializableError.missingRequiredParam("logStreamName") }
            self.logStreamName = logStreamName
        }
    }

    public struct DescribeDestinationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nextToken: String?
        /// The destinations.
        public let destinations: [Destination]?

        public init(nextToken: String? = nil, destinations: [Destination]? = nil) {
            self.nextToken = nextToken
            self.destinations = destinations
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let destinations = dictionary["destinations"] as? [[String: Any]] {
                self.destinations = try destinations.map({ try Destination(dictionary: $0) })
            } else { 
                self.destinations = nil
            }
        }
    }

    public struct TestMetricFilterResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The matched events.
        public let matches: [MetricFilterMatchRecord]?

        public init(matches: [MetricFilterMatchRecord]? = nil) {
            self.matches = matches
        }

        public init(dictionary: [String: Any]) throws {
            if let matches = dictionary["matches"] as? [[String: Any]] {
                self.matches = try matches.map({ try MetricFilterMatchRecord(dictionary: $0) })
            } else { 
                self.matches = nil
            }
        }
    }

    public enum OrderBy: String, CustomStringConvertible {
        case logstreamname = "LogStreamName"
        case lasteventtime = "LastEventTime"
        public var description: String { return self.rawValue }
    }

    public struct LogStream: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of bytes stored.
        public let storedBytes: Int64?
        /// The time of the last event, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let lastEventTimestamp: Int64?
        /// The name of the log stream.
        public let logStreamName: String?
        /// The creation time of the stream.
        public let creationTime: Int64?
        /// The ingestion time.
        public let lastIngestionTime: Int64?
        /// The time of the first event, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let firstEventTimestamp: Int64?
        /// The sequence token.
        public let uploadSequenceToken: String?
        /// The Amazon Resource Name (ARN) of the log stream.
        public let arn: String?

        public init(storedBytes: Int64? = nil, lastEventTimestamp: Int64? = nil, logStreamName: String? = nil, creationTime: Int64? = nil, lastIngestionTime: Int64? = nil, firstEventTimestamp: Int64? = nil, uploadSequenceToken: String? = nil, arn: String? = nil) {
            self.storedBytes = storedBytes
            self.lastEventTimestamp = lastEventTimestamp
            self.logStreamName = logStreamName
            self.creationTime = creationTime
            self.lastIngestionTime = lastIngestionTime
            self.firstEventTimestamp = firstEventTimestamp
            self.uploadSequenceToken = uploadSequenceToken
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.storedBytes = dictionary["storedBytes"] as? Int64
            self.lastEventTimestamp = dictionary["lastEventTimestamp"] as? Int64
            self.logStreamName = dictionary["logStreamName"] as? String
            self.creationTime = dictionary["creationTime"] as? Int64
            self.lastIngestionTime = dictionary["lastIngestionTime"] as? Int64
            self.firstEventTimestamp = dictionary["firstEventTimestamp"] as? Int64
            self.uploadSequenceToken = dictionary["uploadSequenceToken"] as? String
            self.arn = dictionary["arn"] as? String
        }
    }

    public struct InputLogEvent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64
        /// The raw event message.
        public let message: String

        public init(timestamp: Int64, message: String) {
            self.timestamp = timestamp
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            guard let timestamp = dictionary["timestamp"] as? Int64 else { throw InitializableError.missingRequiredParam("timestamp") }
            self.timestamp = timestamp
            guard let message = dictionary["message"] as? String else { throw InitializableError.missingRequiredParam("message") }
            self.message = message
        }
    }

    public struct FilteredLogEvent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the event.
        public let eventId: String?
        /// The data contained in the log event.
        public let message: String?
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64?
        /// The name of the log stream this event belongs to.
        public let logStreamName: String?
        /// The time the event was ingested.
        public let ingestionTime: Int64?

        public init(eventId: String? = nil, message: String? = nil, timestamp: Int64? = nil, logStreamName: String? = nil, ingestionTime: Int64? = nil) {
            self.eventId = eventId
            self.message = message
            self.timestamp = timestamp
            self.logStreamName = logStreamName
            self.ingestionTime = ingestionTime
        }

        public init(dictionary: [String: Any]) throws {
            self.eventId = dictionary["eventId"] as? String
            self.message = dictionary["message"] as? String
            self.timestamp = dictionary["timestamp"] as? Int64
            self.logStreamName = dictionary["logStreamName"] as? String
            self.ingestionTime = dictionary["ingestionTime"] as? Int64
        }
    }

    public struct PutLogEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The log events.
        public let logEvents: [InputLogEvent]
        /// The sequence token.
        public let sequenceToken: String?
        /// The name of the log stream.
        public let logStreamName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(logEvents: [InputLogEvent], sequenceToken: String? = nil, logStreamName: String, logGroupName: String) {
            self.logEvents = logEvents
            self.sequenceToken = sequenceToken
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logEvents = dictionary["logEvents"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("logEvents") }
            self.logEvents = try logEvents.map({ try InputLogEvent(dictionary: $0) })
            self.sequenceToken = dictionary["sequenceToken"] as? String
            guard let logStreamName = dictionary["logStreamName"] as? String else { throw InitializableError.missingRequiredParam("logStreamName") }
            self.logStreamName = logStreamName
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct ExportTaskExecutionInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The creation time of the export task.
        public let creationTime: Int64?
        /// The completion time of the export task.
        public let completionTime: Int64?

        public init(creationTime: Int64? = nil, completionTime: Int64? = nil) {
            self.creationTime = creationTime
            self.completionTime = completionTime
        }

        public init(dictionary: [String: Any]) throws {
            self.creationTime = dictionary["creationTime"] as? Int64
            self.completionTime = dictionary["completionTime"] as? Int64
        }
    }

    public struct DescribeLogStreamsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
        public let descending: Bool?
        /// The prefix to match. You cannot specify this parameter if orderBy is LastEventTime.
        public let logStreamNamePrefix: String?
        /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter.
        public let orderBy: OrderBy?
        /// The name of the log group.
        public let logGroupName: String

        public init(nextToken: String? = nil, limit: Int32? = nil, descending: Bool? = nil, logStreamNamePrefix: String? = nil, orderBy: OrderBy? = nil, logGroupName: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.descending = descending
            self.logStreamNamePrefix = logStreamNamePrefix
            self.orderBy = orderBy
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.limit = dictionary["limit"] as? Int32
            self.descending = dictionary["descending"] as? Bool
            self.logStreamNamePrefix = dictionary["logStreamNamePrefix"] as? String
            if let orderBy = dictionary["orderBy"] as? String { self.orderBy = OrderBy(rawValue: orderBy) } else { self.orderBy = nil }
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct DescribeLogStreamsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The log streams.
        public let logStreams: [LogStream]?
        public let nextToken: String?

        public init(logStreams: [LogStream]? = nil, nextToken: String? = nil) {
            self.logStreams = logStreams
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let logStreams = dictionary["logStreams"] as? [[String: Any]] {
                self.logStreams = try logStreams.map({ try LogStream(dictionary: $0) })
            } else { 
                self.logStreams = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeleteRetentionPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct MetricTransformation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        public let metricValue: String
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public let defaultValue: Double?
        /// The name of the CloudWatch metric.
        public let metricName: String
        /// The namespace of the CloudWatch metric.
        public let metricNamespace: String

        public init(metricValue: String, defaultValue: Double? = nil, metricName: String, metricNamespace: String) {
            self.metricValue = metricValue
            self.defaultValue = defaultValue
            self.metricName = metricName
            self.metricNamespace = metricNamespace
        }

        public init(dictionary: [String: Any]) throws {
            guard let metricValue = dictionary["metricValue"] as? String else { throw InitializableError.missingRequiredParam("metricValue") }
            self.metricValue = metricValue
            self.defaultValue = dictionary["defaultValue"] as? Double
            guard let metricName = dictionary["metricName"] as? String else { throw InitializableError.missingRequiredParam("metricName") }
            self.metricName = metricName
            guard let metricNamespace = dictionary["metricNamespace"] as? String else { throw InitializableError.missingRequiredParam("metricNamespace") }
            self.metricNamespace = metricNamespace
        }
    }

    public struct PutSubscriptionFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name for the subscription filter.
        public let filterName: String
        /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:   An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.   An Amazon Kinesis Firehose stream belonging to the same account as the subscription filter, for same-account delivery.   An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.  
        public let destinationArn: String
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        public let roleArn: String?
        /// The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream. By default, log data is grouped by log stream. For a more even distribution, you can group log data randomly.
        public let distribution: Distribution?
        /// The name of the log group.
        public let logGroupName: String
        /// A filter pattern for subscribing to a filtered stream of log events.
        public let filterPattern: String

        public init(filterName: String, destinationArn: String, roleArn: String? = nil, distribution: Distribution? = nil, logGroupName: String, filterPattern: String) {
            self.filterName = filterName
            self.destinationArn = destinationArn
            self.roleArn = roleArn
            self.distribution = distribution
            self.logGroupName = logGroupName
            self.filterPattern = filterPattern
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterName = dictionary["filterName"] as? String else { throw InitializableError.missingRequiredParam("filterName") }
            self.filterName = filterName
            guard let destinationArn = dictionary["destinationArn"] as? String else { throw InitializableError.missingRequiredParam("destinationArn") }
            self.destinationArn = destinationArn
            self.roleArn = dictionary["roleArn"] as? String
            if let distribution = dictionary["distribution"] as? String { self.distribution = Distribution(rawValue: distribution) } else { self.distribution = nil }
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let filterPattern = dictionary["filterPattern"] as? String else { throw InitializableError.missingRequiredParam("filterPattern") }
            self.filterPattern = filterPattern
        }
    }

    public enum ExportTaskStatusCode: String, CustomStringConvertible {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case pending = "PENDING"
        case pending_cancel = "PENDING_CANCEL"
        case running = "RUNNING"
        public var description: String { return self.rawValue }
    }

    public struct RejectedLogEventsInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The expired log events.
        public let expiredLogEventEndIndex: Int32?
        /// The log events that are too old.
        public let tooOldLogEventEndIndex: Int32?
        /// The log events that are too new.
        public let tooNewLogEventStartIndex: Int32?

        public init(expiredLogEventEndIndex: Int32? = nil, tooOldLogEventEndIndex: Int32? = nil, tooNewLogEventStartIndex: Int32? = nil) {
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
        }

        public init(dictionary: [String: Any]) throws {
            self.expiredLogEventEndIndex = dictionary["expiredLogEventEndIndex"] as? Int32
            self.tooOldLogEventEndIndex = dictionary["tooOldLogEventEndIndex"] as? Int32
            self.tooNewLogEventStartIndex = dictionary["tooNewLogEventStartIndex"] as? Int32
        }
    }

    public struct DeleteDestinationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the destination.
        public let destinationName: String

        public init(destinationName: String) {
            self.destinationName = destinationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let destinationName = dictionary["destinationName"] as? String else { throw InitializableError.missingRequiredParam("destinationName") }
            self.destinationName = destinationName
        }
    }

    public struct PutMetricFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name for the metric filter.
        public let filterName: String
        /// A collection of information needed to define how metric data gets emitted.
        public let metricTransformations: [MetricTransformation]
        /// The name of the log group.
        public let logGroupName: String
        /// A filter pattern for extracting metric data out of ingested log events.
        public let filterPattern: String

        public init(filterName: String, metricTransformations: [MetricTransformation], logGroupName: String, filterPattern: String) {
            self.filterName = filterName
            self.metricTransformations = metricTransformations
            self.logGroupName = logGroupName
            self.filterPattern = filterPattern
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterName = dictionary["filterName"] as? String else { throw InitializableError.missingRequiredParam("filterName") }
            self.filterName = filterName
            guard let metricTransformations = dictionary["metricTransformations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("metricTransformations") }
            self.metricTransformations = try metricTransformations.map({ try MetricTransformation(dictionary: $0) })
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let filterPattern = dictionary["filterPattern"] as? String else { throw InitializableError.missingRequiredParam("filterPattern") }
            self.filterPattern = filterPattern
        }
    }

    public struct DescribeLogGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The log groups.
        public let logGroups: [LogGroup]?
        public let nextToken: String?

        public init(logGroups: [LogGroup]? = nil, nextToken: String? = nil) {
            self.logGroups = logGroups
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let logGroups = dictionary["logGroups"] as? [[String: Any]] {
                self.logGroups = try logGroups.map({ try LogGroup(dictionary: $0) })
            } else { 
                self.logGroups = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct PutDestinationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name for the destination.
        public let destinationName: String
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to call Amazon Kinesis PutRecord on the destination stream.
        public let roleArn: String
        /// The ARN of an Amazon Kinesis stream to deliver matching log events to.
        public let targetArn: String

        public init(destinationName: String, roleArn: String, targetArn: String) {
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.targetArn = targetArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let destinationName = dictionary["destinationName"] as? String else { throw InitializableError.missingRequiredParam("destinationName") }
            self.destinationName = destinationName
            guard let roleArn = dictionary["roleArn"] as? String else { throw InitializableError.missingRequiredParam("roleArn") }
            self.roleArn = roleArn
            guard let targetArn = dictionary["targetArn"] as? String else { throw InitializableError.missingRequiredParam("targetArn") }
            self.targetArn = targetArn
        }
    }

    public struct OutputLogEvent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time the event occurred, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64?
        /// The data contained in the log event.
        public let message: String?
        /// The time the event was ingested.
        public let ingestionTime: Int64?

        public init(timestamp: Int64? = nil, message: String? = nil, ingestionTime: Int64? = nil) {
            self.timestamp = timestamp
            self.message = message
            self.ingestionTime = ingestionTime
        }

        public init(dictionary: [String: Any]) throws {
            self.timestamp = dictionary["timestamp"] as? Int64
            self.message = dictionary["message"] as? String
            self.ingestionTime = dictionary["ingestionTime"] as? Int64
        }
    }

    public struct DeleteLogStreamRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String
        /// The name of the log stream.
        public let logStreamName: String

        public init(logGroupName: String, logStreamName: String) {
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let logStreamName = dictionary["logStreamName"] as? String else { throw InitializableError.missingRequiredParam("logStreamName") }
            self.logStreamName = logStreamName
        }
    }

    public struct DescribeSubscriptionFiltersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        public let filterNamePrefix: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the log group.
        public let logGroupName: String

        public init(filterNamePrefix: String? = nil, limit: Int32? = nil, nextToken: String? = nil, logGroupName: String) {
            self.filterNamePrefix = filterNamePrefix
            self.limit = limit
            self.nextToken = nextToken
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.filterNamePrefix = dictionary["filterNamePrefix"] as? String
            self.limit = dictionary["limit"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct DescribeLogGroupsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The prefix to match.
        public let logGroupNamePrefix: String?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(limit: Int32? = nil, logGroupNamePrefix: String? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.logGroupNamePrefix = logGroupNamePrefix
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["limit"] as? Int32
            self.logGroupNamePrefix = dictionary["logGroupNamePrefix"] as? String
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeMetricFiltersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The prefix to match.
        public let filterNamePrefix: String?
        /// The name of the log group.
        public let logGroupName: String?
        /// The name of the CloudWatch metric.
        public let metricName: String?
        /// The namespace of the CloudWatch metric.
        public let metricNamespace: String?

        public init(limit: Int32? = nil, nextToken: String? = nil, filterNamePrefix: String? = nil, logGroupName: String? = nil, metricName: String? = nil, metricNamespace: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.filterNamePrefix = filterNamePrefix
            self.logGroupName = logGroupName
            self.metricName = metricName
            self.metricNamespace = metricNamespace
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["limit"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
            self.filterNamePrefix = dictionary["filterNamePrefix"] as? String
            self.logGroupName = dictionary["logGroupName"] as? String
            self.metricName = dictionary["metricName"] as? String
            self.metricNamespace = dictionary["metricNamespace"] as? String
        }
    }

    public struct DeleteSubscriptionFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the subscription filter.
        public let filterName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(filterName: String, logGroupName: String) {
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterName = dictionary["filterName"] as? String else { throw InitializableError.missingRequiredParam("filterName") }
            self.filterName = filterName
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
        public let statusCode: ExportTaskStatusCode?
        /// The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.
        public let taskId: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?

        public init(nextToken: String? = nil, statusCode: ExportTaskStatusCode? = nil, taskId: String? = nil, limit: Int32? = nil) {
            self.nextToken = nextToken
            self.statusCode = statusCode
            self.taskId = taskId
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let statusCode = dictionary["statusCode"] as? String { self.statusCode = ExportTaskStatusCode(rawValue: statusCode) } else { self.statusCode = nil }
            self.taskId = dictionary["taskId"] as? String
            self.limit = dictionary["limit"] as? Int32
        }
    }

    public struct CreateExportTaskRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
        public let destinationPrefix: String?
        /// The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.
        public let destination: String
        /// The start time of the range for the request, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
        public let from: Int64
        /// The name of the export task.
        public let taskName: String?
        /// The name of the log group.
        public let logGroupName: String
        /// The end time of the range for the request, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        public let to: Int64
        /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
        public let logStreamNamePrefix: String?

        public init(destinationPrefix: String? = nil, destination: String, from: Int64, taskName: String? = nil, logGroupName: String, to: Int64, logStreamNamePrefix: String? = nil) {
            self.destinationPrefix = destinationPrefix
            self.destination = destination
            self.from = from
            self.taskName = taskName
            self.logGroupName = logGroupName
            self.to = to
            self.logStreamNamePrefix = logStreamNamePrefix
        }

        public init(dictionary: [String: Any]) throws {
            self.destinationPrefix = dictionary["destinationPrefix"] as? String
            guard let destination = dictionary["destination"] as? String else { throw InitializableError.missingRequiredParam("destination") }
            self.destination = destination
            guard let from = dictionary["from"] as? Int64 else { throw InitializableError.missingRequiredParam("from") }
            self.from = from
            self.taskName = dictionary["taskName"] as? String
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let to = dictionary["to"] as? Int64 else { throw InitializableError.missingRequiredParam("to") }
            self.to = to
            self.logStreamNamePrefix = dictionary["logStreamNamePrefix"] as? String
        }
    }

    public struct MetricFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The metric transformations.
        public let metricTransformations: [MetricTransformation]?
        /// The name of the metric filter.
        public let filterName: String?
        /// The name of the log group.
        public let logGroupName: String?
        /// The creation time of the metric filter.
        public let creationTime: Int64?
        public let filterPattern: String?

        public init(metricTransformations: [MetricTransformation]? = nil, filterName: String? = nil, logGroupName: String? = nil, creationTime: Int64? = nil, filterPattern: String? = nil) {
            self.metricTransformations = metricTransformations
            self.filterName = filterName
            self.logGroupName = logGroupName
            self.creationTime = creationTime
            self.filterPattern = filterPattern
        }

        public init(dictionary: [String: Any]) throws {
            if let metricTransformations = dictionary["metricTransformations"] as? [[String: Any]] {
                self.metricTransformations = try metricTransformations.map({ try MetricTransformation(dictionary: $0) })
            } else { 
                self.metricTransformations = nil
            }
            self.filterName = dictionary["filterName"] as? String
            self.logGroupName = dictionary["logGroupName"] as? String
            self.creationTime = dictionary["creationTime"] as? Int64
            self.filterPattern = dictionary["filterPattern"] as? String
        }
    }

    public struct TestMetricFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let filterPattern: String
        /// The log event messages to test.
        public let logEventMessages: [String]

        public init(filterPattern: String, logEventMessages: [String]) {
            self.filterPattern = filterPattern
            self.logEventMessages = logEventMessages
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterPattern = dictionary["filterPattern"] as? String else { throw InitializableError.missingRequiredParam("filterPattern") }
            self.filterPattern = filterPattern
            guard let logEventMessages = dictionary["logEventMessages"] as? [String] else { throw InitializableError.missingRequiredParam("logEventMessages") }
            self.logEventMessages = logEventMessages
        }
    }

    public struct DeleteLogGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct GetLogEventsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token for the next set of items in the forward direction. The token expires after 24 hours.
        public let nextForwardToken: String?
        /// The token for the next set of items in the backward direction. The token expires after 24 hours.
        public let nextBackwardToken: String?
        /// The events.
        public let events: [OutputLogEvent]?

        public init(nextForwardToken: String? = nil, nextBackwardToken: String? = nil, events: [OutputLogEvent]? = nil) {
            self.nextForwardToken = nextForwardToken
            self.nextBackwardToken = nextBackwardToken
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            self.nextForwardToken = dictionary["nextForwardToken"] as? String
            self.nextBackwardToken = dictionary["nextBackwardToken"] as? String
            if let events = dictionary["events"] as? [[String: Any]] {
                self.events = try events.map({ try OutputLogEvent(dictionary: $0) })
            } else { 
                self.events = nil
            }
        }
    }

    public struct ExportTaskStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status code of the export task.
        public let code: ExportTaskStatusCode?
        /// The status message related to the status code.
        public let message: String?

        public init(code: ExportTaskStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            if let code = dictionary["code"] as? String { self.code = ExportTaskStatusCode(rawValue: code) } else { self.code = nil }
            self.message = dictionary["message"] as? String
        }
    }

    public struct Destination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
        public let accessPolicy: String?
        /// The name of the destination.
        public let destinationName: String?
        /// A role for impersonation, used when delivering log events to the target.
        public let roleArn: String?
        /// The creation time of the destination.
        public let creationTime: Int64?
        /// The Amazon Resource Name (ARN) of the physical target where the log events will be delivered (for example, a Kinesis stream).
        public let targetArn: String?
        /// The ARN of this destination.
        public let arn: String?

        public init(accessPolicy: String? = nil, destinationName: String? = nil, roleArn: String? = nil, creationTime: Int64? = nil, targetArn: String? = nil, arn: String? = nil) {
            self.accessPolicy = accessPolicy
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.creationTime = creationTime
            self.targetArn = targetArn
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.accessPolicy = dictionary["accessPolicy"] as? String
            self.destinationName = dictionary["destinationName"] as? String
            self.roleArn = dictionary["roleArn"] as? String
            self.creationTime = dictionary["creationTime"] as? Int64
            self.targetArn = dictionary["targetArn"] as? String
            self.arn = dictionary["arn"] as? String
        }
    }

    public struct CreateLogGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The key-value pairs to use for the tags.
        public let tags: [String: String]?
        /// The name of the log group.
        public let logGroupName: String

        public init(tags: [String: String]? = nil, logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct DescribeExportTasksResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nextToken: String?
        /// The export tasks.
        public let exportTasks: [ExportTask]?

        public init(nextToken: String? = nil, exportTasks: [ExportTask]? = nil) {
            self.nextToken = nextToken
            self.exportTasks = exportTasks
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let exportTasks = dictionary["exportTasks"] as? [[String: Any]] {
                self.exportTasks = try exportTasks.map({ try ExportTask(dictionary: $0) })
            } else { 
                self.exportTasks = nil
            }
        }
    }

    public struct CancelExportTaskRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the export task.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        public init(dictionary: [String: Any]) throws {
            guard let taskId = dictionary["taskId"] as? String else { throw InitializableError.missingRequiredParam("taskId") }
            self.taskId = taskId
        }
    }

    public struct UntagLogGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag keys. The corresponding tags are removed from the log group.
        public let tags: [String]
        /// The name of the log group.
        public let logGroupName: String

        public init(tags: [String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [String] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = tags
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct ListTagsLogGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tags.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
        }
    }

    public struct DeleteMetricFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the metric filter.
        public let filterName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(filterName: String, logGroupName: String) {
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterName = dictionary["filterName"] as? String else { throw InitializableError.missingRequiredParam("filterName") }
            self.filterName = filterName
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct LogGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of bytes stored.
        public let storedBytes: Int64?
        /// The Amazon Resource Name (ARN) of the log group.
        public let arn: String?
        /// The name of the log group.
        public let logGroupName: String?
        /// The creation time of the log group.
        public let creationTime: Int64?
        public let retentionInDays: Int32?
        /// The number of metric filters.
        public let metricFilterCount: Int32?

        public init(storedBytes: Int64? = nil, arn: String? = nil, logGroupName: String? = nil, creationTime: Int64? = nil, retentionInDays: Int32? = nil, metricFilterCount: Int32? = nil) {
            self.storedBytes = storedBytes
            self.arn = arn
            self.logGroupName = logGroupName
            self.creationTime = creationTime
            self.retentionInDays = retentionInDays
            self.metricFilterCount = metricFilterCount
        }

        public init(dictionary: [String: Any]) throws {
            self.storedBytes = dictionary["storedBytes"] as? Int64
            self.arn = dictionary["arn"] as? String
            self.logGroupName = dictionary["logGroupName"] as? String
            self.creationTime = dictionary["creationTime"] as? Int64
            self.retentionInDays = dictionary["retentionInDays"] as? Int32
            self.metricFilterCount = dictionary["metricFilterCount"] as? Int32
        }
    }

    public struct TagLogGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The key-value pairs to use for the tags.
        public let tags: [String: String]
        /// The name of the log group.
        public let logGroupName: String

        public init(tags: [String: String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [String: String] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = tags
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct DescribeSubscriptionFiltersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The subscription filters.
        public let subscriptionFilters: [SubscriptionFilter]?
        public let nextToken: String?

        public init(subscriptionFilters: [SubscriptionFilter]? = nil, nextToken: String? = nil) {
            self.subscriptionFilters = subscriptionFilters
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let subscriptionFilters = dictionary["subscriptionFilters"] as? [[String: Any]] {
                self.subscriptionFilters = try subscriptionFilters.map({ try SubscriptionFilter(dictionary: $0) })
            } else { 
                self.subscriptionFilters = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public enum Distribution: String, CustomStringConvertible {
        case random = "Random"
        case bylogstream = "ByLogStream"
        public var description: String { return self.rawValue }
    }

    public struct GetLogEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1MB, up to 10,000 log events.
        public let limit: Int32?
        /// The name of the log stream.
        public let logStreamName: String
        /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.
        public let startFromHead: Bool?
        /// The end of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not included.
        public let endTime: Int64?
        /// The name of the log group.
        public let logGroupName: String
        /// The start of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not included.
        public let startTime: Int64?

        public init(nextToken: String? = nil, limit: Int32? = nil, logStreamName: String, startFromHead: Bool? = nil, endTime: Int64? = nil, logGroupName: String, startTime: Int64? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.logStreamName = logStreamName
            self.startFromHead = startFromHead
            self.endTime = endTime
            self.logGroupName = logGroupName
            self.startTime = startTime
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.limit = dictionary["limit"] as? Int32
            guard let logStreamName = dictionary["logStreamName"] as? String else { throw InitializableError.missingRequiredParam("logStreamName") }
            self.logStreamName = logStreamName
            self.startFromHead = dictionary["startFromHead"] as? Bool
            self.endTime = dictionary["endTime"] as? Int64
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            self.startTime = dictionary["startTime"] as? Int64
        }
    }

    public struct FilterLogEventsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates which log streams have been searched and whether each has been searched completely.
        public let searchedLogStreams: [SearchedLogStream]?
        /// The matched events.
        public let events: [FilteredLogEvent]?
        /// The token to use when requesting the next set of items. The token expires after 24 hours.
        public let nextToken: String?

        public init(searchedLogStreams: [SearchedLogStream]? = nil, events: [FilteredLogEvent]? = nil, nextToken: String? = nil) {
            self.searchedLogStreams = searchedLogStreams
            self.events = events
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let searchedLogStreams = dictionary["searchedLogStreams"] as? [[String: Any]] {
                self.searchedLogStreams = try searchedLogStreams.map({ try SearchedLogStream(dictionary: $0) })
            } else { 
                self.searchedLogStreams = nil
            }
            if let events = dictionary["events"] as? [[String: Any]] {
                self.events = try events.map({ try FilteredLogEvent(dictionary: $0) })
            } else { 
                self.events = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct PutDestinationPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination.
        public let accessPolicy: String
        /// A name for an existing destination.
        public let destinationName: String

        public init(accessPolicy: String, destinationName: String) {
            self.accessPolicy = accessPolicy
            self.destinationName = destinationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accessPolicy = dictionary["accessPolicy"] as? String else { throw InitializableError.missingRequiredParam("accessPolicy") }
            self.accessPolicy = accessPolicy
            guard let destinationName = dictionary["destinationName"] as? String else { throw InitializableError.missingRequiredParam("destinationName") }
            self.destinationName = destinationName
        }
    }

    public struct ListTagsLogGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
        }
    }

    public struct SearchedLogStream: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log stream.
        public let logStreamName: String?
        /// Indicates whether all the events in this log stream were searched.
        public let searchedCompletely: Bool?

        public init(logStreamName: String? = nil, searchedCompletely: Bool? = nil) {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }

        public init(dictionary: [String: Any]) throws {
            self.logStreamName = dictionary["logStreamName"] as? String
            self.searchedCompletely = dictionary["searchedCompletely"] as? Bool
        }
    }

    public struct PutRetentionPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the log group.
        public let logGroupName: String
        public let retentionInDays: Int32

        public init(logGroupName: String, retentionInDays: Int32) {
            self.logGroupName = logGroupName
            self.retentionInDays = retentionInDays
        }

        public init(dictionary: [String: Any]) throws {
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            guard let retentionInDays = dictionary["retentionInDays"] as? Int32 else { throw InitializableError.missingRequiredParam("retentionInDays") }
            self.retentionInDays = retentionInDays
        }
    }

    public struct FilterLogEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token for the next set of events to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of events to return. The default is 10,000 events.
        public let limit: Int32?
        /// The filter pattern to use. If not provided, all the events are matched.
        public let filterPattern: String?
        /// The end of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
        public let endTime: Int64?
        /// The name of the log group.
        public let logGroupName: String
        /// Optional list of log stream names.
        public let logStreamNames: [String]?
        /// The start of the time range, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp prior to this time are not returned.
        public let startTime: Int64?
        /// If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group interleaved in a single response. If the value is false all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.
        public let interleaved: Bool?

        public init(nextToken: String? = nil, limit: Int32? = nil, filterPattern: String? = nil, endTime: Int64? = nil, logGroupName: String, logStreamNames: [String]? = nil, startTime: Int64? = nil, interleaved: Bool? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.filterPattern = filterPattern
            self.endTime = endTime
            self.logGroupName = logGroupName
            self.logStreamNames = logStreamNames
            self.startTime = startTime
            self.interleaved = interleaved
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.limit = dictionary["limit"] as? Int32
            self.filterPattern = dictionary["filterPattern"] as? String
            self.endTime = dictionary["endTime"] as? Int64
            guard let logGroupName = dictionary["logGroupName"] as? String else { throw InitializableError.missingRequiredParam("logGroupName") }
            self.logGroupName = logGroupName
            self.logStreamNames = dictionary["logStreamNames"] as? [String]
            self.startTime = dictionary["startTime"] as? Int64
            self.interleaved = dictionary["interleaved"] as? Bool
        }
    }

    public struct CreateExportTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the export task.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        public init(dictionary: [String: Any]) throws {
            self.taskId = dictionary["taskId"] as? String
        }
    }

    public struct MetricFilterMatchRecord: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The values extracted from the event data by the filter.
        public let extractedValues: [String: String]?
        /// The event number.
        public let eventNumber: Int64?
        /// The raw event data.
        public let eventMessage: String?

        public init(extractedValues: [String: String]? = nil, eventNumber: Int64? = nil, eventMessage: String? = nil) {
            self.extractedValues = extractedValues
            self.eventNumber = eventNumber
            self.eventMessage = eventMessage
        }

        public init(dictionary: [String: Any]) throws {
            if let extractedValues = dictionary["extractedValues"] as? [String: String] {
                self.extractedValues = extractedValues
            } else { 
                self.extractedValues = nil
            }
            self.eventNumber = dictionary["eventNumber"] as? Int64
            self.eventMessage = dictionary["eventMessage"] as? String
        }
    }

    public struct PutDestinationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The destination.
        public let destination: Destination?

        public init(destination: Destination? = nil) {
            self.destination = destination
        }

        public init(dictionary: [String: Any]) throws {
            if let destination = dictionary["destination"] as? [String: Any] { self.destination = try Logs.Destination(dictionary: destination) } else { self.destination = nil }
        }
    }

    public struct SubscriptionFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The method used to distribute log data to the destination, when the destination is an Amazon Kinesis stream.
        public let distribution: Distribution?
        public let roleArn: String?
        /// The Amazon Resource Name (ARN) of the destination.
        public let destinationArn: String?
        /// The creation time of the subscription filter.
        public let creationTime: Int64?
        public let filterPattern: String?
        /// The name of the subscription filter.
        public let filterName: String?
        /// The name of the log group.
        public let logGroupName: String?

        public init(distribution: Distribution? = nil, roleArn: String? = nil, destinationArn: String? = nil, creationTime: Int64? = nil, filterPattern: String? = nil, filterName: String? = nil, logGroupName: String? = nil) {
            self.distribution = distribution
            self.roleArn = roleArn
            self.destinationArn = destinationArn
            self.creationTime = creationTime
            self.filterPattern = filterPattern
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

        public init(dictionary: [String: Any]) throws {
            if let distribution = dictionary["distribution"] as? String { self.distribution = Distribution(rawValue: distribution) } else { self.distribution = nil }
            self.roleArn = dictionary["roleArn"] as? String
            self.destinationArn = dictionary["destinationArn"] as? String
            self.creationTime = dictionary["creationTime"] as? Int64
            self.filterPattern = dictionary["filterPattern"] as? String
            self.filterName = dictionary["filterName"] as? String
            self.logGroupName = dictionary["logGroupName"] as? String
        }
    }

    public struct DescribeMetricFiltersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nextToken: String?
        /// The metric filters.
        public let metricFilters: [MetricFilter]?

        public init(nextToken: String? = nil, metricFilters: [MetricFilter]? = nil) {
            self.nextToken = nextToken
            self.metricFilters = metricFilters
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let metricFilters = dictionary["metricFilters"] as? [[String: Any]] {
                self.metricFilters = try metricFilters.map({ try MetricFilter(dictionary: $0) })
            } else { 
                self.metricFilters = nil
            }
        }
    }

    public struct ExportTask: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the export task.
        public let status: ExportTaskStatus?
        /// The name of Amazon S3 bucket to which the log data was exported.
        public let destination: String?
        /// The ID of the export task.
        public let taskId: String?
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        public let destinationPrefix: String?
        /// The start time, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp prior to this time are not exported.
        public let from: Int64?
        /// The name of the export task.
        public let taskName: String?
        /// Execution info about the export task.
        public let executionInfo: ExportTaskExecutionInfo?
        /// The name of the log group from which logs data was exported.
        public let logGroupName: String?
        /// The end time, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        public let to: Int64?

        public init(status: ExportTaskStatus? = nil, destination: String? = nil, taskId: String? = nil, destinationPrefix: String? = nil, from: Int64? = nil, taskName: String? = nil, executionInfo: ExportTaskExecutionInfo? = nil, logGroupName: String? = nil, to: Int64? = nil) {
            self.status = status
            self.destination = destination
            self.taskId = taskId
            self.destinationPrefix = destinationPrefix
            self.from = from
            self.taskName = taskName
            self.executionInfo = executionInfo
            self.logGroupName = logGroupName
            self.to = to
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["status"] as? [String: Any] { self.status = try Logs.ExportTaskStatus(dictionary: status) } else { self.status = nil }
            self.destination = dictionary["destination"] as? String
            self.taskId = dictionary["taskId"] as? String
            self.destinationPrefix = dictionary["destinationPrefix"] as? String
            self.from = dictionary["from"] as? Int64
            self.taskName = dictionary["taskName"] as? String
            if let executionInfo = dictionary["executionInfo"] as? [String: Any] { self.executionInfo = try Logs.ExportTaskExecutionInfo(dictionary: executionInfo) } else { self.executionInfo = nil }
            self.logGroupName = dictionary["logGroupName"] as? String
            self.to = dictionary["to"] as? Int64
        }
    }

    public struct PutLogEventsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The rejected events.
        public let rejectedLogEventsInfo: RejectedLogEventsInfo?
        /// The next sequence token.
        public let nextSequenceToken: String?

        public init(rejectedLogEventsInfo: RejectedLogEventsInfo? = nil, nextSequenceToken: String? = nil) {
            self.rejectedLogEventsInfo = rejectedLogEventsInfo
            self.nextSequenceToken = nextSequenceToken
        }

        public init(dictionary: [String: Any]) throws {
            if let rejectedLogEventsInfo = dictionary["rejectedLogEventsInfo"] as? [String: Any] { self.rejectedLogEventsInfo = try Logs.RejectedLogEventsInfo(dictionary: rejectedLogEventsInfo) } else { self.rejectedLogEventsInfo = nil }
            self.nextSequenceToken = dictionary["nextSequenceToken"] as? String
        }
    }

    public struct DescribeDestinationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        public let destinationNamePrefix: String?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(limit: Int32? = nil, destinationNamePrefix: String? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.destinationNamePrefix = destinationNamePrefix
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["limit"] as? Int32
            self.destinationNamePrefix = dictionary["DestinationNamePrefix"] as? String
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

}