// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension CognitoIdp {

    public struct DescribeUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public init(dictionary: [String: Any]) throws {
            if let userImportJob = dictionary["UserImportJob"] as? [String: Any] { self.userImportJob = try CognitoIdp.UserImportJobType(dictionary: userImportJob) } else { self.userImportJob = nil }
        }
    }

    public struct AdminUserGlobalSignOutResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateUserPoolRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// A string representing the email verification subject.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
        public let schema: [SchemaAttributeType]?
        /// The policies associated with the new user pool.
        public let policies: UserPoolPolicyType?
        /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
        public let aliasAttributes: [AliasAttributeType]?
        /// The Lambda trigger configuration information for the new user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Specifies MFA configuration details.
        public let mfaConfiguration: UserPoolMfaType?
        /// A string used to name the user pool.
        public let poolName: String
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A string representing the SMS verification message.
        public let smsVerificationMessage: String?
        /// A string representing the email verification message.
        public let emailVerificationMessage: String?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// A string representing the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The attributes to be auto-verified. Possible values: email, phone_number.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, schema: [SchemaAttributeType]? = nil, policies: UserPoolPolicyType? = nil, aliasAttributes: [AliasAttributeType]? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, poolName: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, smsAuthenticationMessage: String? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.schema = schema
            self.policies = policies
            self.aliasAttributes = aliasAttributes
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.poolName = poolName
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let userPoolTags = dictionary["UserPoolTags"] as? [String: String] {
                self.userPoolTags = userPoolTags
            } else { 
                self.userPoolTags = nil
            }
            self.emailVerificationSubject = dictionary["EmailVerificationSubject"] as? String
            if let adminCreateUserConfig = dictionary["AdminCreateUserConfig"] as? [String: Any] { self.adminCreateUserConfig = try CognitoIdp.AdminCreateUserConfigType(dictionary: adminCreateUserConfig) } else { self.adminCreateUserConfig = nil }
            if let schema = dictionary["Schema"] as? [[String: Any]] {
                self.schema = try schema.map({ try SchemaAttributeType(dictionary: $0) })
            } else { 
                self.schema = nil
            }
            if let policies = dictionary["Policies"] as? [String: Any] { self.policies = try CognitoIdp.UserPoolPolicyType(dictionary: policies) } else { self.policies = nil }
            if let aliasAttributes = dictionary["AliasAttributes"] as? [String] { self.aliasAttributes = aliasAttributes.flatMap({ AliasAttributeType(rawValue: $0)}) } else { self.aliasAttributes = nil }
            if let lambdaConfig = dictionary["LambdaConfig"] as? [String: Any] { self.lambdaConfig = try CognitoIdp.LambdaConfigType(dictionary: lambdaConfig) } else { self.lambdaConfig = nil }
            if let mfaConfiguration = dictionary["MfaConfiguration"] as? String { self.mfaConfiguration = UserPoolMfaType(rawValue: mfaConfiguration) } else { self.mfaConfiguration = nil }
            guard let poolName = dictionary["PoolName"] as? String else { throw InitializableError.missingRequiredParam("PoolName") }
            self.poolName = poolName
            if let emailConfiguration = dictionary["EmailConfiguration"] as? [String: Any] { self.emailConfiguration = try CognitoIdp.EmailConfigurationType(dictionary: emailConfiguration) } else { self.emailConfiguration = nil }
            self.smsVerificationMessage = dictionary["SmsVerificationMessage"] as? String
            self.emailVerificationMessage = dictionary["EmailVerificationMessage"] as? String
            if let smsConfiguration = dictionary["SmsConfiguration"] as? [String: Any] { self.smsConfiguration = try CognitoIdp.SmsConfigurationType(dictionary: smsConfiguration) } else { self.smsConfiguration = nil }
            self.smsAuthenticationMessage = dictionary["SmsAuthenticationMessage"] as? String
            if let autoVerifiedAttributes = dictionary["AutoVerifiedAttributes"] as? [String] { self.autoVerifiedAttributes = autoVerifiedAttributes.flatMap({ VerifiedAttributeType(rawValue: $0)}) } else { self.autoVerifiedAttributes = nil }
            if let deviceConfiguration = dictionary["DeviceConfiguration"] as? [String: Any] { self.deviceConfiguration = try CognitoIdp.DeviceConfigurationType(dictionary: deviceConfiguration) } else { self.deviceConfiguration = nil }
        }
    }

    public struct AddCustomAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListUsersInGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(users: [UserType]? = nil, nextToken: String? = nil) {
            self.users = users
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let users = dictionary["Users"] as? [[String: Any]] {
                self.users = try users.map({ try UserType(dictionary: $0) })
            } else { 
                self.users = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct NumberAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The minimum value of an attribute that is of the number data type.
        public let minValue: String?
        /// The maximum value of an attribute that is of the number data type.
        public let maxValue: String?

        public init(minValue: String? = nil, maxValue: String? = nil) {
            self.minValue = minValue
            self.maxValue = maxValue
        }

        public init(dictionary: [String: Any]) throws {
            self.minValue = dictionary["MinValue"] as? String
            self.maxValue = dictionary["MaxValue"] as? String
        }
    }

    public enum VerifiedAttributeType: String, CustomStringConvertible {
        case phone_number = "phone_number"
        case email = "email"
        public var description: String { return self.rawValue }
    }

    public struct ListDevicesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The limit of the device request.
        public let limit: Int32?
        /// The pagination token for the list request.
        public let paginationToken: String?
        /// The access tokens for the request to list devices.
        public let accessToken: String

        public init(limit: Int32? = nil, paginationToken: String? = nil, accessToken: String) {
            self.limit = limit
            self.paginationToken = paginationToken
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.paginationToken = dictionary["PaginationToken"] as? String
            guard let accessToken = dictionary["AccessToken"] as? String else { throw InitializableError.missingRequiredParam("AccessToken") }
            self.accessToken = accessToken
        }
    }

    public struct DeleteUserPoolRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool you want to delete.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct GetUserAttributeVerificationCodeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The code delivery details returned by the server in response to the request to get the user attribute verification code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let codeDeliveryDetails = dictionary["CodeDeliveryDetails"] as? [String: Any] { self.codeDeliveryDetails = try CognitoIdp.CodeDeliveryDetailsType(dictionary: codeDeliveryDetails) } else { self.codeDeliveryDetails = nil }
        }
    }

    public struct SignUpRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The password of the user you wish to register.
        public let password: String
        /// The validation data in the request to register a user.
        public let validationData: [AttributeType]?
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user you wish to register.
        public let username: String

        public init(userAttributes: [AttributeType]? = nil, clientId: String, password: String, validationData: [AttributeType]? = nil, secretHash: String? = nil, username: String) {
            self.userAttributes = userAttributes
            self.clientId = clientId
            self.password = password
            self.validationData = validationData
            self.secretHash = secretHash
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            if let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] {
                self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.userAttributes = nil
            }
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            if let validationData = dictionary["ValidationData"] as? [[String: Any]] {
                self.validationData = try validationData.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.validationData = nil
            }
            self.secretHash = dictionary["SecretHash"] as? String
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct DescribeUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool client from a server response to describe the user pool client.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public init(dictionary: [String: Any]) throws {
            if let userPoolClient = dictionary["UserPoolClient"] as? [String: Any] { self.userPoolClient = try CognitoIdp.UserPoolClientType(dictionary: userPoolClient) } else { self.userPoolClient = nil }
        }
    }

    public struct AdminRespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the challenge.
        public let challengeName: ChallengeNameType
        /// The client ID.
        public let clientId: String
        /// The session.
        public let session: String?
        /// The challenge response.
        public let challengeResponses: [String: String]?
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(challengeName: ChallengeNameType, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil, userPoolId: String) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawChallengeName = dictionary["ChallengeName"] as? String, let challengeName = ChallengeNameType(rawValue: rawChallengeName) else { throw InitializableError.missingRequiredParam("ChallengeName") }
            self.challengeName = challengeName
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            self.session = dictionary["Session"] as? String
            if let challengeResponses = dictionary["ChallengeResponses"] as? [String: String] {
                self.challengeResponses = challengeResponses
            } else { 
                self.challengeResponses = nil
            }
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct AdminListGroupsForUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The username for the user.
        public let username: String
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.username = username
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct SetUserSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ConfirmSignUpResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListUserPoolsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pools.
        public let maxResults: Int32

        public init(nextToken: String? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let maxResults = dictionary["MaxResults"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxResults") }
            self.maxResults = maxResults
        }
    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A string containing the new description of the group.
        public let description: String?
        /// The new precedence value for the group. For more information about this parameter, see CreateGroupRequest.
        public let precedence: Int32?
        /// The name of the group.
        public let groupName: String
        /// The new role ARN for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.precedence = dictionary["Precedence"] as? Int32
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            self.roleArn = dictionary["RoleArn"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct InitiateAuthResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the challenge.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters.
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the request to initiate authentication.
        public let authenticationResult: AuthenticationResultType?
        /// The session.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        public init(dictionary: [String: Any]) throws {
            if let challengeName = dictionary["ChallengeName"] as? String { self.challengeName = ChallengeNameType(rawValue: challengeName) } else { self.challengeName = nil }
            if let challengeParameters = dictionary["ChallengeParameters"] as? [String: String] {
                self.challengeParameters = challengeParameters
            } else { 
                self.challengeParameters = nil
            }
            if let authenticationResult = dictionary["AuthenticationResult"] as? [String: Any] { self.authenticationResult = try CognitoIdp.AuthenticationResultType(dictionary: authenticationResult) } else { self.authenticationResult = nil }
            self.session = dictionary["Session"] as? String
        }
    }

    public struct DeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of strings representing the user attribute names you wish to delete.
        public let userAttributeNames: [String]
        /// The access token used in the request to delete user attributes.
        public let accessToken: String?

        public init(userAttributeNames: [String], accessToken: String? = nil) {
            self.userAttributeNames = userAttributeNames
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let userAttributeNames = dictionary["UserAttributeNames"] as? [String] else { throw InitializableError.missingRequiredParam("UserAttributeNames") }
            self.userAttributeNames = userAttributeNames
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct StartUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct GetUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The access token returned by the server response to get information about the user.
        public let accessToken: String?

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct DeleteUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool where you want to delete the client.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct UpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The status of whether a device is remembered.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            if let deviceRememberedStatus = dictionary["DeviceRememberedStatus"] as? String { self.deviceRememberedStatus = DeviceRememberedStatusType(rawValue: deviceRememberedStatus) } else { self.deviceRememberedStatus = nil }
            guard let accessToken = dictionary["AccessToken"] as? String else { throw InitializableError.missingRequiredParam("AccessToken") }
            self.accessToken = accessToken
        }
    }

    public struct AdminRemoveUserFromGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct AdminDeleteUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to delete user attributes.
        public let userPoolId: String
        /// An array of strings representing the user attribute names you wish to delete.
        public let userAttributeNames: [String]
        /// The user name of the user from which you would like to delete attributes.
        public let username: String

        public init(userPoolId: String, userAttributeNames: [String], username: String) {
            self.userPoolId = userPoolId
            self.userAttributeNames = userAttributeNames
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let userAttributeNames = dictionary["UserAttributeNames"] as? [String] else { throw InitializableError.missingRequiredParam("UserAttributeNames") }
            self.userAttributeNames = userAttributeNames
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct UserPoolClientDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client name from the user pool client description.
        public let clientName: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The user pool ID for the user pool where you want to describe the user pool client.
        public let userPoolId: String?

        public init(clientName: String? = nil, clientId: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.clientName = dictionary["ClientName"] as? String
            self.clientId = dictionary["ClientId"] as? String
            self.userPoolId = dictionary["UserPoolId"] as? String
        }
    }

    public struct DeviceSecretVerifierConfigType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The salt.
        public let salt: String?
        /// The password verifier.
        public let passwordVerifier: String?

        public init(salt: String? = nil, passwordVerifier: String? = nil) {
            self.salt = salt
            self.passwordVerifier = passwordVerifier
        }

        public init(dictionary: [String: Any]) throws {
            self.salt = dictionary["Salt"] as? String
            self.passwordVerifier = dictionary["PasswordVerifier"] as? String
        }
    }

    public struct ListUserImportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that can be used to return the next set of user import jobs in the list.
        public let paginationToken: String?
        /// The user import jobs.
        public let userImportJobs: [UserImportJobType]?

        public init(paginationToken: String? = nil, userImportJobs: [UserImportJobType]? = nil) {
            self.paginationToken = paginationToken
            self.userImportJobs = userImportJobs
        }

        public init(dictionary: [String: Any]) throws {
            self.paginationToken = dictionary["PaginationToken"] as? String
            if let userImportJobs = dictionary["UserImportJobs"] as? [[String: Any]] {
                self.userImportJobs = try userImportJobs.map({ try UserImportJobType(dictionary: $0) })
            } else { 
                self.userImportJobs = nil
            }
        }
    }

    public struct RespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The challenge name.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters.
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the request to respond to the authentication challenge.
        public let authenticationResult: AuthenticationResultType?
        /// The session.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        public init(dictionary: [String: Any]) throws {
            if let challengeName = dictionary["ChallengeName"] as? String { self.challengeName = ChallengeNameType(rawValue: challengeName) } else { self.challengeName = nil }
            if let challengeParameters = dictionary["ChallengeParameters"] as? [String: String] {
                self.challengeParameters = challengeParameters
            } else { 
                self.challengeParameters = nil
            }
            if let authenticationResult = dictionary["AuthenticationResult"] as? [String: Any] { self.authenticationResult = try CognitoIdp.AuthenticationResultType(dictionary: authenticationResult) } else { self.authenticationResult = nil }
            self.session = dictionary["Session"] as? String
        }
    }

    public struct CreateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool client that was just created.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public init(dictionary: [String: Any]) throws {
            if let userPoolClient = dictionary["UserPoolClient"] as? [String: Any] { self.userPoolClient = try CognitoIdp.UserPoolClientType(dictionary: userPoolClient) } else { self.userPoolClient = nil }
        }
    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The group objects for the groups.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let groups = dictionary["Groups"] as? [[String: Any]] {
                self.groups = try groups.map({ try GroupType(dictionary: $0) })
            } else { 
                self.groups = nil
            }
        }
    }

    public struct AdminInitiateAuthRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client app metadata.
        public let clientMetadata: [String: String]?
        /// The client app ID.
        public let clientId: String
        /// The authentication parameters.
        public let authParameters: [String: String]?
        /// The authentication flow.
        public let authFlow: AuthFlowType
        /// The ID of the Amazon Cognito user pool.
        public let userPoolId: String

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: AuthFlowType, userPoolId: String) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            if let clientMetadata = dictionary["ClientMetadata"] as? [String: String] {
                self.clientMetadata = clientMetadata
            } else { 
                self.clientMetadata = nil
            }
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            if let authParameters = dictionary["AuthParameters"] as? [String: String] {
                self.authParameters = authParameters
            } else { 
                self.authParameters = nil
            }
            guard let rawAuthFlow = dictionary["AuthFlow"] as? String, let authFlow = AuthFlowType(rawValue: rawAuthFlow) else { throw InitializableError.missingRequiredParam("AuthFlow") }
            self.authFlow = authFlow
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct UpdateUserPoolClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool client value from the response from the server when an update user pool client request is made.
        public let userPoolClient: UserPoolClientType?

        public init(userPoolClient: UserPoolClientType? = nil) {
            self.userPoolClient = userPoolClient
        }

        public init(dictionary: [String: Any]) throws {
            if let userPoolClient = dictionary["UserPoolClient"] as? [String: Any] { self.userPoolClient = try CognitoIdp.UserPoolClientType(dictionary: userPoolClient) } else { self.userPoolClient = nil }
        }
    }

    public struct DescribeUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public enum UserImportJobStatusType: String, CustomStringConvertible {
        case created = "Created"
        case pending = "Pending"
        case inprogress = "InProgress"
        case stopping = "Stopping"
        case expired = "Expired"
        case stopped = "Stopped"
        case failed = "Failed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct DeleteUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The access token from a request to delete a user.
        public let accessToken: String?

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct GlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The access token.
        public let accessToken: String?

        public init(accessToken: String? = nil) {
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct CreateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client name for the user pool client you would like to create.
        public let clientName: String
        /// The user pool ID for the user pool where you want to create a user pool client.
        public let userPoolId: String
        /// The write attributes.
        public let writeAttributes: [String]?
        /// The validity of the refresh token, in days.
        public let refreshTokenValidity: Int32?
        /// The read attributes.
        public let readAttributes: [String]?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// Boolean to specify whether you want to generate a secret for the user pool client being created.
        public let generateSecret: Bool?

        public init(clientName: String, userPoolId: String, writeAttributes: [String]? = nil, refreshTokenValidity: Int32? = nil, readAttributes: [String]? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, generateSecret: Bool? = nil) {
            self.clientName = clientName
            self.userPoolId = userPoolId
            self.writeAttributes = writeAttributes
            self.refreshTokenValidity = refreshTokenValidity
            self.readAttributes = readAttributes
            self.explicitAuthFlows = explicitAuthFlows
            self.generateSecret = generateSecret
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientName = dictionary["ClientName"] as? String else { throw InitializableError.missingRequiredParam("ClientName") }
            self.clientName = clientName
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            self.writeAttributes = dictionary["WriteAttributes"] as? [String]
            self.refreshTokenValidity = dictionary["RefreshTokenValidity"] as? Int32
            self.readAttributes = dictionary["ReadAttributes"] as? [String]
            if let explicitAuthFlows = dictionary["ExplicitAuthFlows"] as? [String] { self.explicitAuthFlows = explicitAuthFlows.flatMap({ ExplicitAuthFlowsType(rawValue: $0)}) } else { self.explicitAuthFlows = nil }
            self.generateSecret = dictionary["GenerateSecret"] as? Bool
        }
    }

    public struct AttributeType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct VerifyUserAttributeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum AliasAttributeType: String, CustomStringConvertible {
        case phone_number = "phone_number"
        case email = "email"
        case preferred_username = "preferred_username"
        public var description: String { return self.rawValue }
    }

    public struct UserPoolClientType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client name from the user pool request of the client type.
        public let clientName: String?
        /// The validity of the refresh token, in days.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes.
        public let writeAttributes: [String]?
        /// The Read-only attributes.
        public let readAttributes: [String]?
        /// The ID of the client associated with the user pool.
        public let clientId: String?
        /// The creation date from the user pool request of the client type.
        public let creationDate: Date?
        /// The last modified date from the user pool request of the client type.
        public let lastModifiedDate: Date?
        /// The explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// The client secret from the user pool request of the client type.
        public let clientSecret: String?
        /// The user pool ID for the user pool client.
        public let userPoolId: String?

        public init(clientName: String? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, clientId: String? = nil, creationDate: Date? = nil, lastModifiedDate: Date? = nil, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, clientSecret: String? = nil, userPoolId: String? = nil) {
            self.clientName = clientName
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.clientId = clientId
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.explicitAuthFlows = explicitAuthFlows
            self.clientSecret = clientSecret
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.clientName = dictionary["ClientName"] as? String
            self.refreshTokenValidity = dictionary["RefreshTokenValidity"] as? Int32
            self.writeAttributes = dictionary["WriteAttributes"] as? [String]
            self.readAttributes = dictionary["ReadAttributes"] as? [String]
            self.clientId = dictionary["ClientId"] as? String
            self.creationDate = dictionary["CreationDate"] as? Date
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            if let explicitAuthFlows = dictionary["ExplicitAuthFlows"] as? [String] { self.explicitAuthFlows = explicitAuthFlows.flatMap({ ExplicitAuthFlowsType(rawValue: $0)}) } else { self.explicitAuthFlows = nil }
            self.clientSecret = dictionary["ClientSecret"] as? String
            self.userPoolId = dictionary["UserPoolId"] as? String
        }
    }

    public struct CreateUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job name for the user import job.
        public let jobName: String
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job.
        public let cloudWatchLogsRoleArn: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobName: String, cloudWatchLogsRoleArn: String, userPoolId: String) {
            self.jobName = jobName
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobName = dictionary["JobName"] as? String else { throw InitializableError.missingRequiredParam("JobName") }
            self.jobName = jobName
            guard let cloudWatchLogsRoleArn = dictionary["CloudWatchLogsRoleArn"] as? String else { throw InitializableError.missingRequiredParam("CloudWatchLogsRoleArn") }
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct SchemaAttributeType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the constraints for an attribute of the number type.
        public let numberAttributeConstraints: NumberAttributeConstraintsType?
        /// Specifies whether the attribute type is developer only.
        public let developerOnlyAttribute: Bool?
        /// A schema attribute of the name type.
        public let name: String?
        /// The attribute data type.
        public let attributeDataType: AttributeDataType?
        /// Specifies the constraints for an attribute of the string type.
        public let stringAttributeConstraints: StringAttributeConstraintsType?
        /// Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
        public let required: Bool?
        /// Specifies whether the attribute can be changed once it has been created.
        public let mutable: Bool?

        public init(numberAttributeConstraints: NumberAttributeConstraintsType? = nil, developerOnlyAttribute: Bool? = nil, name: String? = nil, attributeDataType: AttributeDataType? = nil, stringAttributeConstraints: StringAttributeConstraintsType? = nil, required: Bool? = nil, mutable: Bool? = nil) {
            self.numberAttributeConstraints = numberAttributeConstraints
            self.developerOnlyAttribute = developerOnlyAttribute
            self.name = name
            self.attributeDataType = attributeDataType
            self.stringAttributeConstraints = stringAttributeConstraints
            self.required = required
            self.mutable = mutable
        }

        public init(dictionary: [String: Any]) throws {
            if let numberAttributeConstraints = dictionary["NumberAttributeConstraints"] as? [String: Any] { self.numberAttributeConstraints = try CognitoIdp.NumberAttributeConstraintsType(dictionary: numberAttributeConstraints) } else { self.numberAttributeConstraints = nil }
            self.developerOnlyAttribute = dictionary["DeveloperOnlyAttribute"] as? Bool
            self.name = dictionary["Name"] as? String
            if let attributeDataType = dictionary["AttributeDataType"] as? String { self.attributeDataType = AttributeDataType(rawValue: attributeDataType) } else { self.attributeDataType = nil }
            if let stringAttributeConstraints = dictionary["StringAttributeConstraints"] as? [String: Any] { self.stringAttributeConstraints = try CognitoIdp.StringAttributeConstraintsType(dictionary: stringAttributeConstraints) } else { self.stringAttributeConstraints = nil }
            self.required = dictionary["Required"] as? Bool
            self.mutable = dictionary["Mutable"] as? Bool
        }
    }

    public struct ConfirmForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to retrieve a forgotten password.
        public let confirmationCode: String
        /// The password sent by sent by a user's request to retrieve a forgotten password.
        public let password: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user for whom you want to enter a code to retrieve a forgotten password.
        public let username: String

        public init(clientId: String, confirmationCode: String, password: String, secretHash: String? = nil, username: String) {
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.password = password
            self.secretHash = secretHash
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let confirmationCode = dictionary["ConfirmationCode"] as? String else { throw InitializableError.missingRequiredParam("ConfirmationCode") }
            self.confirmationCode = confirmationCode
            guard let password = dictionary["Password"] as? String else { throw InitializableError.missingRequiredParam("Password") }
            self.password = password
            self.secretHash = dictionary["SecretHash"] as? String
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct ConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an AliasExistsException error.
        public let forceAliasCreation: Bool?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The confirmation code sent by a user's request to confirm registration.
        public let confirmationCode: String
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The user name of the user whose registration you wish to confirm.
        public let username: String

        public init(forceAliasCreation: Bool? = nil, clientId: String, confirmationCode: String, secretHash: String? = nil, username: String) {
            self.forceAliasCreation = forceAliasCreation
            self.clientId = clientId
            self.confirmationCode = confirmationCode
            self.secretHash = secretHash
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            self.forceAliasCreation = dictionary["ForceAliasCreation"] as? Bool
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let confirmationCode = dictionary["ConfirmationCode"] as? String else { throw InitializableError.missingRequiredParam("ConfirmationCode") }
            self.confirmationCode = confirmationCode
            self.secretHash = dictionary["SecretHash"] as? String
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct GroupType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool.
        public let userPoolId: String?
        /// The name of the group.
        public let groupName: String?
        /// The date the group was last modified.
        public let lastModifiedDate: Date?
        /// The date the group was created.
        public let creationDate: Date?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Groups with higher Precedence values take precedence over groups with lower Precedence values or with null Precedence values. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The role ARN for the group.
        public let roleArn: String?
        /// A string containing the description of the group.
        public let description: String?

        public init(userPoolId: String? = nil, groupName: String? = nil, lastModifiedDate: Date? = nil, creationDate: Date? = nil, precedence: Int32? = nil, roleArn: String? = nil, description: String? = nil) {
            self.userPoolId = userPoolId
            self.groupName = groupName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.precedence = precedence
            self.roleArn = roleArn
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.userPoolId = dictionary["UserPoolId"] as? String
            self.groupName = dictionary["GroupName"] as? String
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.creationDate = dictionary["CreationDate"] as? Date
            self.precedence = dictionary["Precedence"] as? Int32
            self.roleArn = dictionary["RoleArn"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public enum AuthFlowType: String, CustomStringConvertible {
        case user_srp_auth = "USER_SRP_AUTH"
        case refresh_token_auth = "REFRESH_TOKEN_AUTH"
        case refresh_token = "REFRESH_TOKEN"
        case custom_auth = "CUSTOM_AUTH"
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        public var description: String { return self.rawValue }
    }

    public struct StopUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public init(dictionary: [String: Any]) throws {
            if let userImportJob = dictionary["UserImportJob"] as? [String: Any] { self.userImportJob = try CognitoIdp.UserImportJobType(dictionary: userImportJob) } else { self.userImportJob = nil }
        }
    }

    public struct AdminEnableUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to enable the user.
        public let userPoolId: String
        /// The user name of the user you wish to ebable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct ForgotPasswordRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user name of the user for whom you want to enter a code to reset a forgotten password.
        public let username: String

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            self.secretHash = dictionary["SecretHash"] as? String
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct AdminListDevicesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user name.
        public let username: String
        /// The pagination token.
        public let paginationToken: String?
        /// The limit of the devices request.
        public let limit: Int32?
        /// The user pool ID.
        public let userPoolId: String

        public init(username: String, paginationToken: String? = nil, limit: Int32? = nil, userPoolId: String) {
            self.username = username
            self.paginationToken = paginationToken
            self.limit = limit
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            self.paginationToken = dictionary["PaginationToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public enum UserStatusType: String, CustomStringConvertible {
        case unconfirmed = "UNCONFIRMED"
        case confirmed = "CONFIRMED"
        case archived = "ARCHIVED"
        case compromised = "COMPROMISED"
        case unknown = "UNKNOWN"
        case reset_required = "RESET_REQUIRED"
        case force_change_password = "FORCE_CHANGE_PASSWORD"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetUserAttributeVerificationCodeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attribute name returned by the server response to get the user attribute verification code.
        public let attributeName: String
        /// The access token returned by the server response to get the user attribute verification code.
        public let accessToken: String?

        public init(attributeName: String, accessToken: String? = nil) {
            self.attributeName = attributeName
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let attributeName = dictionary["AttributeName"] as? String else { throw InitializableError.missingRequiredParam("AttributeName") }
            self.attributeName = attributeName
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct AdminInitiateAuthResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the challenge.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters.
        public let challengeParameters: [String: String]?
        /// The result of the authentication response.
        public let authenticationResult: AuthenticationResultType?
        /// The session.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        public init(dictionary: [String: Any]) throws {
            if let challengeName = dictionary["ChallengeName"] as? String { self.challengeName = ChallengeNameType(rawValue: challengeName) } else { self.challengeName = nil }
            if let challengeParameters = dictionary["ChallengeParameters"] as? [String: String] {
                self.challengeParameters = challengeParameters
            } else { 
                self.challengeParameters = nil
            }
            if let authenticationResult = dictionary["AuthenticationResult"] as? [String: Any] { self.authenticationResult = try CognitoIdp.AuthenticationResultType(dictionary: authenticationResult) } else { self.authenticationResult = nil }
            self.session = dictionary["Session"] as? String
        }
    }

    public struct AdminDeleteUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to delete the user.
        public let userPoolId: String
        /// The user name of the user you wish to delete.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct ListUserImportJobsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list.
        public let paginationToken: String?
        /// The maximum number of import jobs you want the request to return.
        public let maxResults: Int32

        public init(userPoolId: String, paginationToken: String? = nil, maxResults: Int32) {
            self.userPoolId = userPoolId
            self.paginationToken = paginationToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            self.paginationToken = dictionary["PaginationToken"] as? String
            guard let maxResults = dictionary["MaxResults"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxResults") }
            self.maxResults = maxResults
        }
    }

    public struct AdminResetUserPasswordRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to reset the user's password.
        public let userPoolId: String
        /// The user name of the user whose password you wish to reset.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct ChangePasswordRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The old password in the change password request.
        public let previousPassword: String
        /// The new password in the change password request.
        public let proposedPassword: String
        /// The access token in the change password request.
        public let accessToken: String?

        public init(previousPassword: String, proposedPassword: String, accessToken: String? = nil) {
            self.previousPassword = previousPassword
            self.proposedPassword = proposedPassword
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let previousPassword = dictionary["PreviousPassword"] as? String else { throw InitializableError.missingRequiredParam("PreviousPassword") }
            self.previousPassword = previousPassword
            guard let proposedPassword = dictionary["ProposedPassword"] as? String else { throw InitializableError.missingRequiredParam("ProposedPassword") }
            self.proposedPassword = proposedPassword
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct UserPoolDescriptionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The last modified date in a user pool description.
        public let lastModifiedDate: Date?
        /// The creation date in a user pool description.
        public let creationDate: Date?
        /// The user pool status in a user pool description.
        public let status: StatusType?
        /// The AWS Lambda configuration information in a user pool description.
        public let lambdaConfig: LambdaConfigType?
        /// The name in a user pool description.
        public let name: String?
        /// The ID in a user pool description.
        public let id: String?

        public init(lastModifiedDate: Date? = nil, creationDate: Date? = nil, status: StatusType? = nil, lambdaConfig: LambdaConfigType? = nil, name: String? = nil, id: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.status = status
            self.lambdaConfig = lambdaConfig
            self.name = name
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.creationDate = dictionary["CreationDate"] as? Date
            if let status = dictionary["Status"] as? String { self.status = StatusType(rawValue: status) } else { self.status = nil }
            if let lambdaConfig = dictionary["LambdaConfig"] as? [String: Any] { self.lambdaConfig = try CognitoIdp.LambdaConfigType(dictionary: lambdaConfig) } else { self.lambdaConfig = nil }
            self.name = dictionary["Name"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DeviceConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If true, a device is only remembered on user prompt.
        public let deviceOnlyRememberedOnUserPrompt: Bool?
        /// Indicates whether a challenge is required on a new device. Only applicable to a new device.
        public let challengeRequiredOnNewDevice: Bool?

        public init(deviceOnlyRememberedOnUserPrompt: Bool? = nil, challengeRequiredOnNewDevice: Bool? = nil) {
            self.deviceOnlyRememberedOnUserPrompt = deviceOnlyRememberedOnUserPrompt
            self.challengeRequiredOnNewDevice = challengeRequiredOnNewDevice
        }

        public init(dictionary: [String: Any]) throws {
            self.deviceOnlyRememberedOnUserPrompt = dictionary["DeviceOnlyRememberedOnUserPrompt"] as? Bool
            self.challengeRequiredOnNewDevice = dictionary["ChallengeRequiredOnNewDevice"] as? Bool
        }
    }

    public struct ListUserPoolsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pools from the response to list users.
        public let userPools: [UserPoolDescriptionType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(userPools: [UserPoolDescriptionType]? = nil, nextToken: String? = nil) {
            self.userPools = userPools
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let userPools = dictionary["UserPools"] as? [[String: Any]] {
                self.userPools = try userPools.map({ try UserPoolDescriptionType(dictionary: $0) })
            } else { 
                self.userPools = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct AdminGetUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        /// Indicates that the status is enabled.
        public let enabled: Bool?
        /// The user name of the user about whom you are receiving information.
        public let username: String
        /// The date the user was created.
        public let userCreateDate: Date?
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The date the user was last modified.
        public let userLastModifiedDate: Date?
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]?

        public init(userStatus: UserStatusType? = nil, enabled: Bool? = nil, username: String, userCreateDate: Date? = nil, mFAOptions: [MFAOptionType]? = nil, userLastModifiedDate: Date? = nil, userAttributes: [AttributeType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.mFAOptions = mFAOptions
            self.userLastModifiedDate = userLastModifiedDate
            self.userAttributes = userAttributes
        }

        public init(dictionary: [String: Any]) throws {
            if let userStatus = dictionary["UserStatus"] as? String { self.userStatus = UserStatusType(rawValue: userStatus) } else { self.userStatus = nil }
            self.enabled = dictionary["Enabled"] as? Bool
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            self.userCreateDate = dictionary["UserCreateDate"] as? Date
            if let mFAOptions = dictionary["MFAOptions"] as? [[String: Any]] {
                self.mFAOptions = try mFAOptions.map({ try MFAOptionType(dictionary: $0) })
            } else { 
                self.mFAOptions = nil
            }
            self.userLastModifiedDate = dictionary["UserLastModifiedDate"] as? Date
            if let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] {
                self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.userAttributes = nil
            }
        }
    }

    public struct ListUsersInGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the group.
        public let groupName: String
        /// The limit of the request to list users.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.groupName = groupName
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A string containing the description of the group.
        public let description: String?
        /// A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the cognito:roles and cognito:preferred_role claims in the user's tokens. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim is not set in users' tokens. The default Precedence value is null.
        public let precedence: Int32?
        /// The name of the group. Must be unique.
        public let groupName: String
        /// The role ARN for the group.
        public let roleArn: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(description: String? = nil, precedence: Int32? = nil, groupName: String, roleArn: String? = nil, userPoolId: String) {
            self.description = description
            self.precedence = precedence
            self.groupName = groupName
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.precedence = dictionary["Precedence"] as? Int32
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            self.roleArn = dictionary["RoleArn"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct MessageTemplateType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The message template for SMS messages.
        public let sMSMessage: String?
        /// The message template for email messages.
        public let emailMessage: String?
        /// The subject line for email messages.
        public let emailSubject: String?

        public init(sMSMessage: String? = nil, emailMessage: String? = nil, emailSubject: String? = nil) {
            self.sMSMessage = sMSMessage
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }

        public init(dictionary: [String: Any]) throws {
            self.sMSMessage = dictionary["SMSMessage"] as? String
            self.emailMessage = dictionary["EmailMessage"] as? String
            self.emailSubject = dictionary["EmailSubject"] as? String
        }
    }

    public struct ConfirmDeviceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the user confirmation is necessary to confirm the device response.
        public let userConfirmationNecessary: Bool?

        public init(userConfirmationNecessary: Bool? = nil) {
            self.userConfirmationNecessary = userConfirmationNecessary
        }

        public init(dictionary: [String: Any]) throws {
            self.userConfirmationNecessary = dictionary["UserConfirmationNecessary"] as? Bool
        }
    }

    public struct StartUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public init(dictionary: [String: Any]) throws {
            if let userImportJob = dictionary["UserImportJob"] as? [String: Any] { self.userImportJob = try CognitoIdp.UserImportJobType(dictionary: userImportJob) } else { self.userImportJob = nil }
        }
    }

    public struct AdminDisableUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to disable the user.
        public let userPoolId: String
        /// The user name of the user you wish to disable.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct UpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]
        /// The access token for the request to update user attributes.
        public let accessToken: String?

        public init(userAttributes: [AttributeType], accessToken: String? = nil) {
            self.userAttributes = userAttributes
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("UserAttributes") }
            self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct MFAOptionType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attribute name of the MFA option type.
        public let attributeName: String?
        /// The delivery medium (email message or SMS message) to send the MFA code.
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.deliveryMedium = deliveryMedium
        }

        public init(dictionary: [String: Any]) throws {
            self.attributeName = dictionary["AttributeName"] as? String
            if let deliveryMedium = dictionary["DeliveryMedium"] as? String { self.deliveryMedium = DeliveryMediumType(rawValue: deliveryMedium) } else { self.deliveryMedium = nil }
        }
    }

    public struct ConfirmForgotPasswordResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeUserPoolRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct GetUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]?
        /// The user name of the user you wish to retrieve from the get user request.
        public let username: String

        public init(userAttributes: [AttributeType], mFAOptions: [MFAOptionType]? = nil, username: String) {
            self.userAttributes = userAttributes
            self.mFAOptions = mFAOptions
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("UserAttributes") }
            self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            if let mFAOptions = dictionary["MFAOptions"] as? [[String: Any]] {
                self.mFAOptions = try mFAOptions.map({ try MFAOptionType(dictionary: $0) })
            } else { 
                self.mFAOptions = nil
            }
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct AdminSetUserSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum DeviceRememberedStatusType: String, CustomStringConvertible {
        case remembered = "remembered"
        case not_remembered = "not_remembered"
        public var description: String { return self.rawValue }
    }

    public struct AdminRespondToAuthChallengeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the challenge.
        public let challengeName: ChallengeNameType?
        /// The challenge parameters.
        public let challengeParameters: [String: String]?
        /// The result returned by the server in response to the authentication request.
        public let authenticationResult: AuthenticationResultType?
        /// The session.
        public let session: String?

        public init(challengeName: ChallengeNameType? = nil, challengeParameters: [String: String]? = nil, authenticationResult: AuthenticationResultType? = nil, session: String? = nil) {
            self.challengeName = challengeName
            self.challengeParameters = challengeParameters
            self.authenticationResult = authenticationResult
            self.session = session
        }

        public init(dictionary: [String: Any]) throws {
            if let challengeName = dictionary["ChallengeName"] as? String { self.challengeName = ChallengeNameType(rawValue: challengeName) } else { self.challengeName = nil }
            if let challengeParameters = dictionary["ChallengeParameters"] as? [String: String] {
                self.challengeParameters = challengeParameters
            } else { 
                self.challengeParameters = nil
            }
            if let authenticationResult = dictionary["AuthenticationResult"] as? [String: Any] { self.authenticationResult = try CognitoIdp.AuthenticationResultType(dictionary: authenticationResult) } else { self.authenticationResult = nil }
            self.session = dictionary["Session"] as? String
        }
    }

    public struct UpdateUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client name from the update user pool client request.
        public let clientName: String?
        /// The validity of the refresh token, in days.
        public let refreshTokenValidity: Int32?
        /// The writeable attributes of the user pool.
        public let writeAttributes: [String]?
        /// The read-only attributes of the user pool.
        public let readAttributes: [String]?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// Explicit authentication flows.
        public let explicitAuthFlows: [ExplicitAuthFlowsType]?
        /// The user pool ID for the user pool where you want to update the user pool client.
        public let userPoolId: String

        public init(clientName: String? = nil, refreshTokenValidity: Int32? = nil, writeAttributes: [String]? = nil, readAttributes: [String]? = nil, clientId: String, explicitAuthFlows: [ExplicitAuthFlowsType]? = nil, userPoolId: String) {
            self.clientName = clientName
            self.refreshTokenValidity = refreshTokenValidity
            self.writeAttributes = writeAttributes
            self.readAttributes = readAttributes
            self.clientId = clientId
            self.explicitAuthFlows = explicitAuthFlows
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.clientName = dictionary["ClientName"] as? String
            self.refreshTokenValidity = dictionary["RefreshTokenValidity"] as? Int32
            self.writeAttributes = dictionary["WriteAttributes"] as? [String]
            self.readAttributes = dictionary["ReadAttributes"] as? [String]
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            if let explicitAuthFlows = dictionary["ExplicitAuthFlows"] as? [String] { self.explicitAuthFlows = explicitAuthFlows.flatMap({ ExplicitAuthFlowsType(rawValue: $0)}) } else { self.explicitAuthFlows = nil }
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct DeviceType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String?
        /// The last modified date of the device.
        public let deviceLastModifiedDate: Date?
        /// The device attributes.
        public let deviceAttributes: [AttributeType]?
        /// The creation date of the device.
        public let deviceCreateDate: Date?
        /// The date in which the device was last authenticated.
        public let deviceLastAuthenticatedDate: Date?

        public init(deviceKey: String? = nil, deviceLastModifiedDate: Date? = nil, deviceAttributes: [AttributeType]? = nil, deviceCreateDate: Date? = nil, deviceLastAuthenticatedDate: Date? = nil) {
            self.deviceKey = deviceKey
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.deviceAttributes = deviceAttributes
            self.deviceCreateDate = deviceCreateDate
            self.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate
        }

        public init(dictionary: [String: Any]) throws {
            self.deviceKey = dictionary["DeviceKey"] as? String
            self.deviceLastModifiedDate = dictionary["DeviceLastModifiedDate"] as? Date
            if let deviceAttributes = dictionary["DeviceAttributes"] as? [[String: Any]] {
                self.deviceAttributes = try deviceAttributes.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.deviceAttributes = nil
            }
            self.deviceCreateDate = dictionary["DeviceCreateDate"] as? Date
            self.deviceLastAuthenticatedDate = dictionary["DeviceLastAuthenticatedDate"] as? Date
        }
    }

    public struct AdminUpdateDeviceStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum MessageActionType: String, CustomStringConvertible {
        case resend = "RESEND"
        case suppress = "SUPPRESS"
        public var description: String { return self.rawValue }
    }

    public struct AdminUpdateUserAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user name of the user for whom you want to update user attributes.
        public let username: String
        /// An array of name-value pairs representing user attributes.
        public let userAttributes: [AttributeType]
        /// The user pool ID for the user pool where you want to update user attributes.
        public let userPoolId: String

        public init(username: String, userAttributes: [AttributeType], userPoolId: String) {
            self.username = username
            self.userAttributes = userAttributes
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            guard let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("UserAttributes") }
            self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct SmsConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The external ID.
        public let externalId: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
        public let snsCallerArn: String

        public init(externalId: String? = nil, snsCallerArn: String) {
            self.externalId = externalId
            self.snsCallerArn = snsCallerArn
        }

        public init(dictionary: [String: Any]) throws {
            self.externalId = dictionary["ExternalId"] as? String
            guard let snsCallerArn = dictionary["SnsCallerArn"] as? String else { throw InitializableError.missingRequiredParam("SnsCallerArn") }
            self.snsCallerArn = snsCallerArn
        }
    }

    public struct CodeDeliveryDetailsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the attribute in the code delivery details type.
        public let attributeName: String?
        /// The destination for the code delivery details.
        public let destination: String?
        /// The delivery medium (email message or phone number).
        public let deliveryMedium: DeliveryMediumType?

        public init(attributeName: String? = nil, destination: String? = nil, deliveryMedium: DeliveryMediumType? = nil) {
            self.attributeName = attributeName
            self.destination = destination
            self.deliveryMedium = deliveryMedium
        }

        public init(dictionary: [String: Any]) throws {
            self.attributeName = dictionary["AttributeName"] as? String
            self.destination = dictionary["Destination"] as? String
            if let deliveryMedium = dictionary["DeliveryMedium"] as? String { self.deliveryMedium = DeliveryMediumType(rawValue: deliveryMedium) } else { self.deliveryMedium = nil }
        }
    }

    public struct GetCSVHeaderResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The header information for the .csv file for the user import job.
        public let cSVHeader: [String]?
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String?

        public init(cSVHeader: [String]? = nil, userPoolId: String? = nil) {
            self.cSVHeader = cSVHeader
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.cSVHeader = dictionary["CSVHeader"] as? [String]
            self.userPoolId = dictionary["UserPoolId"] as? String
        }
    }

    public struct AdminEnableUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AdminConfirmSignUpRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for which you want to confirm user registration.
        public let userPoolId: String
        /// The user name for which you want to confirm user registration.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct ForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The access token for the forgotten device request.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct ListUsersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The users returned in the request to list users.
        public let users: [UserType]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?

        public init(users: [UserType]? = nil, paginationToken: String? = nil) {
            self.users = users
            self.paginationToken = paginationToken
        }

        public init(dictionary: [String: Any]) throws {
            if let users = dictionary["Users"] as? [[String: Any]] {
                self.users = try users.map({ try UserType(dictionary: $0) })
            } else { 
                self.users = nil
            }
            self.paginationToken = dictionary["PaginationToken"] as? String
        }
    }

    public struct UserPoolType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The reason why the email configuration cannot send the messages to your users.
        public let emailConfigurationFailure: String?
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The subject of the email verification message.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// A number estimating the size of the user pool.
        public let estimatedNumberOfUsers: Int32?
        /// Specifies the attributes that are aliased in a user pool.
        public let aliasAttributes: [AliasAttributeType]?
        /// A container with the schema attributes of a user pool.
        public let schemaAttributes: [SchemaAttributeType]?
        /// The reason why the SMS configuration cannot send the message(s) to your users.
        public let smsConfigurationFailure: String?
        /// A container describing the AWS Lambda triggers associated with a user pool.
        public let lambdaConfig: LambdaConfigType?
        /// A container describing the policies associated with a user pool.
        public let policies: UserPoolPolicyType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The creation date of a user pool.
        public let creationDate: Date?
        /// The ID of the user pool.
        public let id: String?
        /// The status of a user pool.
        public let status: StatusType?
        /// The SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The contents of the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The name of the user pool.
        public let name: String?
        /// The email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// The last modified date of a user pool.
        public let lastModifiedDate: Date?
        /// Specifies the attributes that are auto-verified in a user pool.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// The device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(emailConfigurationFailure: String? = nil, userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, estimatedNumberOfUsers: Int32? = nil, aliasAttributes: [AliasAttributeType]? = nil, schemaAttributes: [SchemaAttributeType]? = nil, smsConfigurationFailure: String? = nil, lambdaConfig: LambdaConfigType? = nil, policies: UserPoolPolicyType? = nil, mfaConfiguration: UserPoolMfaType? = nil, creationDate: Date? = nil, id: String? = nil, status: StatusType? = nil, smsConfiguration: SmsConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, name: String? = nil, emailConfiguration: EmailConfigurationType? = nil, emailVerificationMessage: String? = nil, lastModifiedDate: Date? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.emailConfigurationFailure = emailConfigurationFailure
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.aliasAttributes = aliasAttributes
            self.schemaAttributes = schemaAttributes
            self.smsConfigurationFailure = smsConfigurationFailure
            self.lambdaConfig = lambdaConfig
            self.policies = policies
            self.mfaConfiguration = mfaConfiguration
            self.creationDate = creationDate
            self.id = id
            self.status = status
            self.smsConfiguration = smsConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.name = name
            self.emailConfiguration = emailConfiguration
            self.emailVerificationMessage = emailVerificationMessage
            self.lastModifiedDate = lastModifiedDate
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            self.emailConfigurationFailure = dictionary["EmailConfigurationFailure"] as? String
            if let userPoolTags = dictionary["UserPoolTags"] as? [String: String] {
                self.userPoolTags = userPoolTags
            } else { 
                self.userPoolTags = nil
            }
            self.emailVerificationSubject = dictionary["EmailVerificationSubject"] as? String
            if let adminCreateUserConfig = dictionary["AdminCreateUserConfig"] as? [String: Any] { self.adminCreateUserConfig = try CognitoIdp.AdminCreateUserConfigType(dictionary: adminCreateUserConfig) } else { self.adminCreateUserConfig = nil }
            self.estimatedNumberOfUsers = dictionary["EstimatedNumberOfUsers"] as? Int32
            if let aliasAttributes = dictionary["AliasAttributes"] as? [String] { self.aliasAttributes = aliasAttributes.flatMap({ AliasAttributeType(rawValue: $0)}) } else { self.aliasAttributes = nil }
            if let schemaAttributes = dictionary["SchemaAttributes"] as? [[String: Any]] {
                self.schemaAttributes = try schemaAttributes.map({ try SchemaAttributeType(dictionary: $0) })
            } else { 
                self.schemaAttributes = nil
            }
            self.smsConfigurationFailure = dictionary["SmsConfigurationFailure"] as? String
            if let lambdaConfig = dictionary["LambdaConfig"] as? [String: Any] { self.lambdaConfig = try CognitoIdp.LambdaConfigType(dictionary: lambdaConfig) } else { self.lambdaConfig = nil }
            if let policies = dictionary["Policies"] as? [String: Any] { self.policies = try CognitoIdp.UserPoolPolicyType(dictionary: policies) } else { self.policies = nil }
            if let mfaConfiguration = dictionary["MfaConfiguration"] as? String { self.mfaConfiguration = UserPoolMfaType(rawValue: mfaConfiguration) } else { self.mfaConfiguration = nil }
            self.creationDate = dictionary["CreationDate"] as? Date
            self.id = dictionary["Id"] as? String
            if let status = dictionary["Status"] as? String { self.status = StatusType(rawValue: status) } else { self.status = nil }
            if let smsConfiguration = dictionary["SmsConfiguration"] as? [String: Any] { self.smsConfiguration = try CognitoIdp.SmsConfigurationType(dictionary: smsConfiguration) } else { self.smsConfiguration = nil }
            self.smsVerificationMessage = dictionary["SmsVerificationMessage"] as? String
            self.smsAuthenticationMessage = dictionary["SmsAuthenticationMessage"] as? String
            self.name = dictionary["Name"] as? String
            if let emailConfiguration = dictionary["EmailConfiguration"] as? [String: Any] { self.emailConfiguration = try CognitoIdp.EmailConfigurationType(dictionary: emailConfiguration) } else { self.emailConfiguration = nil }
            self.emailVerificationMessage = dictionary["EmailVerificationMessage"] as? String
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            if let autoVerifiedAttributes = dictionary["AutoVerifiedAttributes"] as? [String] { self.autoVerifiedAttributes = autoVerifiedAttributes.flatMap({ VerifiedAttributeType(rawValue: $0)}) } else { self.autoVerifiedAttributes = nil }
            if let deviceConfiguration = dictionary["DeviceConfiguration"] as? [String: Any] { self.deviceConfiguration = try CognitoIdp.DeviceConfigurationType(dictionary: deviceConfiguration) } else { self.deviceConfiguration = nil }
        }
    }

    public struct GetDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The access token.
        public let accessToken: String?

        public init(deviceKey: String, accessToken: String? = nil) {
            self.deviceKey = deviceKey
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct ListDevicesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The pagination token for the list device response.
        public let paginationToken: String?
        /// The devices returned in the list devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        public init(dictionary: [String: Any]) throws {
            self.paginationToken = dictionary["PaginationToken"] as? String
            if let devices = dictionary["Devices"] as? [[String: Any]] {
                self.devices = try devices.map({ try DeviceType(dictionary: $0) })
            } else { 
                self.devices = nil
            }
        }
    }

    public struct CreateUserPoolResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A container for the user pool details.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        public init(dictionary: [String: Any]) throws {
            if let userPool = dictionary["UserPool"] as? [String: Any] { self.userPool = try CognitoIdp.UserPoolType(dictionary: userPool) } else { self.userPool = nil }
        }
    }

    public struct ResendConfirmationCodeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The code delivery details returned by the server in response to the request to resend the confirmation code.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let codeDeliveryDetails = dictionary["CodeDeliveryDetails"] as? [String: Any] { self.codeDeliveryDetails = try CognitoIdp.CodeDeliveryDetailsType(dictionary: codeDeliveryDetails) } else { self.codeDeliveryDetails = nil }
        }
    }

    public struct AdminConfirmSignUpResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateUserImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job object that represents the user import job.
        public let userImportJob: UserImportJobType?

        public init(userImportJob: UserImportJobType? = nil) {
            self.userImportJob = userImportJob
        }

        public init(dictionary: [String: Any]) throws {
            if let userImportJob = dictionary["UserImportJob"] as? [String: Any] { self.userImportJob = try CognitoIdp.UserImportJobType(dictionary: userImportJob) } else { self.userImportJob = nil }
        }
    }

    public struct RespondToAuthChallengeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the challenge.
        public let challengeName: ChallengeNameType
        /// The client ID.
        public let clientId: String
        /// The session.
        public let session: String?
        /// The responses to the authentication challenge.
        public let challengeResponses: [String: String]?

        public init(challengeName: ChallengeNameType, clientId: String, session: String? = nil, challengeResponses: [String: String]? = nil) {
            self.challengeName = challengeName
            self.clientId = clientId
            self.session = session
            self.challengeResponses = challengeResponses
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawChallengeName = dictionary["ChallengeName"] as? String, let challengeName = ChallengeNameType(rawValue: rawChallengeName) else { throw InitializableError.missingRequiredParam("ChallengeName") }
            self.challengeName = challengeName
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            self.session = dictionary["Session"] as? String
            if let challengeResponses = dictionary["ChallengeResponses"] as? [String: String] {
                self.challengeResponses = challengeResponses
            } else { 
                self.challengeResponses = nil
            }
        }
    }

    public struct UpdateUserPoolResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateUserPoolRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The cost allocation tags for the user pool. For more information, see Adding Cost Allocation Tags to Your User Pool 
        public let userPoolTags: [String: String]?
        /// The subject of the email verfication message.
        public let emailVerificationSubject: String?
        /// The configuration for AdminCreateUser requests.
        public let adminCreateUserConfig: AdminCreateUserConfigType?
        /// A container with the policies you wish to update in a user pool.
        public let policies: UserPoolPolicyType?
        /// The AWS Lambda configuration information from the request to update the user pool.
        public let lambdaConfig: LambdaConfigType?
        /// Can be one of the following values:    OFF - MFA tokens are not required and cannot be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.    OPTIONAL - Users have the option when registering to create an MFA token.  
        public let mfaConfiguration: UserPoolMfaType?
        /// The user pool ID for the user pool you want to update.
        public let userPoolId: String
        /// Email configuration.
        public let emailConfiguration: EmailConfigurationType?
        /// A container with information about the SMS verification message.
        public let smsVerificationMessage: String?
        /// The contents of the SMS authentication message.
        public let smsAuthenticationMessage: String?
        /// The contents of the email verification message.
        public let emailVerificationMessage: String?
        /// SMS configuration.
        public let smsConfiguration: SmsConfigurationType?
        /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
        public let autoVerifiedAttributes: [VerifiedAttributeType]?
        /// Device configuration.
        public let deviceConfiguration: DeviceConfigurationType?

        public init(userPoolTags: [String: String]? = nil, emailVerificationSubject: String? = nil, adminCreateUserConfig: AdminCreateUserConfigType? = nil, policies: UserPoolPolicyType? = nil, lambdaConfig: LambdaConfigType? = nil, mfaConfiguration: UserPoolMfaType? = nil, userPoolId: String, emailConfiguration: EmailConfigurationType? = nil, smsVerificationMessage: String? = nil, smsAuthenticationMessage: String? = nil, emailVerificationMessage: String? = nil, smsConfiguration: SmsConfigurationType? = nil, autoVerifiedAttributes: [VerifiedAttributeType]? = nil, deviceConfiguration: DeviceConfigurationType? = nil) {
            self.userPoolTags = userPoolTags
            self.emailVerificationSubject = emailVerificationSubject
            self.adminCreateUserConfig = adminCreateUserConfig
            self.policies = policies
            self.lambdaConfig = lambdaConfig
            self.mfaConfiguration = mfaConfiguration
            self.userPoolId = userPoolId
            self.emailConfiguration = emailConfiguration
            self.smsVerificationMessage = smsVerificationMessage
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.emailVerificationMessage = emailVerificationMessage
            self.smsConfiguration = smsConfiguration
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.deviceConfiguration = deviceConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let userPoolTags = dictionary["UserPoolTags"] as? [String: String] {
                self.userPoolTags = userPoolTags
            } else { 
                self.userPoolTags = nil
            }
            self.emailVerificationSubject = dictionary["EmailVerificationSubject"] as? String
            if let adminCreateUserConfig = dictionary["AdminCreateUserConfig"] as? [String: Any] { self.adminCreateUserConfig = try CognitoIdp.AdminCreateUserConfigType(dictionary: adminCreateUserConfig) } else { self.adminCreateUserConfig = nil }
            if let policies = dictionary["Policies"] as? [String: Any] { self.policies = try CognitoIdp.UserPoolPolicyType(dictionary: policies) } else { self.policies = nil }
            if let lambdaConfig = dictionary["LambdaConfig"] as? [String: Any] { self.lambdaConfig = try CognitoIdp.LambdaConfigType(dictionary: lambdaConfig) } else { self.lambdaConfig = nil }
            if let mfaConfiguration = dictionary["MfaConfiguration"] as? String { self.mfaConfiguration = UserPoolMfaType(rawValue: mfaConfiguration) } else { self.mfaConfiguration = nil }
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            if let emailConfiguration = dictionary["EmailConfiguration"] as? [String: Any] { self.emailConfiguration = try CognitoIdp.EmailConfigurationType(dictionary: emailConfiguration) } else { self.emailConfiguration = nil }
            self.smsVerificationMessage = dictionary["SmsVerificationMessage"] as? String
            self.smsAuthenticationMessage = dictionary["SmsAuthenticationMessage"] as? String
            self.emailVerificationMessage = dictionary["EmailVerificationMessage"] as? String
            if let smsConfiguration = dictionary["SmsConfiguration"] as? [String: Any] { self.smsConfiguration = try CognitoIdp.SmsConfigurationType(dictionary: smsConfiguration) } else { self.smsConfiguration = nil }
            if let autoVerifiedAttributes = dictionary["AutoVerifiedAttributes"] as? [String] { self.autoVerifiedAttributes = autoVerifiedAttributes.flatMap({ VerifiedAttributeType(rawValue: $0)}) } else { self.autoVerifiedAttributes = nil }
            if let deviceConfiguration = dictionary["DeviceConfiguration"] as? [String: Any] { self.deviceConfiguration = try CognitoIdp.DeviceConfigurationType(dictionary: deviceConfiguration) } else { self.deviceConfiguration = nil }
        }
    }

    public struct LambdaConfigType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A post-authentication AWS Lambda trigger.
        public let postAuthentication: String?
        /// A custom Message AWS Lambda trigger.
        public let customMessage: String?
        /// A pre-registration AWS Lambda trigger.
        public let preSignUp: String?
        /// Verifies the authentication challenge response.
        public let verifyAuthChallengeResponse: String?
        /// Defines the authentication challenge.
        public let defineAuthChallenge: String?
        /// Creates an authentication challenge.
        public let createAuthChallenge: String?
        /// A pre-authentication AWS Lambda trigger.
        public let preAuthentication: String?
        /// A post-confirmation AWS Lambda trigger.
        public let postConfirmation: String?

        public init(postAuthentication: String? = nil, customMessage: String? = nil, preSignUp: String? = nil, verifyAuthChallengeResponse: String? = nil, defineAuthChallenge: String? = nil, createAuthChallenge: String? = nil, preAuthentication: String? = nil, postConfirmation: String? = nil) {
            self.postAuthentication = postAuthentication
            self.customMessage = customMessage
            self.preSignUp = preSignUp
            self.verifyAuthChallengeResponse = verifyAuthChallengeResponse
            self.defineAuthChallenge = defineAuthChallenge
            self.createAuthChallenge = createAuthChallenge
            self.preAuthentication = preAuthentication
            self.postConfirmation = postConfirmation
        }

        public init(dictionary: [String: Any]) throws {
            self.postAuthentication = dictionary["PostAuthentication"] as? String
            self.customMessage = dictionary["CustomMessage"] as? String
            self.preSignUp = dictionary["PreSignUp"] as? String
            self.verifyAuthChallengeResponse = dictionary["VerifyAuthChallengeResponse"] as? String
            self.defineAuthChallenge = dictionary["DefineAuthChallenge"] as? String
            self.createAuthChallenge = dictionary["CreateAuthChallenge"] as? String
            self.preAuthentication = dictionary["PreAuthentication"] as? String
            self.postConfirmation = dictionary["PostConfirmation"] as? String
        }
    }

    public enum AttributeDataType: String, CustomStringConvertible {
        case string = "String"
        case number = "Number"
        case datetime = "DateTime"
        case boolean = "Boolean"
        public var description: String { return self.rawValue }
    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The limit of the request to list groups.
        public let limit: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(limit: Int32? = nil, nextToken: String? = nil, userPoolId: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct SetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The access token for the set user settings request.
        public let accessToken: String

        public init(mFAOptions: [MFAOptionType], accessToken: String) {
            self.mFAOptions = mFAOptions
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let mFAOptions = dictionary["MFAOptions"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("MFAOptions") }
            self.mFAOptions = try mFAOptions.map({ try MFAOptionType(dictionary: $0) })
            guard let accessToken = dictionary["AccessToken"] as? String else { throw InitializableError.missingRequiredParam("AccessToken") }
            self.accessToken = accessToken
        }
    }

    public struct AdminGetUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to get information about the user.
        public let userPoolId: String
        /// The user name of the user you wish to retrieve.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public enum StatusType: String, CustomStringConvertible {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public init(dictionary: [String: Any]) throws {
            if let group = dictionary["Group"] as? [String: Any] { self.group = try CognitoIdp.GroupType(dictionary: group) } else { self.group = nil }
        }
    }

    public struct AuthenticationResultType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The expiration period of the authentication result.
        public let expiresIn: Int32?
        /// The new device metadata from an authentication result.
        public let newDeviceMetadata: NewDeviceMetadataType?
        /// The ID token of the authentication result.
        public let idToken: String?
        /// The token type of the authentication result.
        public let tokenType: String?
        /// The refresh token of the authentication result.
        public let refreshToken: String?
        /// The access token of the authentication result.
        public let accessToken: String?

        public init(expiresIn: Int32? = nil, newDeviceMetadata: NewDeviceMetadataType? = nil, idToken: String? = nil, tokenType: String? = nil, refreshToken: String? = nil, accessToken: String? = nil) {
            self.expiresIn = expiresIn
            self.newDeviceMetadata = newDeviceMetadata
            self.idToken = idToken
            self.tokenType = tokenType
            self.refreshToken = refreshToken
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            self.expiresIn = dictionary["ExpiresIn"] as? Int32
            if let newDeviceMetadata = dictionary["NewDeviceMetadata"] as? [String: Any] { self.newDeviceMetadata = try CognitoIdp.NewDeviceMetadataType(dictionary: newDeviceMetadata) } else { self.newDeviceMetadata = nil }
            self.idToken = dictionary["IdToken"] as? String
            self.tokenType = dictionary["TokenType"] as? String
            self.refreshToken = dictionary["RefreshToken"] as? String
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct AdminCreateUserConfigType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
        public let allowAdminCreateUserOnly: Bool?
        /// The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter. The default value for this paameter is 7.
        public let unusedAccountValidityDays: Int32?
        /// The message template to be used for the welcome message to new users.
        public let inviteMessageTemplate: MessageTemplateType?

        public init(allowAdminCreateUserOnly: Bool? = nil, unusedAccountValidityDays: Int32? = nil, inviteMessageTemplate: MessageTemplateType? = nil) {
            self.allowAdminCreateUserOnly = allowAdminCreateUserOnly
            self.unusedAccountValidityDays = unusedAccountValidityDays
            self.inviteMessageTemplate = inviteMessageTemplate
        }

        public init(dictionary: [String: Any]) throws {
            self.allowAdminCreateUserOnly = dictionary["AllowAdminCreateUserOnly"] as? Bool
            self.unusedAccountValidityDays = dictionary["UnusedAccountValidityDays"] as? Int32
            if let inviteMessageTemplate = dictionary["InviteMessageTemplate"] as? [String: Any] { self.inviteMessageTemplate = try CognitoIdp.MessageTemplateType(dictionary: inviteMessageTemplate) } else { self.inviteMessageTemplate = nil }
        }
    }

    public struct StringAttributeConstraintsType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The minimum length of an attribute value of the string type.
        public let minLength: String?
        /// The maximum length of an attribute value of the string type.
        public let maxLength: String?

        public init(minLength: String? = nil, maxLength: String? = nil) {
            self.minLength = minLength
            self.maxLength = maxLength
        }

        public init(dictionary: [String: Any]) throws {
            self.minLength = dictionary["MinLength"] as? String
            self.maxLength = dictionary["MaxLength"] as? String
        }
    }

    public struct UserPoolPolicyType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A container with information about the user pool password policy.
        public let passwordPolicy: PasswordPolicyType?

        public init(passwordPolicy: PasswordPolicyType? = nil) {
            self.passwordPolicy = passwordPolicy
        }

        public init(dictionary: [String: Any]) throws {
            if let passwordPolicy = dictionary["PasswordPolicy"] as? [String: Any] { self.passwordPolicy = try CognitoIdp.PasswordPolicyType(dictionary: passwordPolicy) } else { self.passwordPolicy = nil }
        }
    }

    public struct ForgotPasswordResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The code delivery details returned by the server in response to the request to reset a password.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let codeDeliveryDetails = dictionary["CodeDeliveryDetails"] as? [String: Any] { self.codeDeliveryDetails = try CognitoIdp.CodeDeliveryDetailsType(dictionary: codeDeliveryDetails) } else { self.codeDeliveryDetails = nil }
        }
    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public init(dictionary: [String: Any]) throws {
            if let group = dictionary["Group"] as? [String: Any] { self.group = try CognitoIdp.GroupType(dictionary: group) } else { self.group = nil }
        }
    }

    public struct GlobalSignOutResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ExplicitAuthFlowsType: String, CustomStringConvertible {
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        case custom_auth_flow_only = "CUSTOM_AUTH_FLOW_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum UserPoolMfaType: String, CustomStringConvertible {
        case off = "OFF"
        case on = "ON"
        case optional = "OPTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct NewDeviceMetadataType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device group key.
        public let deviceGroupKey: String?
        /// The device key.
        public let deviceKey: String?

        public init(deviceGroupKey: String? = nil, deviceKey: String? = nil) {
            self.deviceGroupKey = deviceGroupKey
            self.deviceKey = deviceKey
        }

        public init(dictionary: [String: Any]) throws {
            self.deviceGroupKey = dictionary["DeviceGroupKey"] as? String
            self.deviceKey = dictionary["DeviceKey"] as? String
        }
    }

    public struct DescribeUserPoolClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user pool ID for the user pool you want to describe.
        public let userPoolId: String

        public init(clientId: String, userPoolId: String) {
            self.clientId = clientId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct SignUpResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The code delivery details returned by the server response to the user registration request.
        public let codeDeliveryDetails: CodeDeliveryDetailsType?
        /// A response from the server indicating that a user registration has been confirmed.
        public let userConfirmed: Bool?

        public init(codeDeliveryDetails: CodeDeliveryDetailsType? = nil, userConfirmed: Bool? = nil) {
            self.codeDeliveryDetails = codeDeliveryDetails
            self.userConfirmed = userConfirmed
        }

        public init(dictionary: [String: Any]) throws {
            if let codeDeliveryDetails = dictionary["CodeDeliveryDetails"] as? [String: Any] { self.codeDeliveryDetails = try CognitoIdp.CodeDeliveryDetailsType(dictionary: codeDeliveryDetails) } else { self.codeDeliveryDetails = nil }
            self.userConfirmed = dictionary["UserConfirmed"] as? Bool
        }
    }

    public struct UpdateGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The group object for the group.
        public let group: GroupType?

        public init(group: GroupType? = nil) {
            self.group = group
        }

        public init(dictionary: [String: Any]) throws {
            if let group = dictionary["Group"] as? [String: Any] { self.group = try CognitoIdp.GroupType(dictionary: group) } else { self.group = nil }
        }
    }

    public enum DeliveryMediumType: String, CustomStringConvertible {
        case sms = "SMS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct AdminResetUserPasswordResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ChallengeNameType: String, CustomStringConvertible {
        case sms_mfa = "SMS_MFA"
        case password_verifier = "PASSWORD_VERIFIER"
        case custom_challenge = "CUSTOM_CHALLENGE"
        case device_srp_auth = "DEVICE_SRP_AUTH"
        case device_password_verifier = "DEVICE_PASSWORD_VERIFIER"
        case admin_no_srp_auth = "ADMIN_NO_SRP_AUTH"
        case new_password_required = "NEW_PASSWORD_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct AdminSetUserSettingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to set the user's settings, such as MFA options.
        public let userPoolId: String
        /// Specifies the options for MFA (e.g., email or phone number).
        public let mFAOptions: [MFAOptionType]
        /// The user name of the user for whom you wish to set user settings.
        public let username: String

        public init(userPoolId: String, mFAOptions: [MFAOptionType], username: String) {
            self.userPoolId = userPoolId
            self.mFAOptions = mFAOptions
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let mFAOptions = dictionary["MFAOptions"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("MFAOptions") }
            self.mFAOptions = try mFAOptions.map({ try MFAOptionType(dictionary: $0) })
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct AdminDisableUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AdminDeleteUserAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct StopUserImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The job ID for the user import job.
        public let jobId: String
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String

        public init(jobId: String, userPoolId: String) {
            self.jobId = jobId
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct GetCSVHeaderRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool that the users are to be imported into.
        public let userPoolId: String

        public init(userPoolId: String) {
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct ResendConfirmationCodeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
        public let secretHash: String?
        /// The ID of the client associated with the user pool.
        public let clientId: String
        /// The user name of the user to whom you wish to resend a confirmation code.
        public let username: String

        public init(secretHash: String? = nil, clientId: String, username: String) {
            self.secretHash = secretHash
            self.clientId = clientId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            self.secretHash = dictionary["SecretHash"] as? String
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct DescribeUserPoolResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The container of metadata returned by the server to describe the pool.
        public let userPool: UserPoolType?

        public init(userPool: UserPoolType? = nil) {
            self.userPool = userPool
        }

        public init(dictionary: [String: Any]) throws {
            if let userPool = dictionary["UserPool"] as? [String: Any] { self.userPool = try CognitoIdp.UserPoolType(dictionary: userPool) } else { self.userPool = nil }
        }
    }

    public struct AddCustomAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of custom attributes, such as Mutable and Name.
        public let customAttributes: [SchemaAttributeType]
        /// The user pool ID for the user pool where you want to add custom attributes.
        public let userPoolId: String

        public init(customAttributes: [SchemaAttributeType], userPoolId: String) {
            self.customAttributes = customAttributes
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let customAttributes = dictionary["CustomAttributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("CustomAttributes") }
            self.customAttributes = try customAttributes.map({ try SchemaAttributeType(dictionary: $0) })
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct UpdateUserAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The code delivery details list from the server for the request to update user attributes.
        public let codeDeliveryDetailsList: [CodeDeliveryDetailsType]?

        public init(codeDeliveryDetailsList: [CodeDeliveryDetailsType]? = nil) {
            self.codeDeliveryDetailsList = codeDeliveryDetailsList
        }

        public init(dictionary: [String: Any]) throws {
            if let codeDeliveryDetailsList = dictionary["CodeDeliveryDetailsList"] as? [[String: Any]] {
                self.codeDeliveryDetailsList = try codeDeliveryDetailsList.map({ try CodeDeliveryDetailsType(dictionary: $0) })
            } else { 
                self.codeDeliveryDetailsList = nil
            }
        }
    }

    public struct UserImportJobType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date when the user imoprt job was completed.
        public let completionDate: Date?
        /// The message returned when the user import job is completed.
        public let completionMessage: String?
        /// The number of users that could not be imported.
        public let failedUsers: Int64?
        /// The number of users that were skipped.
        public let skippedUsers: Int64?
        /// The date when the user import job was created.
        public let creationDate: Date?
        /// The job ID for the user import job.
        public let jobId: String?
        /// The user pool ID for the user pool that the users are being imported into.
        public let userPoolId: String?
        /// The status of the user import job. One of the following:   Created - The job was created but not started.   Pending - A transition state. You have started the job, but it has not begun importing users yet.   InProgress - The job has started, and users are being imported.   Stopping - You have stopped the job, but the job has not stopped importing users yet.   Stopped - You have stopped the job, and the job has stopped importing users.   Succeeded - The job has completed successfully.   Failed - The job has stopped due to an error.   Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.  
        public let status: UserImportJobStatusType?
        /// The pre-signed URL to be used to upload the .csv file.
        public let preSignedUrl: String?
        /// The date when the user import job was started.
        public let startDate: Date?
        /// The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.
        public let cloudWatchLogsRoleArn: String?
        /// The job name for the user import job.
        public let jobName: String?
        /// The number of users that were successfully imported.
        public let importedUsers: Int64?

        public init(completionDate: Date? = nil, completionMessage: String? = nil, failedUsers: Int64? = nil, skippedUsers: Int64? = nil, creationDate: Date? = nil, jobId: String? = nil, userPoolId: String? = nil, status: UserImportJobStatusType? = nil, preSignedUrl: String? = nil, startDate: Date? = nil, cloudWatchLogsRoleArn: String? = nil, jobName: String? = nil, importedUsers: Int64? = nil) {
            self.completionDate = completionDate
            self.completionMessage = completionMessage
            self.failedUsers = failedUsers
            self.skippedUsers = skippedUsers
            self.creationDate = creationDate
            self.jobId = jobId
            self.userPoolId = userPoolId
            self.status = status
            self.preSignedUrl = preSignedUrl
            self.startDate = startDate
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.jobName = jobName
            self.importedUsers = importedUsers
        }

        public init(dictionary: [String: Any]) throws {
            self.completionDate = dictionary["CompletionDate"] as? Date
            self.completionMessage = dictionary["CompletionMessage"] as? String
            self.failedUsers = dictionary["FailedUsers"] as? Int64
            self.skippedUsers = dictionary["SkippedUsers"] as? Int64
            self.creationDate = dictionary["CreationDate"] as? Date
            self.jobId = dictionary["JobId"] as? String
            self.userPoolId = dictionary["UserPoolId"] as? String
            if let status = dictionary["Status"] as? String { self.status = UserImportJobStatusType(rawValue: status) } else { self.status = nil }
            self.preSignedUrl = dictionary["PreSignedUrl"] as? String
            self.startDate = dictionary["StartDate"] as? Date
            self.cloudWatchLogsRoleArn = dictionary["CloudWatchLogsRoleArn"] as? String
            self.jobName = dictionary["JobName"] as? String
            self.importedUsers = dictionary["ImportedUsers"] as? Int64
        }
    }

    public struct AdminUpdateUserAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteUserAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ConfirmDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The configuration of the device secret verifier.
        public let deviceSecretVerifierConfig: DeviceSecretVerifierConfigType?
        /// The device name.
        public let deviceName: String?
        /// The access token.
        public let accessToken: String

        public init(deviceKey: String, deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil, deviceName: String? = nil, accessToken: String) {
            self.deviceKey = deviceKey
            self.deviceSecretVerifierConfig = deviceSecretVerifierConfig
            self.deviceName = deviceName
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            if let deviceSecretVerifierConfig = dictionary["DeviceSecretVerifierConfig"] as? [String: Any] { self.deviceSecretVerifierConfig = try CognitoIdp.DeviceSecretVerifierConfigType(dictionary: deviceSecretVerifierConfig) } else { self.deviceSecretVerifierConfig = nil }
            self.deviceName = dictionary["DeviceName"] as? String
            guard let accessToken = dictionary["AccessToken"] as? String else { throw InitializableError.missingRequiredParam("AccessToken") }
            self.accessToken = accessToken
        }
    }

    public struct AdminCreateUserRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
        public let forceAliasCreation: Bool?
        /// The user pool ID for the user pool where the user will be created.
        public let userPoolId: String
        /// Specify "EMAIL" if email will be used to send the welcome message. Specify "SMS" if the phone number will be used. The default value is "SMS". More than one value can be specified.
        public let desiredDeliveryMediums: [DeliveryMediumType]?
        /// Set to "RESEND" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to "SUPPRESS" to suppress sending the message. Only one value can be specified.
        public let messageAction: MessageActionType?
        /// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain. To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process. The user's validation data is not persisted.
        public let validationData: [AttributeType]?
        /// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
        public let username: String
        /// The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins. This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you. The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying "RESEND" for the MessageAction parameter.
        public let temporaryPassword: String?
        /// An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the Attributes tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message). To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.  
        public let userAttributes: [AttributeType]?

        public init(forceAliasCreation: Bool? = nil, userPoolId: String, desiredDeliveryMediums: [DeliveryMediumType]? = nil, messageAction: MessageActionType? = nil, validationData: [AttributeType]? = nil, username: String, temporaryPassword: String? = nil, userAttributes: [AttributeType]? = nil) {
            self.forceAliasCreation = forceAliasCreation
            self.userPoolId = userPoolId
            self.desiredDeliveryMediums = desiredDeliveryMediums
            self.messageAction = messageAction
            self.validationData = validationData
            self.username = username
            self.temporaryPassword = temporaryPassword
            self.userAttributes = userAttributes
        }

        public init(dictionary: [String: Any]) throws {
            self.forceAliasCreation = dictionary["ForceAliasCreation"] as? Bool
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            if let desiredDeliveryMediums = dictionary["DesiredDeliveryMediums"] as? [String] { self.desiredDeliveryMediums = desiredDeliveryMediums.flatMap({ DeliveryMediumType(rawValue: $0)}) } else { self.desiredDeliveryMediums = nil }
            if let messageAction = dictionary["MessageAction"] as? String { self.messageAction = MessageActionType(rawValue: messageAction) } else { self.messageAction = nil }
            if let validationData = dictionary["ValidationData"] as? [[String: Any]] {
                self.validationData = try validationData.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.validationData = nil
            }
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            self.temporaryPassword = dictionary["TemporaryPassword"] as? String
            if let userAttributes = dictionary["UserAttributes"] as? [[String: Any]] {
                self.userAttributes = try userAttributes.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.userAttributes = nil
            }
        }
    }

    public struct AdminListGroupsForUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The groups that the user belongs to.
        public let groups: [GroupType]?

        public init(nextToken: String? = nil, groups: [GroupType]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let groups = dictionary["Groups"] as? [[String: Any]] {
                self.groups = try groups.map({ try GroupType(dictionary: $0) })
            } else { 
                self.groups = nil
            }
        }
    }

    public struct AdminListDevicesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The pagination token.
        public let paginationToken: String?
        /// The devices in the list of devices response.
        public let devices: [DeviceType]?

        public init(paginationToken: String? = nil, devices: [DeviceType]? = nil) {
            self.paginationToken = paginationToken
            self.devices = devices
        }

        public init(dictionary: [String: Any]) throws {
            self.paginationToken = dictionary["PaginationToken"] as? String
            if let devices = dictionary["Devices"] as? [[String: Any]] {
                self.devices = try devices.map({ try DeviceType(dictionary: $0) })
            } else { 
                self.devices = nil
            }
        }
    }

    public struct PasswordPolicyType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The minimum length of the password policy that you have set. Cannot be less than 6.
        public let minimumLength: Int32?
        /// In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
        public let requireLowercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
        public let requireSymbols: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
        public let requireUppercase: Bool?
        /// In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
        public let requireNumbers: Bool?

        public init(minimumLength: Int32? = nil, requireLowercase: Bool? = nil, requireSymbols: Bool? = nil, requireUppercase: Bool? = nil, requireNumbers: Bool? = nil) {
            self.minimumLength = minimumLength
            self.requireLowercase = requireLowercase
            self.requireSymbols = requireSymbols
            self.requireUppercase = requireUppercase
            self.requireNumbers = requireNumbers
        }

        public init(dictionary: [String: Any]) throws {
            self.minimumLength = dictionary["MinimumLength"] as? Int32
            self.requireLowercase = dictionary["RequireLowercase"] as? Bool
            self.requireSymbols = dictionary["RequireSymbols"] as? Bool
            self.requireUppercase = dictionary["RequireUppercase"] as? Bool
            self.requireNumbers = dictionary["RequireNumbers"] as? Bool
        }
    }

    public struct UserType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user status. Can be one of the following:   UNCONFIRMED - User has been created but not confirmed.   CONFIRMED - User has been confirmed.   ARCHIVED - User is no longer active.   COMPROMISED - User is disabled due to a potential security threat.   UNKNOWN - User status is not known.  
        public let userStatus: UserStatusType?
        /// Specifies whether the user is enabled.
        public let enabled: Bool?
        /// The user name of the user you wish to describe.
        public let username: String?
        /// The creation date of the user.
        public let userCreateDate: Date?
        /// A container with information about the user type attributes.
        public let attributes: [AttributeType]?
        /// The last modified date of the user.
        public let userLastModifiedDate: Date?
        /// The MFA options for the user.
        public let mFAOptions: [MFAOptionType]?

        public init(userStatus: UserStatusType? = nil, enabled: Bool? = nil, username: String? = nil, userCreateDate: Date? = nil, attributes: [AttributeType]? = nil, userLastModifiedDate: Date? = nil, mFAOptions: [MFAOptionType]? = nil) {
            self.userStatus = userStatus
            self.enabled = enabled
            self.username = username
            self.userCreateDate = userCreateDate
            self.attributes = attributes
            self.userLastModifiedDate = userLastModifiedDate
            self.mFAOptions = mFAOptions
        }

        public init(dictionary: [String: Any]) throws {
            if let userStatus = dictionary["UserStatus"] as? String { self.userStatus = UserStatusType(rawValue: userStatus) } else { self.userStatus = nil }
            self.enabled = dictionary["Enabled"] as? Bool
            self.username = dictionary["Username"] as? String
            self.userCreateDate = dictionary["UserCreateDate"] as? Date
            if let attributes = dictionary["Attributes"] as? [[String: Any]] {
                self.attributes = try attributes.map({ try AttributeType(dictionary: $0) })
            } else { 
                self.attributes = nil
            }
            self.userLastModifiedDate = dictionary["UserLastModifiedDate"] as? Date
            if let mFAOptions = dictionary["MFAOptions"] as? [[String: Any]] {
                self.mFAOptions = try mFAOptions.map({ try MFAOptionType(dictionary: $0) })
            } else { 
                self.mFAOptions = nil
            }
        }
    }

    public struct ListUsersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attributes to get from the request to list users.
        public let attributesToGet: [String]?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let paginationToken: String?
        /// The limit of the request to list users.
        public let limit: Int32?
        /// The filter for the list users request.
        public let filter: String?
        /// The user pool ID for which you want to list users.
        public let userPoolId: String

        public init(attributesToGet: [String]? = nil, paginationToken: String? = nil, limit: Int32? = nil, filter: String? = nil, userPoolId: String) {
            self.attributesToGet = attributesToGet
            self.paginationToken = paginationToken
            self.limit = limit
            self.filter = filter
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.attributesToGet = dictionary["AttributesToGet"] as? [String]
            self.paginationToken = dictionary["PaginationToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
            self.filter = dictionary["Filter"] as? String
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct GetDeviceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        public init(dictionary: [String: Any]) throws {
            guard let device = dictionary["Device"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Device") }
            self.device = try CognitoIdp.DeviceType(dictionary: device)
        }
    }

    public struct AdminGetDeviceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device.
        public let device: DeviceType

        public init(device: DeviceType) {
            self.device = device
        }

        public init(dictionary: [String: Any]) throws {
            guard let device = dictionary["Device"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Device") }
            self.device = try CognitoIdp.DeviceType(dictionary: device)
        }
    }

    public struct AdminUpdateDeviceStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The status indicating whether a device has been remembered or not.
        public let deviceRememberedStatus: DeviceRememberedStatusType?
        /// The user pool ID&gt;
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, deviceRememberedStatus: DeviceRememberedStatusType? = nil, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.deviceRememberedStatus = deviceRememberedStatus
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            if let deviceRememberedStatus = dictionary["DeviceRememberedStatus"] as? String { self.deviceRememberedStatus = DeviceRememberedStatusType(rawValue: deviceRememberedStatus) } else { self.deviceRememberedStatus = nil }
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct VerifyUserAttributeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attribute name in the request to verify user attributes.
        public let attributeName: String
        /// The verification code in the request to verify user attributes.
        public let code: String
        /// Represents the access token of the request to verify user attributes.
        public let accessToken: String?

        public init(attributeName: String, code: String, accessToken: String? = nil) {
            self.attributeName = attributeName
            self.code = code
            self.accessToken = accessToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let attributeName = dictionary["AttributeName"] as? String else { throw InitializableError.missingRequiredParam("AttributeName") }
            self.attributeName = attributeName
            guard let code = dictionary["Code"] as? String else { throw InitializableError.missingRequiredParam("Code") }
            self.code = code
            self.accessToken = dictionary["AccessToken"] as? String
        }
    }

    public struct ChangePasswordResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AdminForgetDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(deviceKey: String, userPoolId: String, username: String) {
            self.deviceKey = deviceKey
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct AdminGetDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The device key.
        public let deviceKey: String
        /// The user name.
        public let username: String
        /// The user pool ID.
        public let userPoolId: String

        public init(deviceKey: String, username: String, userPoolId: String) {
            self.deviceKey = deviceKey
            self.username = username
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceKey = dictionary["DeviceKey"] as? String else { throw InitializableError.missingRequiredParam("DeviceKey") }
            self.deviceKey = deviceKey
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct InitiateAuthRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The client app's metadata.
        public let clientMetadata: [String: String]?
        /// The client ID.
        public let clientId: String
        /// The authentication parameters.
        public let authParameters: [String: String]?
        /// The authentication flow.
        public let authFlow: AuthFlowType

        public init(clientMetadata: [String: String]? = nil, clientId: String, authParameters: [String: String]? = nil, authFlow: AuthFlowType) {
            self.clientMetadata = clientMetadata
            self.clientId = clientId
            self.authParameters = authParameters
            self.authFlow = authFlow
        }

        public init(dictionary: [String: Any]) throws {
            if let clientMetadata = dictionary["ClientMetadata"] as? [String: String] {
                self.clientMetadata = clientMetadata
            } else { 
                self.clientMetadata = nil
            }
            guard let clientId = dictionary["ClientId"] as? String else { throw InitializableError.missingRequiredParam("ClientId") }
            self.clientId = clientId
            if let authParameters = dictionary["AuthParameters"] as? [String: String] {
                self.authParameters = authParameters
            } else { 
                self.authParameters = nil
            }
            guard let rawAuthFlow = dictionary["AuthFlow"] as? String, let authFlow = AuthFlowType(rawValue: rawAuthFlow) else { throw InitializableError.missingRequiredParam("AuthFlow") }
            self.authFlow = authFlow
        }
    }

    public struct ListUserPoolClientsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID for the user pool where you want to list user pool clients.
        public let userPoolId: String
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return when listing the user pool clients.
        public let maxResults: Int32?

        public init(userPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.userPoolId = userPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct AdminAddUserToGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The username for the user.
        public let username: String
        /// The group name.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(username: String, groupName: String, userPoolId: String) {
            self.username = username
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

    public struct EmailConfigurationType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The REPLY-TO email address.
        public let replyToEmailAddress: String?
        /// The Amazon Resource Name (ARN) of the email source.
        public let sourceArn: String?

        public init(replyToEmailAddress: String? = nil, sourceArn: String? = nil) {
            self.replyToEmailAddress = replyToEmailAddress
            self.sourceArn = sourceArn
        }

        public init(dictionary: [String: Any]) throws {
            self.replyToEmailAddress = dictionary["ReplyToEmailAddress"] as? String
            self.sourceArn = dictionary["SourceArn"] as? String
        }
    }

    public struct AdminUserGlobalSignOutRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user pool ID.
        public let userPoolId: String
        /// The user name.
        public let username: String

        public init(userPoolId: String, username: String) {
            self.userPoolId = userPoolId
            self.username = username
        }

        public init(dictionary: [String: Any]) throws {
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
            guard let username = dictionary["Username"] as? String else { throw InitializableError.missingRequiredParam("Username") }
            self.username = username
        }
    }

    public struct AdminCreateUserResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user returned in the request to create a new user.
        public let user: UserType?

        public init(user: UserType? = nil) {
            self.user = user
        }

        public init(dictionary: [String: Any]) throws {
            if let user = dictionary["User"] as? [String: Any] { self.user = try CognitoIdp.UserType(dictionary: user) } else { self.user = nil }
        }
    }

    public struct ListUserPoolClientsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The user pool clients in the response that lists user pool clients.
        public let userPoolClients: [UserPoolClientDescription]?

        public init(nextToken: String? = nil, userPoolClients: [UserPoolClientDescription]? = nil) {
            self.nextToken = nextToken
            self.userPoolClients = userPoolClients
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let userPoolClients = dictionary["UserPoolClients"] as? [[String: Any]] {
                self.userPoolClients = try userPoolClients.map({ try UserPoolClientDescription(dictionary: $0) })
            } else { 
                self.userPoolClients = nil
            }
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the group.
        public let groupName: String
        /// The user pool ID for the user pool.
        public let userPoolId: String

        public init(groupName: String, userPoolId: String) {
            self.groupName = groupName
            self.userPoolId = userPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let groupName = dictionary["GroupName"] as? String else { throw InitializableError.missingRequiredParam("GroupName") }
            self.groupName = groupName
            guard let userPoolId = dictionary["UserPoolId"] as? String else { throw InitializableError.missingRequiredParam("UserPoolId") }
            self.userPoolId = userPoolId
        }
    }

}