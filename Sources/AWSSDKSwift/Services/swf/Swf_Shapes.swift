// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Swf {

    public struct RequestCancelWorkflowExecutionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the workflow execution to cancel.
        public let runId: String?
        /// The workflowId of the workflow execution to cancel.
        public let workflowId: String
        /// The name of the domain containing the workflow execution to cancel.
        public let domain: String

        public init(runId: String? = nil, workflowId: String, domain: String) {
            self.runId = runId
            self.workflowId = workflowId
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct CountClosedWorkflowExecutionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If specified, indicates the type of the workflow executions to be counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only workflow executions that match this close status are counted. This filter has an affect only if executionStatus is specified as CLOSED. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let closeStatusFilter: CloseStatusFilter?
        /// If specified, only executions that have a tag that matches the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let tagFilter: TagFilter?
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let executionFilter: WorkflowExecutionFilter?
        /// If specified, only workflow executions that meet the close time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        public let closeTimeFilter: ExecutionTimeFilter?
        /// If specified, only workflow executions that meet the start time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        public let startTimeFilter: ExecutionTimeFilter?
        /// The name of the domain containing the workflow executions to count.
        public let domain: String

        public init(typeFilter: WorkflowTypeFilter? = nil, closeStatusFilter: CloseStatusFilter? = nil, tagFilter: TagFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, startTimeFilter: ExecutionTimeFilter? = nil, domain: String) {
            self.typeFilter = typeFilter
            self.closeStatusFilter = closeStatusFilter
            self.tagFilter = tagFilter
            self.executionFilter = executionFilter
            self.closeTimeFilter = closeTimeFilter
            self.startTimeFilter = startTimeFilter
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            if let typeFilter = dictionary["typeFilter"] as? [String: Any] { self.typeFilter = try Swf.WorkflowTypeFilter(dictionary: typeFilter) } else { self.typeFilter = nil }
            if let closeStatusFilter = dictionary["closeStatusFilter"] as? [String: Any] { self.closeStatusFilter = try Swf.CloseStatusFilter(dictionary: closeStatusFilter) } else { self.closeStatusFilter = nil }
            if let tagFilter = dictionary["tagFilter"] as? [String: Any] { self.tagFilter = try Swf.TagFilter(dictionary: tagFilter) } else { self.tagFilter = nil }
            if let executionFilter = dictionary["executionFilter"] as? [String: Any] { self.executionFilter = try Swf.WorkflowExecutionFilter(dictionary: executionFilter) } else { self.executionFilter = nil }
            if let closeTimeFilter = dictionary["closeTimeFilter"] as? [String: Any] { self.closeTimeFilter = try Swf.ExecutionTimeFilter(dictionary: closeTimeFilter) } else { self.closeTimeFilter = nil }
            if let startTimeFilter = dictionary["startTimeFilter"] as? [String: Any] { self.startTimeFilter = try Swf.ExecutionTimeFilter(dictionary: startTimeFilter) } else { self.startTimeFilter = nil }
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct LambdaFunctionTimedOutEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        public let startedEventId: Int64
        /// The type of the timeout that caused this event.
        public let timeoutType: LambdaFunctionTimeoutType?

        public init(scheduledEventId: Int64, startedEventId: Int64, timeoutType: LambdaFunctionTimeoutType? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            if let timeoutType = dictionary["timeoutType"] as? String { self.timeoutType = LambdaFunctionTimeoutType(rawValue: timeoutType) } else { self.timeoutType = nil }
        }
    }

    public struct ActivityType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of this activity. The combination of activity type name and version must be unique within a domain.
        public let name: String
        /// The version of this activity. The combination of activity type name and version must be unique with in a domain.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let version = dictionary["version"] as? String else { throw InitializableError.missingRequiredParam("version") }
            self.version = version
        }
    }

    public struct DecisionTask: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
        public let previousStartedEventId: Int64?
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        public let taskToken: String
        /// The type of the workflow execution for which this decision task was created.
        public let workflowType: WorkflowType
        /// The ID of the DecisionTaskStarted event recorded in the history.
        public let startedEventId: Int64
        /// A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
        public let events: [HistoryEvent]
        /// The workflow execution for which this decision task was created.
        public let workflowExecution: WorkflowExecution
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(previousStartedEventId: Int64? = nil, taskToken: String, workflowType: WorkflowType, startedEventId: Int64, events: [HistoryEvent], workflowExecution: WorkflowExecution, nextPageToken: String? = nil) {
            self.previousStartedEventId = previousStartedEventId
            self.taskToken = taskToken
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.events = events
            self.workflowExecution = workflowExecution
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.previousStartedEventId = dictionary["previousStartedEventId"] as? Int64
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let events = dictionary["events"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("events") }
            self.events = try events.map({ try HistoryEvent(dictionary: $0) })
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
            self.nextPageToken = dictionary["nextPageToken"] as? String
        }
    }

    public enum CompleteWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unhandled_decision = "UNHANDLED_DECISION"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct StartChildWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The workflow type provided in the StartChildWorkflowExecution decision that failed.
        public let workflowType: WorkflowType
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the child workflow execution.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: StartChildWorkflowExecutionFailedCause
        public let control: String?

        public init(initiatedEventId: Int64, workflowType: WorkflowType, decisionTaskCompletedEventId: Int64, workflowId: String, cause: StartChildWorkflowExecutionFailedCause, control: String? = nil) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let rawcause = dictionary["cause"] as? String, let cause = StartChildWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
            self.control = dictionary["control"] as? String
        }
    }

    public enum ContinueAsNewWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unhandled_decision = "UNHANDLED_DECISION"
        case workflow_type_deprecated = "WORKFLOW_TYPE_DEPRECATED"
        case workflow_type_does_not_exist = "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case default_execution_start_to_close_timeout_undefined = "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_task_start_to_close_timeout_undefined = "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_task_list_undefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case default_child_policy_undefined = "DEFAULT_CHILD_POLICY_UNDEFINED"
        case continue_as_new_workflow_execution_rate_exceeded = "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The workflow execution this information is about.
        public let execution: WorkflowExecution
        /// The time when the execution was started.
        public let startTimestamp: Date
        /// If this workflow execution is a child of another execution then contains the workflow execution that started this execution.
        public let parent: WorkflowExecution?
        /// The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.
        public let tagList: [String]?
        /// Set to true if a cancellation is requested for this workflow execution.
        public let cancelRequested: Bool?
        /// The time when the workflow execution was closed. Set only if the execution status is CLOSED.
        public let closeTimestamp: Date?
        /// If the execution status is closed then this specifies how the execution was closed:   COMPLETED: the execution was successfully completed.  CANCELED: the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.  TERMINATED: the execution was force terminated.  FAILED: the execution failed to complete.  TIMED_OUT: the execution did not complete in the alloted time and was automatically timed out.  CONTINUED_AS_NEW: the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow. 
        public let closeStatus: CloseStatus?
        /// The type of the workflow execution.
        public let workflowType: WorkflowType
        /// The current status of the execution.
        public let executionStatus: ExecutionStatus

        public init(execution: WorkflowExecution, startTimestamp: Date, parent: WorkflowExecution? = nil, tagList: [String]? = nil, cancelRequested: Bool? = nil, closeTimestamp: Date? = nil, closeStatus: CloseStatus? = nil, workflowType: WorkflowType, executionStatus: ExecutionStatus) {
            self.execution = execution
            self.startTimestamp = startTimestamp
            self.parent = parent
            self.tagList = tagList
            self.cancelRequested = cancelRequested
            self.closeTimestamp = closeTimestamp
            self.closeStatus = closeStatus
            self.workflowType = workflowType
            self.executionStatus = executionStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let execution = dictionary["execution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("execution") }
            self.execution = try Swf.WorkflowExecution(dictionary: execution)
            guard let startTimestamp = dictionary["startTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("startTimestamp") }
            self.startTimestamp = startTimestamp
            if let parent = dictionary["parent"] as? [String: Any] { self.parent = try Swf.WorkflowExecution(dictionary: parent) } else { self.parent = nil }
            self.tagList = dictionary["tagList"] as? [String]
            self.cancelRequested = dictionary["cancelRequested"] as? Bool
            self.closeTimestamp = dictionary["closeTimestamp"] as? Date
            if let closeStatus = dictionary["closeStatus"] as? String { self.closeStatus = CloseStatus(rawValue: closeStatus) } else { self.closeStatus = nil }
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let rawexecutionStatus = dictionary["executionStatus"] as? String, let executionStatus = ExecutionStatus(rawValue: rawexecutionStatus) else { throw InitializableError.missingRequiredParam("executionStatus") }
            self.executionStatus = executionStatus
        }
    }

    public struct CancelWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. details of the cancellation.
        public let details: String?

        public init(details: String? = nil) {
            self.details = details
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
        }
    }

    public enum RegistrationStatus: String, CustomStringConvertible {
        case registered = "REGISTERED"
        case deprecated = "DEPRECATED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. The name of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        public let name: String
        /// Required. The version of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        public let version: String

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let version = dictionary["version"] as? String else { throw InitializableError.missingRequiredParam("version") }
            self.version = version
        }
    }

    public struct PollForDecisionTaskInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// Specifies the task list to poll for decision tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let taskList: TaskList
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimestamp of the events.
        public let reverseOrder: Bool?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call. The nextPageToken returned by this action cannot be used with GetWorkflowExecutionHistory to get the next page. You must call PollForDecisionTask again (with the nextPageToken) to retrieve the next page of history records. Calling PollForDecisionTask with a nextPageToken will not return a new decision task..
        public let nextPageToken: String?
        /// The name of the domain containing the task lists to poll.
        public let domain: String

        public init(identity: String? = nil, maximumPageSize: Int32? = nil, taskList: TaskList, reverseOrder: Bool? = nil, nextPageToken: String? = nil, domain: String) {
            self.identity = identity
            self.maximumPageSize = maximumPageSize
            self.taskList = taskList
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            self.identity = dictionary["identity"] as? String
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct WorkflowTypeDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// General information about the workflow type. The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.   REGISTERED: The type is registered and available. Workers supporting this type should be running.  DEPRECATED: The type was deprecated using DeprecateWorkflowType, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type. 
        public let typeInfo: WorkflowTypeInfo
        /// Configuration settings of the workflow type registered through RegisterWorkflowType
        public let configuration: WorkflowTypeConfiguration

        public init(typeInfo: WorkflowTypeInfo, configuration: WorkflowTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

        public init(dictionary: [String: Any]) throws {
            guard let typeInfo = dictionary["typeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("typeInfo") }
            self.typeInfo = try Swf.WorkflowTypeInfo(dictionary: typeInfo)
            guard let configuration = dictionary["configuration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("configuration") }
            self.configuration = try Swf.WorkflowTypeConfiguration(dictionary: configuration)
        }
    }

    public struct DecisionTaskCompletedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// User defined context for the workflow execution.
        public let executionContext: String?

        public init(scheduledEventId: Int64, startedEventId: Int64, executionContext: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.executionContext = executionContext
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            self.executionContext = dictionary["executionContext"] as? String
        }
    }

    public struct DomainDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let domainInfo: DomainInfo
        public let configuration: DomainConfiguration

        public init(domainInfo: DomainInfo, configuration: DomainConfiguration) {
            self.domainInfo = domainInfo
            self.configuration = configuration
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainInfo = dictionary["domainInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("domainInfo") }
            self.domainInfo = try Swf.DomainInfo(dictionary: domainInfo)
            guard let configuration = dictionary["configuration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("configuration") }
            self.configuration = try Swf.DomainConfiguration(dictionary: configuration)
        }
    }

    public struct RespondActivityTaskFailedInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. Detailed information about the failure.
        public let details: String?
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        public let taskToken: String
        /// Description of the error that may assist in diagnostics.
        public let reason: String?

        public init(details: String? = nil, taskToken: String, reason: String? = nil) {
            self.details = details
            self.taskToken = taskToken
            self.reason = reason
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
            self.reason = dictionary["reason"] as? String
        }
    }

    public struct CancelTimerFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: CancelTimerFailedCause
        /// The timerId provided in the CancelTimer decision that failed.
        public let timerId: String

        public init(decisionTaskCompletedEventId: Int64, cause: CancelTimerFailedCause, timerId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
            self.timerId = timerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = CancelTimerFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
        }
    }

    public struct DescribeDomainInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain to describe.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
        }
    }

    public enum RequestCancelExternalWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unknown_external_workflow_execution = "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case request_cancel_external_workflow_execution_rate_exceeded = "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct StartTimerDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. The unique ID of the timer. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let timerId: String
        /// Required. The duration to wait before firing the timer. The duration is specified in seconds; an integer greater than or equal to 0.
        public let startToFireTimeout: String
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?

        public init(timerId: String, startToFireTimeout: String, control: String? = nil) {
            self.timerId = timerId
            self.startToFireTimeout = startToFireTimeout
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
            guard let startToFireTimeout = dictionary["startToFireTimeout"] as? String else { throw InitializableError.missingRequiredParam("startToFireTimeout") }
            self.startToFireTimeout = startToFireTimeout
            self.control = dictionary["control"] as? String
        }
    }

    public struct DescribeWorkflowTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain in which this workflow type is registered.
        public let domain: String
        /// The workflow type to describe.
        public let workflowType: WorkflowType

        public init(domain: String, workflowType: WorkflowType) {
            self.domain = domain
            self.workflowType = workflowType
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
        }
    }

    public struct ExecutionTimeFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the oldest start or close date and time to return.
        public let oldestDate: Date
        /// Specifies the latest start or close date and time to return.
        public let latestDate: Date?

        public init(oldestDate: Date, latestDate: Date? = nil) {
            self.oldestDate = oldestDate
            self.latestDate = latestDate
        }

        public init(dictionary: [String: Any]) throws {
            guard let oldestDate = dictionary["oldestDate"] as? Date else { throw InitializableError.missingRequiredParam("oldestDate") }
            self.oldestDate = oldestDate
            self.latestDate = dictionary["latestDate"] as? Date
        }
    }

    public struct PollForActivityTaskInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identity of the worker making the request, recorded in the ActivityTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?
        /// The name of the domain that contains the task lists being polled.
        public let domain: String
        /// Specifies the task list to poll for activity tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let taskList: TaskList

        public init(identity: String? = nil, domain: String, taskList: TaskList) {
            self.identity = identity
            self.domain = domain
            self.taskList = taskList
        }

        public init(dictionary: [String: Any]) throws {
            self.identity = dictionary["identity"] as? String
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
        }
    }

    public struct ListClosedWorkflowExecutionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If specified, only executions of the type specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only workflow executions that match this close status are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let closeStatusFilter: CloseStatusFilter?
        /// If specified, only executions that have the matching tag are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let tagFilter: TagFilter?
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let executionFilter: WorkflowExecutionFilter?
        /// If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        public let closeTimeFilter: ExecutionTimeFilter?
        /// If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        public let startTimeFilter: ExecutionTimeFilter?
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.
        public let reverseOrder: Bool?
        /// The name of the domain that contains the workflow executions to list.
        public let domain: String
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(typeFilter: WorkflowTypeFilter? = nil, closeStatusFilter: CloseStatusFilter? = nil, tagFilter: TagFilter? = nil, maximumPageSize: Int32? = nil, executionFilter: WorkflowExecutionFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, startTimeFilter: ExecutionTimeFilter? = nil, reverseOrder: Bool? = nil, domain: String, nextPageToken: String? = nil) {
            self.typeFilter = typeFilter
            self.closeStatusFilter = closeStatusFilter
            self.tagFilter = tagFilter
            self.maximumPageSize = maximumPageSize
            self.executionFilter = executionFilter
            self.closeTimeFilter = closeTimeFilter
            self.startTimeFilter = startTimeFilter
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let typeFilter = dictionary["typeFilter"] as? [String: Any] { self.typeFilter = try Swf.WorkflowTypeFilter(dictionary: typeFilter) } else { self.typeFilter = nil }
            if let closeStatusFilter = dictionary["closeStatusFilter"] as? [String: Any] { self.closeStatusFilter = try Swf.CloseStatusFilter(dictionary: closeStatusFilter) } else { self.closeStatusFilter = nil }
            if let tagFilter = dictionary["tagFilter"] as? [String: Any] { self.tagFilter = try Swf.TagFilter(dictionary: tagFilter) } else { self.tagFilter = nil }
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            if let executionFilter = dictionary["executionFilter"] as? [String: Any] { self.executionFilter = try Swf.WorkflowExecutionFilter(dictionary: executionFilter) } else { self.executionFilter = nil }
            if let closeTimeFilter = dictionary["closeTimeFilter"] as? [String: Any] { self.closeTimeFilter = try Swf.ExecutionTimeFilter(dictionary: closeTimeFilter) } else { self.closeTimeFilter = nil }
            if let startTimeFilter = dictionary["startTimeFilter"] as? [String: Any] { self.startTimeFilter = try Swf.ExecutionTimeFilter(dictionary: startTimeFilter) } else { self.startTimeFilter = nil }
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            self.nextPageToken = dictionary["nextPageToken"] as? String
        }
    }

    public struct ActivityTask: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        public let taskToken: String
        /// The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.
        public let input: String?
        /// The ID of the ActivityTaskStarted event recorded in the history.
        public let startedEventId: Int64
        /// The workflow execution that started this activity task.
        public let workflowExecution: WorkflowExecution
        /// The unique ID of the task.
        public let activityId: String
        /// The type of this activity task.
        public let activityType: ActivityType

        public init(taskToken: String, input: String? = nil, startedEventId: Int64, workflowExecution: WorkflowExecution, activityId: String, activityType: ActivityType) {
            self.taskToken = taskToken
            self.input = input
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.activityId = activityId
            self.activityType = activityType
        }

        public init(dictionary: [String: Any]) throws {
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
            self.input = dictionary["input"] as? String
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
        }
    }

    public struct DescribeActivityTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activity type to get information about. Activity types are identified by the name and version that were supplied when the activity was registered.
        public let activityType: ActivityType
        /// The name of the domain in which the activity type is registered.
        public let domain: String

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct TagFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. Specifies the tag that must be associated with the execution for it to meet the filter criteria.
        public let tag: String

        public init(tag: String) {
            self.tag = tag
        }

        public init(dictionary: [String: Any]) throws {
            guard let tag = dictionary["tag"] as? String else { throw InitializableError.missingRequiredParam("tag") }
            self.tag = tag
        }
    }

    public struct TaskList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the task list.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
        }
    }

    public enum CancelTimerFailedCause: String, CustomStringConvertible {
        case timer_id_unknown = "TIMER_ID_UNKNOWN"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionTerminatedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details provided for the termination (if any).
        public let details: String?
        /// The reason provided for the termination (if any).
        public let reason: String?
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy
        /// If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.
        public let cause: WorkflowExecutionTerminatedCause?

        public init(details: String? = nil, reason: String? = nil, childPolicy: ChildPolicy, cause: WorkflowExecutionTerminatedCause? = nil) {
            self.details = details
            self.reason = reason
            self.childPolicy = childPolicy
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            self.reason = dictionary["reason"] as? String
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
            if let cause = dictionary["cause"] as? String { self.cause = WorkflowExecutionTerminatedCause(rawValue: cause) } else { self.cause = nil }
        }
    }

    public enum RequestCancelActivityTaskFailedCause: String, CustomStringConvertible {
        case activity_id_unknown = "ACTIVITY_ID_UNKNOWN"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct ScheduleActivityTaskFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The activity type provided in the ScheduleActivityTask decision that failed.
        public let activityType: ActivityType
        /// The activityId provided in the ScheduleActivityTask decision that failed.
        public let activityId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: ScheduleActivityTaskFailedCause

        public init(decisionTaskCompletedEventId: Int64, activityType: ActivityType, activityId: String, cause: ScheduleActivityTaskFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityType = activityType
            self.activityId = activityId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
            guard let rawcause = dictionary["cause"] as? String, let cause = ScheduleActivityTaskFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct RequestCancelExternalWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the external workflow execution to cancel.
        public let runId: String?
        /// Required. The workflowId of the external workflow execution to cancel.
        public let workflowId: String
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?

        public init(runId: String? = nil, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.workflowId = workflowId
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.control = dictionary["control"] as? String
        }
    }

    public struct StartWorkflowExecutionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        public let lambdaRole: String?
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. Exceeding this limit will cause the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run.  An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned.
        public let executionStartToCloseTimeout: String?
        /// The task list to use for the decision tasks generated for this workflow execution. This overrides the defaultTaskList specified when registering the workflow type. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let taskList: TaskList?
        /// The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a restart of a previous execution. You cannot have two open workflow executions with the same workflowId at the same time. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let workflowId: String
        /// The task priority to use for this workflow execution. This will override any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This input is made available to the new workflow execution in the WorkflowExecutionStarted history event.
        public let input: String?
        /// The type of the workflow to start.
        public let workflowType: WorkflowType
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        public let taskStartToCloseTimeout: String?
        /// If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        public let childPolicy: ChildPolicy?
        /// The name of the domain in which the workflow execution is created.
        public let domain: String

        public init(lambdaRole: String? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList? = nil, workflowId: String, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, taskStartToCloseTimeout: String? = nil, childPolicy: ChildPolicy? = nil, domain: String) {
            self.lambdaRole = lambdaRole
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.childPolicy = childPolicy
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
            if let taskList = dictionary["taskList"] as? [String: Any] { self.taskList = try Swf.TaskList(dictionary: taskList) } else { self.taskList = nil }
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.taskPriority = dictionary["taskPriority"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.input = dictionary["input"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            if let childPolicy = dictionary["childPolicy"] as? String { self.childPolicy = ChildPolicy(rawValue: childPolicy) } else { self.childPolicy = nil }
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct ListWorkflowTypesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, lists the workflow type with this name.
        public let name: String?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// When set to true, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the name of the workflow types.
        public let reverseOrder: Bool?
        /// The name of the domain in which the workflow types have been registered.
        public let domain: String
        /// Specifies the registration status of the workflow types to list.
        public let registrationStatus: RegistrationStatus

        public init(maximumPageSize: Int32? = nil, name: String? = nil, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String, registrationStatus: RegistrationStatus) {
            self.maximumPageSize = maximumPageSize
            self.name = name
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.registrationStatus = registrationStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            self.name = dictionary["name"] as? String
            self.nextPageToken = dictionary["nextPageToken"] as? String
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let rawregistrationStatus = dictionary["registrationStatus"] as? String, let registrationStatus = RegistrationStatus(rawValue: rawregistrationStatus) else { throw InitializableError.missingRequiredParam("registrationStatus") }
            self.registrationStatus = registrationStatus
        }
    }

    public struct ScheduleLambdaFunctionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the scheduled AWS Lambda function.
        public let name: String
        /// The unique Amazon SWF ID of the AWS Lambda task.
        public let id: String
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this AWS Lambda function. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: ScheduleLambdaFunctionFailedCause

        public init(name: String, id: String, decisionTaskCompletedEventId: Int64, cause: ScheduleLambdaFunctionFailedCause) {
            self.name = name
            self.id = id
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = ScheduleLambdaFunctionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public enum ScheduleActivityTaskFailedCause: String, CustomStringConvertible {
        case activity_type_deprecated = "ACTIVITY_TYPE_DEPRECATED"
        case activity_type_does_not_exist = "ACTIVITY_TYPE_DOES_NOT_EXIST"
        case activity_id_already_in_use = "ACTIVITY_ID_ALREADY_IN_USE"
        case open_activities_limit_exceeded = "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
        case activity_creation_rate_exceeded = "ACTIVITY_CREATION_RATE_EXCEEDED"
        case default_schedule_to_close_timeout_undefined = "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_task_list_undefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case default_schedule_to_start_timeout_undefined = "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
        case default_start_to_close_timeout_undefined = "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_heartbeat_timeout_undefined = "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct ChildWorkflowExecutionCanceledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Details of the cancellation (if provided).
        public let details: String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that was canceled.
        public let workflowExecution: WorkflowExecution

        public init(details: String? = nil, initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public struct ScheduleActivityTaskDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set, specifies the name of the task list in which to schedule the activity task. If not specified, the defaultTaskList registered with the activity type will be used. A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let taskList: TaskList?
        /// Required. The activityId of the activity task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let activityId: String
        /// The maximum duration for this activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault will be returned.
        public let scheduleToCloseTimeout: String?
        /// Optional. If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault will be returned.
        public let scheduleToStartTimeout: String?
        /// Optional. If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using RegisterActivityType. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault will be returned.
        public let startToCloseTimeout: String?
        /// The input provided to the activity task.
        public let input: String?
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the activity.
        public let control: String?
        /// If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it will be ignored. This overrides the default heartbeat timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let heartbeatTimeout: String?
        /// Required. The type of the activity task to schedule.
        public let activityType: ActivityType

        public init(taskList: TaskList? = nil, activityId: String, scheduleToCloseTimeout: String? = nil, scheduleToStartTimeout: String? = nil, taskPriority: String? = nil, startToCloseTimeout: String? = nil, input: String? = nil, control: String? = nil, heartbeatTimeout: String? = nil, activityType: ActivityType) {
            self.taskList = taskList
            self.activityId = activityId
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.taskPriority = taskPriority
            self.startToCloseTimeout = startToCloseTimeout
            self.input = input
            self.control = control
            self.heartbeatTimeout = heartbeatTimeout
            self.activityType = activityType
        }

        public init(dictionary: [String: Any]) throws {
            if let taskList = dictionary["taskList"] as? [String: Any] { self.taskList = try Swf.TaskList(dictionary: taskList) } else { self.taskList = nil }
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
            self.scheduleToCloseTimeout = dictionary["scheduleToCloseTimeout"] as? String
            self.scheduleToStartTimeout = dictionary["scheduleToStartTimeout"] as? String
            self.taskPriority = dictionary["taskPriority"] as? String
            self.startToCloseTimeout = dictionary["startToCloseTimeout"] as? String
            self.input = dictionary["input"] as? String
            self.control = dictionary["control"] as? String
            self.heartbeatTimeout = dictionary["heartbeatTimeout"] as? String
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
        }
    }

    public struct ChildWorkflowExecutionTerminatedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that was terminated.
        public let workflowExecution: WorkflowExecution

        public init(initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public struct StartChildWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        public let lambdaRole: String?
        /// The name of the task list to be used for decision tasks of the child workflow execution. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let taskList: TaskList?
        /// Required. The workflowId of the workflow execution. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let workflowId: String
        /// Optional. A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the child workflow execution.
        public let control: String?
        /// The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// The input to be provided to the workflow execution.
        public let input: String?
        /// Required. The type of the workflow execution to be started.
        public let workflowType: WorkflowType
        /// Optional. If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        public let childPolicy: ChildPolicy?
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        public let taskStartToCloseTimeout: String?
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault will be returned.
        public let executionStartToCloseTimeout: String?

        public init(lambdaRole: String? = nil, taskList: TaskList? = nil, workflowId: String, taskPriority: String? = nil, control: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: ChildPolicy? = nil, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.control = control
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            if let taskList = dictionary["taskList"] as? [String: Any] { self.taskList = try Swf.TaskList(dictionary: taskList) } else { self.taskList = nil }
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.taskPriority = dictionary["taskPriority"] as? String
            self.control = dictionary["control"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.input = dictionary["input"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            if let childPolicy = dictionary["childPolicy"] as? String { self.childPolicy = ChildPolicy(rawValue: childPolicy) } else { self.childPolicy = nil }
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
        }
    }

    public struct WorkflowExecutionOpenCounts: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The count of AWS Lambda functions that are currently executing.
        public let openLambdaFunctions: Int32?
        /// The count of activity tasks whose status is OPEN.
        public let openActivityTasks: Int32
        /// The count of timers started by this workflow execution that have not fired yet.
        public let openTimers: Int32
        /// The count of child workflow executions whose status is OPEN.
        public let openChildWorkflowExecutions: Int32
        /// The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.
        public let openDecisionTasks: Int32

        public init(openLambdaFunctions: Int32? = nil, openActivityTasks: Int32, openTimers: Int32, openChildWorkflowExecutions: Int32, openDecisionTasks: Int32) {
            self.openLambdaFunctions = openLambdaFunctions
            self.openActivityTasks = openActivityTasks
            self.openTimers = openTimers
            self.openChildWorkflowExecutions = openChildWorkflowExecutions
            self.openDecisionTasks = openDecisionTasks
        }

        public init(dictionary: [String: Any]) throws {
            self.openLambdaFunctions = dictionary["openLambdaFunctions"] as? Int32
            guard let openActivityTasks = dictionary["openActivityTasks"] as? Int32 else { throw InitializableError.missingRequiredParam("openActivityTasks") }
            self.openActivityTasks = openActivityTasks
            guard let openTimers = dictionary["openTimers"] as? Int32 else { throw InitializableError.missingRequiredParam("openTimers") }
            self.openTimers = openTimers
            guard let openChildWorkflowExecutions = dictionary["openChildWorkflowExecutions"] as? Int32 else { throw InitializableError.missingRequiredParam("openChildWorkflowExecutions") }
            self.openChildWorkflowExecutions = openChildWorkflowExecutions
            guard let openDecisionTasks = dictionary["openDecisionTasks"] as? Int32 else { throw InitializableError.missingRequiredParam("openDecisionTasks") }
            self.openDecisionTasks = openDecisionTasks
        }
    }

    public struct CountOpenWorkflowExecutionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the type of the workflow executions to be counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let executionFilter: WorkflowExecutionFilter?
        /// Specifies the start time criteria that workflow executions must meet in order to be counted.
        public let startTimeFilter: ExecutionTimeFilter
        /// If specified, only executions that have a tag that matches the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let tagFilter: TagFilter?
        /// The name of the domain containing the workflow executions to count.
        public let domain: String

        public init(typeFilter: WorkflowTypeFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, startTimeFilter: ExecutionTimeFilter, tagFilter: TagFilter? = nil, domain: String) {
            self.typeFilter = typeFilter
            self.executionFilter = executionFilter
            self.startTimeFilter = startTimeFilter
            self.tagFilter = tagFilter
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            if let typeFilter = dictionary["typeFilter"] as? [String: Any] { self.typeFilter = try Swf.WorkflowTypeFilter(dictionary: typeFilter) } else { self.typeFilter = nil }
            if let executionFilter = dictionary["executionFilter"] as? [String: Any] { self.executionFilter = try Swf.WorkflowExecutionFilter(dictionary: executionFilter) } else { self.executionFilter = nil }
            guard let startTimeFilter = dictionary["startTimeFilter"] as? [String: Any] else { throw InitializableError.missingRequiredParam("startTimeFilter") }
            self.startTimeFilter = try Swf.ExecutionTimeFilter(dictionary: startTimeFilter)
            if let tagFilter = dictionary["tagFilter"] as? [String: Any] { self.tagFilter = try Swf.TagFilter(dictionary: tagFilter) } else { self.tagFilter = nil }
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct ChildWorkflowExecutionTimedOutEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The type of the timeout that caused the child workflow execution to time out.
        public let timeoutType: WorkflowExecutionTimeoutType
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that timed out.
        public let workflowExecution: WorkflowExecution

        public init(initiatedEventId: Int64, timeoutType: WorkflowExecutionTimeoutType, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.timeoutType = timeoutType
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let rawtimeoutType = dictionary["timeoutType"] as? String, let timeoutType = WorkflowExecutionTimeoutType(rawValue: rawtimeoutType) else { throw InitializableError.missingRequiredParam("timeoutType") }
            self.timeoutType = timeoutType
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public struct LambdaFunctionScheduledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the scheduled AWS Lambda function.
        public let name: String
        /// Input provided to the AWS Lambda function.
        public let input: String?
        /// The maximum time, in seconds, that the AWS Lambda function can take to execute from start to close before it is marked as failed.
        public let startToCloseTimeout: String?
        /// The unique Amazon SWF ID for the AWS Lambda task.
        public let id: String
        /// The ID of the DecisionTaskCompleted event for the decision that resulted in the scheduling of this AWS Lambda function. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(name: String, input: String? = nil, startToCloseTimeout: String? = nil, id: String, decisionTaskCompletedEventId: Int64) {
            self.name = name
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.id = id
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            self.input = dictionary["input"] as? String
            self.startToCloseTimeout = dictionary["startToCloseTimeout"] as? String
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

    public struct TimerFiredEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The unique ID of the timer that fired.
        public let timerId: String

        public init(startedEventId: Int64, timerId: String) {
            self.startedEventId = startedEventId
            self.timerId = timerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
        }
    }

    public struct ChildWorkflowExecutionStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The child workflow execution that was started.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution. 
        public let workflowType: WorkflowType

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution, workflowType: WorkflowType) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
        }
    }

    public enum ScheduleLambdaFunctionFailedCause: String, CustomStringConvertible {
        case id_already_in_use = "ID_ALREADY_IN_USE"
        case open_lambda_functions_limit_exceeded = "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
        case lambda_function_creation_rate_exceeded = "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
        case lambda_service_not_available_in_region = "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
        public var description: String { return self.rawValue }
    }

    public struct DeprecateWorkflowTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain in which the workflow type is registered.
        public let domain: String
        /// The workflow type to deprecate.
        public let workflowType: WorkflowType

        public init(domain: String, workflowType: WorkflowType) {
            self.domain = domain
            self.workflowType = workflowType
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
        }
    }

    public struct CloseStatusFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. The close status that must match the close status of an execution for it to meet the criteria of this filter.
        public let status: CloseStatus

        public init(status: CloseStatus) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawstatus = dictionary["status"] as? String, let status = CloseStatus(rawValue: rawstatus) else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
        }
    }

    public enum LambdaFunctionTimeoutType: String, CustomStringConvertible {
        case start_to_close = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionCancelRequestedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The external workflow execution for which the cancellation was requested.
        public let externalWorkflowExecution: WorkflowExecution?
        /// If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.
        public let cause: WorkflowExecutionCancelRequestedCause?
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let externalInitiatedEventId: Int64?

        public init(externalWorkflowExecution: WorkflowExecution? = nil, cause: WorkflowExecutionCancelRequestedCause? = nil, externalInitiatedEventId: Int64? = nil) {
            self.externalWorkflowExecution = externalWorkflowExecution
            self.cause = cause
            self.externalInitiatedEventId = externalInitiatedEventId
        }

        public init(dictionary: [String: Any]) throws {
            if let externalWorkflowExecution = dictionary["externalWorkflowExecution"] as? [String: Any] { self.externalWorkflowExecution = try Swf.WorkflowExecution(dictionary: externalWorkflowExecution) } else { self.externalWorkflowExecution = nil }
            if let cause = dictionary["cause"] as? String { self.cause = WorkflowExecutionCancelRequestedCause(rawValue: cause) } else { self.cause = nil }
            self.externalInitiatedEventId = dictionary["externalInitiatedEventId"] as? Int64
        }
    }

    public struct ActivityTaskCancelRequestedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The unique ID of the task.
        public let activityId: String

        public init(decisionTaskCompletedEventId: Int64, activityId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
        }
    }

    public struct WorkflowExecutionCanceledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Details for the cancellation (if any).
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

    public struct History: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The list of history events.
        public let events: [HistoryEvent]

        public init(nextPageToken: String? = nil, events: [HistoryEvent]) {
            self.nextPageToken = nextPageToken
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let events = dictionary["events"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("events") }
            self.events = try events.map({ try HistoryEvent(dictionary: $0) })
        }
    }

    public struct DomainConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The retention period for workflow executions in this domain.
        public let workflowExecutionRetentionPeriodInDays: String

        public init(workflowExecutionRetentionPeriodInDays: String) {
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }

        public init(dictionary: [String: Any]) throws {
            guard let workflowExecutionRetentionPeriodInDays = dictionary["workflowExecutionRetentionPeriodInDays"] as? String else { throw InitializableError.missingRequiredParam("workflowExecutionRetentionPeriodInDays") }
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }
    }

    public struct WorkflowExecutionStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        public let lambdaRole: String?
        /// The source workflow execution that started this workflow execution. The member is not set if the workflow execution was not started by a workflow.
        public let parentWorkflowExecution: WorkflowExecution?
        /// The maximum duration for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let executionStartToCloseTimeout: String?
        /// The name of the task list for scheduling the decision tasks for this workflow execution.
        public let taskList: TaskList
        public let taskPriority: String?
        /// The list of tags associated with this workflow execution. An execution can have up to 5 tags.
        public let tagList: [String]?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this workflow execution. The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let parentInitiatedEventId: Int64?
        /// The input provided to the workflow execution (if any).
        public let input: String?
        /// The workflow type of this execution.
        public let workflowType: WorkflowType
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy
        /// The maximum duration of decision tasks for this workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// If this workflow execution was started due to a ContinueAsNewWorkflowExecution decision, then it contains the runId of the previous workflow execution that was closed and continued as this execution.
        public let continuedExecutionRunId: String?

        public init(lambdaRole: String? = nil, parentWorkflowExecution: WorkflowExecution? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList, taskPriority: String? = nil, tagList: [String]? = nil, parentInitiatedEventId: Int64? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: ChildPolicy, taskStartToCloseTimeout: String? = nil, continuedExecutionRunId: String? = nil) {
            self.lambdaRole = lambdaRole
            self.parentWorkflowExecution = parentWorkflowExecution
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.parentInitiatedEventId = parentInitiatedEventId
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.continuedExecutionRunId = continuedExecutionRunId
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            if let parentWorkflowExecution = dictionary["parentWorkflowExecution"] as? [String: Any] { self.parentWorkflowExecution = try Swf.WorkflowExecution(dictionary: parentWorkflowExecution) } else { self.parentWorkflowExecution = nil }
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            self.taskPriority = dictionary["taskPriority"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.parentInitiatedEventId = dictionary["parentInitiatedEventId"] as? Int64
            self.input = dictionary["input"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            self.continuedExecutionRunId = dictionary["continuedExecutionRunId"] as? String
        }
    }

    public struct WorkflowExecutionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IAM role used by this workflow execution when invoking AWS Lambda functions.
        public let lambdaRole: String?
        /// The total duration for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let executionStartToCloseTimeout: String
        /// The task list used for the decision tasks generated for this workflow execution.
        public let taskList: TaskList
        /// The maximum duration allowed for decision tasks for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let taskStartToCloseTimeout: String
        /// The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy

        public init(lambdaRole: String? = nil, executionStartToCloseTimeout: String, taskList: TaskList, taskStartToCloseTimeout: String, taskPriority: String? = nil, childPolicy: ChildPolicy) {
            self.lambdaRole = lambdaRole
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.taskPriority = taskPriority
            self.childPolicy = childPolicy
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            guard let executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String else { throw InitializableError.missingRequiredParam("executionStartToCloseTimeout") }
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            guard let taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String else { throw InitializableError.missingRequiredParam("taskStartToCloseTimeout") }
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.taskPriority = dictionary["taskPriority"] as? String
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
        }
    }

    public struct WorkflowExecutionInfos: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The list of workflow information structures.
        public let executionInfos: [WorkflowExecutionInfo]

        public init(nextPageToken: String? = nil, executionInfos: [WorkflowExecutionInfo]) {
            self.nextPageToken = nextPageToken
            self.executionInfos = executionInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let executionInfos = dictionary["executionInfos"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("executionInfos") }
            self.executionInfos = try executionInfos.map({ try WorkflowExecutionInfo(dictionary: $0) })
        }
    }

    public enum ActivityTaskTimeoutType: String, CustomStringConvertible {
        case start_to_close = "START_TO_CLOSE"
        case schedule_to_start = "SCHEDULE_TO_START"
        case schedule_to_close = "SCHEDULE_TO_CLOSE"
        case heartbeat = "HEARTBEAT"
        public var description: String { return self.rawValue }
    }

    public struct ActivityTypeDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// General information about the activity type. The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.   REGISTERED: The type is registered and available. Workers supporting this type should be running.   DEPRECATED: The type was deprecated using DeprecateActivityType, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type.  
        public let typeInfo: ActivityTypeInfo
        /// The configuration settings registered with the activity type.
        public let configuration: ActivityTypeConfiguration

        public init(typeInfo: ActivityTypeInfo, configuration: ActivityTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

        public init(dictionary: [String: Any]) throws {
            guard let typeInfo = dictionary["typeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("typeInfo") }
            self.typeInfo = try Swf.ActivityTypeInfo(dictionary: typeInfo)
            guard let configuration = dictionary["configuration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("configuration") }
            self.configuration = try Swf.ActivityTypeConfiguration(dictionary: configuration)
        }
    }

    public struct RegisterWorkflowTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the workflow type. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let name: String
        /// If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// The ARN of the default IAM role to use when a workflow execution of this type invokes AWS Lambda functions. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution and ContinueAsNewWorkflowExecution decision.
        public let defaultLambdaRole: String?
        /// If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the StartWorkflowExecution action or StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for defaultExecutionStartToCloseTimeout; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit will always cause the workflow execution to time out.
        public let defaultExecutionStartToCloseTimeout: String?
        /// The version of the workflow type. The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the ListWorkflowTypes action. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let version: String
        /// Textual description of the workflow type.
        public let description: String?
        /// The default task priority to assign to the workflow type. If not assigned, then "0" will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let defaultTaskPriority: String?
        /// If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list is not provided when starting the execution through the StartWorkflowExecution action or StartChildWorkflowExecution decision.
        public let defaultTaskList: TaskList?
        /// The name of the domain in which to register the workflow type.
        public let domain: String
        /// If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let defaultChildPolicy: ChildPolicy?

        public init(name: String, defaultTaskStartToCloseTimeout: String? = nil, defaultLambdaRole: String? = nil, defaultExecutionStartToCloseTimeout: String? = nil, version: String, description: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, domain: String, defaultChildPolicy: ChildPolicy? = nil) {
            self.name = name
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.version = version
            self.description = description
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.domain = domain
            self.defaultChildPolicy = defaultChildPolicy
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            self.defaultTaskStartToCloseTimeout = dictionary["defaultTaskStartToCloseTimeout"] as? String
            self.defaultLambdaRole = dictionary["defaultLambdaRole"] as? String
            self.defaultExecutionStartToCloseTimeout = dictionary["defaultExecutionStartToCloseTimeout"] as? String
            guard let version = dictionary["version"] as? String else { throw InitializableError.missingRequiredParam("version") }
            self.version = version
            self.description = dictionary["description"] as? String
            self.defaultTaskPriority = dictionary["defaultTaskPriority"] as? String
            if let defaultTaskList = dictionary["defaultTaskList"] as? [String: Any] { self.defaultTaskList = try Swf.TaskList(dictionary: defaultTaskList) } else { self.defaultTaskList = nil }
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            if let defaultChildPolicy = dictionary["defaultChildPolicy"] as? String { self.defaultChildPolicy = ChildPolicy(rawValue: defaultChildPolicy) } else { self.defaultChildPolicy = nil }
        }
    }

    public enum EventType: String, CustomStringConvertible {
        case workflowexecutionstarted = "WorkflowExecutionStarted"
        case workflowexecutioncancelrequested = "WorkflowExecutionCancelRequested"
        case workflowexecutioncompleted = "WorkflowExecutionCompleted"
        case completeworkflowexecutionfailed = "CompleteWorkflowExecutionFailed"
        case workflowexecutionfailed = "WorkflowExecutionFailed"
        case failworkflowexecutionfailed = "FailWorkflowExecutionFailed"
        case workflowexecutiontimedout = "WorkflowExecutionTimedOut"
        case workflowexecutioncanceled = "WorkflowExecutionCanceled"
        case cancelworkflowexecutionfailed = "CancelWorkflowExecutionFailed"
        case workflowexecutioncontinuedasnew = "WorkflowExecutionContinuedAsNew"
        case continueasnewworkflowexecutionfailed = "ContinueAsNewWorkflowExecutionFailed"
        case workflowexecutionterminated = "WorkflowExecutionTerminated"
        case decisiontaskscheduled = "DecisionTaskScheduled"
        case decisiontaskstarted = "DecisionTaskStarted"
        case decisiontaskcompleted = "DecisionTaskCompleted"
        case decisiontasktimedout = "DecisionTaskTimedOut"
        case activitytaskscheduled = "ActivityTaskScheduled"
        case scheduleactivitytaskfailed = "ScheduleActivityTaskFailed"
        case activitytaskstarted = "ActivityTaskStarted"
        case activitytaskcompleted = "ActivityTaskCompleted"
        case activitytaskfailed = "ActivityTaskFailed"
        case activitytasktimedout = "ActivityTaskTimedOut"
        case activitytaskcanceled = "ActivityTaskCanceled"
        case activitytaskcancelrequested = "ActivityTaskCancelRequested"
        case requestcancelactivitytaskfailed = "RequestCancelActivityTaskFailed"
        case workflowexecutionsignaled = "WorkflowExecutionSignaled"
        case markerrecorded = "MarkerRecorded"
        case recordmarkerfailed = "RecordMarkerFailed"
        case timerstarted = "TimerStarted"
        case starttimerfailed = "StartTimerFailed"
        case timerfired = "TimerFired"
        case timercanceled = "TimerCanceled"
        case canceltimerfailed = "CancelTimerFailed"
        case startchildworkflowexecutioninitiated = "StartChildWorkflowExecutionInitiated"
        case startchildworkflowexecutionfailed = "StartChildWorkflowExecutionFailed"
        case childworkflowexecutionstarted = "ChildWorkflowExecutionStarted"
        case childworkflowexecutioncompleted = "ChildWorkflowExecutionCompleted"
        case childworkflowexecutionfailed = "ChildWorkflowExecutionFailed"
        case childworkflowexecutiontimedout = "ChildWorkflowExecutionTimedOut"
        case childworkflowexecutioncanceled = "ChildWorkflowExecutionCanceled"
        case childworkflowexecutionterminated = "ChildWorkflowExecutionTerminated"
        case signalexternalworkflowexecutioninitiated = "SignalExternalWorkflowExecutionInitiated"
        case signalexternalworkflowexecutionfailed = "SignalExternalWorkflowExecutionFailed"
        case externalworkflowexecutionsignaled = "ExternalWorkflowExecutionSignaled"
        case requestcancelexternalworkflowexecutioninitiated = "RequestCancelExternalWorkflowExecutionInitiated"
        case requestcancelexternalworkflowexecutionfailed = "RequestCancelExternalWorkflowExecutionFailed"
        case externalworkflowexecutioncancelrequested = "ExternalWorkflowExecutionCancelRequested"
        case lambdafunctionscheduled = "LambdaFunctionScheduled"
        case lambdafunctionstarted = "LambdaFunctionStarted"
        case lambdafunctioncompleted = "LambdaFunctionCompleted"
        case lambdafunctionfailed = "LambdaFunctionFailed"
        case lambdafunctiontimedout = "LambdaFunctionTimedOut"
        case schedulelambdafunctionfailed = "ScheduleLambdaFunctionFailed"
        case startlambdafunctionfailed = "StartLambdaFunctionFailed"
        public var description: String { return self.rawValue }
    }

    public struct CompleteWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The result of the workflow execution. The form of the result is implementation defined.
        public let result: String?

        public init(result: String? = nil) {
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            self.result = dictionary["result"] as? String
        }
    }

    public struct ActivityTypeInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The description of the activity type provided in RegisterActivityType.
        public let description: String?
        /// The current status of the activity type.
        public let status: RegistrationStatus
        /// If DEPRECATED, the date and time DeprecateActivityType was called.
        public let deprecationDate: Date?
        /// The date and time this activity type was created through RegisterActivityType.
        public let creationDate: Date
        /// The ActivityType type structure representing the activity type.
        public let activityType: ActivityType

        public init(description: String? = nil, status: RegistrationStatus, deprecationDate: Date? = nil, creationDate: Date, activityType: ActivityType) {
            self.description = description
            self.status = status
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.activityType = activityType
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let rawstatus = dictionary["status"] as? String, let status = RegistrationStatus(rawValue: rawstatus) else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            self.deprecationDate = dictionary["deprecationDate"] as? Date
            guard let creationDate = dictionary["creationDate"] as? Date else { throw InitializableError.missingRequiredParam("creationDate") }
            self.creationDate = creationDate
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
        }
    }

    public struct CompleteWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: CompleteWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: CompleteWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = CompleteWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct TimerStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID of the timer that was started.
        public let timerId: String
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The duration of time after which the timer will fire. The duration is specified in seconds; an integer greater than or equal to 0.
        public let startToFireTimeout: String
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?

        public init(timerId: String, decisionTaskCompletedEventId: Int64, startToFireTimeout: String, control: String? = nil) {
            self.timerId = timerId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.startToFireTimeout = startToFireTimeout
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let startToFireTimeout = dictionary["startToFireTimeout"] as? String else { throw InitializableError.missingRequiredParam("startToFireTimeout") }
            self.startToFireTimeout = startToFireTimeout
            self.control = dictionary["control"] as? String
        }
    }

    public struct ExternalWorkflowExecutionSignaledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        ///  The external workflow execution that the signal was delivered to.
        public let workflowExecution: WorkflowExecution

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public struct LambdaFunctionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details of the failure (if any).
        public let details: String?
        /// The reason provided for the failure (if any).
        public let reason: String?
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        public let startedEventId: Int64
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(details: String? = nil, reason: String? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.reason = reason
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            self.reason = dictionary["reason"] as? String
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
        }
    }

    public struct DecisionTaskTimedOutEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The type of timeout that expired before the decision task could be completed.
        public let timeoutType: DecisionTaskTimeoutType

        public init(scheduledEventId: Int64, startedEventId: Int64, timeoutType: DecisionTaskTimeoutType) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let rawtimeoutType = dictionary["timeoutType"] as? String, let timeoutType = DecisionTaskTimeoutType(rawValue: rawtimeoutType) else { throw InitializableError.missingRequiredParam("timeoutType") }
            self.timeoutType = timeoutType
        }
    }

    public struct RecordActivityTaskHeartbeatInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If specified, contains details about the progress of the task.
        public let details: String?
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        public let taskToken: String

        public init(details: String? = nil, taskToken: String) {
            self.details = details
            self.taskToken = taskToken
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
        }
    }

    public struct RequestCancelExternalWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the external workflow execution.
        public let runId: String?
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the external workflow to which the cancel request was to be delivered.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: RequestCancelExternalWorkflowExecutionFailedCause
        public let control: String?

        public init(runId: String? = nil, initiatedEventId: Int64, decisionTaskCompletedEventId: Int64, workflowId: String, cause: RequestCancelExternalWorkflowExecutionFailedCause, control: String? = nil) {
            self.runId = runId
            self.initiatedEventId = initiatedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let rawcause = dictionary["cause"] as? String, let cause = RequestCancelExternalWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
            self.control = dictionary["control"] as? String
        }
    }

    public struct RespondActivityTaskCompletedInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        public let taskToken: String
        /// The result of the activity task. It is a free form string that is implementation specific.
        public let result: String?

        public init(taskToken: String, result: String? = nil) {
            self.taskToken = taskToken
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
            self.result = dictionary["result"] as? String
        }
    }

    public struct ListOpenWorkflowExecutionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If specified, only executions of the type specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only executions that have the matching tag are listed. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let tagFilter: TagFilter?
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        public let executionFilter: WorkflowExecutionFilter?
        /// Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.
        public let startTimeFilter: ExecutionTimeFilter
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.
        public let reverseOrder: Bool?
        /// The name of the domain that contains the workflow executions to list.
        public let domain: String
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(typeFilter: WorkflowTypeFilter? = nil, tagFilter: TagFilter? = nil, maximumPageSize: Int32? = nil, executionFilter: WorkflowExecutionFilter? = nil, startTimeFilter: ExecutionTimeFilter, reverseOrder: Bool? = nil, domain: String, nextPageToken: String? = nil) {
            self.typeFilter = typeFilter
            self.tagFilter = tagFilter
            self.maximumPageSize = maximumPageSize
            self.executionFilter = executionFilter
            self.startTimeFilter = startTimeFilter
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let typeFilter = dictionary["typeFilter"] as? [String: Any] { self.typeFilter = try Swf.WorkflowTypeFilter(dictionary: typeFilter) } else { self.typeFilter = nil }
            if let tagFilter = dictionary["tagFilter"] as? [String: Any] { self.tagFilter = try Swf.TagFilter(dictionary: tagFilter) } else { self.tagFilter = nil }
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            if let executionFilter = dictionary["executionFilter"] as? [String: Any] { self.executionFilter = try Swf.WorkflowExecutionFilter(dictionary: executionFilter) } else { self.executionFilter = nil }
            guard let startTimeFilter = dictionary["startTimeFilter"] as? [String: Any] else { throw InitializableError.missingRequiredParam("startTimeFilter") }
            self.startTimeFilter = try Swf.ExecutionTimeFilter(dictionary: startTimeFilter)
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            self.nextPageToken = dictionary["nextPageToken"] as? String
        }
    }

    public struct CancelTimerDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. The unique ID of the timer to cancel.
        public let timerId: String

        public init(timerId: String) {
            self.timerId = timerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
        }
    }

    public struct ActivityTaskStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.
        public let identity: String?

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            self.identity = dictionary["identity"] as? String
        }
    }

    public struct RecordMarkerDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. details of the marker.
        public let details: String?
        /// Required. The name of the marker.
        public let markerName: String

        public init(details: String? = nil, markerName: String) {
            self.details = details
            self.markerName = markerName
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let markerName = dictionary["markerName"] as? String else { throw InitializableError.missingRequiredParam("markerName") }
            self.markerName = markerName
        }
    }

    public struct LambdaFunctionStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(scheduledEventId: Int64) {
            self.scheduledEventId = scheduledEventId
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
        }
    }

    public struct DomainInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The description of the domain provided through RegisterDomain.
        public let description: String?
        /// The name of the domain. This name is unique within the account.
        public let name: String
        /// The status of the domain:   REGISTERED: The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions.   DEPRECATED: The domain was deprecated using DeprecateDomain, but is still in use. You should not create new workflow executions in this domain.  
        public let status: RegistrationStatus

        public init(description: String? = nil, name: String, status: RegistrationStatus) {
            self.description = description
            self.name = name
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let rawstatus = dictionary["status"] as? String, let status = RegistrationStatus(rawValue: rawstatus) else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
        }
    }

    public struct WorkflowExecutionFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The workflowId to pass of match the criteria of this filter.
        public let workflowId: String

        public init(workflowId: String) {
            self.workflowId = workflowId
        }

        public init(dictionary: [String: Any]) throws {
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
        }
    }

    public struct SignalExternalWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the workflow execution to be signaled.
        public let runId: String?
        /// Required. The name of the signal.The target workflow execution will use the signal name and input to process the signal.
        public let signalName: String
        /// Optional. Input data to be provided with the signal. The target workflow execution will use the signal name and input data to process the signal.
        public let input: String?
        /// Required. The workflowId of the workflow execution to be signaled.
        public let workflowId: String
        /// Optional. Data attached to the event that can be used by the decider in subsequent decision tasks.
        public let control: String?

        public init(runId: String? = nil, signalName: String, input: String? = nil, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.workflowId = workflowId
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let signalName = dictionary["signalName"] as? String else { throw InitializableError.missingRequiredParam("signalName") }
            self.signalName = signalName
            self.input = dictionary["input"] as? String
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.control = dictionary["control"] as? String
        }
    }

    public struct ActivityTaskCompletedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The results of the activity task (if any).
        public let result: String?
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(scheduledEventId: Int64, result: String? = nil, startedEventId: Int64) {
            self.scheduledEventId = scheduledEventId
            self.result = result
            self.startedEventId = startedEventId
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            self.result = dictionary["result"] as? String
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
        }
    }

    public struct RequestCancelActivityTaskFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The activityId provided in the RequestCancelActivityTask decision that failed.
        public let activityId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: RequestCancelActivityTaskFailedCause

        public init(decisionTaskCompletedEventId: Int64, activityId: String, cause: RequestCancelActivityTaskFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
            guard let rawcause = dictionary["cause"] as? String, let cause = RequestCancelActivityTaskFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct HistoryEvent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the event is of type ScheduleActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes?
        /// If the event is of type ActivityTaskCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes?
        /// If the event is of type WorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes?
        /// If the event is of type ActivityTaskTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes?
        /// If the event is of type WorkflowExecutionTerminated then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes?
        /// If the event is of type DecisionTaskStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes?
        /// The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.
        public let eventId: Int64
        /// If the event is of type TimerFired then this member is set and provides detailed information about the event. It is not set for other event types.
        public let timerFiredEventAttributes: TimerFiredEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type ExternalWorkflowExecutionSignaled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes?
        /// If the event is of type ActivityTaskcancelRequested then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        public let requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type WorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes?
        public let lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes?
        /// If the event is of type WorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes?
        /// If the event is of type WorkflowExecutionCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        public let signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes?
        public let lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes?
        /// If the event is of type WorkflowExecutionContinuedAsNew then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes?
        /// If the event is of type FailWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes?
        /// If the event is of type MarkerRecorded then this member is set and provides detailed information about the event. It is not set for other event types.
        public let markerRecordedEventAttributes: MarkerRecordedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes?
        /// If the event is of type TimerCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let timerCanceledEventAttributes: TimerCanceledEventAttributes?
        /// If the event is of type DecisionTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes?
        /// If the event is of type CompleteWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes?
        /// If the event is of type CancelWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes?
        public let startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes?
        /// If the event is of type ActivityTaskCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes?
        public let lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes?
        /// If the event is of type WorkflowExecutionCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type ContinueAsNewWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes?
        /// The type of the history event.
        public let eventType: EventType
        public let lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        public let startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type DecisionTaskTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        public let decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes?
        public let lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes?
        /// If the event is of type WorkflowExecutionSignaled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTerminated then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes?
        /// If the event is of type WorkflowExecutionStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes?
        /// If the event is of type ActivityTaskScheduled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes?
        /// If the event is of type RequestCancelActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes?
        /// If the event is of type ExternalWorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It is not set for other event types. 
        public let externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes?
        /// If the event is of type DecisionTaskScheduled then this member is set and provides detailed information about the event. It is not set for other event types.
        public let decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes?
        /// If the event is of type TimerStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let timerStartedEventAttributes: TimerStartedEventAttributes?
        /// If the event is of type ActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes?
        /// If the event is of type StartTimerFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let startTimerFailedEventAttributes: StartTimerFailedEventAttributes?
        /// If the event is of type ActivityTaskStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes?
        /// If the event is of type CancelTimerFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes?
        /// If the event is of type DecisionTaskCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        public let decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        public let requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes?
        public let scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes?
        /// The date and time when the event occurred.
        public let eventTimestamp: Date

        public init(scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil, activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil, workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil, activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil, workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil, decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil, eventId: Int64, timerFiredEventAttributes: TimerFiredEventAttributes? = nil, startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil, externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil, activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil, requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil, workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil, lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil, workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil, workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil, signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil, lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil, childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil, workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil, failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil, markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil, childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil, timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil, recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil, completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil, cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil, signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil, startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil, activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil, lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil, workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil, childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil, continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil, eventType: EventType, lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil, startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil, decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil, lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil, workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil, childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil, childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil, workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil, childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil, activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil, requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil, externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil, decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil, timerStartedEventAttributes: TimerStartedEventAttributes? = nil, activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil, startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil, activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil, cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil, decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil, requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil, scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil, eventTimestamp: Date) {
            self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
            self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
            self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
            self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
            self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
            self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
            self.eventId = eventId
            self.timerFiredEventAttributes = timerFiredEventAttributes
            self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
            self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
            self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
            self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
            self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
            self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
            self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
            self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
            self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
            self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
            self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
            self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
            self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
            self.markerRecordedEventAttributes = markerRecordedEventAttributes
            self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
            self.timerCanceledEventAttributes = timerCanceledEventAttributes
            self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
            self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
            self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
            self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
            self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
            self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
            self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
            self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
            self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
            self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
            self.eventType = eventType
            self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
            self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
            self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
            self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
            self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
            self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
            self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
            self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
            self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
            self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
            self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
            self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
            self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
            self.timerStartedEventAttributes = timerStartedEventAttributes
            self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
            self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
            self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
            self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
            self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
            self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
            self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
            self.eventTimestamp = eventTimestamp
        }

        public init(dictionary: [String: Any]) throws {
            if let scheduleActivityTaskFailedEventAttributes = dictionary["scheduleActivityTaskFailedEventAttributes"] as? [String: Any] { self.scheduleActivityTaskFailedEventAttributes = try Swf.ScheduleActivityTaskFailedEventAttributes(dictionary: scheduleActivityTaskFailedEventAttributes) } else { self.scheduleActivityTaskFailedEventAttributes = nil }
            if let activityTaskCompletedEventAttributes = dictionary["activityTaskCompletedEventAttributes"] as? [String: Any] { self.activityTaskCompletedEventAttributes = try Swf.ActivityTaskCompletedEventAttributes(dictionary: activityTaskCompletedEventAttributes) } else { self.activityTaskCompletedEventAttributes = nil }
            if let workflowExecutionFailedEventAttributes = dictionary["workflowExecutionFailedEventAttributes"] as? [String: Any] { self.workflowExecutionFailedEventAttributes = try Swf.WorkflowExecutionFailedEventAttributes(dictionary: workflowExecutionFailedEventAttributes) } else { self.workflowExecutionFailedEventAttributes = nil }
            if let activityTaskTimedOutEventAttributes = dictionary["activityTaskTimedOutEventAttributes"] as? [String: Any] { self.activityTaskTimedOutEventAttributes = try Swf.ActivityTaskTimedOutEventAttributes(dictionary: activityTaskTimedOutEventAttributes) } else { self.activityTaskTimedOutEventAttributes = nil }
            if let workflowExecutionTerminatedEventAttributes = dictionary["workflowExecutionTerminatedEventAttributes"] as? [String: Any] { self.workflowExecutionTerminatedEventAttributes = try Swf.WorkflowExecutionTerminatedEventAttributes(dictionary: workflowExecutionTerminatedEventAttributes) } else { self.workflowExecutionTerminatedEventAttributes = nil }
            if let decisionTaskStartedEventAttributes = dictionary["decisionTaskStartedEventAttributes"] as? [String: Any] { self.decisionTaskStartedEventAttributes = try Swf.DecisionTaskStartedEventAttributes(dictionary: decisionTaskStartedEventAttributes) } else { self.decisionTaskStartedEventAttributes = nil }
            guard let eventId = dictionary["eventId"] as? Int64 else { throw InitializableError.missingRequiredParam("eventId") }
            self.eventId = eventId
            if let timerFiredEventAttributes = dictionary["timerFiredEventAttributes"] as? [String: Any] { self.timerFiredEventAttributes = try Swf.TimerFiredEventAttributes(dictionary: timerFiredEventAttributes) } else { self.timerFiredEventAttributes = nil }
            if let startChildWorkflowExecutionFailedEventAttributes = dictionary["startChildWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.startChildWorkflowExecutionFailedEventAttributes = try Swf.StartChildWorkflowExecutionFailedEventAttributes(dictionary: startChildWorkflowExecutionFailedEventAttributes) } else { self.startChildWorkflowExecutionFailedEventAttributes = nil }
            if let externalWorkflowExecutionSignaledEventAttributes = dictionary["externalWorkflowExecutionSignaledEventAttributes"] as? [String: Any] { self.externalWorkflowExecutionSignaledEventAttributes = try Swf.ExternalWorkflowExecutionSignaledEventAttributes(dictionary: externalWorkflowExecutionSignaledEventAttributes) } else { self.externalWorkflowExecutionSignaledEventAttributes = nil }
            if let activityTaskCancelRequestedEventAttributes = dictionary["activityTaskCancelRequestedEventAttributes"] as? [String: Any] { self.activityTaskCancelRequestedEventAttributes = try Swf.ActivityTaskCancelRequestedEventAttributes(dictionary: activityTaskCancelRequestedEventAttributes) } else { self.activityTaskCancelRequestedEventAttributes = nil }
            if let requestCancelExternalWorkflowExecutionInitiatedEventAttributes = dictionary["requestCancelExternalWorkflowExecutionInitiatedEventAttributes"] as? [String: Any] { self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = try Swf.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes(dictionary: requestCancelExternalWorkflowExecutionInitiatedEventAttributes) } else { self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = nil }
            if let workflowExecutionCancelRequestedEventAttributes = dictionary["workflowExecutionCancelRequestedEventAttributes"] as? [String: Any] { self.workflowExecutionCancelRequestedEventAttributes = try Swf.WorkflowExecutionCancelRequestedEventAttributes(dictionary: workflowExecutionCancelRequestedEventAttributes) } else { self.workflowExecutionCancelRequestedEventAttributes = nil }
            if let lambdaFunctionScheduledEventAttributes = dictionary["lambdaFunctionScheduledEventAttributes"] as? [String: Any] { self.lambdaFunctionScheduledEventAttributes = try Swf.LambdaFunctionScheduledEventAttributes(dictionary: lambdaFunctionScheduledEventAttributes) } else { self.lambdaFunctionScheduledEventAttributes = nil }
            if let workflowExecutionTimedOutEventAttributes = dictionary["workflowExecutionTimedOutEventAttributes"] as? [String: Any] { self.workflowExecutionTimedOutEventAttributes = try Swf.WorkflowExecutionTimedOutEventAttributes(dictionary: workflowExecutionTimedOutEventAttributes) } else { self.workflowExecutionTimedOutEventAttributes = nil }
            if let workflowExecutionCanceledEventAttributes = dictionary["workflowExecutionCanceledEventAttributes"] as? [String: Any] { self.workflowExecutionCanceledEventAttributes = try Swf.WorkflowExecutionCanceledEventAttributes(dictionary: workflowExecutionCanceledEventAttributes) } else { self.workflowExecutionCanceledEventAttributes = nil }
            if let signalExternalWorkflowExecutionInitiatedEventAttributes = dictionary["signalExternalWorkflowExecutionInitiatedEventAttributes"] as? [String: Any] { self.signalExternalWorkflowExecutionInitiatedEventAttributes = try Swf.SignalExternalWorkflowExecutionInitiatedEventAttributes(dictionary: signalExternalWorkflowExecutionInitiatedEventAttributes) } else { self.signalExternalWorkflowExecutionInitiatedEventAttributes = nil }
            if let lambdaFunctionFailedEventAttributes = dictionary["lambdaFunctionFailedEventAttributes"] as? [String: Any] { self.lambdaFunctionFailedEventAttributes = try Swf.LambdaFunctionFailedEventAttributes(dictionary: lambdaFunctionFailedEventAttributes) } else { self.lambdaFunctionFailedEventAttributes = nil }
            if let childWorkflowExecutionCompletedEventAttributes = dictionary["childWorkflowExecutionCompletedEventAttributes"] as? [String: Any] { self.childWorkflowExecutionCompletedEventAttributes = try Swf.ChildWorkflowExecutionCompletedEventAttributes(dictionary: childWorkflowExecutionCompletedEventAttributes) } else { self.childWorkflowExecutionCompletedEventAttributes = nil }
            if let workflowExecutionContinuedAsNewEventAttributes = dictionary["workflowExecutionContinuedAsNewEventAttributes"] as? [String: Any] { self.workflowExecutionContinuedAsNewEventAttributes = try Swf.WorkflowExecutionContinuedAsNewEventAttributes(dictionary: workflowExecutionContinuedAsNewEventAttributes) } else { self.workflowExecutionContinuedAsNewEventAttributes = nil }
            if let failWorkflowExecutionFailedEventAttributes = dictionary["failWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.failWorkflowExecutionFailedEventAttributes = try Swf.FailWorkflowExecutionFailedEventAttributes(dictionary: failWorkflowExecutionFailedEventAttributes) } else { self.failWorkflowExecutionFailedEventAttributes = nil }
            if let markerRecordedEventAttributes = dictionary["markerRecordedEventAttributes"] as? [String: Any] { self.markerRecordedEventAttributes = try Swf.MarkerRecordedEventAttributes(dictionary: markerRecordedEventAttributes) } else { self.markerRecordedEventAttributes = nil }
            if let childWorkflowExecutionTimedOutEventAttributes = dictionary["childWorkflowExecutionTimedOutEventAttributes"] as? [String: Any] { self.childWorkflowExecutionTimedOutEventAttributes = try Swf.ChildWorkflowExecutionTimedOutEventAttributes(dictionary: childWorkflowExecutionTimedOutEventAttributes) } else { self.childWorkflowExecutionTimedOutEventAttributes = nil }
            if let timerCanceledEventAttributes = dictionary["timerCanceledEventAttributes"] as? [String: Any] { self.timerCanceledEventAttributes = try Swf.TimerCanceledEventAttributes(dictionary: timerCanceledEventAttributes) } else { self.timerCanceledEventAttributes = nil }
            if let recordMarkerFailedEventAttributes = dictionary["recordMarkerFailedEventAttributes"] as? [String: Any] { self.recordMarkerFailedEventAttributes = try Swf.RecordMarkerFailedEventAttributes(dictionary: recordMarkerFailedEventAttributes) } else { self.recordMarkerFailedEventAttributes = nil }
            if let completeWorkflowExecutionFailedEventAttributes = dictionary["completeWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.completeWorkflowExecutionFailedEventAttributes = try Swf.CompleteWorkflowExecutionFailedEventAttributes(dictionary: completeWorkflowExecutionFailedEventAttributes) } else { self.completeWorkflowExecutionFailedEventAttributes = nil }
            if let cancelWorkflowExecutionFailedEventAttributes = dictionary["cancelWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.cancelWorkflowExecutionFailedEventAttributes = try Swf.CancelWorkflowExecutionFailedEventAttributes(dictionary: cancelWorkflowExecutionFailedEventAttributes) } else { self.cancelWorkflowExecutionFailedEventAttributes = nil }
            if let signalExternalWorkflowExecutionFailedEventAttributes = dictionary["signalExternalWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.signalExternalWorkflowExecutionFailedEventAttributes = try Swf.SignalExternalWorkflowExecutionFailedEventAttributes(dictionary: signalExternalWorkflowExecutionFailedEventAttributes) } else { self.signalExternalWorkflowExecutionFailedEventAttributes = nil }
            if let startLambdaFunctionFailedEventAttributes = dictionary["startLambdaFunctionFailedEventAttributes"] as? [String: Any] { self.startLambdaFunctionFailedEventAttributes = try Swf.StartLambdaFunctionFailedEventAttributes(dictionary: startLambdaFunctionFailedEventAttributes) } else { self.startLambdaFunctionFailedEventAttributes = nil }
            if let activityTaskCanceledEventAttributes = dictionary["activityTaskCanceledEventAttributes"] as? [String: Any] { self.activityTaskCanceledEventAttributes = try Swf.ActivityTaskCanceledEventAttributes(dictionary: activityTaskCanceledEventAttributes) } else { self.activityTaskCanceledEventAttributes = nil }
            if let lambdaFunctionStartedEventAttributes = dictionary["lambdaFunctionStartedEventAttributes"] as? [String: Any] { self.lambdaFunctionStartedEventAttributes = try Swf.LambdaFunctionStartedEventAttributes(dictionary: lambdaFunctionStartedEventAttributes) } else { self.lambdaFunctionStartedEventAttributes = nil }
            if let workflowExecutionCompletedEventAttributes = dictionary["workflowExecutionCompletedEventAttributes"] as? [String: Any] { self.workflowExecutionCompletedEventAttributes = try Swf.WorkflowExecutionCompletedEventAttributes(dictionary: workflowExecutionCompletedEventAttributes) } else { self.workflowExecutionCompletedEventAttributes = nil }
            if let childWorkflowExecutionFailedEventAttributes = dictionary["childWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.childWorkflowExecutionFailedEventAttributes = try Swf.ChildWorkflowExecutionFailedEventAttributes(dictionary: childWorkflowExecutionFailedEventAttributes) } else { self.childWorkflowExecutionFailedEventAttributes = nil }
            if let continueAsNewWorkflowExecutionFailedEventAttributes = dictionary["continueAsNewWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.continueAsNewWorkflowExecutionFailedEventAttributes = try Swf.ContinueAsNewWorkflowExecutionFailedEventAttributes(dictionary: continueAsNewWorkflowExecutionFailedEventAttributes) } else { self.continueAsNewWorkflowExecutionFailedEventAttributes = nil }
            guard let raweventType = dictionary["eventType"] as? String, let eventType = EventType(rawValue: raweventType) else { throw InitializableError.missingRequiredParam("eventType") }
            self.eventType = eventType
            if let lambdaFunctionTimedOutEventAttributes = dictionary["lambdaFunctionTimedOutEventAttributes"] as? [String: Any] { self.lambdaFunctionTimedOutEventAttributes = try Swf.LambdaFunctionTimedOutEventAttributes(dictionary: lambdaFunctionTimedOutEventAttributes) } else { self.lambdaFunctionTimedOutEventAttributes = nil }
            if let startChildWorkflowExecutionInitiatedEventAttributes = dictionary["startChildWorkflowExecutionInitiatedEventAttributes"] as? [String: Any] { self.startChildWorkflowExecutionInitiatedEventAttributes = try Swf.StartChildWorkflowExecutionInitiatedEventAttributes(dictionary: startChildWorkflowExecutionInitiatedEventAttributes) } else { self.startChildWorkflowExecutionInitiatedEventAttributes = nil }
            if let decisionTaskTimedOutEventAttributes = dictionary["decisionTaskTimedOutEventAttributes"] as? [String: Any] { self.decisionTaskTimedOutEventAttributes = try Swf.DecisionTaskTimedOutEventAttributes(dictionary: decisionTaskTimedOutEventAttributes) } else { self.decisionTaskTimedOutEventAttributes = nil }
            if let lambdaFunctionCompletedEventAttributes = dictionary["lambdaFunctionCompletedEventAttributes"] as? [String: Any] { self.lambdaFunctionCompletedEventAttributes = try Swf.LambdaFunctionCompletedEventAttributes(dictionary: lambdaFunctionCompletedEventAttributes) } else { self.lambdaFunctionCompletedEventAttributes = nil }
            if let workflowExecutionSignaledEventAttributes = dictionary["workflowExecutionSignaledEventAttributes"] as? [String: Any] { self.workflowExecutionSignaledEventAttributes = try Swf.WorkflowExecutionSignaledEventAttributes(dictionary: workflowExecutionSignaledEventAttributes) } else { self.workflowExecutionSignaledEventAttributes = nil }
            if let childWorkflowExecutionTerminatedEventAttributes = dictionary["childWorkflowExecutionTerminatedEventAttributes"] as? [String: Any] { self.childWorkflowExecutionTerminatedEventAttributes = try Swf.ChildWorkflowExecutionTerminatedEventAttributes(dictionary: childWorkflowExecutionTerminatedEventAttributes) } else { self.childWorkflowExecutionTerminatedEventAttributes = nil }
            if let childWorkflowExecutionCanceledEventAttributes = dictionary["childWorkflowExecutionCanceledEventAttributes"] as? [String: Any] { self.childWorkflowExecutionCanceledEventAttributes = try Swf.ChildWorkflowExecutionCanceledEventAttributes(dictionary: childWorkflowExecutionCanceledEventAttributes) } else { self.childWorkflowExecutionCanceledEventAttributes = nil }
            if let workflowExecutionStartedEventAttributes = dictionary["workflowExecutionStartedEventAttributes"] as? [String: Any] { self.workflowExecutionStartedEventAttributes = try Swf.WorkflowExecutionStartedEventAttributes(dictionary: workflowExecutionStartedEventAttributes) } else { self.workflowExecutionStartedEventAttributes = nil }
            if let childWorkflowExecutionStartedEventAttributes = dictionary["childWorkflowExecutionStartedEventAttributes"] as? [String: Any] { self.childWorkflowExecutionStartedEventAttributes = try Swf.ChildWorkflowExecutionStartedEventAttributes(dictionary: childWorkflowExecutionStartedEventAttributes) } else { self.childWorkflowExecutionStartedEventAttributes = nil }
            if let activityTaskScheduledEventAttributes = dictionary["activityTaskScheduledEventAttributes"] as? [String: Any] { self.activityTaskScheduledEventAttributes = try Swf.ActivityTaskScheduledEventAttributes(dictionary: activityTaskScheduledEventAttributes) } else { self.activityTaskScheduledEventAttributes = nil }
            if let requestCancelActivityTaskFailedEventAttributes = dictionary["requestCancelActivityTaskFailedEventAttributes"] as? [String: Any] { self.requestCancelActivityTaskFailedEventAttributes = try Swf.RequestCancelActivityTaskFailedEventAttributes(dictionary: requestCancelActivityTaskFailedEventAttributes) } else { self.requestCancelActivityTaskFailedEventAttributes = nil }
            if let externalWorkflowExecutionCancelRequestedEventAttributes = dictionary["externalWorkflowExecutionCancelRequestedEventAttributes"] as? [String: Any] { self.externalWorkflowExecutionCancelRequestedEventAttributes = try Swf.ExternalWorkflowExecutionCancelRequestedEventAttributes(dictionary: externalWorkflowExecutionCancelRequestedEventAttributes) } else { self.externalWorkflowExecutionCancelRequestedEventAttributes = nil }
            if let decisionTaskScheduledEventAttributes = dictionary["decisionTaskScheduledEventAttributes"] as? [String: Any] { self.decisionTaskScheduledEventAttributes = try Swf.DecisionTaskScheduledEventAttributes(dictionary: decisionTaskScheduledEventAttributes) } else { self.decisionTaskScheduledEventAttributes = nil }
            if let timerStartedEventAttributes = dictionary["timerStartedEventAttributes"] as? [String: Any] { self.timerStartedEventAttributes = try Swf.TimerStartedEventAttributes(dictionary: timerStartedEventAttributes) } else { self.timerStartedEventAttributes = nil }
            if let activityTaskFailedEventAttributes = dictionary["activityTaskFailedEventAttributes"] as? [String: Any] { self.activityTaskFailedEventAttributes = try Swf.ActivityTaskFailedEventAttributes(dictionary: activityTaskFailedEventAttributes) } else { self.activityTaskFailedEventAttributes = nil }
            if let startTimerFailedEventAttributes = dictionary["startTimerFailedEventAttributes"] as? [String: Any] { self.startTimerFailedEventAttributes = try Swf.StartTimerFailedEventAttributes(dictionary: startTimerFailedEventAttributes) } else { self.startTimerFailedEventAttributes = nil }
            if let activityTaskStartedEventAttributes = dictionary["activityTaskStartedEventAttributes"] as? [String: Any] { self.activityTaskStartedEventAttributes = try Swf.ActivityTaskStartedEventAttributes(dictionary: activityTaskStartedEventAttributes) } else { self.activityTaskStartedEventAttributes = nil }
            if let cancelTimerFailedEventAttributes = dictionary["cancelTimerFailedEventAttributes"] as? [String: Any] { self.cancelTimerFailedEventAttributes = try Swf.CancelTimerFailedEventAttributes(dictionary: cancelTimerFailedEventAttributes) } else { self.cancelTimerFailedEventAttributes = nil }
            if let decisionTaskCompletedEventAttributes = dictionary["decisionTaskCompletedEventAttributes"] as? [String: Any] { self.decisionTaskCompletedEventAttributes = try Swf.DecisionTaskCompletedEventAttributes(dictionary: decisionTaskCompletedEventAttributes) } else { self.decisionTaskCompletedEventAttributes = nil }
            if let requestCancelExternalWorkflowExecutionFailedEventAttributes = dictionary["requestCancelExternalWorkflowExecutionFailedEventAttributes"] as? [String: Any] { self.requestCancelExternalWorkflowExecutionFailedEventAttributes = try Swf.RequestCancelExternalWorkflowExecutionFailedEventAttributes(dictionary: requestCancelExternalWorkflowExecutionFailedEventAttributes) } else { self.requestCancelExternalWorkflowExecutionFailedEventAttributes = nil }
            if let scheduleLambdaFunctionFailedEventAttributes = dictionary["scheduleLambdaFunctionFailedEventAttributes"] as? [String: Any] { self.scheduleLambdaFunctionFailedEventAttributes = try Swf.ScheduleLambdaFunctionFailedEventAttributes(dictionary: scheduleLambdaFunctionFailedEventAttributes) } else { self.scheduleLambdaFunctionFailedEventAttributes = nil }
            guard let eventTimestamp = dictionary["eventTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("eventTimestamp") }
            self.eventTimestamp = eventTimestamp
        }
    }

    public struct WorkflowExecution: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A system-generated unique identifier for the workflow execution.
        public let runId: String
        /// The user defined identifier associated with the workflow execution.
        public let workflowId: String

        public init(runId: String, workflowId: String) {
            self.runId = runId
            self.workflowId = workflowId
        }

        public init(dictionary: [String: Any]) throws {
            guard let runId = dictionary["runId"] as? String else { throw InitializableError.missingRequiredParam("runId") }
            self.runId = runId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
        }
    }

    public struct Run: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.
        public let runId: String?

        public init(runId: String? = nil) {
            self.runId = runId
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
        }
    }

    public struct LambdaFunctionCompletedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        public let startedEventId: Int64
        /// The result of the function execution (if any).
        public let result: String?

        public init(scheduledEventId: Int64, startedEventId: Int64, result: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            self.result = dictionary["result"] as? String
        }
    }

    public struct CountPendingActivityTasksInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain that contains the task list.
        public let domain: String
        /// The name of the task list.
        public let taskList: TaskList

        public init(domain: String, taskList: TaskList) {
            self.domain = domain
            self.taskList = taskList
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
        }
    }

    public struct WorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details of the failure (if any).
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The descriptive reason provided for the failure (if any).
        public let reason: String?

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, reason: String? = nil) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.reason = reason
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.reason = dictionary["reason"] as? String
        }
    }

    public enum CloseStatus: String, CustomStringConvertible {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        case terminated = "TERMINATED"
        case continued_as_new = "CONTINUED_AS_NEW"
        case timed_out = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct RegisterDomainInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A text description of the domain.
        public let description: String?
        /// Name of the domain to register. The name must be unique in the region that the domain is registered in. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let name: String
        /// The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution is not available in the results of visibility calls. If you pass the value NONE or 0 (zero), then the workflow execution history will not be retained. As soon as the workflow execution completes, the execution record and its history are deleted. The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: Amazon SWF Service Limits in the Amazon SWF Developer Guide.
        public let workflowExecutionRetentionPeriodInDays: String

        public init(description: String? = nil, name: String, workflowExecutionRetentionPeriodInDays: String) {
            self.description = description
            self.name = name
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let workflowExecutionRetentionPeriodInDays = dictionary["workflowExecutionRetentionPeriodInDays"] as? String else { throw InitializableError.missingRequiredParam("workflowExecutionRetentionPeriodInDays") }
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }
    }

    public struct WorkflowExecutionCompletedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The result produced by the workflow execution upon successful completion.
        public let result: String?

        public init(decisionTaskCompletedEventId: Int64, result: String? = nil) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.result = dictionary["result"] as? String
        }
    }

    public struct RecordMarkerFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarkerFailed decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The marker's name.
        public let markerName: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: RecordMarkerFailedCause

        public init(decisionTaskCompletedEventId: Int64, markerName: String, cause: RecordMarkerFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let markerName = dictionary["markerName"] as? String else { throw InitializableError.missingRequiredParam("markerName") }
            self.markerName = markerName
            guard let rawcause = dictionary["cause"] as? String, let cause = RecordMarkerFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct DecisionTaskStartedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
            self.identity = dictionary["identity"] as? String
        }
    }

    public struct DeprecateDomainInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain to deprecate.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
        }
    }

    public struct StartChildWorkflowExecutionInitiatedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        public let lambdaRole: String?
        /// The name of the task list used for the decision tasks of the child workflow execution.
        public let taskList: TaskList
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the child workflow execution.
        public let workflowId: String
        /// Optional. The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// Optional. Data attached to the event that can be used by the decider in subsequent decision tasks. This data is not sent to the activity.
        public let control: String?
        /// The list of tags to associated with the child workflow execution.
        public let tagList: [String]?
        /// The inputs provided to the child workflow execution (if any).
        public let input: String?
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the TerminateWorkflowExecution action or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy
        /// The maximum duration allowed for the decision tasks for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// The maximum duration for the child workflow execution. If the workflow execution is not closed within this duration, it will be timed out and force terminated. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let executionStartToCloseTimeout: String?

        public init(lambdaRole: String? = nil, taskList: TaskList, decisionTaskCompletedEventId: Int64, workflowId: String, taskPriority: String? = nil, control: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: ChildPolicy, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.control = control
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.taskPriority = dictionary["taskPriority"] as? String
            self.control = dictionary["control"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.input = dictionary["input"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
        }
    }

    public struct RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the external workflow execution to be canceled.
        public let runId: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the external workflow execution to be canceled.
        public let workflowId: String
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?

        public init(runId: String? = nil, decisionTaskCompletedEventId: Int64, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.control = dictionary["control"] as? String
        }
    }

    public struct ListDomainsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the domains.
        public let reverseOrder: Bool?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// Specifies the registration status of the domains to list.
        public let registrationStatus: RegistrationStatus

        public init(maximumPageSize: Int32? = nil, reverseOrder: Bool? = nil, nextPageToken: String? = nil, registrationStatus: RegistrationStatus) {
            self.maximumPageSize = maximumPageSize
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.registrationStatus = registrationStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let rawregistrationStatus = dictionary["registrationStatus"] as? String, let registrationStatus = RegistrationStatus(rawValue: rawregistrationStatus) else { throw InitializableError.missingRequiredParam("registrationStatus") }
            self.registrationStatus = registrationStatus
        }
    }

    public struct WorkflowTypeConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. The default maximum duration, specified when registering the workflow type, for executions of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultExecutionStartToCloseTimeout: String?
        /// Optional. The default maximum duration, specified when registering the workflow type, that a decision task for executions of this workflow type might take before returning completion or failure. If the task does not close in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// Optional. The default task priority, specified when registering the workflow type, for all decision tasks of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let defaultTaskPriority: String?
        /// Optional. The default task list, specified when registering the workflow type, for decisions tasks scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision.
        public let defaultTaskList: TaskList?
        /// The default IAM role to use when a workflow execution invokes a AWS Lambda function.
        public let defaultLambdaRole: String?
        /// Optional. The default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let defaultChildPolicy: ChildPolicy?

        public init(defaultExecutionStartToCloseTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, defaultLambdaRole: String? = nil, defaultChildPolicy: ChildPolicy? = nil) {
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultChildPolicy = defaultChildPolicy
        }

        public init(dictionary: [String: Any]) throws {
            self.defaultExecutionStartToCloseTimeout = dictionary["defaultExecutionStartToCloseTimeout"] as? String
            self.defaultTaskStartToCloseTimeout = dictionary["defaultTaskStartToCloseTimeout"] as? String
            self.defaultTaskPriority = dictionary["defaultTaskPriority"] as? String
            if let defaultTaskList = dictionary["defaultTaskList"] as? [String: Any] { self.defaultTaskList = try Swf.TaskList(dictionary: defaultTaskList) } else { self.defaultTaskList = nil }
            self.defaultLambdaRole = dictionary["defaultLambdaRole"] as? String
            if let defaultChildPolicy = dictionary["defaultChildPolicy"] as? String { self.defaultChildPolicy = ChildPolicy(rawValue: defaultChildPolicy) } else { self.defaultChildPolicy = nil }
        }
    }

    public struct FailWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: FailWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: FailWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = FailWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public enum WorkflowExecutionTerminatedCause: String, CustomStringConvertible {
        case child_policy_applied = "CHILD_POLICY_APPLIED"
        case event_limit_exceeded = "EVENT_LIMIT_EXCEEDED"
        case operator_initiated = "OPERATOR_INITIATED"
        public var description: String { return self.rawValue }
    }

    public enum RecordMarkerFailedCause: String, CustomStringConvertible {
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct RespondActivityTaskCanceledInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. Information about the cancellation.
        public let details: String?
        /// The taskToken of the ActivityTask. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        public let taskToken: String

        public init(details: String? = nil, taskToken: String) {
            self.details = details
            self.taskToken = taskToken
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
        }
    }

    public struct RegisterActivityTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the activity type within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let name: String
        /// If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskScheduleToStartTimeout: String?
        /// A textual description of the activity type.
        public let description: String?
        /// The version of the activity type. The activity type consists of the name and version, the combination of which must be unique within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let version: String
        /// If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskHeartbeatTimeout: String?
        /// The default task priority to assign to the activity type. If not assigned, then "0" will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let defaultTaskPriority: String?
        /// If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list is not provided when a task is scheduled through the ScheduleActivityTask decision.
        public let defaultTaskList: TaskList?
        /// The name of the domain in which this activity is to be registered.
        public let domain: String
        /// If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskScheduleToCloseTimeout: String?

        public init(name: String, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskScheduleToStartTimeout: String? = nil, description: String? = nil, version: String, defaultTaskHeartbeatTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, domain: String, defaultTaskScheduleToCloseTimeout: String? = nil) {
            self.name = name
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.description = description
            self.version = version
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.domain = domain
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            self.defaultTaskStartToCloseTimeout = dictionary["defaultTaskStartToCloseTimeout"] as? String
            self.defaultTaskScheduleToStartTimeout = dictionary["defaultTaskScheduleToStartTimeout"] as? String
            self.description = dictionary["description"] as? String
            guard let version = dictionary["version"] as? String else { throw InitializableError.missingRequiredParam("version") }
            self.version = version
            self.defaultTaskHeartbeatTimeout = dictionary["defaultTaskHeartbeatTimeout"] as? String
            self.defaultTaskPriority = dictionary["defaultTaskPriority"] as? String
            if let defaultTaskList = dictionary["defaultTaskList"] as? [String: Any] { self.defaultTaskList = try Swf.TaskList(dictionary: defaultTaskList) } else { self.defaultTaskList = nil }
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            self.defaultTaskScheduleToCloseTimeout = dictionary["defaultTaskScheduleToCloseTimeout"] as? String
        }
    }

    public enum SignalExternalWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unknown_external_workflow_execution = "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case signal_external_workflow_execution_rate_exceeded = "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct ActivityTaskTimedOutEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains the content of the details parameter for the last call made by the activity to RecordActivityTaskHeartbeat.
        public let details: String?
        /// The type of the timeout that caused this event.
        public let timeoutType: ActivityTaskTimeoutType
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(details: String? = nil, timeoutType: ActivityTaskTimeoutType, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.timeoutType = timeoutType
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let rawtimeoutType = dictionary["timeoutType"] as? String, let timeoutType = ActivityTaskTimeoutType(rawValue: rawtimeoutType) else { throw InitializableError.missingRequiredParam("timeoutType") }
            self.timeoutType = timeoutType
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
        }
    }

    public struct ActivityTaskStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Set to true if cancellation of the task is requested.
        public let cancelRequested: Bool

        public init(cancelRequested: Bool) {
            self.cancelRequested = cancelRequested
        }

        public init(dictionary: [String: Any]) throws {
            guard let cancelRequested = dictionary["cancelRequested"] as? Bool else { throw InitializableError.missingRequiredParam("cancelRequested") }
            self.cancelRequested = cancelRequested
        }
    }

    public enum FailWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unhandled_decision = "UNHANDLED_DECISION"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct ActivityTaskScheduledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The task list in which the activity task has been scheduled.
        public let taskList: TaskList
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The unique ID of the activity task.
        public let activityId: String
        /// The maximum amount of time for this activity task.
        public let scheduleToCloseTimeout: String?
        /// The maximum amount of time the activity task can wait to be assigned to a worker.
        public let scheduleToStartTimeout: String?
        /// Optional. The priority to assign to the scheduled activity task. If set, this will override any default priority value that was assigned when the activity type was registered. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// The maximum amount of time a worker may take to process the activity task.
        public let startToCloseTimeout: String?
        /// The input provided to the activity task.
        public let input: String?
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the activity.
        public let control: String?
        /// The maximum time before which the worker processing this task must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or return a result, it will be ignored.
        public let heartbeatTimeout: String?
        /// The type of the activity task.
        public let activityType: ActivityType

        public init(taskList: TaskList, decisionTaskCompletedEventId: Int64, activityId: String, scheduleToCloseTimeout: String? = nil, scheduleToStartTimeout: String? = nil, taskPriority: String? = nil, startToCloseTimeout: String? = nil, input: String? = nil, control: String? = nil, heartbeatTimeout: String? = nil, activityType: ActivityType) {
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.taskPriority = taskPriority
            self.startToCloseTimeout = startToCloseTimeout
            self.input = input
            self.control = control
            self.heartbeatTimeout = heartbeatTimeout
            self.activityType = activityType
        }

        public init(dictionary: [String: Any]) throws {
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
            self.scheduleToCloseTimeout = dictionary["scheduleToCloseTimeout"] as? String
            self.scheduleToStartTimeout = dictionary["scheduleToStartTimeout"] as? String
            self.taskPriority = dictionary["taskPriority"] as? String
            self.startToCloseTimeout = dictionary["startToCloseTimeout"] as? String
            self.input = dictionary["input"] as? String
            self.control = dictionary["control"] as? String
            self.heartbeatTimeout = dictionary["heartbeatTimeout"] as? String
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
        }
    }

    public struct TerminateWorkflowExecutionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the workflow execution to terminate.
        public let runId: String?
        /// Optional. Details for terminating the workflow execution.
        public let details: String?
        /// Optional. A descriptive reason for terminating the workflow execution.
        public let reason: String?
        /// The workflowId of the workflow execution to terminate.
        public let workflowId: String
        /// The domain of the workflow execution to terminate.
        public let domain: String
        /// If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        public let childPolicy: ChildPolicy?

        public init(runId: String? = nil, details: String? = nil, reason: String? = nil, workflowId: String, domain: String, childPolicy: ChildPolicy? = nil) {
            self.runId = runId
            self.details = details
            self.reason = reason
            self.workflowId = workflowId
            self.domain = domain
            self.childPolicy = childPolicy
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            self.details = dictionary["details"] as? String
            self.reason = dictionary["reason"] as? String
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            if let childPolicy = dictionary["childPolicy"] as? String { self.childPolicy = ChildPolicy(rawValue: childPolicy) } else { self.childPolicy = nil }
        }
    }

    public struct ChildWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details of the failure (if provided).
        public let details: String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The reason for the failure (if provided).
        public let reason: String?
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that failed.
        public let workflowExecution: WorkflowExecution

        public init(details: String? = nil, initiatedEventId: Int64, reason: String? = nil, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.reason = reason
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            self.reason = dictionary["reason"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public struct ChildWorkflowExecutionCompletedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The result of the child workflow execution (if any).
        public let result: String?
        /// The child workflow execution that was completed.
        public let workflowExecution: WorkflowExecution

        public init(initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, result: String? = nil, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.result = result
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            self.result = dictionary["result"] as? String
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public enum StartChildWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case workflow_type_does_not_exist = "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case workflow_type_deprecated = "WORKFLOW_TYPE_DEPRECATED"
        case open_children_limit_exceeded = "OPEN_CHILDREN_LIMIT_EXCEEDED"
        case open_workflows_limit_exceeded = "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
        case child_creation_rate_exceeded = "CHILD_CREATION_RATE_EXCEEDED"
        case workflow_already_running = "WORKFLOW_ALREADY_RUNNING"
        case default_execution_start_to_close_timeout_undefined = "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_task_list_undefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case default_task_start_to_close_timeout_undefined = "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case default_child_policy_undefined = "DEFAULT_CHILD_POLICY_UNDEFINED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public enum ExecutionStatus: String, CustomStringConvertible {
        case open = "OPEN"
        case closed = "CLOSED"
        public var description: String { return self.rawValue }
    }

    public struct RequestCancelActivityTaskDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activityId of the activity task to be canceled.
        public let activityId: String

        public init(activityId: String) {
            self.activityId = activityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let activityId = dictionary["activityId"] as? String else { throw InitializableError.missingRequiredParam("activityId") }
            self.activityId = activityId
        }
    }

    public struct ContinueAsNewWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        public let lambdaRole: String?
        public let workflowTypeVersion: String?
        public let taskList: TaskList?
        /// Optional. The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// The input provided to the new workflow execution.
        public let input: String?
        /// If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        public let childPolicy: ChildPolicy?
        /// Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        public let taskStartToCloseTimeout: String?
        /// If set, specifies the total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault will be returned.
        public let executionStartToCloseTimeout: String?

        public init(lambdaRole: String? = nil, workflowTypeVersion: String? = nil, taskList: TaskList? = nil, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, childPolicy: ChildPolicy? = nil, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.workflowTypeVersion = workflowTypeVersion
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            self.workflowTypeVersion = dictionary["workflowTypeVersion"] as? String
            if let taskList = dictionary["taskList"] as? [String: Any] { self.taskList = try Swf.TaskList(dictionary: taskList) } else { self.taskList = nil }
            self.taskPriority = dictionary["taskPriority"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.input = dictionary["input"] as? String
            if let childPolicy = dictionary["childPolicy"] as? String { self.childPolicy = ChildPolicy(rawValue: childPolicy) } else { self.childPolicy = nil }
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
        }
    }

    public enum StartLambdaFunctionFailedCause: String, CustomStringConvertible {
        case assume_role_failed = "ASSUME_ROLE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct StartLambdaFunctionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64?
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: StartLambdaFunctionFailedCause?
        /// The error message (if any).
        public let message: String?

        public init(scheduledEventId: Int64? = nil, cause: StartLambdaFunctionFailedCause? = nil, message: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.cause = cause
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            self.scheduledEventId = dictionary["scheduledEventId"] as? Int64
            if let cause = dictionary["cause"] as? String { self.cause = StartLambdaFunctionFailedCause(rawValue: cause) } else { self.cause = nil }
            self.message = dictionary["message"] as? String
        }
    }

    public struct SignalExternalWorkflowExecutionInitiatedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the external workflow execution to send the signal to.
        public let runId: String?
        /// The name of the signal.
        public let signalName: String
        /// Input provided to the signal (if any).
        public let input: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the external workflow execution.
        public let workflowId: String
        /// Optional. data attached to the event that can be used by the decider in subsequent decision tasks.
        public let control: String?

        public init(runId: String? = nil, signalName: String, input: String? = nil, decisionTaskCompletedEventId: Int64, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let signalName = dictionary["signalName"] as? String else { throw InitializableError.missingRequiredParam("signalName") }
            self.signalName = signalName
            self.input = dictionary["input"] as? String
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            self.control = dictionary["control"] as? String
        }
    }

    public struct WorkflowTypeFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. Name of the workflow type.
        public let name: String
        /// Version of the workflow type.
        public let version: String?

        public init(name: String, version: String? = nil) {
            self.name = name
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            self.version = dictionary["version"] as? String
        }
    }

    public struct GetWorkflowExecutionHistoryInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// Specifies the workflow execution for which to return the history.
        public let execution: WorkflowExecution
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimeStamp of the events.
        public let reverseOrder: Bool?
        /// The name of the domain containing the workflow execution.
        public let domain: String

        public init(maximumPageSize: Int32? = nil, execution: WorkflowExecution, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String) {
            self.maximumPageSize = maximumPageSize
            self.execution = execution
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            guard let execution = dictionary["execution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("execution") }
            self.execution = try Swf.WorkflowExecution(dictionary: execution)
            self.nextPageToken = dictionary["nextPageToken"] as? String
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public enum DecisionTaskTimeoutType: String, CustomStringConvertible {
        case start_to_close = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public struct ActivityTypeConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. The default maximum duration, specified when registering the activity type, that a task of an activity type can wait before being assigned to a worker. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskScheduleToStartTimeout: String?
        /// Optional. The default maximum duration for tasks of an activity type specified when registering the activity type. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// Optional. The default task priority for tasks of this activity type, specified at registration. If not set, then "0" will be used as the default priority. This default can be overridden when scheduling an activity task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let defaultTaskPriority: String?
        /// Optional. The default task list specified for this activity type at registration. This default is used if a task list is not provided when a task is scheduled through the ScheduleActivityTask decision. You can override the default registered task list when scheduling a task through the ScheduleActivityTask decision.
        public let defaultTaskList: TaskList?
        /// Optional. The default maximum duration, specified when registering the activity type, for tasks of this activity type. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskScheduleToCloseTimeout: String?
        /// Optional. The default maximum time, in seconds, before which a worker processing a task must report progress by calling RecordActivityTaskHeartbeat. You can specify this value only when registering an activity type. The registered default value can be overridden when you schedule a task through the ScheduleActivityTask decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let defaultTaskHeartbeatTimeout: String?

        public init(defaultTaskScheduleToStartTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, defaultTaskScheduleToCloseTimeout: String? = nil, defaultTaskHeartbeatTimeout: String? = nil) {
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.defaultTaskScheduleToStartTimeout = dictionary["defaultTaskScheduleToStartTimeout"] as? String
            self.defaultTaskStartToCloseTimeout = dictionary["defaultTaskStartToCloseTimeout"] as? String
            self.defaultTaskPriority = dictionary["defaultTaskPriority"] as? String
            if let defaultTaskList = dictionary["defaultTaskList"] as? [String: Any] { self.defaultTaskList = try Swf.TaskList(dictionary: defaultTaskList) } else { self.defaultTaskList = nil }
            self.defaultTaskScheduleToCloseTimeout = dictionary["defaultTaskScheduleToCloseTimeout"] as? String
            self.defaultTaskHeartbeatTimeout = dictionary["defaultTaskHeartbeatTimeout"] as? String
        }
    }

    public struct TimerCanceledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        ///  The unique ID of the timer that was canceled. 
        public let timerId: String

        public init(startedEventId: Int64, decisionTaskCompletedEventId: Int64, timerId: String) {
            self.startedEventId = startedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
        }
    }

    public struct ListActivityTypesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, only lists the activity types that have this name.
        public let name: String?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the activity types.
        public let reverseOrder: Bool?
        /// The name of the domain in which the activity types have been registered.
        public let domain: String
        /// Specifies the registration status of the activity types to list.
        public let registrationStatus: RegistrationStatus

        public init(maximumPageSize: Int32? = nil, name: String? = nil, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String, registrationStatus: RegistrationStatus) {
            self.maximumPageSize = maximumPageSize
            self.name = name
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.registrationStatus = registrationStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.maximumPageSize = dictionary["maximumPageSize"] as? Int32
            self.name = dictionary["name"] as? String
            self.nextPageToken = dictionary["nextPageToken"] as? String
            self.reverseOrder = dictionary["reverseOrder"] as? Bool
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let rawregistrationStatus = dictionary["registrationStatus"] as? String, let registrationStatus = RegistrationStatus(rawValue: rawregistrationStatus) else { throw InitializableError.missingRequiredParam("registrationStatus") }
            self.registrationStatus = registrationStatus
        }
    }

    public struct FailWorkflowExecutionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional. Details of the failure.
        public let details: String?
        /// A descriptive reason for the failure that may help in diagnostics.
        public let reason: String?

        public init(details: String? = nil, reason: String? = nil) {
            self.details = details
            self.reason = reason
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            self.reason = dictionary["reason"] as? String
        }
    }

    public struct PendingTaskCount: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        public let truncated: Bool?
        /// The number of tasks in the task list.
        public let count: Int32

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["truncated"] as? Bool
            guard let count = dictionary["count"] as? Int32 else { throw InitializableError.missingRequiredParam("count") }
            self.count = count
        }
    }

    public struct WorkflowExecutionContinuedAsNewEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        public let lambdaRole: String?
        public let taskList: TaskList
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The runId of the new workflow execution.
        public let newExecutionRunId: String
        public let taskPriority: String?
        /// The list of tags associated with the new workflow execution.
        public let tagList: [String]?
        /// The input provided to the new workflow execution.
        public let input: String?
        public let workflowType: WorkflowType
        /// The policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy
        /// The maximum duration of decision tasks for the new workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// The total duration allowed for the new workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let executionStartToCloseTimeout: String?

        public init(lambdaRole: String? = nil, taskList: TaskList, decisionTaskCompletedEventId: Int64, newExecutionRunId: String, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: ChildPolicy, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.newExecutionRunId = newExecutionRunId
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

        public init(dictionary: [String: Any]) throws {
            self.lambdaRole = dictionary["lambdaRole"] as? String
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let newExecutionRunId = dictionary["newExecutionRunId"] as? String else { throw InitializableError.missingRequiredParam("newExecutionRunId") }
            self.newExecutionRunId = newExecutionRunId
            self.taskPriority = dictionary["taskPriority"] as? String
            self.tagList = dictionary["tagList"] as? [String]
            self.input = dictionary["input"] as? String
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = dictionary["taskStartToCloseTimeout"] as? String
            self.executionStartToCloseTimeout = dictionary["executionStartToCloseTimeout"] as? String
        }
    }

    public enum StartTimerFailedCause: String, CustomStringConvertible {
        case timer_id_already_in_use = "TIMER_ID_ALREADY_IN_USE"
        case open_timers_limit_exceeded = "OPEN_TIMERS_LIMIT_EXCEEDED"
        case timer_creation_rate_exceeded = "TIMER_CREATION_RATE_EXCEEDED"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct Decision: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Provides details of the ScheduleActivityTask decision. It is not set for other decision types.
        public let scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes?
        /// Provides details of the RequestCancelExternalWorkflowExecution decision. It is not set for other decision types.
        public let requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes?
        /// Provides details of the CancelTimer decision. It is not set for other decision types.
        public let cancelTimerDecisionAttributes: CancelTimerDecisionAttributes?
        /// Provides details of the SignalExternalWorkflowExecution decision. It is not set for other decision types.
        public let signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes?
        /// Provides details of the RequestCancelActivityTask decision. It is not set for other decision types.
        public let requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes?
        /// Provides details of the RecordMarker decision. It is not set for other decision types.
        public let recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes?
        /// Provides details of the FailWorkflowExecution decision. It is not set for other decision types.
        public let failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes?
        /// Provides details of the CancelWorkflowExecution decision. It is not set for other decision types.
        public let cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes?
        /// Specifies the type of the decision.
        public let decisionType: DecisionType
        /// Provides details of the ContinueAsNewWorkflowExecution decision. It is not set for other decision types.
        public let continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes?
        /// Provides details of the StartTimer decision. It is not set for other decision types.
        public let startTimerDecisionAttributes: StartTimerDecisionAttributes?
        /// Provides details of the StartChildWorkflowExecution decision. It is not set for other decision types.
        public let startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes?
        /// Provides details of the CompleteWorkflowExecution decision. It is not set for other decision types.
        public let completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes?
        public let scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes?

        public init(scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes? = nil, requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil, cancelTimerDecisionAttributes: CancelTimerDecisionAttributes? = nil, signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes? = nil, requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes? = nil, recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes? = nil, failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes? = nil, cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes? = nil, decisionType: DecisionType, continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes? = nil, startTimerDecisionAttributes: StartTimerDecisionAttributes? = nil, startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes? = nil, completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes? = nil, scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes? = nil) {
            self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
            self.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes
            self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes
            self.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes
            self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
            self.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes
            self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
            self.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes
            self.decisionType = decisionType
            self.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes
            self.startTimerDecisionAttributes = startTimerDecisionAttributes
            self.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes
            self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
            self.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes
        }

        public init(dictionary: [String: Any]) throws {
            if let scheduleActivityTaskDecisionAttributes = dictionary["scheduleActivityTaskDecisionAttributes"] as? [String: Any] { self.scheduleActivityTaskDecisionAttributes = try Swf.ScheduleActivityTaskDecisionAttributes(dictionary: scheduleActivityTaskDecisionAttributes) } else { self.scheduleActivityTaskDecisionAttributes = nil }
            if let requestCancelExternalWorkflowExecutionDecisionAttributes = dictionary["requestCancelExternalWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.requestCancelExternalWorkflowExecutionDecisionAttributes = try Swf.RequestCancelExternalWorkflowExecutionDecisionAttributes(dictionary: requestCancelExternalWorkflowExecutionDecisionAttributes) } else { self.requestCancelExternalWorkflowExecutionDecisionAttributes = nil }
            if let cancelTimerDecisionAttributes = dictionary["cancelTimerDecisionAttributes"] as? [String: Any] { self.cancelTimerDecisionAttributes = try Swf.CancelTimerDecisionAttributes(dictionary: cancelTimerDecisionAttributes) } else { self.cancelTimerDecisionAttributes = nil }
            if let signalExternalWorkflowExecutionDecisionAttributes = dictionary["signalExternalWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.signalExternalWorkflowExecutionDecisionAttributes = try Swf.SignalExternalWorkflowExecutionDecisionAttributes(dictionary: signalExternalWorkflowExecutionDecisionAttributes) } else { self.signalExternalWorkflowExecutionDecisionAttributes = nil }
            if let requestCancelActivityTaskDecisionAttributes = dictionary["requestCancelActivityTaskDecisionAttributes"] as? [String: Any] { self.requestCancelActivityTaskDecisionAttributes = try Swf.RequestCancelActivityTaskDecisionAttributes(dictionary: requestCancelActivityTaskDecisionAttributes) } else { self.requestCancelActivityTaskDecisionAttributes = nil }
            if let recordMarkerDecisionAttributes = dictionary["recordMarkerDecisionAttributes"] as? [String: Any] { self.recordMarkerDecisionAttributes = try Swf.RecordMarkerDecisionAttributes(dictionary: recordMarkerDecisionAttributes) } else { self.recordMarkerDecisionAttributes = nil }
            if let failWorkflowExecutionDecisionAttributes = dictionary["failWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.failWorkflowExecutionDecisionAttributes = try Swf.FailWorkflowExecutionDecisionAttributes(dictionary: failWorkflowExecutionDecisionAttributes) } else { self.failWorkflowExecutionDecisionAttributes = nil }
            if let cancelWorkflowExecutionDecisionAttributes = dictionary["cancelWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.cancelWorkflowExecutionDecisionAttributes = try Swf.CancelWorkflowExecutionDecisionAttributes(dictionary: cancelWorkflowExecutionDecisionAttributes) } else { self.cancelWorkflowExecutionDecisionAttributes = nil }
            guard let rawdecisionType = dictionary["decisionType"] as? String, let decisionType = DecisionType(rawValue: rawdecisionType) else { throw InitializableError.missingRequiredParam("decisionType") }
            self.decisionType = decisionType
            if let continueAsNewWorkflowExecutionDecisionAttributes = dictionary["continueAsNewWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.continueAsNewWorkflowExecutionDecisionAttributes = try Swf.ContinueAsNewWorkflowExecutionDecisionAttributes(dictionary: continueAsNewWorkflowExecutionDecisionAttributes) } else { self.continueAsNewWorkflowExecutionDecisionAttributes = nil }
            if let startTimerDecisionAttributes = dictionary["startTimerDecisionAttributes"] as? [String: Any] { self.startTimerDecisionAttributes = try Swf.StartTimerDecisionAttributes(dictionary: startTimerDecisionAttributes) } else { self.startTimerDecisionAttributes = nil }
            if let startChildWorkflowExecutionDecisionAttributes = dictionary["startChildWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.startChildWorkflowExecutionDecisionAttributes = try Swf.StartChildWorkflowExecutionDecisionAttributes(dictionary: startChildWorkflowExecutionDecisionAttributes) } else { self.startChildWorkflowExecutionDecisionAttributes = nil }
            if let completeWorkflowExecutionDecisionAttributes = dictionary["completeWorkflowExecutionDecisionAttributes"] as? [String: Any] { self.completeWorkflowExecutionDecisionAttributes = try Swf.CompleteWorkflowExecutionDecisionAttributes(dictionary: completeWorkflowExecutionDecisionAttributes) } else { self.completeWorkflowExecutionDecisionAttributes = nil }
            if let scheduleLambdaFunctionDecisionAttributes = dictionary["scheduleLambdaFunctionDecisionAttributes"] as? [String: Any] { self.scheduleLambdaFunctionDecisionAttributes = try Swf.ScheduleLambdaFunctionDecisionAttributes(dictionary: scheduleLambdaFunctionDecisionAttributes) } else { self.scheduleLambdaFunctionDecisionAttributes = nil }
        }
    }

    public struct WorkflowTypeInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The description of the type registered through RegisterWorkflowType.
        public let description: String?
        /// The current status of the workflow type.
        public let status: RegistrationStatus
        /// If the type is in deprecated state, then it is set to the date when the type was deprecated.
        public let deprecationDate: Date?
        /// The date when this type was registered.
        public let creationDate: Date
        /// The workflow type this information is about.
        public let workflowType: WorkflowType

        public init(description: String? = nil, status: RegistrationStatus, deprecationDate: Date? = nil, creationDate: Date, workflowType: WorkflowType) {
            self.description = description
            self.status = status
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.workflowType = workflowType
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let rawstatus = dictionary["status"] as? String, let status = RegistrationStatus(rawValue: rawstatus) else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            self.deprecationDate = dictionary["deprecationDate"] as? Date
            guard let creationDate = dictionary["creationDate"] as? Date else { throw InitializableError.missingRequiredParam("creationDate") }
            self.creationDate = creationDate
            guard let workflowType = dictionary["workflowType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowType") }
            self.workflowType = try Swf.WorkflowType(dictionary: workflowType)
        }
    }

    public struct WorkflowExecutionSignaledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.
        public let signalName: String
        /// Inputs provided with the signal (if any). The decider can use the signal name and inputs to determine how to process the signal.
        public let input: String?
        /// The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.
        public let externalWorkflowExecution: WorkflowExecution?
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflow decision to signal this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event. This field is set only if the signal was initiated by another workflow execution.
        public let externalInitiatedEventId: Int64?

        public init(signalName: String, input: String? = nil, externalWorkflowExecution: WorkflowExecution? = nil, externalInitiatedEventId: Int64? = nil) {
            self.signalName = signalName
            self.input = input
            self.externalWorkflowExecution = externalWorkflowExecution
            self.externalInitiatedEventId = externalInitiatedEventId
        }

        public init(dictionary: [String: Any]) throws {
            guard let signalName = dictionary["signalName"] as? String else { throw InitializableError.missingRequiredParam("signalName") }
            self.signalName = signalName
            self.input = dictionary["input"] as? String
            if let externalWorkflowExecution = dictionary["externalWorkflowExecution"] as? [String: Any] { self.externalWorkflowExecution = try Swf.WorkflowExecution(dictionary: externalWorkflowExecution) } else { self.externalWorkflowExecution = nil }
            self.externalInitiatedEventId = dictionary["externalInitiatedEventId"] as? Int64
        }
    }

    public struct ActivityTypeInfos: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// List of activity type information.
        public let typeInfos: [ActivityTypeInfo]

        public init(nextPageToken: String? = nil, typeInfos: [ActivityTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let typeInfos = dictionary["typeInfos"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("typeInfos") }
            self.typeInfos = try typeInfos.map({ try ActivityTypeInfo(dictionary: $0) })
        }
    }

    public struct RespondDecisionTaskCompletedInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The taskToken from the DecisionTask. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        public let taskToken: String
        /// User defined context to add to workflow execution.
        public let executionContext: String?
        /// The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the decision structure for details.
        public let decisions: [Decision]?

        public init(taskToken: String, executionContext: String? = nil, decisions: [Decision]? = nil) {
            self.taskToken = taskToken
            self.executionContext = executionContext
            self.decisions = decisions
        }

        public init(dictionary: [String: Any]) throws {
            guard let taskToken = dictionary["taskToken"] as? String else { throw InitializableError.missingRequiredParam("taskToken") }
            self.taskToken = taskToken
            self.executionContext = dictionary["executionContext"] as? String
            if let decisions = dictionary["decisions"] as? [[String: Any]] {
                self.decisions = try decisions.map({ try Decision(dictionary: $0) })
            } else { 
                self.decisions = nil
            }
        }
    }

    public struct MarkerRecordedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Details of the marker (if any).
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarker decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The name of the marker.
        public let markerName: String

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, markerName: String) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let markerName = dictionary["markerName"] as? String else { throw InitializableError.missingRequiredParam("markerName") }
            self.markerName = markerName
        }
    }

    public struct WorkflowExecutionTimedOutEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        public let childPolicy: ChildPolicy
        /// The type of timeout that caused this event.
        public let timeoutType: WorkflowExecutionTimeoutType

        public init(childPolicy: ChildPolicy, timeoutType: WorkflowExecutionTimeoutType) {
            self.childPolicy = childPolicy
            self.timeoutType = timeoutType
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawchildPolicy = dictionary["childPolicy"] as? String, let childPolicy = ChildPolicy(rawValue: rawchildPolicy) else { throw InitializableError.missingRequiredParam("childPolicy") }
            self.childPolicy = childPolicy
            guard let rawtimeoutType = dictionary["timeoutType"] as? String, let timeoutType = WorkflowExecutionTimeoutType(rawValue: rawtimeoutType) else { throw InitializableError.missingRequiredParam("timeoutType") }
            self.timeoutType = timeoutType
        }
    }

    public struct ScheduleLambdaFunctionDecisionAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Required. The name of the AWS Lambda function to invoke.
        public let name: String
        /// The input provided to the AWS Lambda function.
        public let input: String?
        /// If set, specifies the maximum duration the function may take to execute.
        public let startToCloseTimeout: String?
        /// Required. The SWF id of the AWS Lambda task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        public let id: String

        public init(name: String, input: String? = nil, startToCloseTimeout: String? = nil, id: String) {
            self.name = name
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            self.input = dictionary["input"] as? String
            self.startToCloseTimeout = dictionary["startToCloseTimeout"] as? String
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
        }
    }

    public enum WorkflowExecutionTimeoutType: String, CustomStringConvertible {
        case start_to_close = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public enum DecisionType: String, CustomStringConvertible {
        case scheduleactivitytask = "ScheduleActivityTask"
        case requestcancelactivitytask = "RequestCancelActivityTask"
        case completeworkflowexecution = "CompleteWorkflowExecution"
        case failworkflowexecution = "FailWorkflowExecution"
        case cancelworkflowexecution = "CancelWorkflowExecution"
        case continueasnewworkflowexecution = "ContinueAsNewWorkflowExecution"
        case recordmarker = "RecordMarker"
        case starttimer = "StartTimer"
        case canceltimer = "CancelTimer"
        case signalexternalworkflowexecution = "SignalExternalWorkflowExecution"
        case requestcancelexternalworkflowexecution = "RequestCancelExternalWorkflowExecution"
        case startchildworkflowexecution = "StartChildWorkflowExecution"
        case schedulelambdafunction = "ScheduleLambdaFunction"
        public var description: String { return self.rawValue }
    }

    public struct DescribeWorkflowExecutionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The workflow execution to describe.
        public let execution: WorkflowExecution
        /// The name of the domain containing the workflow execution.
        public let domain: String

        public init(execution: WorkflowExecution, domain: String) {
            self.execution = execution
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            guard let execution = dictionary["execution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("execution") }
            self.execution = try Swf.WorkflowExecution(dictionary: execution)
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct ContinueAsNewWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: ContinueAsNewWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: ContinueAsNewWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = ContinueAsNewWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct WorkflowExecutionDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of tasks for this workflow execution. This includes open and closed tasks of all types.
        public let openCounts: WorkflowExecutionOpenCounts
        /// Information about the workflow execution.
        public let executionInfo: WorkflowExecutionInfo
        /// The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.
        public let latestActivityTaskTimestamp: Date?
        /// The configuration settings for this workflow execution including timeout values, tasklist etc.
        public let executionConfiguration: WorkflowExecutionConfiguration
        /// The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using RespondDecisionTaskCompleted.
        public let latestExecutionContext: String?

        public init(openCounts: WorkflowExecutionOpenCounts, executionInfo: WorkflowExecutionInfo, latestActivityTaskTimestamp: Date? = nil, executionConfiguration: WorkflowExecutionConfiguration, latestExecutionContext: String? = nil) {
            self.openCounts = openCounts
            self.executionInfo = executionInfo
            self.latestActivityTaskTimestamp = latestActivityTaskTimestamp
            self.executionConfiguration = executionConfiguration
            self.latestExecutionContext = latestExecutionContext
        }

        public init(dictionary: [String: Any]) throws {
            guard let openCounts = dictionary["openCounts"] as? [String: Any] else { throw InitializableError.missingRequiredParam("openCounts") }
            self.openCounts = try Swf.WorkflowExecutionOpenCounts(dictionary: openCounts)
            guard let executionInfo = dictionary["executionInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("executionInfo") }
            self.executionInfo = try Swf.WorkflowExecutionInfo(dictionary: executionInfo)
            self.latestActivityTaskTimestamp = dictionary["latestActivityTaskTimestamp"] as? Date
            guard let executionConfiguration = dictionary["executionConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("executionConfiguration") }
            self.executionConfiguration = try Swf.WorkflowExecutionConfiguration(dictionary: executionConfiguration)
            self.latestExecutionContext = dictionary["latestExecutionContext"] as? String
        }
    }

    public struct ExternalWorkflowExecutionCancelRequestedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The external workflow execution to which the cancellation request was delivered.
        public let workflowExecution: WorkflowExecution

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }

        public init(dictionary: [String: Any]) throws {
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let workflowExecution = dictionary["workflowExecution"] as? [String: Any] else { throw InitializableError.missingRequiredParam("workflowExecution") }
            self.workflowExecution = try Swf.WorkflowExecution(dictionary: workflowExecution)
        }
    }

    public enum ChildPolicy: String, CustomStringConvertible {
        case terminate = "TERMINATE"
        case request_cancel = "REQUEST_CANCEL"
        case abandon = "ABANDON"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowTypeInfos: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The list of workflow type information.
        public let typeInfos: [WorkflowTypeInfo]

        public init(nextPageToken: String? = nil, typeInfos: [WorkflowTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let typeInfos = dictionary["typeInfos"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("typeInfos") }
            self.typeInfos = try typeInfos.map({ try WorkflowTypeInfo(dictionary: $0) })
        }
    }

    public struct CancelWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: CancelWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: CancelWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = CancelWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
        }
    }

    public struct ActivityTaskCanceledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Details of the cancellation (if any).
        public let details: String?
        /// If set, contains the ID of the last ActivityTaskCancelRequested event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let latestCancelRequestedEventId: Int64?
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(details: String? = nil, latestCancelRequestedEventId: Int64? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.latestCancelRequestedEventId = latestCancelRequestedEventId
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            self.latestCancelRequestedEventId = dictionary["latestCancelRequestedEventId"] as? Int64
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
        }
    }

    public struct WorkflowExecutionCount: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        public let truncated: Bool?
        /// The number of workflow executions.
        public let count: Int32

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.truncated = dictionary["truncated"] as? Bool
            guard let count = dictionary["count"] as? Int32 else { throw InitializableError.missingRequiredParam("count") }
            self.count = count
        }
    }

    public struct CountPendingDecisionTasksInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain that contains the task list.
        public let domain: String
        /// The name of the task list.
        public let taskList: TaskList

        public init(domain: String, taskList: TaskList) {
            self.domain = domain
            self.taskList = taskList
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
        }
    }

    public struct DomainInfos: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// A list of DomainInfo structures.
        public let domainInfos: [DomainInfo]

        public init(nextPageToken: String? = nil, domainInfos: [DomainInfo]) {
            self.nextPageToken = nextPageToken
            self.domainInfos = domainInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["nextPageToken"] as? String
            guard let domainInfos = dictionary["domainInfos"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("domainInfos") }
            self.domainInfos = try domainInfos.map({ try DomainInfo(dictionary: $0) })
        }
    }

    public struct SignalWorkflowExecutionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the workflow execution to signal.
        public let runId: String?
        /// The name of the signal. This name must be meaningful to the target workflow.
        public let signalName: String
        /// Data to attach to the WorkflowExecutionSignaled event in the target workflow execution's history.
        public let input: String?
        /// The workflowId of the workflow execution to signal.
        public let workflowId: String
        /// The name of the domain containing the workflow execution to signal.
        public let domain: String

        public init(runId: String? = nil, signalName: String, input: String? = nil, workflowId: String, domain: String) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.workflowId = workflowId
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let signalName = dictionary["signalName"] as? String else { throw InitializableError.missingRequiredParam("signalName") }
            self.signalName = signalName
            self.input = dictionary["input"] as? String
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public struct SignalExternalWorkflowExecutionFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runId of the external workflow execution that the signal was being delivered to.
        public let runId: String?
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The workflowId of the external workflow execution that the signal was being delivered to.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: SignalExternalWorkflowExecutionFailedCause
        public let control: String?

        public init(runId: String? = nil, initiatedEventId: Int64, decisionTaskCompletedEventId: Int64, workflowId: String, cause: SignalExternalWorkflowExecutionFailedCause, control: String? = nil) {
            self.runId = runId
            self.initiatedEventId = initiatedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

        public init(dictionary: [String: Any]) throws {
            self.runId = dictionary["runId"] as? String
            guard let initiatedEventId = dictionary["initiatedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("initiatedEventId") }
            self.initiatedEventId = initiatedEventId
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let workflowId = dictionary["workflowId"] as? String else { throw InitializableError.missingRequiredParam("workflowId") }
            self.workflowId = workflowId
            guard let rawcause = dictionary["cause"] as? String, let cause = SignalExternalWorkflowExecutionFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
            self.control = dictionary["control"] as? String
        }
    }

    public struct ActivityTaskFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details of the failure (if any).
        public let details: String?
        /// The reason provided for the failure (if any).
        public let reason: String?
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(details: String? = nil, reason: String? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.reason = reason
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

        public init(dictionary: [String: Any]) throws {
            self.details = dictionary["details"] as? String
            self.reason = dictionary["reason"] as? String
            guard let startedEventId = dictionary["startedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("startedEventId") }
            self.startedEventId = startedEventId
            guard let scheduledEventId = dictionary["scheduledEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("scheduledEventId") }
            self.scheduledEventId = scheduledEventId
        }
    }

    public enum CancelWorkflowExecutionFailedCause: String, CustomStringConvertible {
        case unhandled_decision = "UNHANDLED_DECISION"
        case operation_not_permitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct StartTimerFailedEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        public let cause: StartTimerFailedCause
        /// The timerId provided in the StartTimer decision that failed.
        public let timerId: String

        public init(decisionTaskCompletedEventId: Int64, cause: StartTimerFailedCause, timerId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
            self.timerId = timerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let decisionTaskCompletedEventId = dictionary["decisionTaskCompletedEventId"] as? Int64 else { throw InitializableError.missingRequiredParam("decisionTaskCompletedEventId") }
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            guard let rawcause = dictionary["cause"] as? String, let cause = StartTimerFailedCause(rawValue: rawcause) else { throw InitializableError.missingRequiredParam("cause") }
            self.cause = cause
            guard let timerId = dictionary["timerId"] as? String else { throw InitializableError.missingRequiredParam("timerId") }
            self.timerId = timerId
        }
    }

    public struct DecisionTaskScheduledEventAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum duration for this decision task. The task is considered timed out if it does not completed within this duration. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        public let startToCloseTimeout: String?
        /// Optional. A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        public let taskPriority: String?
        /// The name of the task list in which the decision task was scheduled.
        public let taskList: TaskList

        public init(startToCloseTimeout: String? = nil, taskPriority: String? = nil, taskList: TaskList) {
            self.startToCloseTimeout = startToCloseTimeout
            self.taskPriority = taskPriority
            self.taskList = taskList
        }

        public init(dictionary: [String: Any]) throws {
            self.startToCloseTimeout = dictionary["startToCloseTimeout"] as? String
            self.taskPriority = dictionary["taskPriority"] as? String
            guard let taskList = dictionary["taskList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("taskList") }
            self.taskList = try Swf.TaskList(dictionary: taskList)
        }
    }

    public struct DeprecateActivityTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The activity type to deprecate.
        public let activityType: ActivityType
        /// The name of the domain in which the activity type is registered.
        public let domain: String

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            guard let activityType = dictionary["activityType"] as? [String: Any] else { throw InitializableError.missingRequiredParam("activityType") }
            self.activityType = try Swf.ActivityType(dictionary: activityType)
            guard let domain = dictionary["domain"] as? String else { throw InitializableError.missingRequiredParam("domain") }
            self.domain = domain
        }
    }

    public enum WorkflowExecutionCancelRequestedCause: String, CustomStringConvertible {
        case child_policy_applied = "CHILD_POLICY_APPLIED"
        public var description: String { return self.rawValue }
    }

}