// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DirectoryService {

    public struct IpRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string)
        ]
        /// Description of the address block.
        public let description: String?
        /// IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.
        public let cidrIp: String?

        public init(description: String? = nil, cidrIp: String? = nil) {
            self.description = description
            self.cidrIp = cidrIp
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case cidrIp = "CidrIp"
        }
    }

    public struct AddIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "UpdateSecurityGroupForDirectoryControllers", required: false, type: .boolean), 
            AWSShapeMember(label: "IpRoutes", required: true, type: .list)
        ]
        /// Identifier (ID) of the directory to which to add the address block.
        public let directoryId: String
        /// If set to true, updates the inbound and outbound rules of the security group that has the description: "AWS created security group for directory ID directory controllers." Following are the new rules:  Inbound:   Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0   Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0   Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0   Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0   Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0    Outbound:   Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0   These security rules impact an internal network interface that is not exposed publicly.
        public let updateSecurityGroupForDirectoryControllers: Bool?
        /// IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain.
        public let ipRoutes: [IpRoute]

        public init(directoryId: String, updateSecurityGroupForDirectoryControllers: Bool? = nil, ipRoutes: [IpRoute]) {
            self.directoryId = directoryId
            self.updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllers
            self.ipRoutes = ipRoutes
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case updateSecurityGroupForDirectoryControllers = "UpdateSecurityGroupForDirectoryControllers"
            case ipRoutes = "IpRoutes"
        }
    }

    public struct UnshareDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectoryId", required: false, type: .string)
        ]
        /// Identifier of the directory stored in the directory consumer account that is to be unshared from the specified directory (DirectoryId).
        public let sharedDirectoryId: String?

        public init(sharedDirectoryId: String? = nil) {
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public struct DeleteConditionalForwarderResult: AWSShape {

    }

    public struct RemoveIpRoutesResult: AWSShape {

    }

    public struct RejectSharedDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectoryId", required: true, type: .string)
        ]
        /// Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account.
        public let sharedDirectoryId: String

        public init(sharedDirectoryId: String) {
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The value of the attribute.
        public let value: String?
        /// The name of the attribute.
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// Reserved for future use.
        public let limit: Int32?
        /// Identifier (ID) of the directory for which you want to retrieve tags.
        public let resourceId: String

        public init(nextToken: String? = nil, limit: Int32? = nil, resourceId: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case resourceId = "ResourceId"
        }
    }

    public struct RegisterEventTopicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID.
        public let topicName: String
        /// The Directory ID that will publish status messages to the SNS topic.
        public let directoryId: String

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case topicName = "TopicName"
            case directoryId = "DirectoryId"
        }
    }

    public enum ShareMethod: String, CustomStringConvertible, Codable {
        case organizations = "ORGANIZATIONS"
        case handshake = "HANDSHAKE"
        public var description: String { return self.rawValue }
    }

    public struct ListSchemaExtensionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The identifier of the directory from which to retrieve the schema extension information.
        public let directoryId: String
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The ListSchemaExtensions.NextToken value from a previous call to ListSchemaExtensions. Pass null if this is the first call.
        public let nextToken: String?

        public init(directoryId: String, limit: Int32? = nil, nextToken: String? = nil) {
            self.directoryId = directoryId
            self.limit = limit
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct CreateComputerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Computer", required: false, type: .structure)
        ]
        /// A Computer object that represents the computer account.
        public let computer: Computer?

        public init(computer: Computer? = nil) {
            self.computer = computer
        }

        private enum CodingKeys: String, CodingKey {
            case computer = "Computer"
        }
    }

    public enum SchemaExtensionStatus: String, CustomStringConvertible, Codable {
        case initializing = "Initializing"
        case creatingsnapshot = "CreatingSnapshot"
        case updatingschema = "UpdatingSchema"
        case replicating = "Replicating"
        case cancelinprogress = "CancelInProgress"
        case rollbackinprogress = "RollbackInProgress"
        case cancelled = "Cancelled"
        case failed = "Failed"
        case completed = "Completed"
        public var description: String { return self.rawValue }
    }

    public struct UnshareTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// Identifier of the directory consumer account.
        public let id: String
        /// Type of identifier to be used in the Id field.
        public let `type`: TargetType

        public init(id: String, type: TargetType) {
            self.id = id
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case `type` = "Type"
        }
    }

    public enum ReplicationScope: String, CustomStringConvertible, Codable {
        case domain = "Domain"
        public var description: String { return self.rawValue }
    }

    public struct DisableRadiusResult: AWSShape {

    }

    public struct CreateTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustType", required: false, type: .enum), 
            AWSShapeMember(label: "TrustPassword", required: true, type: .string), 
            AWSShapeMember(label: "ConditionalForwarderIpAddrs", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "TrustDirection", required: true, type: .enum), 
            AWSShapeMember(label: "SelectiveAuth", required: false, type: .enum)
        ]
        /// The trust relationship type. Forest is the default.
        public let trustType: TrustType?
        /// The trust password. The must be the same password that was used when creating the trust relationship on the external domain.
        public let trustPassword: String
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let conditionalForwarderIpAddrs: [String]?
        /// The Directory ID of the AWS Managed Microsoft AD directory for which to establish the trust relationship.
        public let directoryId: String
        /// The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship.
        public let remoteDomainName: String
        /// The direction of the trust relationship.
        public let trustDirection: TrustDirection
        /// Optional parameter to enable selective authentication for the trust.
        public let selectiveAuth: SelectiveAuth?

        public init(trustType: TrustType? = nil, trustPassword: String, conditionalForwarderIpAddrs: [String]? = nil, directoryId: String, remoteDomainName: String, trustDirection: TrustDirection, selectiveAuth: SelectiveAuth? = nil) {
            self.trustType = trustType
            self.trustPassword = trustPassword
            self.conditionalForwarderIpAddrs = conditionalForwarderIpAddrs
            self.directoryId = directoryId
            self.remoteDomainName = remoteDomainName
            self.trustDirection = trustDirection
            self.selectiveAuth = selectiveAuth
        }

        private enum CodingKeys: String, CodingKey {
            case trustType = "TrustType"
            case trustPassword = "TrustPassword"
            case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
            case directoryId = "DirectoryId"
            case remoteDomainName = "RemoteDomainName"
            case trustDirection = "TrustDirection"
            case selectiveAuth = "SelectiveAuth"
        }
    }

    public struct DeleteSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The identifier of the directory snapshot that was deleted.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct DomainController: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "StatusReason", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "DnsIpAddr", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DomainControllerId", required: false, type: .string), 
            AWSShapeMember(label: "StatusLastUpdatedDateTime", required: false, type: .timestamp)
        ]
        /// The identifier of the VPC that contains the domain controller.
        public let vpcId: String?
        /// Specifies when the domain controller was created.
        public let launchTime: TimeStamp?
        /// Identifier of the subnet in the VPC that contains the domain controller.
        public let subnetId: String?
        /// A description of the domain controller state.
        public let statusReason: String?
        /// Identifier of the directory where the domain controller resides.
        public let directoryId: String?
        /// The IP address of the domain controller.
        public let dnsIpAddr: String?
        /// The status of the domain controller.
        public let status: DomainControllerStatus?
        /// The Availability Zone where the domain controller is located.
        public let availabilityZone: String?
        /// Identifies a specific domain controller in the directory.
        public let domainControllerId: String?
        /// The date and time that the status was last updated.
        public let statusLastUpdatedDateTime: TimeStamp?

        public init(vpcId: String? = nil, launchTime: TimeStamp? = nil, subnetId: String? = nil, statusReason: String? = nil, directoryId: String? = nil, dnsIpAddr: String? = nil, status: DomainControllerStatus? = nil, availabilityZone: String? = nil, domainControllerId: String? = nil, statusLastUpdatedDateTime: TimeStamp? = nil) {
            self.vpcId = vpcId
            self.launchTime = launchTime
            self.subnetId = subnetId
            self.statusReason = statusReason
            self.directoryId = directoryId
            self.dnsIpAddr = dnsIpAddr
            self.status = status
            self.availabilityZone = availabilityZone
            self.domainControllerId = domainControllerId
            self.statusLastUpdatedDateTime = statusLastUpdatedDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case launchTime = "LaunchTime"
            case subnetId = "SubnetId"
            case statusReason = "StatusReason"
            case directoryId = "DirectoryId"
            case dnsIpAddr = "DnsIpAddr"
            case status = "Status"
            case availabilityZone = "AvailabilityZone"
            case domainControllerId = "DomainControllerId"
            case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
        }
    }

    public struct UpdateTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SelectiveAuth", required: false, type: .enum), 
            AWSShapeMember(label: "TrustId", required: true, type: .string)
        ]
        /// Updates selective authentication for the trust.
        public let selectiveAuth: SelectiveAuth?
        /// Identifier of the trust relationship.
        public let trustId: String

        public init(selectiveAuth: SelectiveAuth? = nil, trustId: String) {
            self.selectiveAuth = selectiveAuth
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case selectiveAuth = "SelectiveAuth"
            case trustId = "TrustId"
        }
    }

    public struct EnableSsoResult: AWSShape {

    }

    public struct DescribeDomainControllersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainControllers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// List of the DomainController objects that were retrieved.
        public let domainControllers: [DomainController]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDomainControllers retrieve the next set of items.
        public let nextToken: String?

        public init(domainControllers: [DomainController]? = nil, nextToken: String? = nil) {
            self.domainControllers = domainControllers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainControllers = "DomainControllers"
            case nextToken = "NextToken"
        }
    }

    public struct CreateLogSubscriptionResult: AWSShape {

    }

    public struct UpdateTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string)
        ]
        /// Identifier of the trust relationship.
        public let trustId: String?
        public let requestId: String?

        public init(trustId: String? = nil, requestId: String? = nil) {
            self.trustId = trustId
            self.requestId = requestId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
            case requestId = "RequestId"
        }
    }

    public struct DescribeSharedDirectoriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SharedDirectories", required: false, type: .list)
        ]
        /// If not null, token that indicates that more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeSharedDirectories to retrieve the next set of items.
        public let nextToken: String?
        /// A list of all shared directories in your account.
        public let sharedDirectories: [SharedDirectory]?

        public init(nextToken: String? = nil, sharedDirectories: [SharedDirectory]? = nil) {
            self.nextToken = nextToken
            self.sharedDirectories = sharedDirectories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case sharedDirectories = "SharedDirectories"
        }
    }

    public struct CreateSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The identifier of the snapshot that was created.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct DisableSsoResult: AWSShape {

    }

    public struct DeleteTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: true, type: .string), 
            AWSShapeMember(label: "DeleteAssociatedConditionalForwarder", required: false, type: .boolean)
        ]
        /// The Trust ID of the trust relationship to be deleted.
        public let trustId: String
        /// Delete a conditional forwarder as part of a DeleteTrustRequest.
        public let deleteAssociatedConditionalForwarder: Bool?

        public init(trustId: String, deleteAssociatedConditionalForwarder: Bool? = nil) {
            self.trustId = trustId
            self.deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarder
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
            case deleteAssociatedConditionalForwarder = "DeleteAssociatedConditionalForwarder"
        }
    }

    public struct RestoreFromSnapshotResult: AWSShape {

    }

    public struct DeregisterEventTopicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The name of the SNS topic from which to remove the directory as a publisher.
        public let topicName: String
        /// The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic.
        public let directoryId: String

        public init(topicName: String, directoryId: String) {
            self.topicName = topicName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case topicName = "TopicName"
            case directoryId = "DirectoryId"
        }
    }

    public struct DisableSsoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string)
        ]
        /// The identifier of the directory for which to disable single-sign on.
        public let directoryId: String
        /// The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name. If the AD Connector service account does not have privileges to remove a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to disable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The password of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?

        public init(directoryId: String, userName: String? = nil, password: String? = nil) {
            self.directoryId = directoryId
            self.userName = userName
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case userName = "UserName"
            case password = "Password"
        }
    }

    public struct SharedDirectory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareNotes", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ShareStatus", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerDirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "ShareMethod", required: false, type: .enum), 
            AWSShapeMember(label: "OwnerAccountId", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SharedAccountId", required: false, type: .string), 
            AWSShapeMember(label: "SharedDirectoryId", required: false, type: .string)
        ]
        /// A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.
        public let shareNotes: String?
        /// The date and time that the shared directory was created.
        public let createdDateTime: TimeStamp?
        /// Current directory status of the shared AWS Managed Microsoft AD directory.
        public let shareStatus: ShareStatus?
        /// Identifier of the directory in the directory owner account. 
        public let ownerDirectoryId: String?
        /// The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (ORGANIZATIONS) or with any AWS account by sending a shared directory request (HANDSHAKE).
        public let shareMethod: ShareMethod?
        /// Identifier of the directory owner account, which contains the directory that has been shared to the consumer account.
        public let ownerAccountId: String?
        /// The date and time that the shared directory was last updated.
        public let lastUpdatedDateTime: TimeStamp?
        /// Identifier of the directory consumer account that has access to the shared directory (OwnerDirectoryId) in the directory owner account.
        public let sharedAccountId: String?
        /// Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account.
        public let sharedDirectoryId: String?

        public init(shareNotes: String? = nil, createdDateTime: TimeStamp? = nil, shareStatus: ShareStatus? = nil, ownerDirectoryId: String? = nil, shareMethod: ShareMethod? = nil, ownerAccountId: String? = nil, lastUpdatedDateTime: TimeStamp? = nil, sharedAccountId: String? = nil, sharedDirectoryId: String? = nil) {
            self.shareNotes = shareNotes
            self.createdDateTime = createdDateTime
            self.shareStatus = shareStatus
            self.ownerDirectoryId = ownerDirectoryId
            self.shareMethod = shareMethod
            self.ownerAccountId = ownerAccountId
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.sharedAccountId = sharedAccountId
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case shareNotes = "ShareNotes"
            case createdDateTime = "CreatedDateTime"
            case shareStatus = "ShareStatus"
            case ownerDirectoryId = "OwnerDirectoryId"
            case shareMethod = "ShareMethod"
            case ownerAccountId = "OwnerAccountId"
            case lastUpdatedDateTime = "LastUpdatedDateTime"
            case sharedAccountId = "SharedAccountId"
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public struct DirectoryVpcSettingsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .string)
        ]
        /// The list of Availability Zones that the directory is in.
        public let availabilityZones: [String]?
        /// The identifiers of the subnets for the directory servers.
        public let subnetIds: [String]?
        /// The identifier of the VPC that the directory is in.
        public let vpcId: String?
        /// The domain controller security group identifier for the directory.
        public let securityGroupId: String?

        public init(availabilityZones: [String]? = nil, subnetIds: [String]? = nil, vpcId: String? = nil, securityGroupId: String? = nil) {
            self.availabilityZones = availabilityZones
            self.subnetIds = subnetIds
            self.vpcId = vpcId
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case subnetIds = "SubnetIds"
            case vpcId = "VpcId"
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct CreateDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public enum TrustDirection: String, CustomStringConvertible, Codable {
        case oneWayOutgoing = "One-Way: Outgoing"
        case oneWayIncoming = "One-Way: Incoming"
        case twoWay = "Two-Way"
        public var description: String { return self.rawValue }
    }

    public struct CreateConditionalForwarderResult: AWSShape {

    }

    public enum SnapshotType: String, CustomStringConvertible, Codable {
        case auto = "Auto"
        case manual = "Manual"
        public var description: String { return self.rawValue }
    }

    public struct EnableRadiusResult: AWSShape {

    }

    public struct DeleteSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]
        /// The identifier of the directory snapshot to be deleted.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct ShareTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// Type of identifier to be used in the Id field.
        public let `type`: TargetType
        /// Identifier of the directory consumer account.
        public let id: String

        public init(type: TargetType, id: String) {
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct CreateConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let dnsIpAddrs: [String]
        /// The directory ID of the AWS directory for which you are creating the conditional forwarder.
        public let directoryId: String

        public init(remoteDomainName: String, dnsIpAddrs: [String], directoryId: String) {
            self.remoteDomainName = remoteDomainName
            self.dnsIpAddrs = dnsIpAddrs
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case dnsIpAddrs = "DnsIpAddrs"
            case directoryId = "DirectoryId"
        }
    }

    public struct DeleteTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// The Trust ID of the trust relationship that was deleted.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct CreateComputerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComputerName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "OrganizationalUnitDistinguishedName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "ComputerAttributes", required: false, type: .list)
        ]
        /// The name of the computer account.
        public let computerName: String
        /// The identifier of the directory in which to create the computer account.
        public let directoryId: String
        /// The fully-qualified distinguished name of the organizational unit to place the computer account in.
        public let organizationalUnitDistinguishedName: String?
        /// A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter.
        public let password: String
        /// An array of Attribute objects that contain any LDAP attributes to apply to the computer account.
        public let computerAttributes: [Attribute]?

        public init(computerName: String, directoryId: String, organizationalUnitDistinguishedName: String? = nil, password: String, computerAttributes: [Attribute]? = nil) {
            self.computerName = computerName
            self.directoryId = directoryId
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.password = password
            self.computerAttributes = computerAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case computerName = "ComputerName"
            case directoryId = "DirectoryId"
            case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
            case password = "Password"
            case computerAttributes = "ComputerAttributes"
        }
    }

    public struct UpdateRadiusResult: AWSShape {

    }

    public struct RemoveTagsFromResourceResult: AWSShape {

    }

    public struct CreateDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "Size", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "VpcSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The short name of the directory, such as CORP.
        public let shortName: String?
        /// The password for the directory administrator. The directory creation process creates a directory administrator account with the user name Administrator and this password.
        public let password: String
        /// The size of the directory.
        public let size: DirectorySize
        /// The fully qualified name for the directory, such as corp.example.com.
        public let name: String
        /// A DirectoryVpcSettings object that contains additional information for the operation.
        public let vpcSettings: DirectoryVpcSettings?
        /// A textual description for the directory.
        public let description: String?

        public init(shortName: String? = nil, password: String, size: DirectorySize, name: String, vpcSettings: DirectoryVpcSettings? = nil, description: String? = nil) {
            self.shortName = shortName
            self.password = password
            self.size = size
            self.name = name
            self.vpcSettings = vpcSettings
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case shortName = "ShortName"
            case password = "Password"
            case size = "Size"
            case name = "Name"
            case vpcSettings = "VpcSettings"
            case description = "Description"
        }
    }

    public enum TopicStatus: String, CustomStringConvertible, Codable {
        case registered = "Registered"
        case topicNotFound = "Topic not found"
        case failed = "Failed"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public enum IpRouteStatusMsg: String, CustomStringConvertible, Codable {
        case adding = "Adding"
        case added = "Added"
        case removing = "Removing"
        case removed = "Removed"
        case addfailed = "AddFailed"
        case removefailed = "RemoveFailed"
        public var description: String { return self.rawValue }
    }

    public enum RadiusAuthenticationProtocol: String, CustomStringConvertible, Codable {
        case pap = "PAP"
        case chap = "CHAP"
        case msChapv1 = "MS-CHAPv1"
        case msChapv2 = "MS-CHAPv2"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTrustsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "TrustIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let trustIds: [String]?
        /// The DescribeTrustsResult.NextToken value from a previous call to DescribeTrusts. Pass null if this is the first call.
        public let nextToken: String?
        /// The Directory ID of the AWS directory that is a part of the requested trust relationship.
        public let directoryId: String?

        public init(limit: Int32? = nil, trustIds: [String]? = nil, nextToken: String? = nil, directoryId: String? = nil) {
            self.limit = limit
            self.trustIds = trustIds
            self.nextToken = nextToken
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case trustIds = "TrustIds"
            case nextToken = "NextToken"
            case directoryId = "DirectoryId"
        }
    }

    public struct RejectSharedDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectoryId", required: false, type: .string)
        ]
        /// Identifier of the shared directory in the directory consumer account.
        public let sharedDirectoryId: String?

        public init(sharedDirectoryId: String? = nil) {
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public struct ShareDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectoryId", required: false, type: .string)
        ]
        /// Identifier of the directory that is stored in the directory consumer account that is shared from the specified directory (DirectoryId).
        public let sharedDirectoryId: String?

        public init(sharedDirectoryId: String? = nil) {
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public enum DirectoryType: String, CustomStringConvertible, Codable {
        case simplead = "SimpleAD"
        case adconnector = "ADConnector"
        case microsoftad = "MicrosoftAD"
        case sharedmicrosoftad = "SharedMicrosoftAD"
        public var description: String { return self.rawValue }
    }

    public struct DeregisterEventTopicResult: AWSShape {

    }

    public enum TrustState: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case created = "Created"
        case verifying = "Verifying"
        case verifyfailed = "VerifyFailed"
        case verified = "Verified"
        case updating = "Updating"
        case updatefailed = "UpdateFailed"
        case updated = "Updated"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct StartSchemaExtensionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaExtensionId", required: false, type: .string)
        ]
        /// The identifier of the schema extension that will be applied.
        public let schemaExtensionId: String?

        public init(schemaExtensionId: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
        }

        private enum CodingKeys: String, CodingKey {
            case schemaExtensionId = "SchemaExtensionId"
        }
    }

    public struct CreateMicrosoftADResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct CancelSchemaExtensionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaExtensionId", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The identifier of the schema extension that will be canceled.
        public let schemaExtensionId: String
        /// The identifier of the directory whose schema extension will be canceled.
        public let directoryId: String

        public init(schemaExtensionId: String, directoryId: String) {
            self.schemaExtensionId = schemaExtensionId
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case schemaExtensionId = "SchemaExtensionId"
            case directoryId = "DirectoryId"
        }
    }

    public struct AddTagsToResourceResult: AWSShape {

    }

    public struct CreateMicrosoftADRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "Edition", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VpcSettings", required: true, type: .structure), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The password for the default administrative user named Admin.
        public let password: String
        /// AWS Managed Microsoft AD is available in two editions: Standard and Enterprise. Enterprise is the default.
        public let edition: DirectoryEdition?
        /// A textual description for the directory. This label will appear on the AWS console Directory Details page after the directory is created.
        public let description: String?
        /// Contains VPC information for the CreateDirectory or CreateMicrosoftAD operation.
        public let vpcSettings: DirectoryVpcSettings
        /// The NetBIOS name for your domain. A short identifier for your domain, such as CORP. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, CORP for the directory DNS corp.example.com. 
        public let shortName: String?
        /// The fully qualified domain name for the directory, such as corp.example.com. This name will resolve inside your VPC only. It does not need to be publicly resolvable.
        public let name: String

        public init(password: String, edition: DirectoryEdition? = nil, description: String? = nil, vpcSettings: DirectoryVpcSettings, shortName: String? = nil, name: String) {
            self.password = password
            self.edition = edition
            self.description = description
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case password = "Password"
            case edition = "Edition"
            case description = "Description"
            case vpcSettings = "VpcSettings"
            case shortName = "ShortName"
            case name = "Name"
        }
    }

    public struct CreateSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The descriptive name to apply to the snapshot.
        public let name: String?
        /// The identifier of the directory of which to take a snapshot.
        public let directoryId: String

        public init(name: String? = nil, directoryId: String) {
            self.name = name
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case directoryId = "DirectoryId"
        }
    }

    public struct ConnectDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: true, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "ConnectSettings", required: true, type: .structure)
        ]
        /// The NetBIOS name of the on-premises directory, such as CORP.
        public let shortName: String?
        /// The size of the directory.
        public let size: DirectorySize
        /// A textual description for the directory.
        public let description: String?
        /// The fully qualified name of the on-premises directory, such as corp.example.com.
        public let name: String
        /// The password for the on-premises user account.
        public let password: String
        /// A DirectoryConnectSettings object that contains additional information for the operation.
        public let connectSettings: DirectoryConnectSettings

        public init(shortName: String? = nil, size: DirectorySize, description: String? = nil, name: String, password: String, connectSettings: DirectoryConnectSettings) {
            self.shortName = shortName
            self.size = size
            self.description = description
            self.name = name
            self.password = password
            self.connectSettings = connectSettings
        }

        private enum CodingKeys: String, CodingKey {
            case shortName = "ShortName"
            case size = "Size"
            case description = "Description"
            case name = "Name"
            case password = "Password"
            case connectSettings = "ConnectSettings"
        }
    }

    public enum RadiusStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// A list of identifiers of the directories for which to obtain the information. If this member is null, all directories that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let directoryIds: [String]?
        /// The DescribeDirectoriesResult.NextToken value from a previous call to DescribeDirectories. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?

        public init(directoryIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.directoryIds = directoryIds
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case directoryIds = "DirectoryIds"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct AcceptSharedDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectoryId", required: true, type: .string)
        ]
        /// Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account. 
        public let sharedDirectoryId: String

        public init(sharedDirectoryId: String) {
            self.sharedDirectoryId = sharedDirectoryId
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectoryId = "SharedDirectoryId"
        }
    }

    public struct ConnectDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the new directory.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct GetSnapshotLimitsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotLimits", required: false, type: .structure)
        ]
        /// A SnapshotLimits object that contains the manual snapshot limits for the specified directory.
        public let snapshotLimits: SnapshotLimits?

        public init(snapshotLimits: SnapshotLimits? = nil) {
            self.snapshotLimits = snapshotLimits
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotLimits = "SnapshotLimits"
        }
    }

    public struct StartSchemaExtensionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "CreateSnapshotBeforeSchemaExtension", required: true, type: .boolean), 
            AWSShapeMember(label: "LdifContent", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// The identifier of the directory for which the schema extension will be applied to.
        public let directoryId: String
        /// If true, creates a snapshot of the directory before applying the schema extension.
        public let createSnapshotBeforeSchemaExtension: Bool
        /// The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.
        public let ldifContent: String
        /// A description of the schema extension.
        public let description: String

        public init(directoryId: String, createSnapshotBeforeSchemaExtension: Bool, ldifContent: String, description: String) {
            self.directoryId = directoryId
            self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
            self.ldifContent = ldifContent
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case createSnapshotBeforeSchemaExtension = "CreateSnapshotBeforeSchemaExtension"
            case ldifContent = "LdifContent"
            case description = "Description"
        }
    }

    public struct VerifyTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// The unique Trust ID of the trust relationship that was verified.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct DeleteLogSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// Identifier (ID) of the directory whose log subscription you want to delete.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// Identifier (ID) of the directory from which to remove the tag.
        public let resourceId: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public struct OwnerDirectoryDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RadiusSettings", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSettings", required: false, type: .structure), 
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: false, type: .list), 
            AWSShapeMember(label: "RadiusStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings?
        /// Information about the VPC settings for the directory.
        public let vpcSettings: DirectoryVpcSettingsDescription?
        /// Identifier of the directory owner account.
        public let accountId: String?
        /// IP address of the directory’s domain controllers.
        public let dnsIpAddrs: [String]?
        /// Information about the status of the RADIUS server.
        public let radiusStatus: RadiusStatus?
        /// Identifier of the AWS Managed Microsoft AD directory in the directory owner account.
        public let directoryId: String?

        public init(radiusSettings: RadiusSettings? = nil, vpcSettings: DirectoryVpcSettingsDescription? = nil, accountId: String? = nil, dnsIpAddrs: [String]? = nil, radiusStatus: RadiusStatus? = nil, directoryId: String? = nil) {
            self.radiusSettings = radiusSettings
            self.vpcSettings = vpcSettings
            self.accountId = accountId
            self.dnsIpAddrs = dnsIpAddrs
            self.radiusStatus = radiusStatus
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case radiusSettings = "RadiusSettings"
            case vpcSettings = "VpcSettings"
            case accountId = "AccountId"
            case dnsIpAddrs = "DnsIpAddrs"
            case radiusStatus = "RadiusStatus"
            case directoryId = "DirectoryId"
        }
    }

    public struct UpdateConditionalForwarderResult: AWSShape {

    }

    public struct DeleteDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The directory identifier.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct Snapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]
        /// The snapshot identifier.
        public let snapshotId: String?
        /// The directory identifier.
        public let directoryId: String?
        /// The snapshot type.
        public let `type`: SnapshotType?
        /// The snapshot status.
        public let status: SnapshotStatus?
        /// The descriptive name of the snapshot.
        public let name: String?
        /// The date and time that the snapshot was taken.
        public let startTime: TimeStamp?

        public init(snapshotId: String? = nil, directoryId: String? = nil, type: SnapshotType? = nil, status: SnapshotStatus? = nil, name: String? = nil, startTime: TimeStamp? = nil) {
            self.snapshotId = snapshotId
            self.directoryId = directoryId
            self.`type` = `type`
            self.status = status
            self.name = name
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case directoryId = "DirectoryId"
            case `type` = "Type"
            case status = "Status"
            case name = "Name"
            case startTime = "StartTime"
        }
    }

    public struct AcceptSharedDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedDirectory", required: false, type: .structure)
        ]
        /// The shared directory in the directory consumer account.
        public let sharedDirectory: SharedDirectory?

        public init(sharedDirectory: SharedDirectory? = nil) {
            self.sharedDirectory = sharedDirectory
        }

        private enum CodingKeys: String, CodingKey {
            case sharedDirectory = "SharedDirectory"
        }
    }

    public struct EnableRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RadiusSettings", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings
        /// The identifier of the directory for which to enable MFA.
        public let directoryId: String

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case radiusSettings = "RadiusSettings"
            case directoryId = "DirectoryId"
        }
    }

    public struct ResetUserPasswordResult: AWSShape {

    }

    public struct UpdateNumberOfDomainControllersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredNumber", required: true, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The number of domain controllers desired in the directory.
        public let desiredNumber: Int32
        /// Identifier of the directory to which the domain controllers will be added or removed.
        public let directoryId: String

        public init(desiredNumber: Int32, directoryId: String) {
            self.desiredNumber = desiredNumber
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case desiredNumber = "DesiredNumber"
            case directoryId = "DirectoryId"
        }
    }

    public struct GetDirectoryLimitsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryLimits", required: false, type: .structure)
        ]
        /// A DirectoryLimits object that contains the directory limits for the current region.
        public let directoryLimits: DirectoryLimits?

        public init(directoryLimits: DirectoryLimits? = nil) {
            self.directoryLimits = directoryLimits
        }

        private enum CodingKeys: String, CodingKey {
            case directoryLimits = "DirectoryLimits"
        }
    }

    public struct DeleteLogSubscriptionResult: AWSShape {

    }

    public struct ListLogSubscriptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// If a DirectoryID is provided, lists only the log subscription associated with that directory. If no DirectoryId is provided, lists all log subscriptions associated with your AWS account. If there are no log subscriptions for the AWS account or the directory, an empty list will be returned.
        public let directoryId: String?
        /// The maximum number of items returned.
        public let limit: Int32?
        /// The token for the next set of items to return.
        public let nextToken: String?

        public init(directoryId: String? = nil, limit: Int32? = nil, nextToken: String? = nil) {
            self.directoryId = directoryId
            self.limit = limit
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: true, type: .list), 
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string)
        ]
        /// The directory ID of the AWS directory for which to update the conditional forwarder.
        public let directoryId: String
        /// The updated IP addresses of the remote DNS server associated with the conditional forwarder.
        public let dnsIpAddrs: [String]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String

        public init(directoryId: String, dnsIpAddrs: [String], remoteDomainName: String) {
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case dnsIpAddrs = "DnsIpAddrs"
            case remoteDomainName = "RemoteDomainName"
        }
    }

    public struct DirectoryConnectSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerDnsIps", required: true, type: .list), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "CustomerUserName", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list)
        ]
        /// A list of one or more IP addresses of DNS servers or domain controllers in the on-premises directory.
        public let customerDnsIps: [String]
        /// The identifier of the VPC in which the AD Connector is created.
        public let vpcId: String
        /// The user name of an account in the on-premises directory that is used to connect to the directory. This account must have the following permissions:   Read users and groups   Create computer objects   Join computers to the domain  
        public let customerUserName: String
        /// A list of subnet identifiers in the VPC in which the AD Connector is created.
        public let subnetIds: [String]

        public init(customerDnsIps: [String], vpcId: String, customerUserName: String, subnetIds: [String]) {
            self.customerDnsIps = customerDnsIps
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case customerDnsIps = "CustomerDnsIps"
            case vpcId = "VpcId"
            case customerUserName = "CustomerUserName"
            case subnetIds = "SubnetIds"
        }
    }

    public struct EventTopic: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string), 
            AWSShapeMember(label: "TopicName", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic.
        public let directoryId: String?
        /// The SNS topic ARN (Amazon Resource Name).
        public let topicArn: String?
        /// The name of an AWS SNS topic the receives status messages from the directory.
        public let topicName: String?
        /// The date and time of when you associated your directory with the SNS topic.
        public let createdDateTime: TimeStamp?
        /// The topic registration status.
        public let status: TopicStatus?

        public init(directoryId: String? = nil, topicArn: String? = nil, topicName: String? = nil, createdDateTime: TimeStamp? = nil, status: TopicStatus? = nil) {
            self.directoryId = directoryId
            self.topicArn = topicArn
            self.topicName = topicName
            self.createdDateTime = createdDateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case topicArn = "TopicArn"
            case topicName = "TopicName"
            case createdDateTime = "CreatedDateTime"
            case status = "Status"
        }
    }

    public struct ListLogSubscriptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LogSubscriptions", required: false, type: .list)
        ]
        /// The token for the next set of items to return.
        public let nextToken: String?
        /// A list of active LogSubscription objects for calling the AWS account.
        public let logSubscriptions: [LogSubscription]?

        public init(nextToken: String? = nil, logSubscriptions: [LogSubscription]? = nil) {
            self.nextToken = nextToken
            self.logSubscriptions = logSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case logSubscriptions = "LogSubscriptions"
        }
    }

    public struct ResetUserPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewPassword", required: true, type: .string), 
            AWSShapeMember(label: "UserName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The new password that will be reset.
        public let newPassword: String
        /// The user name of the user whose password will be reset.
        public let userName: String
        /// Identifier of the AWS Managed Microsoft AD or Simple AD directory in which the user resides.
        public let directoryId: String

        public init(newPassword: String, userName: String, directoryId: String) {
            self.newPassword = newPassword
            self.userName = userName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case newPassword = "NewPassword"
            case userName = "UserName"
            case directoryId = "DirectoryId"
        }
    }

    public struct ListIpRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IpRoutesInfo", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListIpRoutes to retrieve the next set of items.
        public let nextToken: String?
        /// A list of IpRoutes.
        public let ipRoutesInfo: [IpRouteInfo]?

        public init(nextToken: String? = nil, ipRoutesInfo: [IpRouteInfo]? = nil) {
            self.nextToken = nextToken
            self.ipRoutesInfo = ipRoutesInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case ipRoutesInfo = "IpRoutesInfo"
        }
    }

    public enum TrustType: String, CustomStringConvertible, Codable {
        case forest = "Forest"
        case external = "External"
        public var description: String { return self.rawValue }
    }

    public enum DomainControllerStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case active = "Active"
        case impaired = "Impaired"
        case restoring = "Restoring"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct GetDirectoryLimitsRequest: AWSShape {

    }

    public struct RemoveIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "CidrIps", required: true, type: .list)
        ]
        /// Identifier (ID) of the directory from which you want to remove the IP addresses.
        public let directoryId: String
        /// IP address blocks that you want to remove.
        public let cidrIps: [String]

        public init(directoryId: String, cidrIps: [String]) {
            self.directoryId = directoryId
            self.cidrIps = cidrIps
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case cidrIps = "CidrIps"
        }
    }

    public struct Trust: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "TrustId", required: false, type: .string), 
            AWSShapeMember(label: "TrustStateReason", required: false, type: .string), 
            AWSShapeMember(label: "TrustDirection", required: false, type: .enum), 
            AWSShapeMember(label: "StateLastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SelectiveAuth", required: false, type: .enum), 
            AWSShapeMember(label: "RemoteDomainName", required: false, type: .string), 
            AWSShapeMember(label: "TrustType", required: false, type: .enum), 
            AWSShapeMember(label: "TrustState", required: false, type: .enum)
        ]
        /// The date and time that the trust relationship was last updated.
        public let lastUpdatedDateTime: TimeStamp?
        /// The Directory ID of the AWS directory involved in the trust relationship.
        public let directoryId: String?
        /// The unique ID of the trust relationship.
        public let trustId: String?
        /// The reason for the TrustState.
        public let trustStateReason: String?
        /// The trust relationship direction.
        public let trustDirection: TrustDirection?
        /// The date and time that the TrustState was last updated.
        public let stateLastUpdatedDateTime: TimeStamp?
        /// The date and time that the trust relationship was created.
        public let createdDateTime: TimeStamp?
        /// Current state of selective authentication for the trust.
        public let selectiveAuth: SelectiveAuth?
        /// The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship.
        public let remoteDomainName: String?
        /// The trust relationship type. Forest is the default.
        public let trustType: TrustType?
        /// The trust relationship state.
        public let trustState: TrustState?

        public init(lastUpdatedDateTime: TimeStamp? = nil, directoryId: String? = nil, trustId: String? = nil, trustStateReason: String? = nil, trustDirection: TrustDirection? = nil, stateLastUpdatedDateTime: TimeStamp? = nil, createdDateTime: TimeStamp? = nil, selectiveAuth: SelectiveAuth? = nil, remoteDomainName: String? = nil, trustType: TrustType? = nil, trustState: TrustState? = nil) {
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.directoryId = directoryId
            self.trustId = trustId
            self.trustStateReason = trustStateReason
            self.trustDirection = trustDirection
            self.stateLastUpdatedDateTime = stateLastUpdatedDateTime
            self.createdDateTime = createdDateTime
            self.selectiveAuth = selectiveAuth
            self.remoteDomainName = remoteDomainName
            self.trustType = trustType
            self.trustState = trustState
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedDateTime = "LastUpdatedDateTime"
            case directoryId = "DirectoryId"
            case trustId = "TrustId"
            case trustStateReason = "TrustStateReason"
            case trustDirection = "TrustDirection"
            case stateLastUpdatedDateTime = "StateLastUpdatedDateTime"
            case createdDateTime = "CreatedDateTime"
            case selectiveAuth = "SelectiveAuth"
            case remoteDomainName = "RemoteDomainName"
            case trustType = "TrustType"
            case trustState = "TrustState"
        }
    }

    public enum TargetType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeConditionalForwardersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainNames", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned.
        public let remoteDomainNames: [String]?
        /// The directory ID for which to get the list of associated conditional forwarders.
        public let directoryId: String

        public init(remoteDomainNames: [String]? = nil, directoryId: String) {
            self.remoteDomainNames = remoteDomainNames
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainNames = "RemoteDomainNames"
            case directoryId = "DirectoryId"
        }
    }

    public struct EnableSsoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?
        /// The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name. If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The identifier of the directory for which to enable single-sign on.
        public let directoryId: String

        public init(password: String? = nil, userName: String? = nil, directoryId: String) {
            self.password = password
            self.userName = userName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case password = "Password"
            case userName = "UserName"
            case directoryId = "DirectoryId"
        }
    }

    public enum ShareStatus: String, CustomStringConvertible, Codable {
        case shared = "Shared"
        case pendingacceptance = "PendingAcceptance"
        case rejected = "Rejected"
        case rejecting = "Rejecting"
        case rejectfailed = "RejectFailed"
        case sharing = "Sharing"
        case sharefailed = "ShareFailed"
        case deleted = "Deleted"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventTopicsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventTopics", required: false, type: .list)
        ]
        /// A list of SNS topic names that receive status messages from the specified Directory ID.
        public let eventTopics: [EventTopic]?

        public init(eventTopics: [EventTopic]? = nil) {
            self.eventTopics = eventTopics
        }

        private enum CodingKeys: String, CodingKey {
            case eventTopics = "EventTopics"
        }
    }

    public enum SelectiveAuth: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct SnapshotLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManualSnapshotsCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "ManualSnapshotsLimit", required: false, type: .integer), 
            AWSShapeMember(label: "ManualSnapshotsLimitReached", required: false, type: .boolean)
        ]
        /// The current number of manual snapshots of the directory.
        public let manualSnapshotsCurrentCount: Int32?
        /// The maximum number of manual snapshots allowed.
        public let manualSnapshotsLimit: Int32?
        /// Indicates if the manual snapshot limit has been reached.
        public let manualSnapshotsLimitReached: Bool?

        public init(manualSnapshotsCurrentCount: Int32? = nil, manualSnapshotsLimit: Int32? = nil, manualSnapshotsLimitReached: Bool? = nil) {
            self.manualSnapshotsCurrentCount = manualSnapshotsCurrentCount
            self.manualSnapshotsLimit = manualSnapshotsLimit
            self.manualSnapshotsLimitReached = manualSnapshotsLimitReached
        }

        private enum CodingKeys: String, CodingKey {
            case manualSnapshotsCurrentCount = "ManualSnapshotsCurrentCount"
            case manualSnapshotsLimit = "ManualSnapshotsLimit"
            case manualSnapshotsLimitReached = "ManualSnapshotsLimitReached"
        }
    }

    public struct DirectoryVpcSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]
        /// The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service creates a directory server and a DNS server in each of these subnets.
        public let subnetIds: [String]
        /// The identifier of the VPC in which to create the directory.
        public let vpcId: String

        public init(subnetIds: [String], vpcId: String) {
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case vpcId = "VpcId"
        }
    }

    public struct DirectoryDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RadiusSettings", required: false, type: .structure), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "ShareMethod", required: false, type: .enum), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "OwnerDirectoryDescription", required: false, type: .structure), 
            AWSShapeMember(label: "DesiredNumberOfDomainControllers", required: false, type: .integer), 
            AWSShapeMember(label: "RadiusStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .enum), 
            AWSShapeMember(label: "ConnectSettings", required: false, type: .structure), 
            AWSShapeMember(label: "StageLastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Stage", required: false, type: .enum), 
            AWSShapeMember(label: "SsoEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ShareNotes", required: false, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: false, type: .list), 
            AWSShapeMember(label: "AccessUrl", required: false, type: .string), 
            AWSShapeMember(label: "ShareStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Edition", required: false, type: .enum), 
            AWSShapeMember(label: "StageReason", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcSettings", required: false, type: .structure)
        ]
        /// A RadiusSettings object that contains information about the RADIUS server configured for this directory.
        public let radiusSettings: RadiusSettings?
        /// The directory identifier.
        public let directoryId: String?
        /// The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (ORGANIZATIONS) or with any AWS account by sending a shared directory request (HANDSHAKE).
        public let shareMethod: ShareMethod?
        /// The short name of the directory.
        public let shortName: String?
        /// Describes the AWS Managed Microsoft AD directory in the directory owner account.
        public let ownerDirectoryDescription: OwnerDirectoryDescription?
        /// The desired number of domain controllers in the directory if the directory is Microsoft AD.
        public let desiredNumberOfDomainControllers: Int32?
        /// The status of the RADIUS MFA server connection.
        public let radiusStatus: RadiusStatus?
        /// The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as d-XXXXXXXXXX.
        public let alias: String?
        /// The directory size.
        public let size: DirectorySize?
        /// A DirectoryConnectSettingsDescription object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.
        public let connectSettings: DirectoryConnectSettingsDescription?
        /// The date and time that the stage was last updated.
        public let stageLastUpdatedDateTime: TimeStamp?
        /// The current stage of the directory.
        public let stage: DirectoryStage?
        /// Indicates if single sign-on is enabled for the directory. For more information, see EnableSso and DisableSso.
        public let ssoEnabled: Bool?
        /// A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.
        public let shareNotes: String?
        /// The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in the on-premises directory to which the AD Connector is connected.
        public let dnsIpAddrs: [String]?
        /// The access URL for the directory, such as http://&lt;alias&gt;.awsapps.com. If no alias has been created for the directory, &lt;alias&gt; is the directory identifier, such as d-XXXXXXXXXX.
        public let accessUrl: String?
        /// Current directory status of the shared AWS Managed Microsoft AD directory.
        public let shareStatus: ShareStatus?
        /// The textual description for the directory.
        public let description: String?
        /// The edition associated with this directory.
        public let edition: DirectoryEdition?
        /// Additional information about the directory stage.
        public let stageReason: String?
        /// The fully qualified name of the directory.
        public let name: String?
        /// The directory size.
        public let `type`: DirectoryType?
        /// Specifies when the directory was created.
        public let launchTime: TimeStamp?
        /// A DirectoryVpcSettingsDescription object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed AD directory.
        public let vpcSettings: DirectoryVpcSettingsDescription?

        public init(radiusSettings: RadiusSettings? = nil, directoryId: String? = nil, shareMethod: ShareMethod? = nil, shortName: String? = nil, ownerDirectoryDescription: OwnerDirectoryDescription? = nil, desiredNumberOfDomainControllers: Int32? = nil, radiusStatus: RadiusStatus? = nil, alias: String? = nil, size: DirectorySize? = nil, connectSettings: DirectoryConnectSettingsDescription? = nil, stageLastUpdatedDateTime: TimeStamp? = nil, stage: DirectoryStage? = nil, ssoEnabled: Bool? = nil, shareNotes: String? = nil, dnsIpAddrs: [String]? = nil, accessUrl: String? = nil, shareStatus: ShareStatus? = nil, description: String? = nil, edition: DirectoryEdition? = nil, stageReason: String? = nil, name: String? = nil, type: DirectoryType? = nil, launchTime: TimeStamp? = nil, vpcSettings: DirectoryVpcSettingsDescription? = nil) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
            self.shareMethod = shareMethod
            self.shortName = shortName
            self.ownerDirectoryDescription = ownerDirectoryDescription
            self.desiredNumberOfDomainControllers = desiredNumberOfDomainControllers
            self.radiusStatus = radiusStatus
            self.alias = alias
            self.size = size
            self.connectSettings = connectSettings
            self.stageLastUpdatedDateTime = stageLastUpdatedDateTime
            self.stage = stage
            self.ssoEnabled = ssoEnabled
            self.shareNotes = shareNotes
            self.dnsIpAddrs = dnsIpAddrs
            self.accessUrl = accessUrl
            self.shareStatus = shareStatus
            self.description = description
            self.edition = edition
            self.stageReason = stageReason
            self.name = name
            self.`type` = `type`
            self.launchTime = launchTime
            self.vpcSettings = vpcSettings
        }

        private enum CodingKeys: String, CodingKey {
            case radiusSettings = "RadiusSettings"
            case directoryId = "DirectoryId"
            case shareMethod = "ShareMethod"
            case shortName = "ShortName"
            case ownerDirectoryDescription = "OwnerDirectoryDescription"
            case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
            case radiusStatus = "RadiusStatus"
            case alias = "Alias"
            case size = "Size"
            case connectSettings = "ConnectSettings"
            case stageLastUpdatedDateTime = "StageLastUpdatedDateTime"
            case stage = "Stage"
            case ssoEnabled = "SsoEnabled"
            case shareNotes = "ShareNotes"
            case dnsIpAddrs = "DnsIpAddrs"
            case accessUrl = "AccessUrl"
            case shareStatus = "ShareStatus"
            case description = "Description"
            case edition = "Edition"
            case stageReason = "StageReason"
            case name = "Name"
            case `type` = "Type"
            case launchTime = "LaunchTime"
            case vpcSettings = "VpcSettings"
        }
    }

    public struct DirectoryConnectSettingsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "CustomerUserName", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "ConnectIps", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list)
        ]
        /// The identifier of the VPC that the AD Connector is in.
        public let vpcId: String?
        /// The user name of the service account in the on-premises directory.
        public let customerUserName: String?
        /// A list of subnet identifiers in the VPC that the AD connector is in.
        public let subnetIds: [String]?
        /// The IP addresses of the AD Connector servers.
        public let connectIps: [String]?
        /// The security group identifier for the AD Connector directory.
        public let securityGroupId: String?
        /// A list of the Availability Zones that the directory is in.
        public let availabilityZones: [String]?

        public init(vpcId: String? = nil, customerUserName: String? = nil, subnetIds: [String]? = nil, connectIps: [String]? = nil, securityGroupId: String? = nil, availabilityZones: [String]? = nil) {
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.subnetIds = subnetIds
            self.connectIps = connectIps
            self.securityGroupId = securityGroupId
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case customerUserName = "CustomerUserName"
            case subnetIds = "SubnetIds"
            case connectIps = "ConnectIps"
            case securityGroupId = "SecurityGroupId"
            case availabilityZones = "AvailabilityZones"
        }
    }

    public struct DescribeSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value in the NextToken member of a subsequent call to DescribeSnapshots.
        public let nextToken: String?
        /// The list of Snapshot objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case snapshots = "Snapshots"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// Identifier (ID) for the directory to which to add the tag.
        public let resourceId: String
        /// The tags to be assigned to the directory.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public struct DirectoryLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudOnlyMicrosoftADLimit", required: false, type: .integer), 
            AWSShapeMember(label: "ConnectedDirectoriesCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "ConnectedDirectoriesLimitReached", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudOnlyDirectoriesCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyMicrosoftADCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "ConnectedDirectoriesLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyDirectoriesLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyDirectoriesLimitReached", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudOnlyMicrosoftADLimitReached", required: false, type: .boolean)
        ]
        /// The maximum number of AWS Managed Microsoft AD directories allowed in the region.
        public let cloudOnlyMicrosoftADLimit: Int32?
        /// The current number of connected directories in the region.
        public let connectedDirectoriesCurrentCount: Int32?
        /// Indicates if the connected directory limit has been reached.
        public let connectedDirectoriesLimitReached: Bool?
        /// The current number of cloud directories in the region.
        public let cloudOnlyDirectoriesCurrentCount: Int32?
        /// The current number of AWS Managed Microsoft AD directories in the region.
        public let cloudOnlyMicrosoftADCurrentCount: Int32?
        /// The maximum number of connected directories allowed in the region.
        public let connectedDirectoriesLimit: Int32?
        /// The maximum number of cloud directories allowed in the region.
        public let cloudOnlyDirectoriesLimit: Int32?
        /// Indicates if the cloud directory limit has been reached.
        public let cloudOnlyDirectoriesLimitReached: Bool?
        /// Indicates if the AWS Managed Microsoft AD directory limit has been reached.
        public let cloudOnlyMicrosoftADLimitReached: Bool?

        public init(cloudOnlyMicrosoftADLimit: Int32? = nil, connectedDirectoriesCurrentCount: Int32? = nil, connectedDirectoriesLimitReached: Bool? = nil, cloudOnlyDirectoriesCurrentCount: Int32? = nil, cloudOnlyMicrosoftADCurrentCount: Int32? = nil, connectedDirectoriesLimit: Int32? = nil, cloudOnlyDirectoriesLimit: Int32? = nil, cloudOnlyDirectoriesLimitReached: Bool? = nil, cloudOnlyMicrosoftADLimitReached: Bool? = nil) {
            self.cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit
            self.connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount
            self.connectedDirectoriesLimitReached = connectedDirectoriesLimitReached
            self.cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount
            self.cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount
            self.connectedDirectoriesLimit = connectedDirectoriesLimit
            self.cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit
            self.cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReached
            self.cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReached
        }

        private enum CodingKeys: String, CodingKey {
            case cloudOnlyMicrosoftADLimit = "CloudOnlyMicrosoftADLimit"
            case connectedDirectoriesCurrentCount = "ConnectedDirectoriesCurrentCount"
            case connectedDirectoriesLimitReached = "ConnectedDirectoriesLimitReached"
            case cloudOnlyDirectoriesCurrentCount = "CloudOnlyDirectoriesCurrentCount"
            case cloudOnlyMicrosoftADCurrentCount = "CloudOnlyMicrosoftADCurrentCount"
            case connectedDirectoriesLimit = "ConnectedDirectoriesLimit"
            case cloudOnlyDirectoriesLimit = "CloudOnlyDirectoriesLimit"
            case cloudOnlyDirectoriesLimitReached = "CloudOnlyDirectoriesLimitReached"
            case cloudOnlyMicrosoftADLimitReached = "CloudOnlyMicrosoftADLimitReached"
        }
    }

    public enum SnapshotStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct ConditionalForwarder: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationScope", required: false, type: .enum), 
            AWSShapeMember(label: "RemoteDomainName", required: false, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: false, type: .list)
        ]
        /// The replication scope of the conditional forwarder. The only allowed value is Domain, which will replicate the conditional forwarder to all of the domain controllers for your AWS directory.
        public let replicationScope: ReplicationScope?
        /// The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder.
        public let remoteDomainName: String?
        /// The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to.
        public let dnsIpAddrs: [String]?

        public init(replicationScope: ReplicationScope? = nil, remoteDomainName: String? = nil, dnsIpAddrs: [String]? = nil) {
            self.replicationScope = replicationScope
            self.remoteDomainName = remoteDomainName
            self.dnsIpAddrs = dnsIpAddrs
        }

        private enum CodingKeys: String, CodingKey {
            case replicationScope = "ReplicationScope"
            case remoteDomainName = "RemoteDomainName"
            case dnsIpAddrs = "DnsIpAddrs"
        }
    }

    public struct Computer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComputerName", required: false, type: .string), 
            AWSShapeMember(label: "ComputerAttributes", required: false, type: .list), 
            AWSShapeMember(label: "ComputerId", required: false, type: .string)
        ]
        /// The computer name.
        public let computerName: String?
        /// An array of Attribute objects containing the LDAP attributes that belong to the computer account.
        public let computerAttributes: [Attribute]?
        /// The identifier of the computer.
        public let computerId: String?

        public init(computerName: String? = nil, computerAttributes: [Attribute]? = nil, computerId: String? = nil) {
            self.computerName = computerName
            self.computerAttributes = computerAttributes
            self.computerId = computerId
        }

        private enum CodingKeys: String, CodingKey {
            case computerName = "ComputerName"
            case computerAttributes = "ComputerAttributes"
            case computerId = "ComputerId"
        }
    }

    public struct UnshareDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "UnshareTarget", required: true, type: .structure)
        ]
        /// The identifier of the AWS Managed Microsoft AD directory that you want to stop sharing.
        public let directoryId: String
        /// Identifier for the directory consumer account with whom the directory has to be unshared.
        public let unshareTarget: UnshareTarget

        public init(directoryId: String, unshareTarget: UnshareTarget) {
            self.directoryId = directoryId
            self.unshareTarget = unshareTarget
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case unshareTarget = "UnshareTarget"
        }
    }

    public enum DirectoryEdition: String, CustomStringConvertible, Codable {
        case enterprise = "Enterprise"
        case standard = "Standard"
        public var description: String { return self.rawValue }
    }

    public struct GetSnapshotLimitsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// Contains the identifier of the directory to obtain the limits for.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct RadiusSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SharedSecret", required: false, type: .string), 
            AWSShapeMember(label: "UseSameUsername", required: false, type: .boolean), 
            AWSShapeMember(label: "RadiusRetries", required: false, type: .integer), 
            AWSShapeMember(label: "RadiusServers", required: false, type: .list), 
            AWSShapeMember(label: "RadiusTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "AuthenticationProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "DisplayLabel", required: false, type: .string), 
            AWSShapeMember(label: "RadiusPort", required: false, type: .integer)
        ]
        /// Required for enabling RADIUS on the directory.
        public let sharedSecret: String?
        /// Not currently used.
        public let useSameUsername: Bool?
        /// The maximum number of times that communication with the RADIUS server is attempted.
        public let radiusRetries: Int32?
        /// An array of strings that contains the IP addresses of the RADIUS server endpoints, or the IP addresses of your RADIUS server load balancer.
        public let radiusServers: [String]?
        /// The amount of time, in seconds, to wait for the RADIUS server to respond.
        public let radiusTimeout: Int32?
        /// The protocol specified for your RADIUS endpoints.
        public let authenticationProtocol: RadiusAuthenticationProtocol?
        /// Not currently used.
        public let displayLabel: String?
        /// The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers.
        public let radiusPort: Int32?

        public init(sharedSecret: String? = nil, useSameUsername: Bool? = nil, radiusRetries: Int32? = nil, radiusServers: [String]? = nil, radiusTimeout: Int32? = nil, authenticationProtocol: RadiusAuthenticationProtocol? = nil, displayLabel: String? = nil, radiusPort: Int32? = nil) {
            self.sharedSecret = sharedSecret
            self.useSameUsername = useSameUsername
            self.radiusRetries = radiusRetries
            self.radiusServers = radiusServers
            self.radiusTimeout = radiusTimeout
            self.authenticationProtocol = authenticationProtocol
            self.displayLabel = displayLabel
            self.radiusPort = radiusPort
        }

        private enum CodingKeys: String, CodingKey {
            case sharedSecret = "SharedSecret"
            case useSameUsername = "UseSameUsername"
            case radiusRetries = "RadiusRetries"
            case radiusServers = "RadiusServers"
            case radiusTimeout = "RadiusTimeout"
            case authenticationProtocol = "AuthenticationProtocol"
            case displayLabel = "DisplayLabel"
            case radiusPort = "RadiusPort"
        }
    }

    public struct DeleteDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The identifier of the directory to delete.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct IpRouteInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "IpRouteStatusReason", required: false, type: .string), 
            AWSShapeMember(label: "AddedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "IpRouteStatusMsg", required: false, type: .enum)
        ]
        /// IP address block in the IpRoute.
        public let cidrIp: String?
        /// Description of the IpRouteInfo.
        public let description: String?
        /// The reason for the IpRouteStatusMsg.
        public let ipRouteStatusReason: String?
        /// The date and time the address block was added to the directory.
        public let addedDateTime: TimeStamp?
        /// Identifier (ID) of the directory associated with the IP addresses.
        public let directoryId: String?
        /// The status of the IP address block.
        public let ipRouteStatusMsg: IpRouteStatusMsg?

        public init(cidrIp: String? = nil, description: String? = nil, ipRouteStatusReason: String? = nil, addedDateTime: TimeStamp? = nil, directoryId: String? = nil, ipRouteStatusMsg: IpRouteStatusMsg? = nil) {
            self.cidrIp = cidrIp
            self.description = description
            self.ipRouteStatusReason = ipRouteStatusReason
            self.addedDateTime = addedDateTime
            self.directoryId = directoryId
            self.ipRouteStatusMsg = ipRouteStatusMsg
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case description = "Description"
            case ipRouteStatusReason = "IpRouteStatusReason"
            case addedDateTime = "AddedDateTime"
            case directoryId = "DirectoryId"
            case ipRouteStatusMsg = "IpRouteStatusMsg"
        }
    }

    public struct ListSchemaExtensionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaExtensionsInfo", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the schema extensions applied to the directory.
        public let schemaExtensionsInfo: [SchemaExtensionInfo]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListSchemaExtensions to retrieve the next set of items.
        public let nextToken: String?

        public init(schemaExtensionsInfo: [SchemaExtensionInfo]? = nil, nextToken: String? = nil) {
            self.schemaExtensionsInfo = schemaExtensionsInfo
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaExtensionsInfo = "SchemaExtensionsInfo"
            case nextToken = "NextToken"
        }
    }

    public struct SchemaExtensionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SchemaExtensionStatusReason", required: false, type: .string), 
            AWSShapeMember(label: "SchemaExtensionId", required: false, type: .string), 
            AWSShapeMember(label: "SchemaExtensionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp)
        ]
        /// The date and time that the schema extension started being applied to the directory.
        public let startDateTime: TimeStamp?
        /// A description of the schema extension.
        public let description: String?
        /// The reason for the SchemaExtensionStatus.
        public let schemaExtensionStatusReason: String?
        /// The identifier of the schema extension.
        public let schemaExtensionId: String?
        /// The current status of the schema extension.
        public let schemaExtensionStatus: SchemaExtensionStatus?
        /// The identifier of the directory to which the schema extension is applied.
        public let directoryId: String?
        /// The date and time that the schema extension was completed.
        public let endDateTime: TimeStamp?

        public init(startDateTime: TimeStamp? = nil, description: String? = nil, schemaExtensionStatusReason: String? = nil, schemaExtensionId: String? = nil, schemaExtensionStatus: SchemaExtensionStatus? = nil, directoryId: String? = nil, endDateTime: TimeStamp? = nil) {
            self.startDateTime = startDateTime
            self.description = description
            self.schemaExtensionStatusReason = schemaExtensionStatusReason
            self.schemaExtensionId = schemaExtensionId
            self.schemaExtensionStatus = schemaExtensionStatus
            self.directoryId = directoryId
            self.endDateTime = endDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case startDateTime = "StartDateTime"
            case description = "Description"
            case schemaExtensionStatusReason = "SchemaExtensionStatusReason"
            case schemaExtensionId = "SchemaExtensionId"
            case schemaExtensionStatus = "SchemaExtensionStatus"
            case directoryId = "DirectoryId"
            case endDateTime = "EndDateTime"
        }
    }

    public struct CreateTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// A unique identifier for the trust relationship that was created.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct UpdateNumberOfDomainControllersResult: AWSShape {

    }

    public struct RegisterEventTopicResult: AWSShape {

    }

    public struct DeleteConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder.
        public let remoteDomainName: String
        /// The directory ID for which you are deleting the conditional forwarder.
        public let directoryId: String

        public init(remoteDomainName: String, directoryId: String) {
            self.remoteDomainName = remoteDomainName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case directoryId = "DirectoryId"
        }
    }

    public struct LogSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionCreatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "LogGroupName", required: false, type: .string)
        ]
        /// The date and time that the log subscription was created.
        public let subscriptionCreatedDateTime: TimeStamp?
        /// Identifier (ID) of the directory that you want to associate with the log subscription.
        public let directoryId: String?
        /// The name of the log group.
        public let logGroupName: String?

        public init(subscriptionCreatedDateTime: TimeStamp? = nil, directoryId: String? = nil, logGroupName: String? = nil) {
            self.subscriptionCreatedDateTime = subscriptionCreatedDateTime
            self.directoryId = directoryId
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionCreatedDateTime = "SubscriptionCreatedDateTime"
            case directoryId = "DirectoryId"
            case logGroupName = "LogGroupName"
        }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIds", required: false, type: .list)
        ]
        /// The DescribeSnapshotsResult.NextToken value from a previous call to DescribeSnapshots. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// The identifier of the directory for which to retrieve snapshot information.
        public let directoryId: String?
        /// A list of identifiers of the snapshots to obtain the information for. If this member is null or empty, all snapshots are returned using the Limit and NextToken members.
        public let snapshotIds: [String]?

        public init(nextToken: String? = nil, limit: Int32? = nil, directoryId: String? = nil, snapshotIds: [String]? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.directoryId = directoryId
            self.snapshotIds = snapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case directoryId = "DirectoryId"
            case snapshotIds = "SnapshotIds"
        }
    }

    public struct DescribeDirectoriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryDescriptions", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDirectories to retrieve the next set of items.
        public let nextToken: String?
        /// The list of DirectoryDescription objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let directoryDescriptions: [DirectoryDescription]?

        public init(nextToken: String? = nil, directoryDescriptions: [DirectoryDescription]? = nil) {
            self.nextToken = nextToken
            self.directoryDescriptions = directoryDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryDescriptions = "DirectoryDescriptions"
        }
    }

    public struct CreateAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "Alias", required: true, type: .string)
        ]
        /// The identifier of the directory for which to create the alias.
        public let directoryId: String
        /// The requested alias. The alias must be unique amongst all aliases in AWS. This operation throws an EntityAlreadyExistsException error if the alias already exists.
        public let alias: String

        public init(directoryId: String, alias: String) {
            self.directoryId = directoryId
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case alias = "Alias"
        }
    }

    public struct DescribeDomainControllersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "DomainControllerIds", required: false, type: .list)
        ]
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The DescribeDomainControllers.NextToken value from a previous call to DescribeDomainControllers. Pass null if this is the first call. 
        public let nextToken: String?
        /// Identifier of the directory for which to retrieve the domain controller information.
        public let directoryId: String
        /// A list of identifiers for the domain controllers whose information will be provided.
        public let domainControllerIds: [String]?

        public init(limit: Int32? = nil, nextToken: String? = nil, directoryId: String, domainControllerIds: [String]? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.directoryId = directoryId
            self.domainControllerIds = domainControllerIds
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case directoryId = "DirectoryId"
            case domainControllerIds = "DomainControllerIds"
        }
    }

    public struct DescribeConditionalForwardersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConditionalForwarders", required: false, type: .list)
        ]
        /// The list of conditional forwarders that have been created.
        public let conditionalForwarders: [ConditionalForwarder]?

        public init(conditionalForwarders: [ConditionalForwarder]? = nil) {
            self.conditionalForwarders = conditionalForwarders
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalForwarders = "ConditionalForwarders"
        }
    }

    public struct CancelSchemaExtensionResult: AWSShape {

    }

    public struct CreateLogSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogGroupName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The name of the CloudWatch log group where the real-time domain controller logs are forwarded.
        public let logGroupName: String
        /// Identifier (ID) of the directory to which you want to subscribe and receive real-time logs to your specified CloudWatch log group.
        public let directoryId: String

        public init(logGroupName: String, directoryId: String) {
            self.logGroupName = logGroupName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "LogGroupName"
            case directoryId = "DirectoryId"
        }
    }

    public struct AddIpRoutesResult: AWSShape {

    }

    public enum DirectorySize: String, CustomStringConvertible, Codable {
        case small = "Small"
        case large = "Large"
        public var description: String { return self.rawValue }
    }

    public struct ShareDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShareNotes", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "ShareTarget", required: true, type: .structure), 
            AWSShapeMember(label: "ShareMethod", required: true, type: .enum)
        ]
        /// A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.
        public let shareNotes: String?
        /// Identifier of the AWS Managed Microsoft AD directory that you want to share with other AWS accounts.
        public let directoryId: String
        /// Identifier for the directory consumer account with whom the directory is to be shared.
        public let shareTarget: ShareTarget
        /// The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (ORGANIZATIONS) or with any AWS account by sending a directory sharing request (HANDSHAKE).
        public let shareMethod: ShareMethod

        public init(shareNotes: String? = nil, directoryId: String, shareTarget: ShareTarget, shareMethod: ShareMethod) {
            self.shareNotes = shareNotes
            self.directoryId = directoryId
            self.shareTarget = shareTarget
            self.shareMethod = shareMethod
        }

        private enum CodingKeys: String, CodingKey {
            case shareNotes = "ShareNotes"
            case directoryId = "DirectoryId"
            case shareTarget = "ShareTarget"
            case shareMethod = "ShareMethod"
        }
    }

    public struct UpdateRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RadiusSettings", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings
        /// The identifier of the directory for which to update the RADIUS server information.
        public let directoryId: String

        public init(radiusSettings: RadiusSettings, directoryId: String) {
            self.radiusSettings = radiusSettings
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case radiusSettings = "RadiusSettings"
            case directoryId = "DirectoryId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String
        /// Required name of the tag. The string value can be Unicode characters and cannot be prefixed with "aws:". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeTrustsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Trusts", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of Trust objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let trusts: [Trust]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeTrusts to retrieve the next set of items.
        public let nextToken: String?

        public init(trusts: [Trust]? = nil, nextToken: String? = nil) {
            self.trusts = trusts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case trusts = "Trusts"
            case nextToken = "NextToken"
        }
    }

    public enum DirectoryStage: String, CustomStringConvertible, Codable {
        case requested = "Requested"
        case creating = "Creating"
        case created = "Created"
        case active = "Active"
        case inoperable = "Inoperable"
        case impaired = "Impaired"
        case restoring = "Restoring"
        case restorefailed = "RestoreFailed"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DisableRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The identifier of the directory for which to disable MFA.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct RestoreFromSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]
        /// The identifier of the snapshot to restore from.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct ListIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Identifier (ID) of the directory for which you want to retrieve the IP addresses.
        public let directoryId: String
        /// Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?
        /// The ListIpRoutes.NextToken value from a previous call to ListIpRoutes. Pass null if this is the first call.
        public let nextToken: String?

        public init(directoryId: String, limit: Int32? = nil, nextToken: String? = nil) {
            self.directoryId = directoryId
            self.limit = limit
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeSharedDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SharedDirectoryIds", required: false, type: .list), 
            AWSShapeMember(label: "OwnerDirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// The DescribeSharedDirectoriesResult.NextToken value from a previous call to DescribeSharedDirectories. Pass null if this is the first call. 
        public let nextToken: String?
        /// A list of identifiers of all shared directories in your account. 
        public let sharedDirectoryIds: [String]?
        /// Returns the identifier of the directory in the directory owner account. 
        public let ownerDirectoryId: String
        /// The number of shared directories to return in the response object.
        public let limit: Int32?

        public init(nextToken: String? = nil, sharedDirectoryIds: [String]? = nil, ownerDirectoryId: String, limit: Int32? = nil) {
            self.nextToken = nextToken
            self.sharedDirectoryIds = sharedDirectoryIds
            self.ownerDirectoryId = ownerDirectoryId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case sharedDirectoryIds = "SharedDirectoryIds"
            case ownerDirectoryId = "OwnerDirectoryId"
            case limit = "Limit"
        }
    }

    public struct VerifyTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: true, type: .string)
        ]
        /// The unique Trust ID of the trust relationship to verify.
        public let trustId: String

        public init(trustId: String) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct CreateAliasResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "Alias", required: false, type: .string)
        ]
        /// The identifier of the directory.
        public let directoryId: String?
        /// The alias for the directory.
        public let alias: String?

        public init(directoryId: String? = nil, alias: String? = nil) {
            self.directoryId = directoryId
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case alias = "Alias"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// List of tags returned by the ListTagsForResource operation.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct DescribeEventTopicsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "TopicNames", required: false, type: .list)
        ]
        /// The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned.
        public let directoryId: String?
        /// A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned. An empty list results in an InvalidParameterException being thrown.
        public let topicNames: [String]?

        public init(directoryId: String? = nil, topicNames: [String]? = nil) {
            self.directoryId = directoryId
            self.topicNames = topicNames
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case topicNames = "TopicNames"
        }
    }

}