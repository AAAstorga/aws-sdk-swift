// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Email {

    public struct VerifyEmailAddressRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The email address to be verified.
        public let emailAddress: String

        public init(emailAddress: String) {
            self.emailAddress = emailAddress
        }

        public init(dictionary: [String: Any]) throws {
            guard let emailAddress = dictionary["EmailAddress"] as? String else { throw InitializableError.missingRequiredParam("EmailAddress") }
            self.emailAddress = emailAddress
        }
    }

    public struct ListReceiptFiltersResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of IP address filter data structures, which each consist of a name, an IP address range, and whether to allow or block mail from it.
        public let filters: [ReceiptFilter]?

        public init(filters: [ReceiptFilter]? = nil) {
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            if let filters = dictionary["Filters"] as? [[String: Any]] {
                self.filters = try filters.map({ try ReceiptFilter(dictionary: $0) })
            } else { 
                self.filters = nil
            }
        }
    }

    public struct DescribeReceiptRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A data structure that contains the specified receipt rule's name, actions, recipients, domains, enabled status, scan status, and Transport Layer Security (TLS) policy.
        public let rule: ReceiptRule?

        public init(rule: ReceiptRule? = nil) {
            self.rule = rule
        }

        public init(dictionary: [String: Any]) throws {
            if let rule = dictionary["Rule"] as? [String: Any] { self.rule = try Email.ReceiptRule(dictionary: rule) } else { self.rule = nil }
        }
    }

    public enum ReceiptFilterPolicy: String, CustomStringConvertible {
        case block = "Block"
        case allow = "Allow"
        public var description: String { return self.rawValue }
    }

    public struct CloneReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the rule set to create. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain less than 64 characters.  
        public let ruleSetName: String
        /// The name of the rule set to clone.
        public let originalRuleSetName: String

        public init(ruleSetName: String, originalRuleSetName: String) {
            self.ruleSetName = ruleSetName
            self.originalRuleSetName = originalRuleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
            guard let originalRuleSetName = dictionary["OriginalRuleSetName"] as? String else { throw InitializableError.missingRequiredParam("OriginalRuleSetName") }
            self.originalRuleSetName = originalRuleSetName
        }
    }

    public struct GetIdentityNotificationAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A map of Identity to IdentityNotificationAttributes.
        public let notificationAttributes: [String: IdentityNotificationAttributes]

        public init(notificationAttributes: [String: IdentityNotificationAttributes]) {
            self.notificationAttributes = notificationAttributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let notificationAttributes = dictionary["NotificationAttributes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NotificationAttributes") }
            var notificationAttributesDict: [String: IdentityNotificationAttributes] = [:]
            for (key, value) in notificationAttributes {
                guard let identityNotificationAttributesDict = value as? [String: Any] else { throw InitializableError.convertingError }
                notificationAttributesDict[key] = try IdentityNotificationAttributes(dictionary: identityNotificationAttributesDict)
            }
            self.notificationAttributes = notificationAttributesDict
        }
    }

    public struct DeleteConfigurationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct VerifyDomainIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The domain to be verified.
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["Domain"] as? String else { throw InitializableError.missingRequiredParam("Domain") }
            self.domain = domain
        }
    }

    public struct SetIdentityNotificationTopicRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of notifications that will be published to the specified Amazon SNS topic.
        public let notificationType: NotificationType
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, SnsTopic is cleared and publishing is disabled.
        public let snsTopic: String?
        /// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
        public let identity: String

        public init(notificationType: NotificationType, snsTopic: String? = nil, identity: String) {
            self.notificationType = notificationType
            self.snsTopic = snsTopic
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawNotificationType = dictionary["NotificationType"] as? String, let notificationType = NotificationType(rawValue: rawNotificationType) else { throw InitializableError.missingRequiredParam("NotificationType") }
            self.notificationType = notificationType
            self.snsTopic = dictionary["SnsTopic"] as? String
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct CreateConfigurationSetEventDestinationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SetReceiptRulePositionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct EventDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        public let cloudWatchDestination: CloudWatchDestination?
        /// The type of email sending events to publish to the event destination.
        public let matchingEventTypes: [EventType]
        /// The name of the event destination. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 64 characters.  
        public let name: String
        /// An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        public let kinesisFirehoseDestination: KinesisFirehoseDestination?
        /// Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.
        public let enabled: Bool?

        public init(cloudWatchDestination: CloudWatchDestination? = nil, matchingEventTypes: [EventType], name: String, kinesisFirehoseDestination: KinesisFirehoseDestination? = nil, enabled: Bool? = nil) {
            self.cloudWatchDestination = cloudWatchDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.enabled = enabled
        }

        public init(dictionary: [String: Any]) throws {
            if let cloudWatchDestination = dictionary["CloudWatchDestination"] as? [String: Any] { self.cloudWatchDestination = try Email.CloudWatchDestination(dictionary: cloudWatchDestination) } else { self.cloudWatchDestination = nil }
            guard let matchingEventTypes = dictionary["MatchingEventTypes"] as? [String] else { throw InitializableError.missingRequiredParam("MatchingEventTypes") }
            self.matchingEventTypes = matchingEventTypes.flatMap({ EventType(rawValue: $0)})
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let kinesisFirehoseDestination = dictionary["KinesisFirehoseDestination"] as? [String: Any] { self.kinesisFirehoseDestination = try Email.KinesisFirehoseDestination(dictionary: kinesisFirehoseDestination) } else { self.kinesisFirehoseDestination = nil }
            self.enabled = dictionary["Enabled"] as? Bool
        }
    }

    public struct IdentityNotificationAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish complaint notifications.
        public let complaintTopic: String
        /// Describes whether Amazon SES will forward bounce and complaint notifications as email. true indicates that Amazon SES will forward bounce and complaint notifications as email, while false indicates that bounce and complaint notifications will be published only to the specified bounce and complaint Amazon SNS topics.
        public let forwardingEnabled: Bool
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish delivery notifications.
        public let deliveryTopic: String
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Complaint. A value of true specifies that Amazon SES will include headers in complaint notifications, and a value of false specifies that Amazon SES will not include headers in complaint notifications.
        public let headersInComplaintNotificationsEnabled: Bool?
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Delivery. A value of true specifies that Amazon SES will include headers in delivery notifications, and a value of false specifies that Amazon SES will not include headers in delivery notifications.
        public let headersInDeliveryNotificationsEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish bounce notifications.
        public let bounceTopic: String
        /// Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type Bounce. A value of true specifies that Amazon SES will include headers in bounce notifications, and a value of false specifies that Amazon SES will not include headers in bounce notifications.
        public let headersInBounceNotificationsEnabled: Bool?

        public init(complaintTopic: String, forwardingEnabled: Bool, deliveryTopic: String, headersInComplaintNotificationsEnabled: Bool? = nil, headersInDeliveryNotificationsEnabled: Bool? = nil, bounceTopic: String, headersInBounceNotificationsEnabled: Bool? = nil) {
            self.complaintTopic = complaintTopic
            self.forwardingEnabled = forwardingEnabled
            self.deliveryTopic = deliveryTopic
            self.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled
            self.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled
            self.bounceTopic = bounceTopic
            self.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled
        }

        public init(dictionary: [String: Any]) throws {
            guard let complaintTopic = dictionary["ComplaintTopic"] as? String else { throw InitializableError.missingRequiredParam("ComplaintTopic") }
            self.complaintTopic = complaintTopic
            guard let forwardingEnabled = dictionary["ForwardingEnabled"] as? Bool else { throw InitializableError.missingRequiredParam("ForwardingEnabled") }
            self.forwardingEnabled = forwardingEnabled
            guard let deliveryTopic = dictionary["DeliveryTopic"] as? String else { throw InitializableError.missingRequiredParam("DeliveryTopic") }
            self.deliveryTopic = deliveryTopic
            self.headersInComplaintNotificationsEnabled = dictionary["HeadersInComplaintNotificationsEnabled"] as? Bool
            self.headersInDeliveryNotificationsEnabled = dictionary["HeadersInDeliveryNotificationsEnabled"] as? Bool
            guard let bounceTopic = dictionary["BounceTopic"] as? String else { throw InitializableError.missingRequiredParam("BounceTopic") }
            self.bounceTopic = bounceTopic
            self.headersInBounceNotificationsEnabled = dictionary["HeadersInBounceNotificationsEnabled"] as? Bool
        }
    }

    public struct SendBounceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Message-related DSN fields. If not specified, Amazon SES will choose the values.
        public let messageDsn: MessageDsn?
        /// A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one BouncedRecipientInfo in the list.
        public let bouncedRecipientInfoList: [BouncedRecipientInfo]
        /// The message ID of the message to be bounced.
        public let originalMessageId: String
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the Amazon SES Developer Guide.
        public let bounceSenderArn: String?
        /// The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
        public let bounceSender: String
        /// Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
        public let explanation: String?

        public init(messageDsn: MessageDsn? = nil, bouncedRecipientInfoList: [BouncedRecipientInfo], originalMessageId: String, bounceSenderArn: String? = nil, bounceSender: String, explanation: String? = nil) {
            self.messageDsn = messageDsn
            self.bouncedRecipientInfoList = bouncedRecipientInfoList
            self.originalMessageId = originalMessageId
            self.bounceSenderArn = bounceSenderArn
            self.bounceSender = bounceSender
            self.explanation = explanation
        }

        public init(dictionary: [String: Any]) throws {
            if let messageDsn = dictionary["MessageDsn"] as? [String: Any] { self.messageDsn = try Email.MessageDsn(dictionary: messageDsn) } else { self.messageDsn = nil }
            guard let bouncedRecipientInfoList = dictionary["BouncedRecipientInfoList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("BouncedRecipientInfoList") }
            self.bouncedRecipientInfoList = try bouncedRecipientInfoList.map({ try BouncedRecipientInfo(dictionary: $0) })
            guard let originalMessageId = dictionary["OriginalMessageId"] as? String else { throw InitializableError.missingRequiredParam("OriginalMessageId") }
            self.originalMessageId = originalMessageId
            self.bounceSenderArn = dictionary["BounceSenderArn"] as? String
            guard let bounceSender = dictionary["BounceSender"] as? String else { throw InitializableError.missingRequiredParam("BounceSender") }
            self.bounceSender = bounceSender
            self.explanation = dictionary["Explanation"] as? String
        }
    }

    public struct MessageDsn: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// When the message was received by the reporting mail transfer agent (MTA), in RFC 822 date-time format.
        public let arrivalDate: Date?
        /// Additional X-headers to include in the DSN.
        public let extensionFields: [ExtensionField]?
        /// The reporting MTA that attempted to deliver the message, formatted as specified in RFC 3464 (mta-name-type; mta-name). The default value is dns; inbound-smtp.[region].amazonaws.com.
        public let reportingMta: String

        public init(arrivalDate: Date? = nil, extensionFields: [ExtensionField]? = nil, reportingMta: String) {
            self.arrivalDate = arrivalDate
            self.extensionFields = extensionFields
            self.reportingMta = reportingMta
        }

        public init(dictionary: [String: Any]) throws {
            self.arrivalDate = dictionary["ArrivalDate"] as? Date
            if let extensionFields = dictionary["ExtensionFields"] as? [[String: Any]] {
                self.extensionFields = try extensionFields.map({ try ExtensionField(dictionary: $0) })
            } else { 
                self.extensionFields = nil
            }
            guard let reportingMta = dictionary["ReportingMta"] as? String else { throw InitializableError.missingRequiredParam("ReportingMta") }
            self.reportingMta = reportingMta
        }
    }

    public struct ExtensionField: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the header to add. Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").
        public let value: String
        /// The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct ConfigurationSet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 64 characters.  
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct ListIdentitiesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
        public let identityType: IdentityType?
        /// The token to use for pagination.
        public let nextToken: String?
        /// The maximum number of identities per page. Possible values are 1-1000 inclusive.
        public let maxItems: Int32?

        public init(identityType: IdentityType? = nil, nextToken: String? = nil, maxItems: Int32? = nil) {
            self.identityType = identityType
            self.nextToken = nextToken
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            if let identityType = dictionary["IdentityType"] as? String { self.identityType = IdentityType(rawValue: identityType) } else { self.identityType = nil }
            self.nextToken = dictionary["NextToken"] as? String
            self.maxItems = dictionary["MaxItems"] as? Int32
        }
    }

    public struct SetIdentityHeadersInNotificationsEnabledResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct KinesisFirehoseDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
        public let iAMRoleARN: String
        /// The ARN of the Amazon Kinesis Firehose stream to which to publish email sending events.
        public let deliveryStreamARN: String

        public init(iAMRoleARN: String, deliveryStreamARN: String) {
            self.iAMRoleARN = iAMRoleARN
            self.deliveryStreamARN = deliveryStreamARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let iAMRoleARN = dictionary["IAMRoleARN"] as? String else { throw InitializableError.missingRequiredParam("IAMRoleARN") }
            self.iAMRoleARN = iAMRoleARN
            guard let deliveryStreamARN = dictionary["DeliveryStreamARN"] as? String else { throw InitializableError.missingRequiredParam("DeliveryStreamARN") }
            self.deliveryStreamARN = deliveryStreamARN
        }
    }

    public struct DescribeReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule set to describe.
        public let ruleSetName: String

        public init(ruleSetName: String) {
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct DescribeConfigurationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event destinations associated with the configuration set. 
        public let eventDestinations: [EventDestination]?
        /// The configuration set object associated with the specified configuration set.
        public let configurationSet: ConfigurationSet?

        public init(eventDestinations: [EventDestination]? = nil, configurationSet: ConfigurationSet? = nil) {
            self.eventDestinations = eventDestinations
            self.configurationSet = configurationSet
        }

        public init(dictionary: [String: Any]) throws {
            if let eventDestinations = dictionary["EventDestinations"] as? [[String: Any]] {
                self.eventDestinations = try eventDestinations.map({ try EventDestination(dictionary: $0) })
            } else { 
                self.eventDestinations = nil
            }
            if let configurationSet = dictionary["ConfigurationSet"] as? [String: Any] { self.configurationSet = try Email.ConfigurationSet(dictionary: configurationSet) } else { self.configurationSet = nil }
        }
    }

    public struct SetActiveReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
        public let ruleSetName: String?

        public init(ruleSetName: String? = nil) {
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            self.ruleSetName = dictionary["RuleSetName"] as? String
        }
    }

    public struct IdentityVerificationAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The verification status of the identity: "Pending", "Success", "Failed", or "TemporaryFailure".
        public let verificationStatus: VerificationStatus
        /// The verification token for a domain identity. Null for email address identities.
        public let verificationToken: String?

        public init(verificationStatus: VerificationStatus, verificationToken: String? = nil) {
            self.verificationStatus = verificationStatus
            self.verificationToken = verificationToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawVerificationStatus = dictionary["VerificationStatus"] as? String, let verificationStatus = VerificationStatus(rawValue: rawVerificationStatus) else { throw InitializableError.missingRequiredParam("VerificationStatus") }
            self.verificationStatus = verificationStatus
            self.verificationToken = dictionary["VerificationToken"] as? String
        }
    }

    public struct CloneReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateConfigurationSetEventDestinationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetIdentityVerificationAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of identities.
        public let identities: [String]

        public init(identities: [String]) {
            self.identities = identities
        }

        public init(dictionary: [String: Any]) throws {
            guard let identities = dictionary["Identities"] as? [String] else { throw InitializableError.missingRequiredParam("Identities") }
            self.identities = identities
        }
    }

    public struct RawMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The raw data of the message. The client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, MIME encoding, and base64 encoding. The To:, CC:, and BCC: headers in the raw message can contain a group list. If you are using SendRawEmail with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for SendRawEmail.   Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.  For more information, go to the Amazon SES Developer Guide. 
        public let data: Data

        public init(data: Data) {
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            guard let data = dictionary["Data"] as? Data else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
        }
    }

    public struct DeleteReceiptRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule to delete.
        public let ruleName: String
        /// The name of the receipt rule set that contains the receipt rule to delete.
        public let ruleSetName: String

        public init(ruleName: String, ruleSetName: String) {
            self.ruleName = ruleName
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleName = dictionary["RuleName"] as? String else { throw InitializableError.missingRequiredParam("RuleName") }
            self.ruleName = ruleName
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct DeleteReceiptFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the IP address filter to delete.
        public let filterName: String

        public init(filterName: String) {
            self.filterName = filterName
        }

        public init(dictionary: [String: Any]) throws {
            guard let filterName = dictionary["FilterName"] as? String else { throw InitializableError.missingRequiredParam("FilterName") }
            self.filterName = filterName
        }
    }

    public struct ListIdentityPoliciesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
        public let identity: String

        public init(identity: String) {
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct Destination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The CC: field(s) of the message.
        public let ccAddresses: [String]?
        /// The BCC: field(s) of the message.
        public let bccAddresses: [String]?
        /// The To: field(s) of the message.
        public let toAddresses: [String]?

        public init(ccAddresses: [String]? = nil, bccAddresses: [String]? = nil, toAddresses: [String]? = nil) {
            self.ccAddresses = ccAddresses
            self.bccAddresses = bccAddresses
            self.toAddresses = toAddresses
        }

        public init(dictionary: [String: Any]) throws {
            self.ccAddresses = dictionary["CcAddresses"] as? [String]
            self.bccAddresses = dictionary["BccAddresses"] as? [String]
            self.toAddresses = dictionary["ToAddresses"] as? [String]
        }
    }

    public enum StopScope: String, CustomStringConvertible {
        case ruleset = "RuleSet"
        public var description: String { return self.rawValue }
    }

    public struct ListConfigurationSetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A token returned from a previous call to ListConfigurationSets to indicate the position of the configuration set in the configuration set list.
        public let nextToken: String?
        /// The number of configuration sets to return.
        public let maxItems: Int32?

        public init(nextToken: String? = nil, maxItems: Int32? = nil) {
            self.nextToken = nextToken
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxItems = dictionary["MaxItems"] as? Int32
        }
    }

    public struct DescribeReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The metadata for the receipt rule set, which consists of the rule set name and the timestamp of when the rule set was created.
        public let metadata: ReceiptRuleSetMetadata?
        /// A list of the receipt rules that belong to the specified receipt rule set.
        public let rules: [ReceiptRule]?

        public init(metadata: ReceiptRuleSetMetadata? = nil, rules: [ReceiptRule]? = nil) {
            self.metadata = metadata
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            if let metadata = dictionary["Metadata"] as? [String: Any] { self.metadata = try Email.ReceiptRuleSetMetadata(dictionary: metadata) } else { self.metadata = nil }
            if let rules = dictionary["Rules"] as? [[String: Any]] {
                self.rules = try rules.map({ try ReceiptRule(dictionary: $0) })
            } else { 
                self.rules = nil
            }
        }
    }

    public struct ListReceiptFiltersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Content: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The character set of the content.
        public let charset: String?
        /// The textual data of the content.
        public let data: String

        public init(charset: String? = nil, data: String) {
            self.charset = charset
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            self.charset = dictionary["Charset"] as? String
            guard let data = dictionary["Data"] as? String else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
        }
    }

    public struct GetIdentityMailFromDomainAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A map of identities to custom MAIL FROM attributes.
        public let mailFromDomainAttributes: [String: IdentityMailFromDomainAttributes]

        public init(mailFromDomainAttributes: [String: IdentityMailFromDomainAttributes]) {
            self.mailFromDomainAttributes = mailFromDomainAttributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let mailFromDomainAttributes = dictionary["MailFromDomainAttributes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("MailFromDomainAttributes") }
            var mailFromDomainAttributesDict: [String: IdentityMailFromDomainAttributes] = [:]
            for (key, value) in mailFromDomainAttributes {
                guard let identityMailFromDomainAttributesDict = value as? [String: Any] else { throw InitializableError.convertingError }
                mailFromDomainAttributesDict[key] = try IdentityMailFromDomainAttributes(dictionary: identityMailFromDomainAttributesDict)
            }
            self.mailFromDomainAttributes = mailFromDomainAttributesDict
        }
    }

    public struct CloudWatchDimensionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon SES to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon SES to use your own email headers, choose emailHeader.
        public let dimensionValueSource: DimensionValueSource
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 256 characters.  
        public let dimensionName: String
        /// The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 256 characters.  
        public let defaultDimensionValue: String

        public init(dimensionValueSource: DimensionValueSource, dimensionName: String, defaultDimensionValue: String) {
            self.dimensionValueSource = dimensionValueSource
            self.dimensionName = dimensionName
            self.defaultDimensionValue = defaultDimensionValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawDimensionValueSource = dictionary["DimensionValueSource"] as? String, let dimensionValueSource = DimensionValueSource(rawValue: rawDimensionValueSource) else { throw InitializableError.missingRequiredParam("DimensionValueSource") }
            self.dimensionValueSource = dimensionValueSource
            guard let dimensionName = dictionary["DimensionName"] as? String else { throw InitializableError.missingRequiredParam("DimensionName") }
            self.dimensionName = dimensionName
            guard let defaultDimensionValue = dictionary["DefaultDimensionValue"] as? String else { throw InitializableError.missingRequiredParam("DefaultDimensionValue") }
            self.defaultDimensionValue = defaultDimensionValue
        }
    }

    public struct ReceiptAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon SNS.
        public let s3Action: S3Action?
        /// Calls Amazon WorkMail and, optionally, publishes a notification to Amazon SNS.
        public let workmailAction: WorkmailAction?
        /// Adds a header to the received email.
        public let addHeaderAction: AddHeaderAction?
        /// Publishes the email content within a notification to Amazon SNS.
        public let sNSAction: SNSAction?
        /// Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.
        public let stopAction: StopAction?
        /// Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).
        public let bounceAction: BounceAction?
        /// Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.
        public let lambdaAction: LambdaAction?

        public init(s3Action: S3Action? = nil, workmailAction: WorkmailAction? = nil, addHeaderAction: AddHeaderAction? = nil, sNSAction: SNSAction? = nil, stopAction: StopAction? = nil, bounceAction: BounceAction? = nil, lambdaAction: LambdaAction? = nil) {
            self.s3Action = s3Action
            self.workmailAction = workmailAction
            self.addHeaderAction = addHeaderAction
            self.sNSAction = sNSAction
            self.stopAction = stopAction
            self.bounceAction = bounceAction
            self.lambdaAction = lambdaAction
        }

        public init(dictionary: [String: Any]) throws {
            if let s3Action = dictionary["S3Action"] as? [String: Any] { self.s3Action = try Email.S3Action(dictionary: s3Action) } else { self.s3Action = nil }
            if let workmailAction = dictionary["WorkmailAction"] as? [String: Any] { self.workmailAction = try Email.WorkmailAction(dictionary: workmailAction) } else { self.workmailAction = nil }
            if let addHeaderAction = dictionary["AddHeaderAction"] as? [String: Any] { self.addHeaderAction = try Email.AddHeaderAction(dictionary: addHeaderAction) } else { self.addHeaderAction = nil }
            if let sNSAction = dictionary["SNSAction"] as? [String: Any] { self.sNSAction = try Email.SNSAction(dictionary: sNSAction) } else { self.sNSAction = nil }
            if let stopAction = dictionary["StopAction"] as? [String: Any] { self.stopAction = try Email.StopAction(dictionary: stopAction) } else { self.stopAction = nil }
            if let bounceAction = dictionary["BounceAction"] as? [String: Any] { self.bounceAction = try Email.BounceAction(dictionary: bounceAction) } else { self.bounceAction = nil }
            if let lambdaAction = dictionary["LambdaAction"] as? [String: Any] { self.lambdaAction = try Email.LambdaAction(dictionary: lambdaAction) } else { self.lambdaAction = nil }
        }
    }

    public struct CreateReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the rule set to create. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain less than 64 characters.  
        public let ruleSetName: String

        public init(ruleSetName: String) {
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct DeleteReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListIdentityPoliciesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of names of policies that apply to the specified identity.
        public let policyNames: [String]

        public init(policyNames: [String]) {
            self.policyNames = policyNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyNames = dictionary["PolicyNames"] as? [String] else { throw InitializableError.missingRequiredParam("PolicyNames") }
            self.policyNames = policyNames
        }
    }

    public struct CreateConfigurationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct BouncedRecipientInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The email address of the recipient of the bounced email.
        public let recipient: String
        /// Recipient-related DSN fields, most of which would normally be filled in automatically when provided with a BounceType. You must provide either this parameter or BounceType.
        public let recipientDsnFields: RecipientDsnFields?
        /// The reason for the bounce. You must provide either this parameter or RecipientDsnFields.
        public let bounceType: BounceType?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to receive email for the recipient of the bounced email. For more information about sending authorization, see the Amazon SES Developer Guide.
        public let recipientArn: String?

        public init(recipient: String, recipientDsnFields: RecipientDsnFields? = nil, bounceType: BounceType? = nil, recipientArn: String? = nil) {
            self.recipient = recipient
            self.recipientDsnFields = recipientDsnFields
            self.bounceType = bounceType
            self.recipientArn = recipientArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let recipient = dictionary["Recipient"] as? String else { throw InitializableError.missingRequiredParam("Recipient") }
            self.recipient = recipient
            if let recipientDsnFields = dictionary["RecipientDsnFields"] as? [String: Any] { self.recipientDsnFields = try Email.RecipientDsnFields(dictionary: recipientDsnFields) } else { self.recipientDsnFields = nil }
            if let bounceType = dictionary["BounceType"] as? String { self.bounceType = BounceType(rawValue: bounceType) } else { self.bounceType = nil }
            self.recipientArn = dictionary["RecipientArn"] as? String
        }
    }

    public struct SetReceiptRulePositionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule to reposition.
        public let ruleName: String
        /// The name of the receipt rule set that contains the receipt rule to reposition.
        public let ruleSetName: String
        /// The name of the receipt rule after which to place the specified receipt rule.
        public let after: String?

        public init(ruleName: String, ruleSetName: String, after: String? = nil) {
            self.ruleName = ruleName
            self.ruleSetName = ruleSetName
            self.after = after
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleName = dictionary["RuleName"] as? String else { throw InitializableError.missingRequiredParam("RuleName") }
            self.ruleName = ruleName
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
            self.after = dictionary["After"] as? String
        }
    }

    public struct SNSAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to use, but may not preserve all special characters when a message was encoded with a different encoding format. Base64 preserves all special characters. The default value is UTF-8.
        public let encoding: SNSActionEncoding?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String

        public init(encoding: SNSActionEncoding? = nil, topicArn: String) {
            self.encoding = encoding
            self.topicArn = topicArn
        }

        public init(dictionary: [String: Any]) throws {
            if let encoding = dictionary["Encoding"] as? String { self.encoding = SNSActionEncoding(rawValue: encoding) } else { self.encoding = nil }
            guard let topicArn = dictionary["TopicArn"] as? String else { throw InitializableError.missingRequiredParam("TopicArn") }
            self.topicArn = topicArn
        }
    }

    public struct CreateReceiptFilterResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteConfigurationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set to delete.
        public let configurationSetName: String

        public init(configurationSetName: String) {
            self.configurationSetName = configurationSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSetName = dictionary["ConfigurationSetName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationSetName") }
            self.configurationSetName = configurationSetName
        }
    }

    public enum CustomMailFromStatus: String, CustomStringConvertible {
        case pending = "Pending"
        case success = "Success"
        case failed = "Failed"
        case temporaryfailure = "TemporaryFailure"
        public var description: String { return self.rawValue }
    }

    public enum DsnAction: String, CustomStringConvertible {
        case failed = "failed"
        case delayed = "delayed"
        case delivered = "delivered"
        case relayed = "relayed"
        case expanded = "expanded"
        public var description: String { return self.rawValue }
    }

    public struct DeleteIdentityPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeReceiptRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule.
        public let ruleName: String
        /// The name of the receipt rule set to which the receipt rule belongs.
        public let ruleSetName: String

        public init(ruleName: String, ruleSetName: String) {
            self.ruleName = ruleName
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleName = dictionary["RuleName"] as? String else { throw InitializableError.missingRequiredParam("RuleName") }
            self.ruleName = ruleName
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct DeleteVerifiedEmailAddressRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An email address to be removed from the list of verified addresses.
        public let emailAddress: String

        public init(emailAddress: String) {
            self.emailAddress = emailAddress
        }

        public init(dictionary: [String: Any]) throws {
            guard let emailAddress = dictionary["EmailAddress"] as? String else { throw InitializableError.missingRequiredParam("EmailAddress") }
            self.emailAddress = emailAddress
        }
    }

    public struct SetIdentityMailFromDomainResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateReceiptRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
        public let after: String?
        /// The name of the rule set to which to add the rule.
        public let ruleSetName: String
        /// A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.
        public let rule: ReceiptRule

        public init(after: String? = nil, ruleSetName: String, rule: ReceiptRule) {
            self.after = after
            self.ruleSetName = ruleSetName
            self.rule = rule
        }

        public init(dictionary: [String: Any]) throws {
            self.after = dictionary["After"] as? String
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
            guard let rule = dictionary["Rule"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Rule") }
            self.rule = try Email.ReceiptRule(dictionary: rule)
        }
    }

    public struct DeleteConfigurationSetEventDestinationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SendEmailResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique message identifier returned from the SendEmail action. 
        public let messageId: String

        public init(messageId: String) {
            self.messageId = messageId
        }

        public init(dictionary: [String: Any]) throws {
            guard let messageId = dictionary["MessageId"] as? String else { throw InitializableError.missingRequiredParam("MessageId") }
            self.messageId = messageId
        }
    }

    public struct LambdaAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS Lambda function. An example of an AWS Lambda function ARN is arn:aws:lambda:us-west-2:account-id:function:MyFunction. For more information about AWS Lambda, see the AWS Lambda Developer Guide.
        public let functionArn: String
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String?
        /// The invocation type of the AWS Lambda function. An invocation type of RequestResponse means that the execution of the function will immediately result in a response, and a value of Event means that the function will be invoked asynchronously. The default value is Event. For information about AWS Lambda invocation types, see the AWS Lambda Developer Guide.  There is a 30-second timeout on RequestResponse invocations. You should use Event invocation in most cases. Use RequestResponse only when you want to make a mail flow decision, such as whether to stop the receipt rule or the receipt rule set. 
        public let invocationType: InvocationType?

        public init(functionArn: String, topicArn: String? = nil, invocationType: InvocationType? = nil) {
            self.functionArn = functionArn
            self.topicArn = topicArn
            self.invocationType = invocationType
        }

        public init(dictionary: [String: Any]) throws {
            guard let functionArn = dictionary["FunctionArn"] as? String else { throw InitializableError.missingRequiredParam("FunctionArn") }
            self.functionArn = functionArn
            self.topicArn = dictionary["TopicArn"] as? String
            if let invocationType = dictionary["InvocationType"] as? String { self.invocationType = InvocationType(rawValue: invocationType) } else { self.invocationType = nil }
        }
    }

    public enum EventType: String, CustomStringConvertible {
        case send = "send"
        case reject = "reject"
        case bounce = "bounce"
        case complaint = "complaint"
        case delivery = "delivery"
        public var description: String { return self.rawValue }
    }

    public enum BounceType: String, CustomStringConvertible {
        case doesnotexist = "DoesNotExist"
        case messagetoolarge = "MessageTooLarge"
        case exceededquota = "ExceededQuota"
        case contentrejected = "ContentRejected"
        case undefined = "Undefined"
        case temporaryfailure = "TemporaryFailure"
        public var description: String { return self.rawValue }
    }

    public enum DimensionValueSource: String, CustomStringConvertible {
        case messagetag = "messageTag"
        case emailheader = "emailHeader"
        public var description: String { return self.rawValue }
    }

    public struct GetSendQuotaResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of emails that Amazon SES can accept from the user's account per second.  The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate. 
        public let maxSendRate: Double?
        /// The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.
        public let max24HourSend: Double?
        /// The number of emails sent during the previous 24 hours.
        public let sentLast24Hours: Double?

        public init(maxSendRate: Double? = nil, max24HourSend: Double? = nil, sentLast24Hours: Double? = nil) {
            self.maxSendRate = maxSendRate
            self.max24HourSend = max24HourSend
            self.sentLast24Hours = sentLast24Hours
        }

        public init(dictionary: [String: Any]) throws {
            self.maxSendRate = dictionary["MaxSendRate"] as? Double
            self.max24HourSend = dictionary["Max24HourSend"] as? Double
            self.sentLast24Hours = dictionary["SentLast24Hours"] as? Double
        }
    }

    public struct BounceAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String?
        /// The SMTP reply code, as defined by RFC 5321.
        public let smtpReplyCode: String
        /// Human-readable text to include in the bounce message.
        public let message: String
        /// The email address of the sender of the bounced email. This is the address from which the bounce message will be sent.
        public let sender: String
        /// The SMTP enhanced status code, as defined by RFC 3463.
        public let statusCode: String?

        public init(topicArn: String? = nil, smtpReplyCode: String, message: String, sender: String, statusCode: String? = nil) {
            self.topicArn = topicArn
            self.smtpReplyCode = smtpReplyCode
            self.message = message
            self.sender = sender
            self.statusCode = statusCode
        }

        public init(dictionary: [String: Any]) throws {
            self.topicArn = dictionary["TopicArn"] as? String
            guard let smtpReplyCode = dictionary["SmtpReplyCode"] as? String else { throw InitializableError.missingRequiredParam("SmtpReplyCode") }
            self.smtpReplyCode = smtpReplyCode
            guard let message = dictionary["Message"] as? String else { throw InitializableError.missingRequiredParam("Message") }
            self.message = message
            guard let sender = dictionary["Sender"] as? String else { throw InitializableError.missingRequiredParam("Sender") }
            self.sender = sender
            self.statusCode = dictionary["StatusCode"] as? String
        }
    }

    public enum VerificationStatus: String, CustomStringConvertible {
        case pending = "Pending"
        case success = "Success"
        case failed = "Failed"
        case temporaryfailure = "TemporaryFailure"
        case notstarted = "NotStarted"
        public var description: String { return self.rawValue }
    }

    public struct GetSendStatisticsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of data points, each of which represents 15 minutes of activity.
        public let sendDataPoints: [SendDataPoint]?

        public init(sendDataPoints: [SendDataPoint]? = nil) {
            self.sendDataPoints = sendDataPoints
        }

        public init(dictionary: [String: Any]) throws {
            if let sendDataPoints = dictionary["SendDataPoints"] as? [[String: Any]] {
                self.sendDataPoints = try sendDataPoints.map({ try SendDataPoint(dictionary: $0) })
            } else { 
                self.sendDataPoints = nil
            }
        }
    }

    public struct DeleteReceiptRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SetIdentityDkimEnabledRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Sets whether DKIM signing is enabled for an identity. Set to true to enable DKIM signing for this identity; false to disable it. 
        public let dkimEnabled: Bool
        /// The identity for which DKIM signing should be enabled or disabled.
        public let identity: String

        public init(dkimEnabled: Bool, identity: String) {
            self.dkimEnabled = dkimEnabled
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let dkimEnabled = dictionary["DkimEnabled"] as? Bool else { throw InitializableError.missingRequiredParam("DkimEnabled") }
            self.dkimEnabled = dkimEnabled
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct DescribeActiveReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and a timestamp of when the rule set was created.
        public let metadata: ReceiptRuleSetMetadata?
        /// The receipt rules that belong to the active rule set.
        public let rules: [ReceiptRule]?

        public init(metadata: ReceiptRuleSetMetadata? = nil, rules: [ReceiptRule]? = nil) {
            self.metadata = metadata
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            if let metadata = dictionary["Metadata"] as? [String: Any] { self.metadata = try Email.ReceiptRuleSetMetadata(dictionary: metadata) } else { self.metadata = nil }
            if let rules = dictionary["Rules"] as? [[String: Any]] {
                self.rules = try rules.map({ try ReceiptRule(dictionary: $0) })
            } else { 
                self.rules = nil
            }
        }
    }

    public struct GetIdentityMailFromDomainAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of one or more identities.
        public let identities: [String]

        public init(identities: [String]) {
            self.identities = identities
        }

        public init(dictionary: [String: Any]) throws {
            guard let identities = dictionary["Identities"] as? [String] else { throw InitializableError.missingRequiredParam("Identities") }
            self.identities = identities
        }
    }

    public struct PutIdentityPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum SNSActionEncoding: String, CustomStringConvertible {
        case utf_8 = "UTF-8"
        case base64 = "Base64"
        public var description: String { return self.rawValue }
    }

    public enum TlsPolicy: String, CustomStringConvertible {
        case require = "Require"
        case optional = "Optional"
        public var description: String { return self.rawValue }
    }

    public struct CreateConfigurationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A data structure that contains the name of the configuration set.
        public let configurationSet: ConfigurationSet

        public init(configurationSet: ConfigurationSet) {
            self.configurationSet = configurationSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSet = dictionary["ConfigurationSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ConfigurationSet") }
            self.configurationSet = try Email.ConfigurationSet(dictionary: configurationSet)
        }
    }

    public struct SetActiveReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PutIdentityPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the Amazon SES Developer Guide. 
        public let policy: String
        /// The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
        public let policyName: String
        /// The identity to which the policy will apply. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
        public let identity: String

        public init(policy: String, policyName: String, identity: String) {
            self.policy = policy
            self.policyName = policyName
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let policy = dictionary["Policy"] as? String else { throw InitializableError.missingRequiredParam("Policy") }
            self.policy = policy
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct Message: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The message body.
        public let body: Body
        /// The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
        public let subject: Content

        public init(body: Body, subject: Content) {
            self.body = body
            self.subject = subject
        }

        public init(dictionary: [String: Any]) throws {
            guard let body = dictionary["Body"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Body") }
            self.body = try Email.Body(dictionary: body)
            guard let subject = dictionary["Subject"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Subject") }
            self.subject = try Email.Content(dictionary: subject)
        }
    }

    public struct DeleteReceiptFilterResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ConfigurationSetAttribute: String, CustomStringConvertible {
        case eventdestinations = "eventDestinations"
        public var description: String { return self.rawValue }
    }

    public struct GetIdentityVerificationAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A map of Identities to IdentityVerificationAttributes objects.
        public let verificationAttributes: [String: IdentityVerificationAttributes]

        public init(verificationAttributes: [String: IdentityVerificationAttributes]) {
            self.verificationAttributes = verificationAttributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let verificationAttributes = dictionary["VerificationAttributes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VerificationAttributes") }
            var verificationAttributesDict: [String: IdentityVerificationAttributes] = [:]
            for (key, value) in verificationAttributes {
                guard let identityVerificationAttributesDict = value as? [String: Any] else { throw InitializableError.convertingError }
                verificationAttributesDict[key] = try IdentityVerificationAttributes(dictionary: identityVerificationAttributesDict)
            }
            self.verificationAttributes = verificationAttributesDict
        }
    }

    public struct SetIdentityFeedbackForwardingEnabledResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeConfigurationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set to describe.
        public let configurationSetName: String
        /// A list of configuration set attributes to return.
        public let configurationSetAttributeNames: [ConfigurationSetAttribute]?

        public init(configurationSetName: String, configurationSetAttributeNames: [ConfigurationSetAttribute]? = nil) {
            self.configurationSetName = configurationSetName
            self.configurationSetAttributeNames = configurationSetAttributeNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSetName = dictionary["ConfigurationSetName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationSetName") }
            self.configurationSetName = configurationSetName
            if let configurationSetAttributeNames = dictionary["ConfigurationSetAttributeNames"] as? [String] { self.configurationSetAttributeNames = configurationSetAttributeNames.flatMap({ ConfigurationSetAttribute(rawValue: $0)}) } else { self.configurationSetAttributeNames = nil }
        }
    }

    public struct CreateReceiptRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct VerifyDomainIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A TXT record that must be placed in the DNS settings for the domain, in order to complete domain verification.
        public let verificationToken: String

        public init(verificationToken: String) {
            self.verificationToken = verificationToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let verificationToken = dictionary["VerificationToken"] as? String else { throw InitializableError.missingRequiredParam("VerificationToken") }
            self.verificationToken = verificationToken
        }
    }

    public struct SetIdentityNotificationTopicResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identity to be removed from the list of identities for the AWS Account.
        public let identity: String

        public init(identity: String) {
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public enum InvocationType: String, CustomStringConvertible {
        case event = "Event"
        case requestresponse = "RequestResponse"
        public var description: String { return self.rawValue }
    }

    public struct AddHeaderAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.
        public let headerName: String
        /// Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").
        public let headerValue: String

        public init(headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let headerName = dictionary["HeaderName"] as? String else { throw InitializableError.missingRequiredParam("HeaderName") }
            self.headerName = headerName
            guard let headerValue = dictionary["HeaderValue"] as? String else { throw InitializableError.missingRequiredParam("HeaderValue") }
            self.headerValue = headerValue
        }
    }

    public struct CreateReceiptFilterRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.
        public let filter: ReceiptFilter

        public init(filter: ReceiptFilter) {
            self.filter = filter
        }

        public init(dictionary: [String: Any]) throws {
            guard let filter = dictionary["Filter"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Filter") }
            self.filter = try Email.ReceiptFilter(dictionary: filter)
        }
    }

    public struct GetIdentityPoliciesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A map of policy names to policies.
        public let policies: [String: String]

        public init(policies: [String: String]) {
            self.policies = policies
        }

        public init(dictionary: [String: Any]) throws {
            guard let policies = dictionary["Policies"] as? [String: String] else { throw InitializableError.missingRequiredParam("Policies") }
            self.policies = policies
        }
    }

    public struct UpdateConfigurationSetEventDestinationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set that you want to update.
        public let configurationSetName: String
        /// The event destination object that you want to apply to the specified configuration set.
        public let eventDestination: EventDestination

        public init(configurationSetName: String, eventDestination: EventDestination) {
            self.configurationSetName = configurationSetName
            self.eventDestination = eventDestination
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSetName = dictionary["ConfigurationSetName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationSetName") }
            self.configurationSetName = configurationSetName
            guard let eventDestination = dictionary["EventDestination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("EventDestination") }
            self.eventDestination = try Email.EventDestination(dictionary: eventDestination)
        }
    }

    public struct GetIdentityDkimAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of one or more verified identities - email addresses, domains, or both.
        public let identities: [String]

        public init(identities: [String]) {
            self.identities = identities
        }

        public init(dictionary: [String: Any]) throws {
            guard let identities = dictionary["Identities"] as? [String] else { throw InitializableError.missingRequiredParam("Identities") }
            self.identities = identities
        }
    }

    public struct IdentityDkimAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes whether Amazon SES has successfully verified the DKIM DNS records (tokens) published in the domain name's DNS. (This only applies to domain identities, not email address identities.)
        public let dkimVerificationStatus: VerificationStatus
        /// A set of character strings that represent the domain's identity. Using these tokens, you will need to create DNS CNAME records that point to DKIM public keys hosted by Amazon SES. Amazon Web Services will eventually detect that you have updated your DNS records; this detection process may take up to 72 hours. Upon successful detection, Amazon SES will be able to DKIM-sign email originating from that domain. (This only applies to domain identities, not email address identities.) For more information about creating DNS records using DKIM tokens, go to the Amazon SES Developer Guide.
        public let dkimTokens: [String]?
        /// True if DKIM signing is enabled for email sent from the identity; false otherwise. The default value is true.
        public let dkimEnabled: Bool

        public init(dkimVerificationStatus: VerificationStatus, dkimTokens: [String]? = nil, dkimEnabled: Bool) {
            self.dkimVerificationStatus = dkimVerificationStatus
            self.dkimTokens = dkimTokens
            self.dkimEnabled = dkimEnabled
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawDkimVerificationStatus = dictionary["DkimVerificationStatus"] as? String, let dkimVerificationStatus = VerificationStatus(rawValue: rawDkimVerificationStatus) else { throw InitializableError.missingRequiredParam("DkimVerificationStatus") }
            self.dkimVerificationStatus = dkimVerificationStatus
            self.dkimTokens = dictionary["DkimTokens"] as? [String]
            guard let dkimEnabled = dictionary["DkimEnabled"] as? Bool else { throw InitializableError.missingRequiredParam("DkimEnabled") }
            self.dkimEnabled = dkimEnabled
        }
    }

    public struct IdentityMailFromDomainAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The action that Amazon SES takes if it cannot successfully read the required MX record when you send an email. A value of UseDefaultValue indicates that if Amazon SES cannot read the required MX record, it uses amazonses.com (or a subdomain of that) as the MAIL FROM domain. A value of RejectMessage indicates that if Amazon SES cannot read the required MX record, Amazon SES returns a MailFromDomainNotVerified error and does not send the email. The custom MAIL FROM setup states that result in this behavior are Pending, Failed, and TemporaryFailure.
        public let behaviorOnMXFailure: BehaviorOnMXFailure
        /// The state that indicates whether Amazon SES has successfully read the MX record required for custom MAIL FROM domain setup. If the state is Success, Amazon SES uses the specified custom MAIL FROM domain when the verified identity sends an email. All other states indicate that Amazon SES takes the action described by BehaviorOnMXFailure.
        public let mailFromDomainStatus: CustomMailFromStatus
        /// The custom MAIL FROM domain that the identity is configured to use.
        public let mailFromDomain: String

        public init(behaviorOnMXFailure: BehaviorOnMXFailure, mailFromDomainStatus: CustomMailFromStatus, mailFromDomain: String) {
            self.behaviorOnMXFailure = behaviorOnMXFailure
            self.mailFromDomainStatus = mailFromDomainStatus
            self.mailFromDomain = mailFromDomain
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawBehaviorOnMXFailure = dictionary["BehaviorOnMXFailure"] as? String, let behaviorOnMXFailure = BehaviorOnMXFailure(rawValue: rawBehaviorOnMXFailure) else { throw InitializableError.missingRequiredParam("BehaviorOnMXFailure") }
            self.behaviorOnMXFailure = behaviorOnMXFailure
            guard let rawMailFromDomainStatus = dictionary["MailFromDomainStatus"] as? String, let mailFromDomainStatus = CustomMailFromStatus(rawValue: rawMailFromDomainStatus) else { throw InitializableError.missingRequiredParam("MailFromDomainStatus") }
            self.mailFromDomainStatus = mailFromDomainStatus
            guard let mailFromDomain = dictionary["MailFromDomain"] as? String else { throw InitializableError.missingRequiredParam("MailFromDomain") }
            self.mailFromDomain = mailFromDomain
        }
    }

    public struct SetIdentityDkimEnabledResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct S3Action: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String?
        /// The name of the Amazon S3 bucket to which to save the received email.
        public let bucketName: String
        /// The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that enables you to store similar data under the same directory in a bucket.
        public let objectKeyPrefix: String?
        /// The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket. You can use the default master key or a custom master key you created in AWS KMS as follows:   To use the default master key, provide an ARN in the form of arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses. For example, if your AWS account ID is 123456789012 and you want to use the default master key in the US West (Oregon) region, the ARN of the default master key would be arn:aws:kms:us-west-2:123456789012:alias/aws/ses. If you use the default master key, you don't need to perform any extra steps to give Amazon SES permission to use the key.   To use a custom master key you created in AWS KMS, provide the ARN of the master key and ensure that you add a statement to your key's policy to give Amazon SES permission to use it. For more information about giving permissions, see the Amazon SES Developer Guide.   For more information about key policies, see the AWS KMS Developer Guide. If you do not specify a master key, Amazon SES will not encrypt your emails.  Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side encryption. This means that you must use the Amazon S3 encryption client to decrypt the email after retrieving it from Amazon S3, as the service has no access to use your AWS KMS keys for decryption. This encryption client is currently available with the AWS Java SDK and AWS Ruby SDK only. For more information about client-side encryption using AWS KMS master keys, see the Amazon S3 Developer Guide. 
        public let kmsKeyArn: String?

        public init(topicArn: String? = nil, bucketName: String, objectKeyPrefix: String? = nil, kmsKeyArn: String? = nil) {
            self.topicArn = topicArn
            self.bucketName = bucketName
            self.objectKeyPrefix = objectKeyPrefix
            self.kmsKeyArn = kmsKeyArn
        }

        public init(dictionary: [String: Any]) throws {
            self.topicArn = dictionary["TopicArn"] as? String
            guard let bucketName = dictionary["BucketName"] as? String else { throw InitializableError.missingRequiredParam("BucketName") }
            self.bucketName = bucketName
            self.objectKeyPrefix = dictionary["ObjectKeyPrefix"] as? String
            self.kmsKeyArn = dictionary["KmsKeyArn"] as? String
        }
    }

    public struct ReceiptFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the IP address filter. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain less than 64 characters.  
        public let name: String
        /// A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
        public let ipFilter: ReceiptIpFilter

        public init(name: String, ipFilter: ReceiptIpFilter) {
            self.name = name
            self.ipFilter = ipFilter
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let ipFilter = dictionary["IpFilter"] as? [String: Any] else { throw InitializableError.missingRequiredParam("IpFilter") }
            self.ipFilter = try Email.ReceiptIpFilter(dictionary: ipFilter)
        }
    }

    public struct UpdateReceiptRuleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A data structure that contains the updated receipt rule information.
        public let rule: ReceiptRule
        /// The name of the receipt rule set to which the receipt rule belongs.
        public let ruleSetName: String

        public init(rule: ReceiptRule, ruleSetName: String) {
            self.rule = rule
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let rule = dictionary["Rule"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Rule") }
            self.rule = try Email.ReceiptRule(dictionary: rule)
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct CreateConfigurationSetEventDestinationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set to which to apply the event destination.
        public let configurationSetName: String
        /// An object that describes the AWS service to which Amazon SES will publish the email sending events associated with the specified configuration set.
        public let eventDestination: EventDestination

        public init(configurationSetName: String, eventDestination: EventDestination) {
            self.configurationSetName = configurationSetName
            self.eventDestination = eventDestination
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSetName = dictionary["ConfigurationSetName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationSetName") }
            self.configurationSetName = configurationSetName
            guard let eventDestination = dictionary["EventDestination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("EventDestination") }
            self.eventDestination = try Email.EventDestination(dictionary: eventDestination)
        }
    }

    public struct Body: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The content of the message, in HTML format. Use this for email clients that can process HTML. You can include clickable links, formatted text, and much more in an HTML message.
        public let html: Content?
        /// The content of the message, in text format. Use this for text-based email clients, or clients on high-latency networks (such as mobile devices).
        public let text: Content?

        public init(html: Content? = nil, text: Content? = nil) {
            self.html = html
            self.text = text
        }

        public init(dictionary: [String: Any]) throws {
            if let html = dictionary["Html"] as? [String: Any] { self.html = try Email.Content(dictionary: html) } else { self.html = nil }
            if let text = dictionary["Text"] as? [String: Any] { self.text = try Email.Content(dictionary: text) } else { self.text = nil }
        }
    }

    public struct VerifyEmailIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The email address to be verified.
        public let emailAddress: String

        public init(emailAddress: String) {
            self.emailAddress = emailAddress
        }

        public init(dictionary: [String: Any]) throws {
            guard let emailAddress = dictionary["EmailAddress"] as? String else { throw InitializableError.missingRequiredParam("EmailAddress") }
            self.emailAddress = emailAddress
        }
    }

    public struct ListIdentitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of identities.
        public let identities: [String]
        /// The token used for pagination.
        public let nextToken: String?

        public init(identities: [String], nextToken: String? = nil) {
            self.identities = identities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let identities = dictionary["Identities"] as? [String] else { throw InitializableError.missingRequiredParam("Identities") }
            self.identities = identities
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ListReceiptRuleSetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A token returned from a previous call to ListReceiptRuleSets to indicate the position in the receipt rule set list.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct MessageTag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the tag. The value must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 256 characters.  
        public let value: String
        /// The name of the tag. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Contain less than 256 characters.  
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct SendBounceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The message ID of the bounce message.
        public let messageId: String?

        public init(messageId: String? = nil) {
            self.messageId = messageId
        }

        public init(dictionary: [String: Any]) throws {
            self.messageId = dictionary["MessageId"] as? String
        }
    }

    public struct CloudWatchDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        public let dimensionConfigurations: [CloudWatchDimensionConfiguration]

        public init(dimensionConfigurations: [CloudWatchDimensionConfiguration]) {
            self.dimensionConfigurations = dimensionConfigurations
        }

        public init(dictionary: [String: Any]) throws {
            guard let dimensionConfigurations = dictionary["DimensionConfigurations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("DimensionConfigurations") }
            self.dimensionConfigurations = try dimensionConfigurations.map({ try CloudWatchDimensionConfiguration(dictionary: $0) })
        }
    }

    public struct ReceiptRuleSetMetadata: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule set. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain less than 64 characters.  
        public let name: String?
        /// The date and time the receipt rule set was created.
        public let createdTimestamp: Date?

        public init(name: String? = nil, createdTimestamp: Date? = nil) {
            self.name = name
            self.createdTimestamp = createdTimestamp
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
            self.createdTimestamp = dictionary["CreatedTimestamp"] as? Date
        }
    }

    public enum BehaviorOnMXFailure: String, CustomStringConvertible {
        case usedefaultvalue = "UseDefaultValue"
        case rejectmessage = "RejectMessage"
        public var description: String { return self.rawValue }
    }

    public enum IdentityType: String, CustomStringConvertible {
        case emailaddress = "EmailAddress"
        case domain = "Domain"
        public var description: String { return self.rawValue }
    }

    public enum NotificationType: String, CustomStringConvertible {
        case bounce = "Bounce"
        case complaint = "Complaint"
        case delivery = "Delivery"
        public var description: String { return self.rawValue }
    }

    public struct DeleteReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule set to delete.
        public let ruleSetName: String

        public init(ruleSetName: String) {
            self.ruleSetName = ruleSetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
        }
    }

    public struct ReorderReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListReceiptRuleSetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A token indicating that there are additional receipt rule sets available to be listed. Pass this token to successive calls of ListReceiptRuleSets to retrieve up to 100 receipt rule sets at a time.
        public let nextToken: String?
        /// The metadata for the currently active receipt rule set. The metadata consists of the rule set name and the timestamp of when the rule set was created.
        public let ruleSets: [ReceiptRuleSetMetadata]?

        public init(nextToken: String? = nil, ruleSets: [ReceiptRuleSetMetadata]? = nil) {
            self.nextToken = nextToken
            self.ruleSets = ruleSets
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let ruleSets = dictionary["RuleSets"] as? [[String: Any]] {
                self.ruleSets = try ruleSets.map({ try ReceiptRuleSetMetadata(dictionary: $0) })
            } else { 
                self.ruleSets = nil
            }
        }
    }

    public struct SetIdentityHeadersInNotificationsEnabledRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of true specifies that Amazon SES will include headers in notifications, and a value of false specifies that Amazon SES will not include headers in notifications. This value can only be set when NotificationType is already set to use a particular Amazon SNS topic.
        public let enabled: Bool
        /// The notification type for which to enable or disable headers in notifications. 
        public let notificationType: NotificationType
        /// The identity for which to enable or disable headers in notifications. Examples: user@example.com, example.com.
        public let identity: String

        public init(enabled: Bool, notificationType: NotificationType, identity: String) {
            self.enabled = enabled
            self.notificationType = notificationType
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let rawNotificationType = dictionary["NotificationType"] as? String, let notificationType = NotificationType(rawValue: rawNotificationType) else { throw InitializableError.missingRequiredParam("NotificationType") }
            self.notificationType = notificationType
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct SetIdentityFeedbackForwardingEnabledRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Sets whether Amazon SES will forward bounce and complaint notifications as email. true specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. false specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to false when Amazon SNS topics are set for both Bounce and Complaint notification types.
        public let forwardingEnabled: Bool
        /// The identity for which to set bounce and complaint notification forwarding. Examples: user@example.com, example.com.
        public let identity: String

        public init(forwardingEnabled: Bool, identity: String) {
            self.forwardingEnabled = forwardingEnabled
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let forwardingEnabled = dictionary["ForwardingEnabled"] as? Bool else { throw InitializableError.missingRequiredParam("ForwardingEnabled") }
            self.forwardingEnabled = forwardingEnabled
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct GetIdentityDkimAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The DKIM attributes for an email address or a domain.
        public let dkimAttributes: [String: IdentityDkimAttributes]

        public init(dkimAttributes: [String: IdentityDkimAttributes]) {
            self.dkimAttributes = dkimAttributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let dkimAttributes = dictionary["DkimAttributes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DkimAttributes") }
            var dkimAttributesDict: [String: IdentityDkimAttributes] = [:]
            for (key, value) in dkimAttributes {
                guard let identityDkimAttributesDict = value as? [String: Any] else { throw InitializableError.convertingError }
                dkimAttributesDict[key] = try IdentityDkimAttributes(dictionary: identityDkimAttributesDict)
            }
            self.dkimAttributes = dkimAttributesDict
        }
    }

    public struct GetIdentityNotificationAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
        public let identities: [String]

        public init(identities: [String]) {
            self.identities = identities
        }

        public init(dictionary: [String: Any]) throws {
            guard let identities = dictionary["Identities"] as? [String] else { throw InitializableError.missingRequiredParam("Identities") }
            self.identities = identities
        }
    }

    public struct WorkmailAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String?
        /// The ARN of the Amazon WorkMail organization. An example of an Amazon WorkMail organization ARN is arn:aws:workmail:us-west-2:123456789012:organization/m-68755160c4cb4e29a2b2f8fb58f359d7. For information about Amazon WorkMail organizations, see the Amazon WorkMail Administrator Guide.
        public let organizationArn: String

        public init(topicArn: String? = nil, organizationArn: String) {
            self.topicArn = topicArn
            self.organizationArn = organizationArn
        }

        public init(dictionary: [String: Any]) throws {
            self.topicArn = dictionary["TopicArn"] as? String
            guard let organizationArn = dictionary["OrganizationArn"] as? String else { throw InitializableError.missingRequiredParam("OrganizationArn") }
            self.organizationArn = organizationArn
        }
    }

    public struct StopAction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken. An example of an Amazon SNS topic ARN is arn:aws:sns:us-west-2:123456789012:MyTopic. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String?
        /// The scope to which the Stop action applies. That is, what is being stopped.
        public let scope: StopScope

        public init(topicArn: String? = nil, scope: StopScope) {
            self.topicArn = topicArn
            self.scope = scope
        }

        public init(dictionary: [String: Any]) throws {
            self.topicArn = dictionary["TopicArn"] as? String
            guard let rawScope = dictionary["Scope"] as? String, let scope = StopScope(rawValue: rawScope) else { throw InitializableError.missingRequiredParam("Scope") }
            self.scope = scope
        }
    }

    public struct VerifyDomainDkimRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the domain to be verified for Easy DKIM signing.
        public let domain: String

        public init(domain: String) {
            self.domain = domain
        }

        public init(dictionary: [String: Any]) throws {
            guard let domain = dictionary["Domain"] as? String else { throw InitializableError.missingRequiredParam("Domain") }
            self.domain = domain
        }
    }

    public struct SendRawEmailRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set to use when you send an email using SendRawEmail.
        public let configurationSetName: String?
        /// The raw text of the message. The client is responsible for ensuring the following:   Message must contain a header and a body, separated by a blank line.   All required header fields must be present.   Each part of a multipart MIME message must be formatted properly.   MIME content types must be among those supported by Amazon SES. For more information, go to the Amazon SES Developer Guide.   Must be base64-encoded.  
        public let rawMessage: RawMessage
        /// A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
        public let destinations: [String]?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. Instead of using this parameter, you can use the X-header X-SES-SOURCE-ARN in the raw message of the email. If you use both the SourceArn parameter and the corresponding X-header, Amazon SES uses the value of the SourceArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide. 
        public let sourceArn: String?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendRawEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public let tags: [MessageTag]?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. Instead of using this parameter, you can use the X-header X-SES-RETURN-PATH-ARN in the raw message of the email. If you use both the ReturnPathArn parameter and the corresponding X-header, Amazon SES uses the value of the ReturnPathArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide. 
        public let returnPathArn: String?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email. Instead of using this parameter, you can use the X-header X-SES-FROM-ARN in the raw message of the email. If you use both the FromArn parameter and the corresponding X-header, Amazon SES uses the value of the FromArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide. 
        public let fromArn: String?
        /// The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)  By default, the string must be 7-bit ASCII. If the text must contain any other characters, then you must use MIME encoded-word syntax (RFC 2047) instead of a literal string. MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=. For more information, see RFC 2047.   If you specify the Source parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message. 
        public let source: String?

        public init(configurationSetName: String? = nil, rawMessage: RawMessage, destinations: [String]? = nil, sourceArn: String? = nil, tags: [MessageTag]? = nil, returnPathArn: String? = nil, fromArn: String? = nil, source: String? = nil) {
            self.configurationSetName = configurationSetName
            self.rawMessage = rawMessage
            self.destinations = destinations
            self.sourceArn = sourceArn
            self.tags = tags
            self.returnPathArn = returnPathArn
            self.fromArn = fromArn
            self.source = source
        }

        public init(dictionary: [String: Any]) throws {
            self.configurationSetName = dictionary["ConfigurationSetName"] as? String
            guard let rawMessage = dictionary["RawMessage"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RawMessage") }
            self.rawMessage = try Email.RawMessage(dictionary: rawMessage)
            self.destinations = dictionary["Destinations"] as? [String]
            self.sourceArn = dictionary["SourceArn"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try MessageTag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.returnPathArn = dictionary["ReturnPathArn"] as? String
            self.fromArn = dictionary["FromArn"] as? String
            self.source = dictionary["Source"] as? String
        }
    }

    public struct VerifyEmailIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteIdentityPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the policy to be deleted.
        public let policyName: String
        /// The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
        public let identity: String

        public init(policyName: String, identity: String) {
            self.policyName = policyName
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyName = dictionary["PolicyName"] as? String else { throw InitializableError.missingRequiredParam("PolicyName") }
            self.policyName = policyName
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct SendRawEmailResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique message identifier returned from the SendRawEmail action. 
        public let messageId: String

        public init(messageId: String) {
            self.messageId = messageId
        }

        public init(dictionary: [String: Any]) throws {
            guard let messageId = dictionary["MessageId"] as? String else { throw InitializableError.missingRequiredParam("MessageId") }
            self.messageId = messageId
        }
    }

    public struct SetIdentityMailFromDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose UseDefaultValue, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose RejectMessage, Amazon SES will return a MailFromDomainNotVerified error and not send the email. The action specified in BehaviorOnMXFailure is taken when the custom MAIL FROM domain setup is in the Pending, Failed, and TemporaryFailure states.
        public let behaviorOnMXFailure: BehaviorOnMXFailure?
        /// The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the Amazon SES Developer Guide), and 3) not be used to receive emails. A value of null disables the custom MAIL FROM setting for the identity.
        public let mailFromDomain: String?
        /// The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
        public let identity: String

        public init(behaviorOnMXFailure: BehaviorOnMXFailure? = nil, mailFromDomain: String? = nil, identity: String) {
            self.behaviorOnMXFailure = behaviorOnMXFailure
            self.mailFromDomain = mailFromDomain
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            if let behaviorOnMXFailure = dictionary["BehaviorOnMXFailure"] as? String { self.behaviorOnMXFailure = BehaviorOnMXFailure(rawValue: behaviorOnMXFailure) } else { self.behaviorOnMXFailure = nil }
            self.mailFromDomain = dictionary["MailFromDomain"] as? String
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct DeleteConfigurationSetEventDestinationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set from which to delete the event destination.
        public let configurationSetName: String
        /// The name of the event destination to delete.
        public let eventDestinationName: String

        public init(configurationSetName: String, eventDestinationName: String) {
            self.configurationSetName = configurationSetName
            self.eventDestinationName = eventDestinationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let configurationSetName = dictionary["ConfigurationSetName"] as? String else { throw InitializableError.missingRequiredParam("ConfigurationSetName") }
            self.configurationSetName = configurationSetName
            guard let eventDestinationName = dictionary["EventDestinationName"] as? String else { throw InitializableError.missingRequiredParam("EventDestinationName") }
            self.eventDestinationName = eventDestinationName
        }
    }

    public struct DescribeActiveReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateReceiptRuleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SendEmailRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the configuration set to use when you send an email using SendEmail.
        public let configurationSetName: String?
        /// The destination for this email, composed of To:, CC:, and BCC: fields.
        public let destination: Destination
        /// The message to be sent.
        public let message: Message
        /// The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
        public let replyToAddresses: [String]?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the Amazon SES Developer Guide. 
        public let sourceArn: String?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using SendEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public let tags: [MessageTag]?
        /// This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide. 
        public let returnPathArn: String?
        /// The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the Amazon SES Developer Guide. If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the Amazon SES Developer Guide.  In all cases, the email address must be 7-bit ASCII. If the text must contain any other characters, then you must use MIME encoded-word syntax (RFC 2047) instead of a literal string. MIME encoded-word syntax uses the following form: =?charset?encoding?encoded-text?=. For more information, see RFC 2047. 
        public let source: String
        /// The email address to which bounces and complaints are to be forwarded when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
        public let returnPath: String?

        public init(configurationSetName: String? = nil, destination: Destination, message: Message, replyToAddresses: [String]? = nil, sourceArn: String? = nil, tags: [MessageTag]? = nil, returnPathArn: String? = nil, source: String, returnPath: String? = nil) {
            self.configurationSetName = configurationSetName
            self.destination = destination
            self.message = message
            self.replyToAddresses = replyToAddresses
            self.sourceArn = sourceArn
            self.tags = tags
            self.returnPathArn = returnPathArn
            self.source = source
            self.returnPath = returnPath
        }

        public init(dictionary: [String: Any]) throws {
            self.configurationSetName = dictionary["ConfigurationSetName"] as? String
            guard let destination = dictionary["Destination"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Destination") }
            self.destination = try Email.Destination(dictionary: destination)
            guard let message = dictionary["Message"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Message") }
            self.message = try Email.Message(dictionary: message)
            self.replyToAddresses = dictionary["ReplyToAddresses"] as? [String]
            self.sourceArn = dictionary["SourceArn"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try MessageTag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.returnPathArn = dictionary["ReturnPathArn"] as? String
            guard let source = dictionary["Source"] as? String else { throw InitializableError.missingRequiredParam("Source") }
            self.source = source
            self.returnPath = dictionary["ReturnPath"] as? String
        }
    }

    public struct ListVerifiedEmailAddressesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of email addresses that have been verified.
        public let verifiedEmailAddresses: [String]?

        public init(verifiedEmailAddresses: [String]? = nil) {
            self.verifiedEmailAddresses = verifiedEmailAddresses
        }

        public init(dictionary: [String: Any]) throws {
            self.verifiedEmailAddresses = dictionary["VerifiedEmailAddresses"] as? [String]
        }
    }

    public struct ReceiptRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to Require, Amazon SES will bounce emails that are not received over TLS. The default is Optional.
        public let tlsPolicy: TlsPolicy?
        /// If true, then messages to which this receipt rule applies are scanned for spam and viruses. The default value is false.
        public let scanEnabled: Bool?
        /// An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
        public let actions: [ReceiptAction]?
        /// If true, the receipt rule is active. The default value is false.
        public let enabled: Bool?
        /// The name of the receipt rule. The name must:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain less than 64 characters.  
        public let name: String
        /// The recipient domains and email addresses to which the receipt rule applies. If this field is not specified, this rule will match all recipients under all verified domains.
        public let recipients: [String]?

        public init(tlsPolicy: TlsPolicy? = nil, scanEnabled: Bool? = nil, actions: [ReceiptAction]? = nil, enabled: Bool? = nil, name: String, recipients: [String]? = nil) {
            self.tlsPolicy = tlsPolicy
            self.scanEnabled = scanEnabled
            self.actions = actions
            self.enabled = enabled
            self.name = name
            self.recipients = recipients
        }

        public init(dictionary: [String: Any]) throws {
            if let tlsPolicy = dictionary["TlsPolicy"] as? String { self.tlsPolicy = TlsPolicy(rawValue: tlsPolicy) } else { self.tlsPolicy = nil }
            self.scanEnabled = dictionary["ScanEnabled"] as? Bool
            if let actions = dictionary["Actions"] as? [[String: Any]] {
                self.actions = try actions.map({ try ReceiptAction(dictionary: $0) })
            } else { 
                self.actions = nil
            }
            self.enabled = dictionary["Enabled"] as? Bool
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.recipients = dictionary["Recipients"] as? [String]
        }
    }

    public struct ReorderReceiptRuleSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the receipt rule set to reorder.
        public let ruleSetName: String
        /// A list of the specified receipt rule set's receipt rules in the order that you want to put them.
        public let ruleNames: [String]

        public init(ruleSetName: String, ruleNames: [String]) {
            self.ruleSetName = ruleSetName
            self.ruleNames = ruleNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let ruleSetName = dictionary["RuleSetName"] as? String else { throw InitializableError.missingRequiredParam("RuleSetName") }
            self.ruleSetName = ruleSetName
            guard let ruleNames = dictionary["RuleNames"] as? [String] else { throw InitializableError.missingRequiredParam("RuleNames") }
            self.ruleNames = ruleNames
        }
    }

    public struct GetIdentityPoliciesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use ListIdentityPolicies.
        public let policyNames: [String]
        /// The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this API, you must own the identity.
        public let identity: String

        public init(policyNames: [String], identity: String) {
            self.policyNames = policyNames
            self.identity = identity
        }

        public init(dictionary: [String: Any]) throws {
            guard let policyNames = dictionary["PolicyNames"] as? [String] else { throw InitializableError.missingRequiredParam("PolicyNames") }
            self.policyNames = policyNames
            guard let identity = dictionary["Identity"] as? String else { throw InitializableError.missingRequiredParam("Identity") }
            self.identity = identity
        }
    }

    public struct RecipientDsnFields: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status code that indicates what went wrong. This is required by RFC 3464.
        public let status: String
        /// Additional X-headers to include in the DSN.
        public let extensionFields: [ExtensionField]?
        /// The email address to which the message was ultimately delivered. This corresponds to the Final-Recipient in the DSN. If not specified, FinalRecipient will be set to the Recipient specified in the BouncedRecipientInfo structure. Either FinalRecipient or the recipient in BouncedRecipientInfo must be a recipient of the original bounced message.  Do not prepend the FinalRecipient email address with rfc 822;, as described in RFC 3798. 
        public let finalRecipient: String?
        /// The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by RFC 3464.
        public let action: DsnAction
        /// An extended explanation of what went wrong; this is usually an SMTP response. See RFC 3463 for the correct formatting of this parameter.
        public let diagnosticCode: String?
        /// The time the final delivery attempt was made, in RFC 822 date-time format.
        public let lastAttemptDate: Date?
        /// The MTA to which the remote MTA attempted to deliver the message, formatted as specified in RFC 3464 (mta-name-type; mta-name). This parameter typically applies only to propagating synchronous bounces.
        public let remoteMta: String?

        public init(status: String, extensionFields: [ExtensionField]? = nil, finalRecipient: String? = nil, action: DsnAction, diagnosticCode: String? = nil, lastAttemptDate: Date? = nil, remoteMta: String? = nil) {
            self.status = status
            self.extensionFields = extensionFields
            self.finalRecipient = finalRecipient
            self.action = action
            self.diagnosticCode = diagnosticCode
            self.lastAttemptDate = lastAttemptDate
            self.remoteMta = remoteMta
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            if let extensionFields = dictionary["ExtensionFields"] as? [[String: Any]] {
                self.extensionFields = try extensionFields.map({ try ExtensionField(dictionary: $0) })
            } else { 
                self.extensionFields = nil
            }
            self.finalRecipient = dictionary["FinalRecipient"] as? String
            guard let rawAction = dictionary["Action"] as? String, let action = DsnAction(rawValue: rawAction) else { throw InitializableError.missingRequiredParam("Action") }
            self.action = action
            self.diagnosticCode = dictionary["DiagnosticCode"] as? String
            self.lastAttemptDate = dictionary["LastAttemptDate"] as? Date
            self.remoteMta = dictionary["RemoteMta"] as? String
        }
    }

    public struct ReceiptIpFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether to block or allow incoming mail from the specified IP addresses.
        public let policy: ReceiptFilterPolicy
        /// A single IP address or a range of IP addresses that you want to block or allow, specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For more information about CIDR notation, see RFC 2317.
        public let cidr: String

        public init(policy: ReceiptFilterPolicy, cidr: String) {
            self.policy = policy
            self.cidr = cidr
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawPolicy = dictionary["Policy"] as? String, let policy = ReceiptFilterPolicy(rawValue: rawPolicy) else { throw InitializableError.missingRequiredParam("Policy") }
            self.policy = policy
            guard let cidr = dictionary["Cidr"] as? String else { throw InitializableError.missingRequiredParam("Cidr") }
            self.cidr = cidr
        }
    }

    public struct CreateReceiptRuleSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SendDataPoint: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of emails that have been sent.
        public let deliveryAttempts: Int64?
        /// Time of the data point.
        public let timestamp: Date?
        /// Number of emails rejected by Amazon SES.
        public let rejects: Int64?
        /// Number of emails that have bounced.
        public let bounces: Int64?
        /// Number of unwanted emails that were rejected by recipients.
        public let complaints: Int64?

        public init(deliveryAttempts: Int64? = nil, timestamp: Date? = nil, rejects: Int64? = nil, bounces: Int64? = nil, complaints: Int64? = nil) {
            self.deliveryAttempts = deliveryAttempts
            self.timestamp = timestamp
            self.rejects = rejects
            self.bounces = bounces
            self.complaints = complaints
        }

        public init(dictionary: [String: Any]) throws {
            self.deliveryAttempts = dictionary["DeliveryAttempts"] as? Int64
            self.timestamp = dictionary["Timestamp"] as? Date
            self.rejects = dictionary["Rejects"] as? Int64
            self.bounces = dictionary["Bounces"] as? Int64
            self.complaints = dictionary["Complaints"] as? Int64
        }
    }

    public struct ListConfigurationSetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of configuration sets.
        public let configurationSets: [ConfigurationSet]?
        /// A token indicating that there are additional configuration sets available to be listed. Pass this token to successive calls of ListConfigurationSets. 
        public let nextToken: String?

        public init(configurationSets: [ConfigurationSet]? = nil, nextToken: String? = nil) {
            self.configurationSets = configurationSets
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let configurationSets = dictionary["ConfigurationSets"] as? [[String: Any]] {
                self.configurationSets = try configurationSets.map({ try ConfigurationSet(dictionary: $0) })
            } else { 
                self.configurationSets = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct VerifyDomainDkimResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A set of character strings that represent the domain's identity. If the identity is an email address, the tokens represent the domain of that address. Using these tokens, you will need to create DNS CNAME records that point to DKIM public keys hosted by Amazon SES. Amazon Web Services will eventually detect that you have updated your DNS records; this detection process may take up to 72 hours. Upon successful detection, Amazon SES will be able to DKIM-sign emails originating from that domain. For more information about creating DNS records using DKIM tokens, go to the Amazon SES Developer Guide.
        public let dkimTokens: [String]

        public init(dkimTokens: [String]) {
            self.dkimTokens = dkimTokens
        }

        public init(dictionary: [String: Any]) throws {
            guard let dkimTokens = dictionary["DkimTokens"] as? [String] else { throw InitializableError.missingRequiredParam("DkimTokens") }
            self.dkimTokens = dkimTokens
        }
    }

    public struct DeleteIdentityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

}