// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Glacier {

    public struct PurchaseProvisionedCapacityOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-capacity-id": "capacityId"]
        }
        /// The ID that identifies the provisioned capacity unit.
        public let capacityId: String?

        public init(capacityId: String? = nil) {
            self.capacityId = capacityId
        }

        public init(dictionary: [String: Any]) throws {
            self.capacityId = dictionary["X-amz-capacity-id"] as? String
        }
    }

    public struct SetDataRetrievalPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId"]
        }
        /// The data retrieval policy in JSON format.
        public let policy: DataRetrievalPolicy?
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String

        public init(policy: DataRetrievalPolicy? = nil, accountId: String) {
            self.policy = policy
            self.accountId = accountId
        }

        public init(dictionary: [String: Any]) throws {
            if let policy = dictionary["Policy"] as? [String: Any] { self.policy = try Glacier.DataRetrievalPolicy(dictionary: policy) } else { self.policy = nil }
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
        }
    }

    public struct AbortMultipartUploadInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "uploadId": "uploadId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The upload ID of the multipart upload to delete.
        public let uploadId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, uploadId: String, vaultName: String) {
            self.accountId = accountId
            self.uploadId = uploadId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct DeleteVaultNotificationsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct InitiateVaultLockInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "policy"
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The vault lock policy as a JSON string, which uses "\" as an escape character.
        public let policy: VaultLockPolicy?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, policy: VaultLockPolicy? = nil, vaultName: String) {
            self.accountId = accountId
            self.policy = policy
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            if let policy = dictionary["policy"] as? [String: Any] { self.policy = try Glacier.VaultLockPolicy(dictionary: policy) } else { self.policy = nil }
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct InitiateMultipartUploadInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-part-size": "partSize", "x-amz-archive-description": "archiveDescription"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The archive description that you are uploading in parts. The part size must be a megabyte (1024 KB) multiplied by a power of 2, for example 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum allowable part size is 1 MB, and the maximum is 4 GB (4096 MB).
        public let archiveDescription: String?
        /// The name of the vault.
        public let vaultName: String
        /// The size of each part except the last, in bytes. The last part can be smaller than this part size.
        public let partSize: String?

        public init(accountId: String, archiveDescription: String? = nil, vaultName: String, partSize: String? = nil) {
            self.accountId = accountId
            self.archiveDescription = archiveDescription
            self.vaultName = vaultName
            self.partSize = partSize
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.archiveDescription = dictionary["X-amz-archive-description"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            self.partSize = dictionary["X-amz-part-size"] as? String
        }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is null.
        public let marker: String?
        /// A list of in-progress multipart uploads.
        public let uploadsList: [UploadListElement]?

        public init(marker: String? = nil, uploadsList: [UploadListElement]? = nil) {
            self.marker = marker
            self.uploadsList = uploadsList
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let uploadsList = dictionary["UploadsList"] as? [[String: Any]] {
                self.uploadsList = try uploadsList.map({ try UploadListElement(dictionary: $0) })
            } else { 
                self.uploadsList = nil
            }
        }
    }

    public struct PartListElement: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The SHA256 tree hash value that Amazon Glacier calculated for the part. This field is never null.
        public let sHA256TreeHash: String?
        /// The byte range of a part, inclusive of the upper value of the range.
        public let rangeInBytes: String?

        public init(sHA256TreeHash: String? = nil, rangeInBytes: String? = nil) {
            self.sHA256TreeHash = sHA256TreeHash
            self.rangeInBytes = rangeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.sHA256TreeHash = dictionary["SHA256TreeHash"] as? String
            self.rangeInBytes = dictionary["RangeInBytes"] as? String
        }
    }

    public struct ListMultipartUploadsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "marker", "limit": "limit"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// An opaque string used for pagination. This value specifies the upload at which the listing of uploads should begin. Get the marker value from a previous List Uploads response. You need only include the marker if you are continuing the pagination of results started in a previous List Uploads request.
        public let marker: String?
        /// Specifies the maximum number of uploads returned in the response body. If this value is not specified, the List Uploads operation returns up to 1,000 uploads.
        public let limit: String?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, marker: String? = nil, limit: String? = nil, vaultName: String) {
            self.accountId = accountId
            self.marker = marker
            self.limit = limit
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct GetVaultLockInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct GetDataRetrievalPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId"]
        }
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
        }
    }

    public struct GetJobOutputInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Range": "range"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName", "jobId": "jobId"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The range of bytes to retrieve from the output. For example, if you want to download the first 1,048,576 bytes, specify the range as bytes=0-1048575. By default, this operation downloads the entire output. If the job output is large, then you can use a range to retrieve a portion of the output. This allows you to download the entire output in smaller chunks of bytes. For example, suppose you have 1 GB of job output you want to download and you decide to download 128 MB chunks of data at a time, which is a total of eight Get Job Output requests. You use the following process to download the job output:   Download a 128 MB chunk of output by specifying the appropriate byte range. Verify that all 128 MB of data was received.   Along with the data, the response includes a SHA256 tree hash of the payload. You compute the checksum of the payload on the client and compare it with the checksum you received in the response to ensure you received all the expected data.   Repeat steps 1 and 2 for all the eight 128 MB chunks of output data, each time specifying the appropriate byte range.   After downloading all the parts of the job output, you have a list of eight checksum values. Compute the tree hash of these values to find the checksum of the entire output. Using the DescribeJob API, obtain job information of the job that provided you the output. The response includes the checksum of the entire archive stored in Amazon Glacier. You compare this value with the checksum you computed to ensure you have downloaded the entire archive content with no errors.   
        public let range: String?
        /// The name of the vault.
        public let vaultName: String
        /// The job ID whose data is downloaded.
        public let jobId: String

        public init(accountId: String, range: String? = nil, vaultName: String, jobId: String) {
            self.accountId = accountId
            self.range = range
            self.vaultName = vaultName
            self.jobId = jobId
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.range = dictionary["Range"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
        }
    }

    public struct PurchaseProvisionedCapacityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId"]
        }
        /// The AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, don't include any hyphens ('-') in the ID. 
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
        }
    }

    public struct GetDataRetrievalPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains the returned data retrieval policy in JSON format.
        public let policy: DataRetrievalPolicy?

        public init(policy: DataRetrievalPolicy? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            if let policy = dictionary["Policy"] as? [String: Any] { self.policy = try Glacier.DataRetrievalPolicy(dictionary: policy) } else { self.policy = nil }
        }
    }

    public struct UploadArchiveInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "body"
        public static var headerParams: [String: String] {
            return ["x-amz-sha256-tree-hash": "checksum", "x-amz-archive-description": "archiveDescription"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The optional description of the archive you are uploading.
        public let archiveDescription: String?
        /// The SHA256 tree hash of the data being uploaded.
        public let checksum: String?
        /// The name of the vault.
        public let vaultName: String
        /// The data to upload.
        public let body: Data?

        public init(accountId: String, archiveDescription: String? = nil, checksum: String? = nil, vaultName: String, body: Data? = nil) {
            self.accountId = accountId
            self.archiveDescription = archiveDescription
            self.checksum = checksum
            self.vaultName = vaultName
            self.body = body
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.archiveDescription = dictionary["X-amz-archive-description"] as? String
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            self.body = dictionary["body"] as? Data
        }
    }

    public struct UploadMultipartPartInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "body"
        public static var headerParams: [String: String] {
            return ["Content-Range": "range", "x-amz-sha256-tree-hash": "checksum"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "uploadId": "uploadId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The upload ID of the multipart upload.
        public let uploadId: String
        /// Identifies the range of bytes in the assembled archive that will be uploaded in this part. Amazon Glacier uses this information to assemble the archive in the proper sequence. The format of this header follows RFC 2616. An example header is Content-Range:bytes 0-4194303/*.
        public let range: String?
        /// The SHA256 tree hash of the data being uploaded.
        public let checksum: String?
        /// The name of the vault.
        public let vaultName: String
        /// The data to upload.
        public let body: Data?

        public init(accountId: String, uploadId: String, range: String? = nil, checksum: String? = nil, vaultName: String, body: Data? = nil) {
            self.accountId = accountId
            self.uploadId = uploadId
            self.range = range
            self.checksum = checksum
            self.vaultName = vaultName
            self.body = body
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.range = dictionary["Content-Range"] as? String
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            self.body = dictionary["body"] as? Data
        }
    }

    public struct SetVaultNotificationsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "vaultNotificationConfig"
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// Provides options for specifying notification configuration.
        public let vaultNotificationConfig: VaultNotificationConfig?
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(vaultNotificationConfig: VaultNotificationConfig? = nil, accountId: String, vaultName: String) {
            self.vaultNotificationConfig = vaultNotificationConfig
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            if let vaultNotificationConfig = dictionary["vaultNotificationConfig"] as? [String: Any] { self.vaultNotificationConfig = try Glacier.VaultNotificationConfig(dictionary: vaultNotificationConfig) } else { self.vaultNotificationConfig = nil }
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct ListTagsForVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct DataRetrievalRule: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of bytes that can be retrieved in an hour. This field is required only if the value of the Strategy field is BytesPerHour. Your PUT operation will be rejected if the Strategy field is not set to BytesPerHour and you set this field.
        public let bytesPerHour: Int64?
        /// The type of data retrieval policy to set. Valid values: BytesPerHour|FreeTier|None
        public let strategy: String?

        public init(bytesPerHour: Int64? = nil, strategy: String? = nil) {
            self.bytesPerHour = bytesPerHour
            self.strategy = strategy
        }

        public init(dictionary: [String: Any]) throws {
            self.bytesPerHour = dictionary["BytesPerHour"] as? Int64
            self.strategy = dictionary["Strategy"] as? String
        }
    }

    public struct RemoveTagsFromVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String
        /// A list of tag keys. Each corresponding tag is removed from the vault.
        public let tagKeys: [String]?

        public init(accountId: String, vaultName: String, tagKeys: [String]? = nil) {
            self.accountId = accountId
            self.vaultName = vaultName
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            self.tagKeys = dictionary["TagKeys"] as? [String]
        }
    }

    public struct ListProvisionedCapacityOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The response body contains the following JSON fields.
        public let provisionedCapacityList: [ProvisionedCapacityDescription]?

        public init(provisionedCapacityList: [ProvisionedCapacityDescription]? = nil) {
            self.provisionedCapacityList = provisionedCapacityList
        }

        public init(dictionary: [String: Any]) throws {
            if let provisionedCapacityList = dictionary["ProvisionedCapacityList"] as? [[String: Any]] {
                self.provisionedCapacityList = try provisionedCapacityList.map({ try ProvisionedCapacityDescription(dictionary: $0) })
            } else { 
                self.provisionedCapacityList = nil
            }
        }
    }

    public struct AddTagsToVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The tags to add to the vault. Each tag is composed of a key and a value. The value can be an empty string.
        public let tags: [String: String]?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, tags: [String: String]? = nil, vaultName: String) {
            self.accountId = accountId
            self.tags = tags
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            if let tags = dictionary["Tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct UploadListElement: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the vault that contains the archive.
        public let vaultARN: String?
        /// The UTC time at which the multipart upload was initiated.
        public let creationDate: String?
        /// The description of the archive that was specified in the Initiate Multipart Upload request.
        public let archiveDescription: String?
        /// The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.
        public let partSizeInBytes: Int64?
        /// The ID of a multipart upload.
        public let multipartUploadId: String?

        public init(vaultARN: String? = nil, creationDate: String? = nil, archiveDescription: String? = nil, partSizeInBytes: Int64? = nil, multipartUploadId: String? = nil) {
            self.vaultARN = vaultARN
            self.creationDate = creationDate
            self.archiveDescription = archiveDescription
            self.partSizeInBytes = partSizeInBytes
            self.multipartUploadId = multipartUploadId
        }

        public init(dictionary: [String: Any]) throws {
            self.vaultARN = dictionary["VaultARN"] as? String
            self.creationDate = dictionary["CreationDate"] as? String
            self.archiveDescription = dictionary["ArchiveDescription"] as? String
            self.partSizeInBytes = dictionary["PartSizeInBytes"] as? Int64
            self.multipartUploadId = dictionary["MultipartUploadId"] as? String
        }
    }

    public struct CompleteMultipartUploadInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-archive-size": "archiveSize", "x-amz-sha256-tree-hash": "checksum"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "uploadId": "uploadId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The upload ID of the multipart upload.
        public let uploadId: String
        /// The total size, in bytes, of the entire archive. This value should be the sum of all the sizes of the individual parts that you uploaded.
        public let archiveSize: String?
        /// The SHA256 tree hash of the entire archive. It is the tree hash of SHA256 tree hash of the individual parts. If the value you specify in the request does not match the SHA256 tree hash of the final assembled archive as computed by Amazon Glacier, Amazon Glacier returns an error and the request fails.
        public let checksum: String?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, uploadId: String, archiveSize: String? = nil, checksum: String? = nil, vaultName: String) {
            self.accountId = accountId
            self.uploadId = uploadId
            self.archiveSize = archiveSize
            self.checksum = checksum
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.archiveSize = dictionary["X-amz-archive-size"] as? String
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct ListJobsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "marker", "limit": "limit", "statuscode": "statuscode", "completed": "completed"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// An opaque string used for pagination. This value specifies the job at which the listing of jobs should begin. Get the marker value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of results started in a previous List Jobs request.
        public let marker: String?
        /// The maximum number of jobs to be returned. The default limit is 1000. The number of jobs returned might be fewer than the specified limit, but the number of returned jobs never exceeds the limit.
        public let limit: String?
        /// The name of the vault.
        public let vaultName: String
        /// The type of job status to return. You can specify the following values: InProgress, Succeeded, or Failed.
        public let statuscode: String?
        /// The state of the jobs to return. You can specify true or false.
        public let completed: String?

        public init(accountId: String, marker: String? = nil, limit: String? = nil, vaultName: String, statuscode: String? = nil, completed: String? = nil) {
            self.accountId = accountId
            self.marker = marker
            self.limit = limit
            self.vaultName = vaultName
            self.statuscode = statuscode
            self.completed = completed
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
            self.statuscode = dictionary["Statuscode"] as? String
            self.completed = dictionary["Completed"] as? String
        }
    }

    public struct DeleteVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct DeleteVaultAccessPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct InitiateJobInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "jobParameters"
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// Provides options for specifying job information.
        public let jobParameters: JobParameters?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, jobParameters: JobParameters? = nil, vaultName: String) {
            self.accountId = accountId
            self.jobParameters = jobParameters
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            if let jobParameters = dictionary["jobParameters"] as? [String: Any] { self.jobParameters = try Glacier.JobParameters(dictionary: jobParameters) } else { self.jobParameters = nil }
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct ArchiveCreationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "location", "x-amz-archive-id": "archiveId", "x-amz-sha256-tree-hash": "checksum"]
        }
        /// The ID of the archive. This value is also included as part of the location.
        public let archiveId: String?
        /// The relative URI path of the newly added archive resource.
        public let location: String?
        /// The checksum of the archive computed by Amazon Glacier.
        public let checksum: String?

        public init(archiveId: String? = nil, location: String? = nil, checksum: String? = nil) {
            self.archiveId = archiveId
            self.location = location
            self.checksum = checksum
        }

        public init(dictionary: [String: Any]) throws {
            self.archiveId = dictionary["X-amz-archive-id"] as? String
            self.location = dictionary["Location"] as? String
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
        }
    }

    public struct ListTagsForVaultOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tags attached to the vault. Each tag is composed of a key and a value.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
        }
    }

    public enum StatusCode: String, CustomStringConvertible {
        case inprogress = "InProgress"
        case succeeded = "Succeeded"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct CreateVaultOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "location"]
        }
        /// The URI of the vault that was created.
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            self.location = dictionary["Location"] as? String
        }
    }

    public struct InitiateJobOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-job-id": "jobId", "Location": "location"]
        }
        /// The ID of the job.
        public let jobId: String?
        /// The relative URI path of the job.
        public let location: String?

        public init(jobId: String? = nil, location: String? = nil) {
            self.jobId = jobId
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            self.jobId = dictionary["X-amz-job-id"] as? String
            self.location = dictionary["Location"] as? String
        }
    }

    public struct ListVaultsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The vault ARN at which to continue pagination of the results. You use the marker in another List Vaults request to obtain more vaults in the list.
        public let marker: String?
        /// List of vaults.
        public let vaultList: [DescribeVaultOutput]?

        public init(marker: String? = nil, vaultList: [DescribeVaultOutput]? = nil) {
            self.marker = marker
            self.vaultList = vaultList
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let vaultList = dictionary["VaultList"] as? [[String: Any]] {
                self.vaultList = try vaultList.map({ try DescribeVaultOutput(dictionary: $0) })
            } else { 
                self.vaultList = nil
            }
        }
    }

    public struct GlacierJobDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the vault from which the archive retrieval was requested.
        public let vaultARN: String?
        /// The UTC time that the archive retrieval request completed. While the job is in progress, the value will be null.
        public let completionDate: String?
        /// For an InventoryRetrieval job, this is the size in bytes of the inventory requested for download. For the ArchiveRetrieval job, the value is null.
        public let inventorySizeInBytes: Int64?
        /// The UTC date when the job was created. A string representation of ISO 8601 date format, for example, "2012-03-20T17:03:43.221Z".
        public let creationDate: String?
        /// For an ArchiveRetrieval job, this is the archive ID requested for download. Otherwise, this field is null.
        public let archiveId: String?
        /// An Amazon Simple Notification Service (Amazon SNS) topic that receives notification.
        public let sNSTopic: String?
        /// The SHA256 tree hash of the entire archive for an archive retrieval. For inventory retrieval jobs, this field is null.
        public let archiveSHA256TreeHash: String?
        /// An opaque string that identifies an Amazon Glacier job.
        public let jobId: String?
        /// For an ArchiveRetrieval job, it is the checksum of the archive. Otherwise, the value is null. The SHA256 tree hash value for the requested range of an archive. If the Initiate a Job request for an archive specified a tree-hash aligned range, then this field returns a value. For the specific case when the whole archive is retrieved, this value is the same as the ArchiveSHA256TreeHash value. This field is null in the following situations:   Archive retrieval jobs that specify a range that is not tree-hash aligned.     Archival jobs that specify a range that is equal to the whole archive and the job status is InProgress.     Inventory jobs.  
        public let sHA256TreeHash: String?
        /// The job type. It is either ArchiveRetrieval or InventoryRetrieval.
        public let action: ActionCode?
        /// The retrieved byte range for archive retrieval jobs in the form "StartByteValue-EndByteValue" If no range was specified in the archive retrieval, then the whole archive is retrieved and StartByteValue equals 0 and EndByteValue equals the size of the archive minus 1. For inventory retrieval jobs this field is null. 
        public let retrievalByteRange: String?
        /// Parameters used for range inventory retrieval.
        public let inventoryRetrievalParameters: InventoryRetrievalJobDescription?
        /// The status code can be InProgress, Succeeded, or Failed, and indicates the status of the job.
        public let statusCode: StatusCode?
        /// For an ArchiveRetrieval job, this is the size in bytes of the archive being requested for download. For the InventoryRetrieval job, the value is null.
        public let archiveSizeInBytes: Int64?
        /// The job status. When a job is completed, you get the job's output.
        public let completed: Bool?
        /// The job description you provided when you initiated the job.
        public let jobDescription: String?
        /// A friendly message that describes the job status.
        public let statusMessage: String?
        /// The retrieval option to use for the archive retrieval. Valid values are Expedited, Standard, or Bulk. Standard is the default.
        public let tier: String?

        public init(vaultARN: String? = nil, completionDate: String? = nil, inventorySizeInBytes: Int64? = nil, creationDate: String? = nil, archiveId: String? = nil, sNSTopic: String? = nil, archiveSHA256TreeHash: String? = nil, jobId: String? = nil, sHA256TreeHash: String? = nil, action: ActionCode? = nil, retrievalByteRange: String? = nil, inventoryRetrievalParameters: InventoryRetrievalJobDescription? = nil, statusCode: StatusCode? = nil, archiveSizeInBytes: Int64? = nil, completed: Bool? = nil, jobDescription: String? = nil, statusMessage: String? = nil, tier: String? = nil) {
            self.vaultARN = vaultARN
            self.completionDate = completionDate
            self.inventorySizeInBytes = inventorySizeInBytes
            self.creationDate = creationDate
            self.archiveId = archiveId
            self.sNSTopic = sNSTopic
            self.archiveSHA256TreeHash = archiveSHA256TreeHash
            self.jobId = jobId
            self.sHA256TreeHash = sHA256TreeHash
            self.action = action
            self.retrievalByteRange = retrievalByteRange
            self.inventoryRetrievalParameters = inventoryRetrievalParameters
            self.statusCode = statusCode
            self.archiveSizeInBytes = archiveSizeInBytes
            self.completed = completed
            self.jobDescription = jobDescription
            self.statusMessage = statusMessage
            self.tier = tier
        }

        public init(dictionary: [String: Any]) throws {
            self.vaultARN = dictionary["VaultARN"] as? String
            self.completionDate = dictionary["CompletionDate"] as? String
            self.inventorySizeInBytes = dictionary["InventorySizeInBytes"] as? Int64
            self.creationDate = dictionary["CreationDate"] as? String
            self.archiveId = dictionary["ArchiveId"] as? String
            self.sNSTopic = dictionary["SNSTopic"] as? String
            self.archiveSHA256TreeHash = dictionary["ArchiveSHA256TreeHash"] as? String
            self.jobId = dictionary["JobId"] as? String
            self.sHA256TreeHash = dictionary["SHA256TreeHash"] as? String
            if let action = dictionary["Action"] as? String { self.action = ActionCode(rawValue: action) } else { self.action = nil }
            self.retrievalByteRange = dictionary["RetrievalByteRange"] as? String
            if let inventoryRetrievalParameters = dictionary["InventoryRetrievalParameters"] as? [String: Any] { self.inventoryRetrievalParameters = try Glacier.InventoryRetrievalJobDescription(dictionary: inventoryRetrievalParameters) } else { self.inventoryRetrievalParameters = nil }
            if let statusCode = dictionary["StatusCode"] as? String { self.statusCode = StatusCode(rawValue: statusCode) } else { self.statusCode = nil }
            self.archiveSizeInBytes = dictionary["ArchiveSizeInBytes"] as? Int64
            self.completed = dictionary["Completed"] as? Bool
            self.jobDescription = dictionary["JobDescription"] as? String
            self.statusMessage = dictionary["StatusMessage"] as? String
            self.tier = dictionary["Tier"] as? String
        }
    }

    public struct ProvisionedCapacityDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).
        public let startDate: String?
        /// The ID that identifies the provisioned capacity unit.
        public let capacityId: String?
        /// The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).
        public let expirationDate: String?

        public init(startDate: String? = nil, capacityId: String? = nil, expirationDate: String? = nil) {
            self.startDate = startDate
            self.capacityId = capacityId
            self.expirationDate = expirationDate
        }

        public init(dictionary: [String: Any]) throws {
            self.startDate = dictionary["StartDate"] as? String
            self.capacityId = dictionary["CapacityId"] as? String
            self.expirationDate = dictionary["ExpirationDate"] as? String
        }
    }

    public struct GetVaultLockOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The UTC date and time at which the vault lock was put into the InProgress state.
        public let creationDate: String?
        /// The vault lock policy as a JSON string, which uses "\" as an escape character.
        public let policy: String?
        /// The state of the vault lock. InProgress or Locked.
        public let state: String?
        /// The UTC date and time at which the lock ID expires. This value can be null if the vault lock is in a Locked state.
        public let expirationDate: String?

        public init(creationDate: String? = nil, policy: String? = nil, state: String? = nil, expirationDate: String? = nil) {
            self.creationDate = creationDate
            self.policy = policy
            self.state = state
            self.expirationDate = expirationDate
        }

        public init(dictionary: [String: Any]) throws {
            self.creationDate = dictionary["CreationDate"] as? String
            self.policy = dictionary["Policy"] as? String
            self.state = dictionary["State"] as? String
            self.expirationDate = dictionary["ExpirationDate"] as? String
        }
    }

    public struct InventoryRetrievalJobDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The output format for the vault inventory list, which is set by the InitiateJob request when initiating a job to retrieve a vault inventory. Valid values are CSV and JSON.
        public let format: String?
        /// The start of the date range in Universal Coordinated Time (UTC) for vault inventory retrieval that includes archives created on or after this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public let startDate: String?
        /// The maximum number of inventory items returned per vault inventory retrieval request. This limit is set when initiating the job with the a InitiateJob request. 
        public let limit: String?
        /// An opaque string that represents where to continue pagination of the vault inventory retrieval results. You use the marker in a new InitiateJob request to obtain additional inventory items. If there are no more inventory items, this value is null. For more information, see  Range Inventory Retrieval.
        public let marker: String?
        /// The end of the date range in UTC for vault inventory retrieval that includes archives created before this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public let endDate: String?

        public init(format: String? = nil, startDate: String? = nil, limit: String? = nil, marker: String? = nil, endDate: String? = nil) {
            self.format = format
            self.startDate = startDate
            self.limit = limit
            self.marker = marker
            self.endDate = endDate
        }

        public init(dictionary: [String: Any]) throws {
            self.format = dictionary["Format"] as? String
            self.startDate = dictionary["StartDate"] as? String
            self.limit = dictionary["Limit"] as? String
            self.marker = dictionary["Marker"] as? String
            self.endDate = dictionary["EndDate"] as? String
        }
    }

    public struct GetVaultNotificationsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct ListVaultsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "marker", "limit": "limit"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId"]
        }
        /// A string used for pagination. The marker specifies the vault ARN after which the listing of vaults should begin.
        public let marker: String?
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The maximum number of vaults to be returned. The default limit is 1000. The number of vaults returned might be fewer than the specified limit, but the number of returned vaults never exceeds the limit.
        public let limit: String?

        public init(marker: String? = nil, accountId: String, limit: String? = nil) {
            self.marker = marker
            self.accountId = accountId
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.limit = dictionary["Limit"] as? String
        }
    }

    public struct GetVaultAccessPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "policy"
        /// Contains the returned vault access policy as a JSON string.
        public let policy: VaultAccessPolicy?

        public init(policy: VaultAccessPolicy? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            if let policy = dictionary["policy"] as? [String: Any] { self.policy = try Glacier.VaultAccessPolicy(dictionary: policy) } else { self.policy = nil }
        }
    }

    public struct InitiateMultipartUploadOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "location", "x-amz-multipart-upload-id": "uploadId"]
        }
        /// The ID of the multipart upload. This value is also included as part of the location.
        public let uploadId: String?
        /// The relative URI path of the multipart upload ID Amazon Glacier created.
        public let location: String?

        public init(uploadId: String? = nil, location: String? = nil) {
            self.uploadId = uploadId
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            self.uploadId = dictionary["X-amz-multipart-upload-id"] as? String
            self.location = dictionary["Location"] as? String
        }
    }

    public struct ListPartsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the vault to which the multipart upload was initiated.
        public let vaultARN: String?
        /// An opaque string that represents where to continue pagination of the results. You use the marker in a new List Parts request to obtain more jobs in the list. If there are no more parts, this value is null.
        public let marker: String?
        /// The description of the archive that was specified in the Initiate Multipart Upload request.
        public let archiveDescription: String?
        /// The part size in bytes. This is the same value that you specified in the Initiate Multipart Upload request.
        public let partSizeInBytes: Int64?
        /// The ID of the upload to which the parts are associated.
        public let multipartUploadId: String?
        /// The UTC time at which the multipart upload was initiated.
        public let creationDate: String?
        /// A list of the part sizes of the multipart upload. Each object in the array contains a RangeBytes and sha256-tree-hash name/value pair.
        public let parts: [PartListElement]?

        public init(vaultARN: String? = nil, marker: String? = nil, archiveDescription: String? = nil, partSizeInBytes: Int64? = nil, multipartUploadId: String? = nil, creationDate: String? = nil, parts: [PartListElement]? = nil) {
            self.vaultARN = vaultARN
            self.marker = marker
            self.archiveDescription = archiveDescription
            self.partSizeInBytes = partSizeInBytes
            self.multipartUploadId = multipartUploadId
            self.creationDate = creationDate
            self.parts = parts
        }

        public init(dictionary: [String: Any]) throws {
            self.vaultARN = dictionary["VaultARN"] as? String
            self.marker = dictionary["Marker"] as? String
            self.archiveDescription = dictionary["ArchiveDescription"] as? String
            self.partSizeInBytes = dictionary["PartSizeInBytes"] as? Int64
            self.multipartUploadId = dictionary["MultipartUploadId"] as? String
            self.creationDate = dictionary["CreationDate"] as? String
            if let parts = dictionary["Parts"] as? [[String: Any]] {
                self.parts = try parts.map({ try PartListElement(dictionary: $0) })
            } else { 
                self.parts = nil
            }
        }
    }

    public struct ListPartsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "marker", "limit": "limit"]
        }
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "uploadId": "uploadId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The upload ID of the multipart upload.
        public let uploadId: String
        /// The maximum number of parts to be returned. The default limit is 1000. The number of parts returned might be fewer than the specified limit, but the number of returned parts never exceeds the limit.
        public let limit: String?
        /// An opaque string used for pagination. This value specifies the part at which the listing of parts should begin. Get the marker value from the response of a previous List Parts response. You need only include the marker if you are continuing the pagination of results started in a previous List Parts request.
        public let marker: String?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, uploadId: String, limit: String? = nil, marker: String? = nil, vaultName: String) {
            self.accountId = accountId
            self.uploadId = uploadId
            self.limit = limit
            self.marker = marker
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let uploadId = dictionary["UploadId"] as? String else { throw InitializableError.missingRequiredParam("UploadId") }
            self.uploadId = uploadId
            self.limit = dictionary["Limit"] as? String
            self.marker = dictionary["Marker"] as? String
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct VaultAccessPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The vault access policy.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            self.policy = dictionary["Policy"] as? String
        }
    }

    public struct AbortVaultLockInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct DescribeVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct DeleteArchiveInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["archiveId": "archiveId", "accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The ID of the archive to delete.
        public let archiveId: String
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(archiveId: String, accountId: String, vaultName: String) {
            self.archiveId = archiveId
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let archiveId = dictionary["ArchiveId"] as? String else { throw InitializableError.missingRequiredParam("ArchiveId") }
            self.archiveId = archiveId
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct SetVaultAccessPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "policy"
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The vault access policy as a JSON string.
        public let policy: VaultAccessPolicy?
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, policy: VaultAccessPolicy? = nil, vaultName: String) {
            self.accountId = accountId
            self.policy = policy
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            if let policy = dictionary["policy"] as? [String: Any] { self.policy = try Glacier.VaultAccessPolicy(dictionary: policy) } else { self.policy = nil }
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct VaultLockPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The vault lock policy.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        public init(dictionary: [String: Any]) throws {
            self.policy = dictionary["Policy"] as? String
        }
    }

    public enum ActionCode: String, CustomStringConvertible {
        case archiveretrieval = "ArchiveRetrieval"
        case inventoryretrieval = "InventoryRetrieval"
        public var description: String { return self.rawValue }
    }

    public struct GetJobOutputOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "body"
        public static var headerParams: [String: String] {
            return ["Content-Type": "contentType", "x-amz-archive-description": "archiveDescription", "Content-Range": "contentRange", "Accept-Ranges": "acceptRanges", "x-amz-sha256-tree-hash": "checksum"]
        }
        /// The range of bytes returned by Amazon Glacier. If only partial output is downloaded, the response provides the range of bytes Amazon Glacier returned. For example, bytes 0-1048575/8388608 returns the first 1 MB from 8 MB.
        public let contentRange: String?
        /// The HTTP response code for a job output request. The value depends on whether a range was specified in the request.
        public let status: Int32?
        /// The Content-Type depends on whether the job output is an archive or a vault inventory. For archive data, the Content-Type is application/octet-stream. For vault inventory, if you requested CSV format when you initiated the job, the Content-Type is text/csv. Otherwise, by default, vault inventory is returned as JSON, and the Content-Type is application/json.
        public let contentType: String?
        /// Indicates the range units accepted. For more information, see RFC2616. 
        public let acceptRanges: String?
        /// The job data, either archive data or inventory data.
        public let body: Data?
        /// The description of an archive.
        public let archiveDescription: String?
        /// The checksum of the data in the response. This header is returned only when retrieving the output for an archive retrieval job. Furthermore, this header appears only under the following conditions:   You get the entire range of the archive.   You request a range to return of the archive that starts and ends on a multiple of 1 MB. For example, if you have an 3.1 MB archive and you specify a range to return that starts at 1 MB and ends at 2 MB, then the x-amz-sha256-tree-hash is returned as a response header.   You request a range of the archive to return that starts on a multiple of 1 MB and goes to the end of the archive. For example, if you have a 3.1 MB archive and you specify a range that starts at 2 MB and ends at 3.1 MB (the end of the archive), then the x-amz-sha256-tree-hash is returned as a response header.  
        public let checksum: String?

        public init(contentRange: String? = nil, status: Int32? = nil, contentType: String? = nil, acceptRanges: String? = nil, body: Data? = nil, archiveDescription: String? = nil, checksum: String? = nil) {
            self.contentRange = contentRange
            self.status = status
            self.contentType = contentType
            self.acceptRanges = acceptRanges
            self.body = body
            self.archiveDescription = archiveDescription
            self.checksum = checksum
        }

        public init(dictionary: [String: Any]) throws {
            self.contentRange = dictionary["Content-Range"] as? String
            self.status = dictionary["status"] as? Int32
            self.contentType = dictionary["Content-Type"] as? String
            self.acceptRanges = dictionary["Accept-Ranges"] as? String
            self.body = dictionary["body"] as? Data
            self.archiveDescription = dictionary["X-amz-archive-description"] as? String
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
        }
    }

    public struct ListProvisionedCapacityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, don't include any hyphens ('-') in the ID. 
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
        }
    }

    public struct UploadMultipartPartOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-sha256-tree-hash": "checksum"]
        }
        /// The SHA256 tree hash that Amazon Glacier computed for the uploaded part.
        public let checksum: String?

        public init(checksum: String? = nil) {
            self.checksum = checksum
        }

        public init(dictionary: [String: Any]) throws {
            self.checksum = dictionary["X-amz-sha256-tree-hash"] as? String
        }
    }

    public struct VaultNotificationConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of one or more events for which Amazon Glacier will send a notification to the specified Amazon SNS topic.
        public let events: [String]?
        /// The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).
        public let sNSTopic: String?

        public init(events: [String]? = nil, sNSTopic: String? = nil) {
            self.events = events
            self.sNSTopic = sNSTopic
        }

        public init(dictionary: [String: Any]) throws {
            self.events = dictionary["Events"] as? [String]
            self.sNSTopic = dictionary["SNSTopic"] as? String
        }
    }

    public struct ListJobsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the marker value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. 
        public let marker: String?
        /// A list of job objects. Each job object contains metadata describing the job.
        public let jobList: [GlacierJobDescription]?

        public init(marker: String? = nil, jobList: [GlacierJobDescription]? = nil) {
            self.marker = marker
            self.jobList = jobList
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let jobList = dictionary["JobList"] as? [[String: Any]] {
                self.jobList = try jobList.map({ try GlacierJobDescription(dictionary: $0) })
            } else { 
                self.jobList = nil
            }
        }
    }

    public struct DataRetrievalPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.
        public let rules: [DataRetrievalRule]?

        public init(rules: [DataRetrievalRule]? = nil) {
            self.rules = rules
        }

        public init(dictionary: [String: Any]) throws {
            if let rules = dictionary["Rules"] as? [[String: Any]] {
                self.rules = try rules.map({ try DataRetrievalRule(dictionary: $0) })
            } else { 
                self.rules = nil
            }
        }
    }

    public struct JobParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Input parameters used for range inventory retrieval.
        public let inventoryRetrievalParameters: InventoryRetrievalJobInput?
        /// The byte range to retrieve for an archive retrieval. in the form "StartByteValue-EndByteValue" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that StartByteValue must be divisible by 1 MB and EndByteValue plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response.  An error occurs if you specify this field for an inventory retrieval job request.
        public let retrievalByteRange: String?
        /// When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".
        public let format: String?
        /// The ID of the archive that you want to retrieve. This field is required only if Type is set to archive-retrieval. An error occurs if you specify this request parameter for an inventory retrieval job request. 
        public let archiveId: String?
        /// The Amazon SNS topic ARN to which Amazon Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.
        public let sNSTopic: String?
        /// The job type. You can initiate a job to retrieve an archive or get an inventory of a vault. Valid values are "archive-retrieval" and "inventory-retrieval".
        public let `type`: String?
        /// The retrieval option to use for the archive retrieval. Valid values are Expedited, Standard, or Bulk. Standard is the default.
        public let tier: String?
        /// The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.
        public let description: String?

        public init(inventoryRetrievalParameters: InventoryRetrievalJobInput? = nil, retrievalByteRange: String? = nil, format: String? = nil, archiveId: String? = nil, sNSTopic: String? = nil, type: String? = nil, tier: String? = nil, description: String? = nil) {
            self.inventoryRetrievalParameters = inventoryRetrievalParameters
            self.retrievalByteRange = retrievalByteRange
            self.format = format
            self.archiveId = archiveId
            self.sNSTopic = sNSTopic
            self.`type` = `type`
            self.tier = tier
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let inventoryRetrievalParameters = dictionary["InventoryRetrievalParameters"] as? [String: Any] { self.inventoryRetrievalParameters = try Glacier.InventoryRetrievalJobInput(dictionary: inventoryRetrievalParameters) } else { self.inventoryRetrievalParameters = nil }
            self.retrievalByteRange = dictionary["RetrievalByteRange"] as? String
            self.format = dictionary["Format"] as? String
            self.archiveId = dictionary["ArchiveId"] as? String
            self.sNSTopic = dictionary["SNSTopic"] as? String
            self.`type` = dictionary["Type"] as? String
            self.tier = dictionary["Tier"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreateVaultInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct GetVaultAccessPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, vaultName: String) {
            self.accountId = accountId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct GetVaultNotificationsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = "vaultNotificationConfig"
        /// Returns the notification configuration set on the vault.
        public let vaultNotificationConfig: VaultNotificationConfig?

        public init(vaultNotificationConfig: VaultNotificationConfig? = nil) {
            self.vaultNotificationConfig = vaultNotificationConfig
        }

        public init(dictionary: [String: Any]) throws {
            if let vaultNotificationConfig = dictionary["vaultNotificationConfig"] as? [String: Any] { self.vaultNotificationConfig = try Glacier.VaultNotificationConfig(dictionary: vaultNotificationConfig) } else { self.vaultNotificationConfig = nil }
        }
    }

    public struct DescribeJobInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "jobId": "jobId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. 
        public let accountId: String
        /// The ID of the job to describe.
        public let jobId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, jobId: String, vaultName: String) {
            self.accountId = accountId
            self.jobId = jobId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let jobId = dictionary["JobId"] as? String else { throw InitializableError.missingRequiredParam("JobId") }
            self.jobId = jobId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct CompleteVaultLockInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["accountId": "accountId", "lockId": "lockId", "vaultName": "vaultName"]
        }
        /// The AccountId value is the AWS account ID. This value must match the AWS account ID associated with the credentials used to sign the request. You can either specify an AWS account ID or optionally a single '-' (hyphen), in which case Amazon Glacier uses the AWS account ID associated with the credentials used to sign the request. If you specify your account ID, do not include any hyphens ('-') in the ID.
        public let accountId: String
        /// The lockId value is the lock ID obtained from a InitiateVaultLock request.
        public let lockId: String
        /// The name of the vault.
        public let vaultName: String

        public init(accountId: String, lockId: String, vaultName: String) {
            self.accountId = accountId
            self.lockId = lockId
            self.vaultName = vaultName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let lockId = dictionary["LockId"] as? String else { throw InitializableError.missingRequiredParam("LockId") }
            self.lockId = lockId
            guard let vaultName = dictionary["VaultName"] as? String else { throw InitializableError.missingRequiredParam("VaultName") }
            self.vaultName = vaultName
        }
    }

    public struct InventoryRetrievalJobInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The start of the date range in UTC for vault inventory retrieval that includes archives created on or after this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public let startDate: String?
        /// Specifies the maximum number of inventory items returned per vault inventory retrieval request. Valid values are greater than or equal to 1.
        public let limit: String?
        /// An opaque string that represents where to continue pagination of the vault inventory retrieval results. You use the marker in a new InitiateJob request to obtain additional inventory items. If there are no more inventory items, this value is null.
        public let marker: String?
        /// The end of the date range in UTC for vault inventory retrieval that includes archives created before this date. This value should be a string in the ISO 8601 date format, for example 2013-03-20T17:03:43Z.
        public let endDate: String?

        public init(startDate: String? = nil, limit: String? = nil, marker: String? = nil, endDate: String? = nil) {
            self.startDate = startDate
            self.limit = limit
            self.marker = marker
            self.endDate = endDate
        }

        public init(dictionary: [String: Any]) throws {
            self.startDate = dictionary["StartDate"] as? String
            self.limit = dictionary["Limit"] as? String
            self.marker = dictionary["Marker"] as? String
            self.endDate = dictionary["EndDate"] as? String
        }
    }

    public struct InitiateVaultLockOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-lock-id": "lockId"]
        }
        /// The lock ID, which is used to complete the vault locking process.
        public let lockId: String?

        public init(lockId: String? = nil) {
            self.lockId = lockId
        }

        public init(dictionary: [String: Any]) throws {
            self.lockId = dictionary["X-amz-lock-id"] as? String
        }
    }

    public struct DescribeVaultOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
        public let sizeInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the vault.
        public let vaultARN: String?
        /// The number of archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.
        public let numberOfArchives: Int64?
        /// The name of the vault.
        public let vaultName: String?
        /// The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
        public let creationDate: String?
        /// The Universal Coordinated Time (UTC) date when Amazon Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example 2012-03-20T17:03:43.221Z.
        public let lastInventoryDate: String?

        public init(sizeInBytes: Int64? = nil, vaultARN: String? = nil, numberOfArchives: Int64? = nil, vaultName: String? = nil, creationDate: String? = nil, lastInventoryDate: String? = nil) {
            self.sizeInBytes = sizeInBytes
            self.vaultARN = vaultARN
            self.numberOfArchives = numberOfArchives
            self.vaultName = vaultName
            self.creationDate = creationDate
            self.lastInventoryDate = lastInventoryDate
        }

        public init(dictionary: [String: Any]) throws {
            self.sizeInBytes = dictionary["SizeInBytes"] as? Int64
            self.vaultARN = dictionary["VaultARN"] as? String
            self.numberOfArchives = dictionary["NumberOfArchives"] as? Int64
            self.vaultName = dictionary["VaultName"] as? String
            self.creationDate = dictionary["CreationDate"] as? String
            self.lastInventoryDate = dictionary["LastInventoryDate"] as? String
        }
    }

}