// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Monitoring {

    public struct AlarmHistoryItem: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The descriptive name for the alarm.
        public let alarmName: String?
        /// The time stamp for the alarm history item.
        public let timestamp: Date?
        /// Data about the alarm, in JSON format.
        public let historyData: String?
        /// A summary of the alarm history, in text format.
        public let historySummary: String?
        /// The type of alarm history item.
        public let historyItemType: HistoryItemType?

        public init(alarmName: String? = nil, timestamp: Date? = nil, historyData: String? = nil, historySummary: String? = nil, historyItemType: HistoryItemType? = nil) {
            self.alarmName = alarmName
            self.timestamp = timestamp
            self.historyData = historyData
            self.historySummary = historySummary
            self.historyItemType = historyItemType
        }

        public init(dictionary: [String: Any]) throws {
            self.alarmName = dictionary["AlarmName"] as? String
            self.timestamp = dictionary["Timestamp"] as? Date
            self.historyData = dictionary["HistoryData"] as? String
            self.historySummary = dictionary["HistorySummary"] as? String
            if let historyItemType = dictionary["HistoryItemType"] as? String { self.historyItemType = HistoryItemType(rawValue: historyItemType) } else { self.historyItemType = nil }
        }
    }

    public struct EnableAlarmActionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let alarmNames = dictionary["AlarmNames"] as? [String] else { throw InitializableError.missingRequiredParam("AlarmNames") }
            self.alarmNames = alarmNames
        }
    }

    public struct MetricDatum: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the metric.
        public let metricName: String
        /// The unit of the metric.
        public let unit: StandardUnit?
        /// The dimensions associated with the metric.
        public let dimensions: [Dimension]?
        /// The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Date?
        /// The value for the metric. Although the parameter accepts numbers of type Double, Amazon CloudWatch rejects values that are either too small or too large. Values must be in the range of 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2). In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public let value: Double?
        /// The statistical values for the metric.
        public let statisticValues: StatisticSet?

        public init(metricName: String, unit: StandardUnit? = nil, dimensions: [Dimension]? = nil, timestamp: Date? = nil, value: Double? = nil, statisticValues: StatisticSet? = nil) {
            self.metricName = metricName
            self.unit = unit
            self.dimensions = dimensions
            self.timestamp = timestamp
            self.value = value
            self.statisticValues = statisticValues
        }

        public init(dictionary: [String: Any]) throws {
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            self.timestamp = dictionary["Timestamp"] as? Date
            self.value = dictionary["Value"] as? Double
            if let statisticValues = dictionary["StatisticValues"] as? [String: Any] { self.statisticValues = try Monitoring.StatisticSet(dictionary: statisticValues) } else { self.statisticValues = nil }
        }
    }

    public struct DescribeAlarmsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The information for the specified alarms.
        public let metricAlarms: [MetricAlarm]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(metricAlarms: [MetricAlarm]? = nil, nextToken: String? = nil) {
            self.metricAlarms = metricAlarms
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let metricAlarms = dictionary["MetricAlarms"] as? [[String: Any]] {
                self.metricAlarms = try metricAlarms.map({ try MetricAlarm(dictionary: $0) })
            } else { 
                self.metricAlarms = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum StateValue: String, CustomStringConvertible {
        case ok = "OK"
        case alarm = "ALARM"
        case insufficient_data = "INSUFFICIENT_DATA"
        public var description: String { return self.rawValue }
    }

    public struct StatisticSet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of samples used for the statistic set.
        public let sampleCount: Double
        /// The minimum value of the sample set.
        public let minimum: Double
        /// The sum of values for the sample set.
        public let sum: Double
        /// The maximum value of the sample set.
        public let maximum: Double

        public init(sampleCount: Double, minimum: Double, sum: Double, maximum: Double) {
            self.sampleCount = sampleCount
            self.minimum = minimum
            self.sum = sum
            self.maximum = maximum
        }

        public init(dictionary: [String: Any]) throws {
            guard let sampleCount = dictionary["SampleCount"] as? Double else { throw InitializableError.missingRequiredParam("SampleCount") }
            self.sampleCount = sampleCount
            guard let minimum = dictionary["Minimum"] as? Double else { throw InitializableError.missingRequiredParam("Minimum") }
            self.minimum = minimum
            guard let sum = dictionary["Sum"] as? Double else { throw InitializableError.missingRequiredParam("Sum") }
            self.sum = sum
            guard let maximum = dictionary["Maximum"] as? Double else { throw InitializableError.missingRequiredParam("Maximum") }
            self.maximum = maximum
        }
    }

    public struct DisableAlarmActionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let alarmNames = dictionary["AlarmNames"] as? [String] else { throw InitializableError.missingRequiredParam("AlarmNames") }
            self.alarmNames = alarmNames
        }
    }

    public struct Datapoint: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of metric values that contributed to the aggregate value of this data point.
        public let sampleCount: Double?
        /// The time stamp used for the data point.
        public let timestamp: Date?
        /// The sum of the metric values for the data point.
        public let sum: Double?
        /// The standard unit for the data point.
        public let unit: StandardUnit?
        /// The percentile statistic for the data point.
        public let extendedStatistics: [String: Double]?
        /// The minimum metric value for the data point.
        public let minimum: Double?
        /// The maximum metric value for the data point.
        public let maximum: Double?
        /// The average of the metric values that correspond to the data point.
        public let average: Double?

        public init(sampleCount: Double? = nil, timestamp: Date? = nil, sum: Double? = nil, unit: StandardUnit? = nil, extendedStatistics: [String: Double]? = nil, minimum: Double? = nil, maximum: Double? = nil, average: Double? = nil) {
            self.sampleCount = sampleCount
            self.timestamp = timestamp
            self.sum = sum
            self.unit = unit
            self.extendedStatistics = extendedStatistics
            self.minimum = minimum
            self.maximum = maximum
            self.average = average
        }

        public init(dictionary: [String: Any]) throws {
            self.sampleCount = dictionary["SampleCount"] as? Double
            self.timestamp = dictionary["Timestamp"] as? Date
            self.sum = dictionary["Sum"] as? Double
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            if let extendedStatistics = dictionary["ExtendedStatistics"] as? [String: Double] {
                self.extendedStatistics = extendedStatistics
            } else { 
                self.extendedStatistics = nil
            }
            self.minimum = dictionary["Minimum"] as? Double
            self.maximum = dictionary["Maximum"] as? Double
            self.average = dictionary["Average"] as? Double
        }
    }

    public struct PutMetricAlarmInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name for the metric associated with the alarm.
        public let metricName: String
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// The period, in seconds, over which the specified statistic is applied.
        public let period: Int32
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover Valid Values (for use with IAM roles): arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let alarmActions: [String]?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public let statistic: Statistic?
        /// The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately. If you specify a unit, you must use a unit that is appropriate for the metric. Otherwise, the Amazon CloudWatch alarm can get stuck in the INSUFFICIENT DATA state. 
        public let unit: StandardUnit?
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The namespace for the metric associated with the alarm.
        public let namespace: String
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover Valid Values (for use with IAM roles): arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let insufficientDataActions: [String]?
        /// The name for the alarm. This name must be unique within the AWS account.
        public let alarmName: String
        /// The number of periods over which data is compared to the specified threshold.
        public let evaluationPeriods: Int32
        ///  The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator
        /// The dimensions for the metric associated with the alarm.
        public let dimensions: [Dimension]?
        /// The description for the alarm.
        public let alarmDescription: String?
        /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover Valid Values (for use with IAM roles): arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:us-east-1:{customer-account}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let oKActions: [String]?

        public init(metricName: String, threshold: Double, period: Int32, extendedStatistic: String? = nil, alarmActions: [String]? = nil, statistic: Statistic? = nil, unit: StandardUnit? = nil, actionsEnabled: Bool? = nil, namespace: String, insufficientDataActions: [String]? = nil, alarmName: String, evaluationPeriods: Int32, comparisonOperator: ComparisonOperator, dimensions: [Dimension]? = nil, alarmDescription: String? = nil, oKActions: [String]? = nil) {
            self.metricName = metricName
            self.threshold = threshold
            self.period = period
            self.extendedStatistic = extendedStatistic
            self.alarmActions = alarmActions
            self.statistic = statistic
            self.unit = unit
            self.actionsEnabled = actionsEnabled
            self.namespace = namespace
            self.insufficientDataActions = insufficientDataActions
            self.alarmName = alarmName
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.alarmDescription = alarmDescription
            self.oKActions = oKActions
        }

        public init(dictionary: [String: Any]) throws {
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            guard let threshold = dictionary["Threshold"] as? Double else { throw InitializableError.missingRequiredParam("Threshold") }
            self.threshold = threshold
            guard let period = dictionary["Period"] as? Int32 else { throw InitializableError.missingRequiredParam("Period") }
            self.period = period
            self.extendedStatistic = dictionary["ExtendedStatistic"] as? String
            self.alarmActions = dictionary["AlarmActions"] as? [String]
            if let statistic = dictionary["Statistic"] as? String { self.statistic = Statistic(rawValue: statistic) } else { self.statistic = nil }
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            self.actionsEnabled = dictionary["ActionsEnabled"] as? Bool
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
            self.insufficientDataActions = dictionary["InsufficientDataActions"] as? [String]
            guard let alarmName = dictionary["AlarmName"] as? String else { throw InitializableError.missingRequiredParam("AlarmName") }
            self.alarmName = alarmName
            guard let evaluationPeriods = dictionary["EvaluationPeriods"] as? Int32 else { throw InitializableError.missingRequiredParam("EvaluationPeriods") }
            self.evaluationPeriods = evaluationPeriods
            guard let rawComparisonOperator = dictionary["ComparisonOperator"] as? String, let comparisonOperator = ComparisonOperator(rawValue: rawComparisonOperator) else { throw InitializableError.missingRequiredParam("ComparisonOperator") }
            self.comparisonOperator = comparisonOperator
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            self.alarmDescription = dictionary["AlarmDescription"] as? String
            self.oKActions = dictionary["OKActions"] as? [String]
        }
    }

    public struct DescribeAlarmHistoryInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the alarm.
        public let alarmName: String?
        /// The maximum number of alarm history records to retrieve.
        public let maxRecords: Int32?
        /// The starting date to retrieve alarm history.
        public let startDate: Date?
        /// The type of alarm histories to retrieve.
        public let historyItemType: HistoryItemType?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// The ending date to retrieve alarm history.
        public let endDate: Date?

        public init(alarmName: String? = nil, maxRecords: Int32? = nil, startDate: Date? = nil, historyItemType: HistoryItemType? = nil, nextToken: String? = nil, endDate: Date? = nil) {
            self.alarmName = alarmName
            self.maxRecords = maxRecords
            self.startDate = startDate
            self.historyItemType = historyItemType
            self.nextToken = nextToken
            self.endDate = endDate
        }

        public init(dictionary: [String: Any]) throws {
            self.alarmName = dictionary["AlarmName"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.startDate = dictionary["StartDate"] as? Date
            if let historyItemType = dictionary["HistoryItemType"] as? String { self.historyItemType = HistoryItemType(rawValue: historyItemType) } else { self.historyItemType = nil }
            self.nextToken = dictionary["NextToken"] as? String
            self.endDate = dictionary["EndDate"] as? Date
        }
    }

    public struct DescribeAlarmsForMetricInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the metric.
        public let metricName: String
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int32?
        /// The percentile statistic for the metric. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics.
        public let statistic: Statistic?
        /// The unit for the metric.
        public let unit: StandardUnit?
        /// The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.
        public let dimensions: [Dimension]?
        /// The namespace of the metric.
        public let namespace: String

        public init(metricName: String, period: Int32? = nil, extendedStatistic: String? = nil, statistic: Statistic? = nil, unit: StandardUnit? = nil, dimensions: [Dimension]? = nil, namespace: String) {
            self.metricName = metricName
            self.period = period
            self.extendedStatistic = extendedStatistic
            self.statistic = statistic
            self.unit = unit
            self.dimensions = dimensions
            self.namespace = namespace
        }

        public init(dictionary: [String: Any]) throws {
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            self.period = dictionary["Period"] as? Int32
            self.extendedStatistic = dictionary["ExtendedStatistic"] as? String
            if let statistic = dictionary["Statistic"] as? String { self.statistic = Statistic(rawValue: statistic) } else { self.statistic = nil }
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
        }
    }

    public struct DescribeAlarmsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of alarm descriptions to retrieve.
        public let maxRecords: Int32?
        /// The alarm name prefix. You cannot specify AlarmNames if this parameter is specified.
        public let alarmNamePrefix: String?
        /// The action name prefix.
        public let actionPrefix: String?
        /// The names of the alarms.
        public let alarmNames: [String]?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// The state value to be used in matching alarms.
        public let stateValue: StateValue?

        public init(maxRecords: Int32? = nil, alarmNamePrefix: String? = nil, actionPrefix: String? = nil, alarmNames: [String]? = nil, nextToken: String? = nil, stateValue: StateValue? = nil) {
            self.maxRecords = maxRecords
            self.alarmNamePrefix = alarmNamePrefix
            self.actionPrefix = actionPrefix
            self.alarmNames = alarmNames
            self.nextToken = nextToken
            self.stateValue = stateValue
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.alarmNamePrefix = dictionary["AlarmNamePrefix"] as? String
            self.actionPrefix = dictionary["ActionPrefix"] as? String
            self.alarmNames = dictionary["AlarmNames"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            if let stateValue = dictionary["StateValue"] as? String { self.stateValue = StateValue(rawValue: stateValue) } else { self.stateValue = nil }
        }
    }

    public struct ListMetricsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?
        /// The metrics.
        public let metrics: [Metric]?

        public init(nextToken: String? = nil, metrics: [Metric]? = nil) {
            self.nextToken = nextToken
            self.metrics = metrics
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let metrics = dictionary["Metrics"] as? [[String: Any]] {
                self.metrics = try metrics.map({ try Metric(dictionary: $0) })
            } else { 
                self.metrics = nil
            }
        }
    }

    public struct MetricAlarm: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the metric associated with the alarm.
        public let metricName: String?
        /// The value to compare with the specified statistic.
        public let threshold: Double?
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int32?
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let alarmActions: [String]?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public let statistic: Statistic?
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The time stamp of the last update to the alarm state.
        public let stateUpdatedTimestamp: Date?
        /// The unit of the metric associated with the alarm.
        public let unit: StandardUnit?
        /// An explanation for the alarm state, in JSON format.
        public let stateReasonData: String?
        /// An explanation for the alarm state, in text format.
        public let stateReason: String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let insufficientDataActions: [String]?
        /// The namespace of the metric associated with the alarm.
        public let namespace: String?
        /// The state value for the alarm.
        public let stateValue: StateValue?
        /// The name of the alarm.
        public let alarmName: String?
        /// The time stamp of the last update to the alarm configuration.
        public let alarmConfigurationUpdatedTimestamp: Date?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmArn: String?
        /// The number of periods over which data is compared to the specified threshold.
        public let evaluationPeriods: Int32?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator?
        /// The dimensions for the metric associated with the alarm.
        public let dimensions: [Dimension]?
        /// The description of the alarm.
        public let alarmDescription: String?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let oKActions: [String]?

        public init(metricName: String? = nil, threshold: Double? = nil, period: Int32? = nil, extendedStatistic: String? = nil, alarmActions: [String]? = nil, statistic: Statistic? = nil, actionsEnabled: Bool? = nil, stateUpdatedTimestamp: Date? = nil, unit: StandardUnit? = nil, stateReasonData: String? = nil, stateReason: String? = nil, insufficientDataActions: [String]? = nil, namespace: String? = nil, stateValue: StateValue? = nil, alarmName: String? = nil, alarmConfigurationUpdatedTimestamp: Date? = nil, alarmArn: String? = nil, evaluationPeriods: Int32? = nil, comparisonOperator: ComparisonOperator? = nil, dimensions: [Dimension]? = nil, alarmDescription: String? = nil, oKActions: [String]? = nil) {
            self.metricName = metricName
            self.threshold = threshold
            self.period = period
            self.extendedStatistic = extendedStatistic
            self.alarmActions = alarmActions
            self.statistic = statistic
            self.actionsEnabled = actionsEnabled
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.unit = unit
            self.stateReasonData = stateReasonData
            self.stateReason = stateReason
            self.insufficientDataActions = insufficientDataActions
            self.namespace = namespace
            self.stateValue = stateValue
            self.alarmName = alarmName
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmArn = alarmArn
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.alarmDescription = alarmDescription
            self.oKActions = oKActions
        }

        public init(dictionary: [String: Any]) throws {
            self.metricName = dictionary["MetricName"] as? String
            self.threshold = dictionary["Threshold"] as? Double
            self.period = dictionary["Period"] as? Int32
            self.extendedStatistic = dictionary["ExtendedStatistic"] as? String
            self.alarmActions = dictionary["AlarmActions"] as? [String]
            if let statistic = dictionary["Statistic"] as? String { self.statistic = Statistic(rawValue: statistic) } else { self.statistic = nil }
            self.actionsEnabled = dictionary["ActionsEnabled"] as? Bool
            self.stateUpdatedTimestamp = dictionary["StateUpdatedTimestamp"] as? Date
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            self.stateReasonData = dictionary["StateReasonData"] as? String
            self.stateReason = dictionary["StateReason"] as? String
            self.insufficientDataActions = dictionary["InsufficientDataActions"] as? [String]
            self.namespace = dictionary["Namespace"] as? String
            if let stateValue = dictionary["StateValue"] as? String { self.stateValue = StateValue(rawValue: stateValue) } else { self.stateValue = nil }
            self.alarmName = dictionary["AlarmName"] as? String
            self.alarmConfigurationUpdatedTimestamp = dictionary["AlarmConfigurationUpdatedTimestamp"] as? Date
            self.alarmArn = dictionary["AlarmArn"] as? String
            self.evaluationPeriods = dictionary["EvaluationPeriods"] as? Int32
            if let comparisonOperator = dictionary["ComparisonOperator"] as? String { self.comparisonOperator = ComparisonOperator(rawValue: comparisonOperator) } else { self.comparisonOperator = nil }
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            self.alarmDescription = dictionary["AlarmDescription"] as? String
            self.oKActions = dictionary["OKActions"] as? [String]
        }
    }

    public enum StandardUnit: String, CustomStringConvertible {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytes_second = "Bytes/Second"
        case kilobytes_second = "Kilobytes/Second"
        case megabytes_second = "Megabytes/Second"
        case gigabytes_second = "Gigabytes/Second"
        case terabytes_second = "Terabytes/Second"
        case bits_second = "Bits/Second"
        case kilobits_second = "Kilobits/Second"
        case megabits_second = "Megabits/Second"
        case gigabits_second = "Gigabits/Second"
        case terabits_second = "Terabits/Second"
        case count_second = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public struct Metric: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the metric.
        public let metricName: String?
        /// The dimensions for the metric.
        public let dimensions: [Dimension]?
        /// The namespace of the metric.
        public let namespace: String?

        public init(metricName: String? = nil, dimensions: [Dimension]? = nil, namespace: String? = nil) {
            self.metricName = metricName
            self.dimensions = dimensions
            self.namespace = namespace
        }

        public init(dictionary: [String: Any]) throws {
            self.metricName = dictionary["MetricName"] as? String
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            self.namespace = dictionary["Namespace"] as? String
        }
    }

    public struct ListMetricsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The namespace to filter against.
        public let namespace: String?
        /// The name of the metric to filter against.
        public let metricName: String?
        /// The dimensions to filter against.
        public let dimensions: [DimensionFilter]?
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?

        public init(namespace: String? = nil, metricName: String? = nil, dimensions: [DimensionFilter]? = nil, nextToken: String? = nil) {
            self.namespace = namespace
            self.metricName = metricName
            self.dimensions = dimensions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.namespace = dictionary["Namespace"] as? String
            self.metricName = dictionary["MetricName"] as? String
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try DimensionFilter(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeleteAlarmsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The alarms to be deleted.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let alarmNames = dictionary["AlarmNames"] as? [String] else { throw InitializableError.missingRequiredParam("AlarmNames") }
            self.alarmNames = alarmNames
        }
    }

    public struct PutMetricDataInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The namespace for the metric data. You cannot specify a namespace that begins with "AWS/". Namespaces that begin with "AWS/" are reserved for use by Amazon Web Services products.
        public let namespace: String
        /// The data for the metric.
        public let metricData: [MetricDatum]

        public init(namespace: String, metricData: [MetricDatum]) {
            self.namespace = namespace
            self.metricData = metricData
        }

        public init(dictionary: [String: Any]) throws {
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
            guard let metricData = dictionary["MetricData"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("MetricData") }
            self.metricData = try metricData.map({ try MetricDatum(dictionary: $0) })
        }
    }

    public struct GetMetricStatisticsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time stamp that determines the first data point to return. Note that start times are evaluated relative to the time that CloudWatch receives the request. The value specified is inclusive; results include data points with the specified time stamp. The time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z). CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.   Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.   Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.  
        public let startTime: Date
        /// The name of the metric, with or without spaces.
        public let metricName: String
        /// The granularity, in seconds, of the returned data points. A period can be as short as one minute (60 seconds) and must be a multiple of 60. The default value is 60. If the StartTime parameter specifies a time stamp that is greater than 15 days ago, you must specify the period as follows or no data points in that time range is returned:   Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).   Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).  
        public let period: Int32
        /// The time stamp that determines the last data point to return. The value specified is exclusive; results will include data points up to the specified time stamp. The time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).
        public let endTime: Date
        /// The percentile statistics. Specify values between p0.0 and p100.
        public let extendedStatistics: [String]?
        /// The dimensions. CloudWatch treats each unique combination of dimensions as a separate metric. You can't retrieve statistics using combinations of dimensions that were not specially published. You must specify the same dimensions that were used when the metrics were created. For an example, see Dimension Combinations in the Amazon CloudWatch User Guide.
        public let dimensions: [Dimension]?
        /// The unit for a given metric. Metrics may be reported in multiple units. Not supplying a unit results in all units being returned. If the metric only ever reports one unit, specifying a unit has no effect.
        public let unit: StandardUnit?
        /// The metric statistics, other than percentile. For percentile statistics, use ExtendedStatistic.
        public let statistics: [Statistic]?
        /// The namespace of the metric, with or without spaces.
        public let namespace: String

        public init(startTime: Date, metricName: String, period: Int32, endTime: Date, extendedStatistics: [String]? = nil, dimensions: [Dimension]? = nil, unit: StandardUnit? = nil, statistics: [Statistic]? = nil, namespace: String) {
            self.startTime = startTime
            self.metricName = metricName
            self.period = period
            self.endTime = endTime
            self.extendedStatistics = extendedStatistics
            self.dimensions = dimensions
            self.unit = unit
            self.statistics = statistics
            self.namespace = namespace
        }

        public init(dictionary: [String: Any]) throws {
            guard let startTime = dictionary["StartTime"] as? Date else { throw InitializableError.missingRequiredParam("StartTime") }
            self.startTime = startTime
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            guard let period = dictionary["Period"] as? Int32 else { throw InitializableError.missingRequiredParam("Period") }
            self.period = period
            guard let endTime = dictionary["EndTime"] as? Date else { throw InitializableError.missingRequiredParam("EndTime") }
            self.endTime = endTime
            self.extendedStatistics = dictionary["ExtendedStatistics"] as? [String]
            if let dimensions = dictionary["Dimensions"] as? [[String: Any]] {
                self.dimensions = try dimensions.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimensions = nil
            }
            if let unit = dictionary["Unit"] as? String { self.unit = StandardUnit(rawValue: unit) } else { self.unit = nil }
            if let statistics = dictionary["Statistics"] as? [String] { self.statistics = statistics.flatMap({ Statistic(rawValue: $0)}) } else { self.statistics = nil }
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
        }
    }

    public struct Dimension: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value representing the dimension measurement.
        public let value: String
        /// The name of the dimension.
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct GetMetricStatisticsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A label for the specified metric.
        public let label: String?
        /// The data points for the specified metric.
        public let datapoints: [Datapoint]?

        public init(label: String? = nil, datapoints: [Datapoint]? = nil) {
            self.label = label
            self.datapoints = datapoints
        }

        public init(dictionary: [String: Any]) throws {
            self.label = dictionary["Label"] as? String
            if let datapoints = dictionary["Datapoints"] as? [[String: Any]] {
                self.datapoints = try datapoints.map({ try Datapoint(dictionary: $0) })
            } else { 
                self.datapoints = nil
            }
        }
    }

    public enum Statistic: String, CustomStringConvertible {
        case samplecount = "SampleCount"
        case average = "Average"
        case sum = "Sum"
        case minimum = "Minimum"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAlarmHistoryOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?
        /// The alarm histories, in JSON format.
        public let alarmHistoryItems: [AlarmHistoryItem]?

        public init(nextToken: String? = nil, alarmHistoryItems: [AlarmHistoryItem]? = nil) {
            self.nextToken = nextToken
            self.alarmHistoryItems = alarmHistoryItems
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let alarmHistoryItems = dictionary["AlarmHistoryItems"] as? [[String: Any]] {
                self.alarmHistoryItems = try alarmHistoryItems.map({ try AlarmHistoryItem(dictionary: $0) })
            } else { 
                self.alarmHistoryItems = nil
            }
        }
    }

    public struct SetAlarmStateInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name for the alarm. This name must be unique within the AWS account. The maximum length is 255 characters.
        public let alarmName: String
        /// The reason that this alarm is set to this specific state, in JSON format.
        public let stateReasonData: String?
        /// The reason that this alarm is set to this specific state, in text format.
        public let stateReason: String
        /// The value of the state.
        public let stateValue: StateValue

        public init(alarmName: String, stateReasonData: String? = nil, stateReason: String, stateValue: StateValue) {
            self.alarmName = alarmName
            self.stateReasonData = stateReasonData
            self.stateReason = stateReason
            self.stateValue = stateValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let alarmName = dictionary["AlarmName"] as? String else { throw InitializableError.missingRequiredParam("AlarmName") }
            self.alarmName = alarmName
            self.stateReasonData = dictionary["StateReasonData"] as? String
            guard let stateReason = dictionary["StateReason"] as? String else { throw InitializableError.missingRequiredParam("StateReason") }
            self.stateReason = stateReason
            guard let rawStateValue = dictionary["StateValue"] as? String, let stateValue = StateValue(rawValue: rawStateValue) else { throw InitializableError.missingRequiredParam("StateValue") }
            self.stateValue = stateValue
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public enum HistoryItemType: String, CustomStringConvertible {
        case configurationupdate = "ConfigurationUpdate"
        case stateupdate = "StateUpdate"
        case action = "Action"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAlarmsForMetricOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The information for each alarm with the specified metric.
        public let metricAlarms: [MetricAlarm]?

        public init(metricAlarms: [MetricAlarm]? = nil) {
            self.metricAlarms = metricAlarms
        }

        public init(dictionary: [String: Any]) throws {
            if let metricAlarms = dictionary["MetricAlarms"] as? [[String: Any]] {
                self.metricAlarms = try metricAlarms.map({ try MetricAlarm(dictionary: $0) })
            } else { 
                self.metricAlarms = nil
            }
        }
    }

    public struct DimensionFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the dimension to be matched.
        public let value: String?
        /// The dimension name to be matched.
        public let name: String

        public init(value: String? = nil, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

}