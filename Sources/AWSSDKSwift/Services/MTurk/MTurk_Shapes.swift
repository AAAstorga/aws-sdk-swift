// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension MTurk {

    public enum HITAccessActions: String, CustomStringConvertible, Codable {
        case accept = "Accept"
        case previewandaccept = "PreviewAndAccept"
        case discoverpreviewandaccept = "DiscoverPreviewAndAccept"
        public var description: String { return self.rawValue }
    }

    public struct NotifyWorkersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageText", required: true, type: .string), 
            AWSShapeMember(label: "Subject", required: true, type: .string), 
            AWSShapeMember(label: "WorkerIds", required: true, type: .list)
        ]
        /// The text of the email message to send. Can include up to 4,096 characters
        public let messageText: String
        /// The subject line of the email message to send. Can include up to 200 characters.
        public let subject: String
        /// A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.
        public let workerIds: [String]

        public init(messageText: String, subject: String, workerIds: [String]) {
            self.messageText = messageText
            self.subject = subject
            self.workerIds = workerIds
        }

        private enum CodingKeys: String, CodingKey {
            case messageText = "MessageText"
            case subject = "Subject"
            case workerIds = "WorkerIds"
        }
    }

    public struct NotifyWorkersFailureStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyWorkersFailureMessage", required: false, type: .string), 
            AWSShapeMember(label: "NotifyWorkersFailureCode", required: false, type: .enum), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string)
        ]
        ///  A message detailing the reason the Worker could not be notified. 
        public let notifyWorkersFailureMessage: String?
        ///  Encoded value for the failure type. 
        public let notifyWorkersFailureCode: NotifyWorkersFailureCode?
        ///  The ID of the Worker.
        public let workerId: String?

        public init(notifyWorkersFailureMessage: String? = nil, notifyWorkersFailureCode: NotifyWorkersFailureCode? = nil, workerId: String? = nil) {
            self.notifyWorkersFailureMessage = notifyWorkersFailureMessage
            self.notifyWorkersFailureCode = notifyWorkersFailureCode
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case notifyWorkersFailureMessage = "NotifyWorkersFailureMessage"
            case notifyWorkersFailureCode = "NotifyWorkersFailureCode"
            case workerId = "WorkerId"
        }
    }

    public struct DeleteWorkerBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string)
        ]
        /// A message that explains the reason for unblocking the Worker. The Worker does not see this message.
        public let reason: String?
        /// The ID of the Worker to unblock.
        public let workerId: String

        public init(reason: String? = nil, workerId: String) {
            self.reason = reason
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
        }
    }

    public enum ReviewActionStatus: String, CustomStringConvertible, Codable {
        case intended = "Intended"
        case succeeded = "Succeeded"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct UpdateExpirationForHITResponse: AWSShape {

    }

    public struct ApproveAssignmentResponse: AWSShape {

    }

    public struct ListHITsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Pagination token
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct AcceptQualificationRequestRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationRequestId", required: true, type: .string), 
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer)
        ]
        /// The ID of the Qualification request, as returned by the GetQualificationRequests operation.
        public let qualificationRequestId: String
        ///  The value of the Qualification. You can omit this value if you are using the presence or absence of the Qualification as the basis for a HIT requirement. 
        public let integerValue: Int32?

        public init(qualificationRequestId: String, integerValue: Int32? = nil) {
            self.qualificationRequestId = qualificationRequestId
            self.integerValue = integerValue
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationRequestId = "QualificationRequestId"
            case integerValue = "IntegerValue"
        }
    }

    public struct GetQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// The ID of the QualificationType.
        public let qualificationTypeId: String

        public init(qualificationTypeId: String) {
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct Locale: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Country", required: true, type: .string), 
            AWSShapeMember(label: "Subdivision", required: false, type: .string)
        ]
        ///  The country of the locale. Must be a valid ISO 3166 country code. For example, the code US refers to the United States of America. 
        public let country: String
        /// The state or subdivision of the locale. A valid ISO 3166-2 subdivision code. For example, the code WA refers to the state of Washington.
        public let subdivision: String?

        public init(country: String, subdivision: String? = nil) {
            self.country = country
            self.subdivision = subdivision
        }

        private enum CodingKeys: String, CodingKey {
            case country = "Country"
            case subdivision = "Subdivision"
        }
    }

    public struct GetHITResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the requested HIT data.
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct GetHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the HIT to be retrieved.
        public let hITId: String

        public init(hITId: String) {
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
        }
    }

    public struct AcceptQualificationRequestResponse: AWSShape {

    }

    public struct GetFileUploadURLResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileUploadURL", required: false, type: .string)
        ]
        ///  A temporary URL for the file that the Worker uploaded for the answer. 
        public let fileUploadURL: String?

        public init(fileUploadURL: String? = nil) {
            self.fileUploadURL = fileUploadURL
        }

        private enum CodingKeys: String, CodingKey {
            case fileUploadURL = "FileUploadURL"
        }
    }

    public struct ReviewResultDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubjectType", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "SubjectId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "QuestionId", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        ///  The type of the object from the SubjectId field.
        public let subjectType: String?
        ///  A unique identifier of the Review action result. 
        public let actionId: String?
        /// The HITID or AssignmentId about which this result was taken. Note that HIT-level Review Policies will often emit results about both the HIT itself and its Assignments, while Assignment-level review policies generally only emit results about the Assignment itself. 
        public let subjectId: String?
        ///  Key identifies the particular piece of reviewed information. 
        public let key: String?
        ///  Specifies the QuestionId the result is describing. Depending on whether the TargetType is a HIT or Assignment this results could specify multiple values. If TargetType is HIT and QuestionId is absent, then the result describes results of the HIT, including the HIT agreement score. If ObjectType is Assignment and QuestionId is absent, then the result describes the Worker's performance on the HIT. 
        public let questionId: String?
        ///  The values of Key provided by the review policies you have selected. 
        public let value: String?

        public init(subjectType: String? = nil, actionId: String? = nil, subjectId: String? = nil, key: String? = nil, questionId: String? = nil, value: String? = nil) {
            self.subjectType = subjectType
            self.actionId = actionId
            self.subjectId = subjectId
            self.key = key
            self.questionId = questionId
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case subjectType = "SubjectType"
            case actionId = "ActionId"
            case subjectId = "SubjectId"
            case key = "Key"
            case questionId = "QuestionId"
            case value = "Value"
        }
    }

    public struct UpdateQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeStatus", required: false, type: .enum), 
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string), 
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long)
        ]
        /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
        public let autoGrantedValue: Int32?
        /// The new description of the Qualification type.
        public let description: String?
        /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
        public let autoGranted: Bool?
        /// The ID of the Qualification type to update.
        public let qualificationTypeId: String
        /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
        public let test: String?
        /// The new status of the Qualification type - Active | Inactive
        public let qualificationTypeStatus: QualificationTypeStatus?
        /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
        public let testDurationInSeconds: Int64?
        /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.
        public let answerKey: String?
        /// The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.
        public let retryDelayInSeconds: Int64?

        public init(autoGrantedValue: Int32? = nil, description: String? = nil, autoGranted: Bool? = nil, qualificationTypeId: String, test: String? = nil, qualificationTypeStatus: QualificationTypeStatus? = nil, testDurationInSeconds: Int64? = nil, answerKey: String? = nil, retryDelayInSeconds: Int64? = nil) {
            self.autoGrantedValue = autoGrantedValue
            self.description = description
            self.autoGranted = autoGranted
            self.qualificationTypeId = qualificationTypeId
            self.test = test
            self.qualificationTypeStatus = qualificationTypeStatus
            self.testDurationInSeconds = testDurationInSeconds
            self.answerKey = answerKey
            self.retryDelayInSeconds = retryDelayInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case autoGrantedValue = "AutoGrantedValue"
            case description = "Description"
            case autoGranted = "AutoGranted"
            case qualificationTypeId = "QualificationTypeId"
            case test = "Test"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case testDurationInSeconds = "TestDurationInSeconds"
            case answerKey = "AnswerKey"
            case retryDelayInSeconds = "RetryDelayInSeconds"
        }
    }

    public struct ListBonusPaymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified
        public let hITId: String?
        /// The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified
        public let assignmentId: String?
        public let maxResults: Int32?
        /// Pagination token
        public let nextToken: String?

        public init(hITId: String? = nil, assignmentId: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.hITId = hITId
            self.assignmentId = assignmentId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case assignmentId = "AssignmentId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BonusPayment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "GrantTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "BonusAmount", required: false, type: .string)
        ]
        /// The ID of the assignment associated with this bonus payment.
        public let assignmentId: String?
        /// The date and time of when the bonus was granted.
        public let grantTime: TimeStamp?
        /// The Reason text given when the bonus was granted, if any.
        public let reason: String?
        /// The ID of the Worker to whom the bonus was paid.
        public let workerId: String?
        public let bonusAmount: String?

        public init(assignmentId: String? = nil, grantTime: TimeStamp? = nil, reason: String? = nil, workerId: String? = nil, bonusAmount: String? = nil) {
            self.assignmentId = assignmentId
            self.grantTime = grantTime
            self.reason = reason
            self.workerId = workerId
            self.bonusAmount = bonusAmount
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
            case grantTime = "GrantTime"
            case reason = "Reason"
            case workerId = "WorkerId"
            case bonusAmount = "BonusAmount"
        }
    }

    public struct ListWorkerBlocksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let maxResults: Int32?
        /// Pagination token
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public enum NotifyWorkersFailureCode: String, CustomStringConvertible, Codable {
        case softfailure = "SoftFailure"
        case hardfailure = "HardFailure"
        public var description: String { return self.rawValue }
    }

    public struct ListReviewableHITsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "HITTypeId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  Can be either Reviewable or Reviewing. Reviewable is the default value. 
        public let status: ReviewableHITStatus?
        ///  The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered 
        public let hITTypeId: String?
        ///  Limit the number of results returned. 
        public let maxResults: Int32?
        /// Pagination Token
        public let nextToken: String?

        public init(status: ReviewableHITStatus? = nil, hITTypeId: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.status = status
            self.hITTypeId = hITTypeId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case hITTypeId = "HITTypeId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListAssignmentsForHITResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Assignments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        ///  The collection of Assignment data structures returned by this call.
        public let assignments: [Assignment]?
        public let nextToken: String?
        ///  The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
        public let numResults: Int32?

        public init(assignments: [Assignment]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.assignments = assignments
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case assignments = "Assignments"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct DeleteWorkerBlockResponse: AWSShape {

    }

    public struct NotifyWorkersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotifyWorkersFailureStatuses", required: false, type: .list)
        ]
        ///  When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects. 
        public let notifyWorkersFailureStatuses: [NotifyWorkersFailureStatus]?

        public init(notifyWorkersFailureStatuses: [NotifyWorkersFailureStatus]? = nil) {
            self.notifyWorkersFailureStatuses = notifyWorkersFailureStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case notifyWorkersFailureStatuses = "NotifyWorkersFailureStatuses"
        }
    }

    public struct ListQualificationTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MustBeOwnedByCaller", required: false, type: .boolean), 
            AWSShapeMember(label: "MustBeRequestable", required: true, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Query", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        ///  Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types. 
        public let mustBeOwnedByCaller: Bool?
        /// Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False. 
        public let mustBeRequestable: Bool
        public let nextToken: String?
        ///  A text query against all of the searchable attributes of Qualification types. 
        public let query: String?
        ///  The maximum number of results to return in a single call. 
        public let maxResults: Int32?

        public init(mustBeOwnedByCaller: Bool? = nil, mustBeRequestable: Bool, nextToken: String? = nil, query: String? = nil, maxResults: Int32? = nil) {
            self.mustBeOwnedByCaller = mustBeOwnedByCaller
            self.mustBeRequestable = mustBeRequestable
            self.nextToken = nextToken
            self.query = query
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case mustBeOwnedByCaller = "MustBeOwnedByCaller"
            case mustBeRequestable = "MustBeRequestable"
            case nextToken = "NextToken"
            case query = "Query"
            case maxResults = "MaxResults"
        }
    }

    public struct ListHITsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "HITs", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
        public let numResults: Int32?
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?
        public let nextToken: String?

        public init(numResults: Int32? = nil, hITs: [HIT]? = nil, nextToken: String? = nil) {
            self.numResults = numResults
            self.hITs = hITs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case numResults = "NumResults"
            case hITs = "HITs"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateQualificationTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        ///  Contains a QualificationType data structure.
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public struct CreateHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reward", required: true, type: .string), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string), 
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "HITLayoutParameters", required: false, type: .list), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "LifetimeInSeconds", required: true, type: .long)
        ]
        ///  The amount of money the Requester will pay a Worker for successfully completing the HIT. 
        public let reward: String
        ///  The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.   Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. 
        public let hITLayoutId: String?
        ///  The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let assignmentReviewPolicy: ReviewPolicy?
        ///  The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let hITReviewPolicy: ReviewPolicy?
        ///  One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs. 
        public let keywords: String?
        ///  An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.   The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.   The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. 
        public let requesterAnnotation: String?
        ///  The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept. 
        public let assignmentDurationInSeconds: Int64
        ///  The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. 
        public let hITLayoutParameters: [HITLayoutParameter]?
        ///  The data the person completing the HIT uses to produce the results.   Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.  Either a Question parameter or a HITLayoutId parameter must be provided.
        public let question: String?
        ///  Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure. 
        public let qualificationRequirements: [QualificationRequirement]?
        ///  A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.    Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.  
        public let uniqueRequestToken: String?
        ///  A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it. 
        public let description: String
        ///  The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned. 
        public let title: String
        ///  An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. 
        public let lifetimeInSeconds: Int64

        public init(reward: String, hITLayoutId: String? = nil, assignmentReviewPolicy: ReviewPolicy? = nil, hITReviewPolicy: ReviewPolicy? = nil, keywords: String? = nil, requesterAnnotation: String? = nil, maxAssignments: Int32? = nil, assignmentDurationInSeconds: Int64, autoApprovalDelayInSeconds: Int64? = nil, hITLayoutParameters: [HITLayoutParameter]? = nil, question: String? = nil, qualificationRequirements: [QualificationRequirement]? = nil, uniqueRequestToken: String? = nil, description: String, title: String, lifetimeInSeconds: Int64) {
            self.reward = reward
            self.hITLayoutId = hITLayoutId
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.hITReviewPolicy = hITReviewPolicy
            self.keywords = keywords
            self.requesterAnnotation = requesterAnnotation
            self.maxAssignments = maxAssignments
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.hITLayoutParameters = hITLayoutParameters
            self.question = question
            self.qualificationRequirements = qualificationRequirements
            self.uniqueRequestToken = uniqueRequestToken
            self.description = description
            self.title = title
            self.lifetimeInSeconds = lifetimeInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case reward = "Reward"
            case hITLayoutId = "HITLayoutId"
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case hITReviewPolicy = "HITReviewPolicy"
            case keywords = "Keywords"
            case requesterAnnotation = "RequesterAnnotation"
            case maxAssignments = "MaxAssignments"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case hITLayoutParameters = "HITLayoutParameters"
            case question = "Question"
            case qualificationRequirements = "QualificationRequirements"
            case uniqueRequestToken = "UniqueRequestToken"
            case description = "Description"
            case title = "Title"
            case lifetimeInSeconds = "LifetimeInSeconds"
        }
    }

    public struct GetAssignmentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Assignment", required: false, type: .structure), 
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  The assignment. The response includes one Assignment element. 
        public let assignment: Assignment?
        ///  The HIT associated with this assignment. The response includes one HIT element.
        public let hit: HIT?

        public init(assignment: Assignment? = nil, hit: HIT? = nil) {
            self.assignment = assignment
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case assignment = "Assignment"
            case hit = "HIT"
        }
    }

    public enum HITReviewStatus: String, CustomStringConvertible, Codable {
        case notreviewed = "NotReviewed"
        case markedforreview = "MarkedForReview"
        case reviewedappropriate = "ReviewedAppropriate"
        case reviewedinappropriate = "ReviewedInappropriate"
        public var description: String { return self.rawValue }
    }

    public struct GetAccountBalanceRequest: AWSShape {

    }

    public struct UpdateNotificationSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITTypeId", required: true, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Notification", required: false, type: .structure)
        ]
        ///  The ID of the HIT type whose notification specification is being updated. 
        public let hITTypeId: String
        ///  Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed. 
        public let active: Bool?
        ///  The notification specification for the HIT type. 
        public let notification: NotificationSpecification?

        public init(hITTypeId: String, active: Bool? = nil, notification: NotificationSpecification? = nil) {
            self.hITTypeId = hITTypeId
            self.active = active
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case hITTypeId = "HITTypeId"
            case active = "Active"
            case notification = "Notification"
        }
    }

    public struct ReviewPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .list)
        ]
        ///  Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 
        public let policyName: String
        /// Name of the parameter from the Review policy.
        public let parameters: [PolicyParameter]?

        public init(policyName: String, parameters: [PolicyParameter]? = nil) {
            self.policyName = policyName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case parameters = "Parameters"
        }
    }

    public struct UpdateHITTypeOfHITResponse: AWSShape {

    }

    public struct CreateAdditionalAssignmentsForHITResponse: AWSShape {

    }

    public struct UpdateExpirationForHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "ExpireAt", required: true, type: .timestamp)
        ]
        ///  The HIT to update. 
        public let hITId: String
        ///  The date and time at which you want the HIT to expire 
        public let expireAt: TimeStamp

        public init(hITId: String, expireAt: TimeStamp) {
            self.hITId = hITId
            self.expireAt = expireAt
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case expireAt = "ExpireAt"
        }
    }

    public struct DisassociateQualificationFromWorkerResponse: AWSShape {

    }

    public struct GetAssignmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        /// The ID of the Assignment to be retrieved.
        public let assignmentId: String

        public init(assignmentId: String) {
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentId = "AssignmentId"
        }
    }

    public struct UpdateHITReviewStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Revert", required: false, type: .boolean), 
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        ///  Specifies how to update the HIT status. Default is False.     Setting this to false will only transition a HIT from Reviewable to Reviewing     Setting this to true will only transition a HIT from Reviewing to Reviewable   
        public let revert: Bool?
        ///  The ID of the HIT to update. 
        public let hITId: String

        public init(revert: Bool? = nil, hITId: String) {
            self.revert = revert
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case revert = "Revert"
            case hITId = "HITId"
        }
    }

    public struct CreateQualificationTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        /// The created Qualification type, returned as a QualificationType data structure.
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public enum Comparator: String, CustomStringConvertible, Codable {
        case lessthan = "LessThan"
        case lessthanorequalto = "LessThanOrEqualTo"
        case greaterthan = "GreaterThan"
        case greaterthanorequalto = "GreaterThanOrEqualTo"
        case equalto = "EqualTo"
        case notequalto = "NotEqualTo"
        case exists = "Exists"
        case doesnotexist = "DoesNotExist"
        case `in` = "In"
        case notin = "NotIn"
        public var description: String { return self.rawValue }
    }

    public struct Qualification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "LocaleValue", required: false, type: .structure), 
            AWSShapeMember(label: "GrantTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string)
        ]
        ///  The value (score) of the Qualification, if the Qualification has an integer value.
        public let integerValue: Int32?
        ///  The ID of the Qualification type for the Qualification.
        public let qualificationTypeId: String?
        ///  The status of the Qualification. Valid values are Granted | Revoked.
        public let status: QualificationStatus?
        public let localeValue: Locale?
        ///  The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.
        public let grantTime: TimeStamp?
        ///  The ID of the Worker who possesses the Qualification. 
        public let workerId: String?

        public init(integerValue: Int32? = nil, qualificationTypeId: String? = nil, status: QualificationStatus? = nil, localeValue: Locale? = nil, grantTime: TimeStamp? = nil, workerId: String? = nil) {
            self.integerValue = integerValue
            self.qualificationTypeId = qualificationTypeId
            self.status = status
            self.localeValue = localeValue
            self.grantTime = grantTime
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case integerValue = "IntegerValue"
            case qualificationTypeId = "QualificationTypeId"
            case status = "Status"
            case localeValue = "LocaleValue"
            case grantTime = "GrantTime"
            case workerId = "WorkerId"
        }
    }

    public struct AssociateQualificationWithWorkerResponse: AWSShape {

    }

    public struct GetAccountBalanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OnHoldBalance", required: false, type: .string), 
            AWSShapeMember(label: "AvailableBalance", required: false, type: .string)
        ]
        public let onHoldBalance: String?
        public let availableBalance: String?

        public init(onHoldBalance: String? = nil, availableBalance: String? = nil) {
            self.onHoldBalance = onHoldBalance
            self.availableBalance = availableBalance
        }

        private enum CodingKeys: String, CodingKey {
            case onHoldBalance = "OnHoldBalance"
            case availableBalance = "AvailableBalance"
        }
    }

    public struct ListReviewableHITsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "HITs", required: false, type: .list)
        ]
        ///  The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call. 
        public let numResults: Int32?
        public let nextToken: String?
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?

        public init(numResults: Int32? = nil, nextToken: String? = nil, hITs: [HIT]? = nil) {
            self.numResults = numResults
            self.nextToken = nextToken
            self.hITs = hITs
        }

        private enum CodingKeys: String, CodingKey {
            case numResults = "NumResults"
            case nextToken = "NextToken"
            case hITs = "HITs"
        }
    }

    public struct ListHITsForQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        ///  Limit the number of results returned. 
        public let maxResults: Int32?
        /// Pagination Token
        public let nextToken: String?
        ///  The ID of the Qualification type to use when querying HITs. 
        public let qualificationTypeId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, qualificationTypeId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct CreateHITTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITTypeId", required: false, type: .string)
        ]
        ///  The ID of the newly registered HIT type.
        public let hITTypeId: String?

        public init(hITTypeId: String? = nil) {
            self.hITTypeId = hITTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case hITTypeId = "HITTypeId"
        }
    }

    public struct SendTestEventNotificationResponse: AWSShape {

    }

    public enum QualificationStatus: String, CustomStringConvertible, Codable {
        case granted = "Granted"
        case revoked = "Revoked"
        public var description: String { return self.rawValue }
    }

    public struct CreateWorkerBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "Reason", required: true, type: .string)
        ]
        /// The ID of the Worker to block.
        public let workerId: String
        /// A message explaining the reason for blocking the Worker. This parameter enables you to keep track of your Workers. The Worker does not see this message.
        public let reason: String

        public init(workerId: String, reason: String) {
            self.workerId = workerId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case workerId = "WorkerId"
            case reason = "Reason"
        }
    }

    public struct SendBonusResponse: AWSShape {

    }

    public struct RejectQualificationRequestRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "QualificationRequestId", required: true, type: .string)
        ]
        /// A text message explaining why the request was rejected, to be shown to the Worker who made the request.
        public let reason: String?
        ///  The ID of the Qualification request, as returned by the ListQualificationRequests operation. 
        public let qualificationRequestId: String

        public init(reason: String? = nil, qualificationRequestId: String) {
            self.reason = reason
            self.qualificationRequestId = qualificationRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case qualificationRequestId = "QualificationRequestId"
        }
    }

    public struct ReviewReport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReviewActions", required: false, type: .list), 
            AWSShapeMember(label: "ReviewResults", required: false, type: .list)
        ]
        ///  A list of ReviewAction objects for each action specified in the Review Policy. 
        public let reviewActions: [ReviewActionDetail]?
        ///  A list of ReviewResults objects for each action specified in the Review Policy. 
        public let reviewResults: [ReviewResultDetail]?

        public init(reviewActions: [ReviewActionDetail]? = nil, reviewResults: [ReviewResultDetail]? = nil) {
            self.reviewActions = reviewActions
            self.reviewResults = reviewResults
        }

        private enum CodingKeys: String, CodingKey {
            case reviewActions = "ReviewActions"
            case reviewResults = "ReviewResults"
        }
    }

    public struct SendTestEventNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "TestEventType", required: true, type: .enum)
        ]
        ///  The notification specification to test. This value is identical to the value you would provide to the UpdateNotificationSettings operation when you establish the notification specification for a HIT type. 
        public let notification: NotificationSpecification
        ///  The event to simulate to test the notification specification. This event is included in the test message even if the notification specification does not include the event type. The notification specification does not filter out the test event. 
        public let testEventType: EventType

        public init(notification: NotificationSpecification, testEventType: EventType) {
            self.notification = notification
            self.testEventType = testEventType
        }

        private enum CodingKeys: String, CodingKey {
            case notification = "Notification"
            case testEventType = "TestEventType"
        }
    }

    public struct NotificationSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: true, type: .string), 
            AWSShapeMember(label: "Destination", required: true, type: .string), 
            AWSShapeMember(label: "EventTypes", required: true, type: .list), 
            AWSShapeMember(label: "Transport", required: true, type: .enum)
        ]
        /// The version of the Notification API to use. Valid value is 2006-05-05.
        public let version: String
        ///  The target for notification messages. The Destination’s format is determined by the specified Transport:    When Transport is Email, the Destination is your email address.   When Transport is SQS, the Destination is your queue URL.   When Transport is SNS, the Destination is the ARN of your topic.  
        public let destination: String
        ///  The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation. 
        public let eventTypes: [EventType]
        ///  The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS. 
        public let transport: NotificationTransport

        public init(version: String, destination: String, eventTypes: [EventType], transport: NotificationTransport) {
            self.version = version
            self.destination = destination
            self.eventTypes = eventTypes
            self.transport = transport
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case destination = "Destination"
            case eventTypes = "EventTypes"
            case transport = "Transport"
        }
    }

    public struct GetQualificationTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationType", required: false, type: .structure)
        ]
        ///  The returned Qualification Type
        public let qualificationType: QualificationType?

        public init(qualificationType: QualificationType? = nil) {
            self.qualificationType = qualificationType
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationType = "QualificationType"
        }
    }

    public struct CreateWorkerBlockResponse: AWSShape {

    }

    public struct GetFileUploadURLRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QuestionIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        /// The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.
        public let questionIdentifier: String
        /// The ID of the assignment that contains the question with a FileUploadAnswer.
        public let assignmentId: String

        public init(questionIdentifier: String, assignmentId: String) {
            self.questionIdentifier = questionIdentifier
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case questionIdentifier = "QuestionIdentifier"
            case assignmentId = "AssignmentId"
        }
    }

    public struct CreateHITWithHITTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "HITTypeId", required: true, type: .string), 
            AWSShapeMember(label: "LifetimeInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "HITLayoutParameters", required: false, type: .list), 
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string)
        ]
        ///  A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId.    Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.  
        public let uniqueRequestToken: String?
        ///  The data the person completing the HIT uses to produce the results.   Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace.  Either a Question parameter or a HITLayoutId parameter must be provided.
        public let question: String?
        /// The HIT type ID you want to create this HIT with.
        public let hITTypeId: String
        ///  An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. 
        public let lifetimeInSeconds: Int64
        ///  The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters.   Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. 
        public let hITLayoutId: String?
        ///  The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. 
        public let hITLayoutParameters: [HITLayoutParameter]?
        ///  The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let hITReviewPolicy: ReviewPolicy?
        ///  The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. 
        public let assignmentReviewPolicy: ReviewPolicy?
        ///  An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT.   The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester.   The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. 
        public let requesterAnnotation: String?

        public init(uniqueRequestToken: String? = nil, question: String? = nil, hITTypeId: String, lifetimeInSeconds: Int64, hITLayoutId: String? = nil, maxAssignments: Int32? = nil, hITLayoutParameters: [HITLayoutParameter]? = nil, hITReviewPolicy: ReviewPolicy? = nil, assignmentReviewPolicy: ReviewPolicy? = nil, requesterAnnotation: String? = nil) {
            self.uniqueRequestToken = uniqueRequestToken
            self.question = question
            self.hITTypeId = hITTypeId
            self.lifetimeInSeconds = lifetimeInSeconds
            self.hITLayoutId = hITLayoutId
            self.maxAssignments = maxAssignments
            self.hITLayoutParameters = hITLayoutParameters
            self.hITReviewPolicy = hITReviewPolicy
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.requesterAnnotation = requesterAnnotation
        }

        private enum CodingKeys: String, CodingKey {
            case uniqueRequestToken = "UniqueRequestToken"
            case question = "Question"
            case hITTypeId = "HITTypeId"
            case lifetimeInSeconds = "LifetimeInSeconds"
            case hITLayoutId = "HITLayoutId"
            case maxAssignments = "MaxAssignments"
            case hITLayoutParameters = "HITLayoutParameters"
            case hITReviewPolicy = "HITReviewPolicy"
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case requesterAnnotation = "RequesterAnnotation"
        }
    }

    public struct RejectQualificationRequestResponse: AWSShape {

    }

    public struct WorkerBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string)
        ]
        ///  The ID of the Worker who accepted the HIT.
        public let workerId: String?
        ///  A message explaining the reason the Worker was blocked. 
        public let reason: String?

        public init(workerId: String? = nil, reason: String? = nil) {
            self.workerId = workerId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case workerId = "WorkerId"
            case reason = "Reason"
        }
    }

    public struct HITLayoutParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        ///  The name of the parameter in the HITLayout. 
        public let name: String
        /// The value substituted for the parameter referenced in the HITLayout. 
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct AssociateQualificationWithWorkerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "SendNotification", required: false, type: .boolean), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        ///  The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests. 
        public let workerId: String
        /// The value of the Qualification to assign.
        public let integerValue: Int32?
        ///  Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default. 
        public let sendNotification: Bool?
        /// The ID of the Qualification type to use for the assigned Qualification.
        public let qualificationTypeId: String

        public init(workerId: String, integerValue: Int32? = nil, sendNotification: Bool? = nil, qualificationTypeId: String) {
            self.workerId = workerId
            self.integerValue = integerValue
            self.sendNotification = sendNotification
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case workerId = "WorkerId"
            case integerValue = "IntegerValue"
            case sendNotification = "SendNotification"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct UpdateHITTypeOfHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITTypeId", required: true, type: .string), 
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the new HIT type.
        public let hITTypeId: String
        /// The HIT to update.
        public let hITId: String

        public init(hITTypeId: String, hITId: String) {
            self.hITTypeId = hITTypeId
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITTypeId = "HITTypeId"
            case hITId = "HITId"
        }
    }

    public struct QualificationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string), 
            AWSShapeMember(label: "IsRequestable", required: false, type: .boolean), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long)
        ]
        ///  The questions for a Qualification test associated with this Qualification type that a user can take to obtain a Qualification of this type. This parameter must be specified if AnswerKey is present. A Qualification type cannot have both a specified Test parameter and an AutoGranted value of true. 
        public let test: String?
        /// Specifies that requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Valid values are True | False.
        public let autoGranted: Bool?
        ///  The amount of time, in seconds, given to a Worker to complete the Qualification test, beginning from the time the Worker requests the Qualification. 
        public let testDurationInSeconds: Int64?
        ///  A long description for the Qualification type. 
        public let description: String?
        ///  The date and time the Qualification type was created. 
        public let creationTime: TimeStamp?
        /// The answers to the Qualification test specified in the Test parameter.
        public let answerKey: String?
        ///  Specifies whether the Qualification type is one that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test. This value is False for Qualifications assigned automatically by the system. Valid values are True | False. 
        public let isRequestable: Bool?
        ///  A unique identifier for the Qualification type. A Qualification type is given a Qualification type ID when you call the CreateQualificationType operation. 
        public let qualificationTypeId: String?
        ///  The Qualification integer value to use for automatically granted Qualifications, if AutoGranted is true. This is 1 by default. 
        public let autoGrantedValue: Int32?
        ///  The name of the Qualification type. The type name is used to identify the type, and to find the type using a Qualification type search. 
        public let name: String?
        ///  The status of the Qualification type. A Qualification type's status determines if users can apply to receive a Qualification of this type, and if HITs can be created with requirements based on this type. Valid values are Active | Inactive. 
        public let qualificationTypeStatus: QualificationTypeStatus?
        ///  One or more words or phrases that describe theQualification type, separated by commas. The Keywords make the type easier to find using a search. 
        public let keywords: String?
        ///  The amount of time, in seconds, Workers must wait after taking the Qualification test before they can take it again. Workers can take a Qualification test multiple times if they were not granted the Qualification from a previous attempt, or if the test offers a gradient score and they want a better score. If not specified, retries are disabled and Workers can request a Qualification only once. 
        public let retryDelayInSeconds: Int64?

        public init(test: String? = nil, autoGranted: Bool? = nil, testDurationInSeconds: Int64? = nil, description: String? = nil, creationTime: TimeStamp? = nil, answerKey: String? = nil, isRequestable: Bool? = nil, qualificationTypeId: String? = nil, autoGrantedValue: Int32? = nil, name: String? = nil, qualificationTypeStatus: QualificationTypeStatus? = nil, keywords: String? = nil, retryDelayInSeconds: Int64? = nil) {
            self.test = test
            self.autoGranted = autoGranted
            self.testDurationInSeconds = testDurationInSeconds
            self.description = description
            self.creationTime = creationTime
            self.answerKey = answerKey
            self.isRequestable = isRequestable
            self.qualificationTypeId = qualificationTypeId
            self.autoGrantedValue = autoGrantedValue
            self.name = name
            self.qualificationTypeStatus = qualificationTypeStatus
            self.keywords = keywords
            self.retryDelayInSeconds = retryDelayInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case test = "Test"
            case autoGranted = "AutoGranted"
            case testDurationInSeconds = "TestDurationInSeconds"
            case description = "Description"
            case creationTime = "CreationTime"
            case answerKey = "AnswerKey"
            case isRequestable = "IsRequestable"
            case qualificationTypeId = "QualificationTypeId"
            case autoGrantedValue = "AutoGrantedValue"
            case name = "Name"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case keywords = "Keywords"
            case retryDelayInSeconds = "RetryDelayInSeconds"
        }
    }

    public struct SendBonusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: true, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string), 
            AWSShapeMember(label: "BonusAmount", required: true, type: .string), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string)
        ]
        /// A message that explains the reason for the bonus payment. The Worker receiving the bonus can see this message.
        public let reason: String
        /// The ID of the Worker being paid the bonus.
        public let workerId: String
        /// The ID of the assignment for which this bonus is paid.
        public let assignmentId: String
        ///  The Bonus amount is a US Dollar amount specified using a string (for example, "5" represents $5.00 USD and "101.42" represents $101.42 USD). Do not include currency symbols or currency codes. 
        public let bonusAmount: String
        /// A unique identifier for this request, which allows you to retry the call on error without granting multiple bonuses. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the bonus already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
        public let uniqueRequestToken: String?

        public init(reason: String, workerId: String, assignmentId: String, bonusAmount: String, uniqueRequestToken: String? = nil) {
            self.reason = reason
            self.workerId = workerId
            self.assignmentId = assignmentId
            self.bonusAmount = bonusAmount
            self.uniqueRequestToken = uniqueRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case workerId = "WorkerId"
            case assignmentId = "AssignmentId"
            case bonusAmount = "BonusAmount"
            case uniqueRequestToken = "UniqueRequestToken"
        }
    }

    public struct GetQualificationScoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "WorkerId", required: true, type: .string)
        ]
        /// The ID of the QualificationType.
        public let qualificationTypeId: String
        /// The ID of the Worker whose Qualification is being updated.
        public let workerId: String

        public init(qualificationTypeId: String, workerId: String) {
            self.qualificationTypeId = qualificationTypeId
            self.workerId = workerId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
            case workerId = "WorkerId"
        }
    }

    public struct ListQualificationRequestsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationRequests", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        /// The Qualification request. The response includes one QualificationRequest element for each Qualification request returned by the query.
        public let qualificationRequests: [QualificationRequest]?
        public let nextToken: String?
        /// The number of Qualification requests on this page in the filtered results list, equivalent to the number of Qualification requests being returned by this call.
        public let numResults: Int32?

        public init(qualificationRequests: [QualificationRequest]? = nil, nextToken: String? = nil, numResults: Int32? = nil) {
            self.qualificationRequests = qualificationRequests
            self.nextToken = nextToken
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationRequests = "QualificationRequests"
            case nextToken = "NextToken"
            case numResults = "NumResults"
        }
    }

    public struct ListWorkerBlocksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "WorkerBlocks", required: false, type: .list)
        ]
        public let nextToken: String?
        ///  The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
        public let numResults: Int32?
        ///  The list of WorkerBlocks, containing the collection of Worker IDs and reasons for blocking.
        public let workerBlocks: [WorkerBlock]?

        public init(nextToken: String? = nil, numResults: Int32? = nil, workerBlocks: [WorkerBlock]? = nil) {
            self.nextToken = nextToken
            self.numResults = numResults
            self.workerBlocks = workerBlocks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case numResults = "NumResults"
            case workerBlocks = "WorkerBlocks"
        }
    }

    public struct DeleteQualificationTypeResponse: AWSShape {

    }

    public struct PolicyParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MapEntries", required: false, type: .list), 
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        ///  List of ParameterMapEntry objects. 
        public let mapEntries: [ParameterMapEntry]?
        ///  The list of values of the Parameter
        public let values: [String]?
        ///  Name of the parameter from the list of Review Polices. 
        public let key: String?

        public init(mapEntries: [ParameterMapEntry]? = nil, values: [String]? = nil, key: String? = nil) {
            self.mapEntries = mapEntries
            self.values = values
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case mapEntries = "MapEntries"
            case values = "Values"
            case key = "Key"
        }
    }

    public struct HIT: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NumberOfAssignmentsCompleted", required: false, type: .integer), 
            AWSShapeMember(label: "Question", required: false, type: .string), 
            AWSShapeMember(label: "HITTypeId", required: false, type: .string), 
            AWSShapeMember(label: "Expiration", required: false, type: .timestamp), 
            AWSShapeMember(label: "Reward", required: false, type: .string), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "RequesterAnnotation", required: false, type: .string), 
            AWSShapeMember(label: "HITGroupId", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfAssignmentsAvailable", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "HITLayoutId", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "NumberOfAssignmentsPending", required: false, type: .integer), 
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "HITReviewStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "HITStatus", required: false, type: .enum), 
            AWSShapeMember(label: "MaxAssignments", required: false, type: .integer), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list)
        ]
        ///  The date and time the HIT was created.
        public let creationTime: TimeStamp?
        ///  The number of assignments for this HIT that have been approved or rejected.
        public let numberOfAssignmentsCompleted: Int32?
        ///  The data the Worker completing the HIT uses produce the results. This is either either a QuestionForm, HTMLQuestion or an ExternalQuestion data structure.
        public let question: String?
        /// The ID of the HIT type of this HIT
        public let hITTypeId: String?
        /// The date and time the HIT expires.
        public let expiration: TimeStamp?
        public let reward: String?
        ///  One or more words or phrases that describe the HIT, separated by commas. Search terms similar to the keywords of a HIT are more likely to have the HIT in the search results.
        public let keywords: String?
        ///  An arbitrary data field the Requester who created the HIT can use. This field is visible only to the creator of the HIT.
        public let requesterAnnotation: String?
        ///  The ID of the HIT Group of this HIT.
        public let hITGroupId: String?
        ///  The number of assignments for this HIT that are available for Workers to accept.
        public let numberOfAssignmentsAvailable: Int32?
        ///  A general description of the HIT.
        public let description: String?
        ///  A unique identifier for the HIT.
        public let hITId: String?
        ///  The ID of the HIT Layout of this HIT.
        public let hITLayoutId: String?
        ///  The length of time, in seconds, that a Worker has to complete the HIT after accepting it.
        public let assignmentDurationInSeconds: Int64?
        ///  The number of assignments for this HIT that are being previewed or have been accepted by Workers, but have not yet been submitted, returned, or abandoned.
        public let numberOfAssignmentsPending: Int32?
        /// The amount of time, in seconds, after the Worker submits an assignment for the HIT that the results are automatically approved by Amazon Mechanical Turk. This is the amount of time the Requester has to reject an assignment submitted by a Worker before the assignment is auto-approved and the Worker is paid. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  Indicates the review status of the HIT. Valid Values are NotReviewed | MarkedForReview | ReviewedAppropriate | ReviewedInappropriate.
        public let hITReviewStatus: HITReviewStatus?
        ///  The title of the HIT.
        public let title: String?
        /// The status of the HIT and its assignments. Valid Values are Assignable | Unassignable | Reviewable | Reviewing | Disposed. 
        public let hITStatus: HITStatus?
        /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable. 
        public let maxAssignments: Int32?
        ///  Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure. 
        public let qualificationRequirements: [QualificationRequirement]?

        public init(creationTime: TimeStamp? = nil, numberOfAssignmentsCompleted: Int32? = nil, question: String? = nil, hITTypeId: String? = nil, expiration: TimeStamp? = nil, reward: String? = nil, keywords: String? = nil, requesterAnnotation: String? = nil, hITGroupId: String? = nil, numberOfAssignmentsAvailable: Int32? = nil, description: String? = nil, hITId: String? = nil, hITLayoutId: String? = nil, assignmentDurationInSeconds: Int64? = nil, numberOfAssignmentsPending: Int32? = nil, autoApprovalDelayInSeconds: Int64? = nil, hITReviewStatus: HITReviewStatus? = nil, title: String? = nil, hITStatus: HITStatus? = nil, maxAssignments: Int32? = nil, qualificationRequirements: [QualificationRequirement]? = nil) {
            self.creationTime = creationTime
            self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
            self.question = question
            self.hITTypeId = hITTypeId
            self.expiration = expiration
            self.reward = reward
            self.keywords = keywords
            self.requesterAnnotation = requesterAnnotation
            self.hITGroupId = hITGroupId
            self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
            self.description = description
            self.hITId = hITId
            self.hITLayoutId = hITLayoutId
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.numberOfAssignmentsPending = numberOfAssignmentsPending
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.hITReviewStatus = hITReviewStatus
            self.title = title
            self.hITStatus = hITStatus
            self.maxAssignments = maxAssignments
            self.qualificationRequirements = qualificationRequirements
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case numberOfAssignmentsCompleted = "NumberOfAssignmentsCompleted"
            case question = "Question"
            case hITTypeId = "HITTypeId"
            case expiration = "Expiration"
            case reward = "Reward"
            case keywords = "Keywords"
            case requesterAnnotation = "RequesterAnnotation"
            case hITGroupId = "HITGroupId"
            case numberOfAssignmentsAvailable = "NumberOfAssignmentsAvailable"
            case description = "Description"
            case hITId = "HITId"
            case hITLayoutId = "HITLayoutId"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case numberOfAssignmentsPending = "NumberOfAssignmentsPending"
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case hITReviewStatus = "HITReviewStatus"
            case title = "Title"
            case hITStatus = "HITStatus"
            case maxAssignments = "MaxAssignments"
            case qualificationRequirements = "QualificationRequirements"
        }
    }

    public struct ReviewActionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetId", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "ActionName", required: false, type: .string), 
            AWSShapeMember(label: "CompleteTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Result", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .string)
        ]
        ///  The specific HITId or AssignmentID targeted by the action.
        public let targetId: String?
        ///  Present only when the Results have a FAILED Status.
        public let errorCode: String?
        ///  The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. 
        public let actionName: String?
        ///  The date when the action was completed.
        public let completeTime: TimeStamp?
        ///  A description of the outcome of the review.
        public let result: String?
        ///  The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. 
        public let status: ReviewActionStatus?
        /// The unique identifier for the action.
        public let actionId: String?
        ///  The type of object in TargetId.
        public let targetType: String?

        public init(targetId: String? = nil, errorCode: String? = nil, actionName: String? = nil, completeTime: TimeStamp? = nil, result: String? = nil, status: ReviewActionStatus? = nil, actionId: String? = nil, targetType: String? = nil) {
            self.targetId = targetId
            self.errorCode = errorCode
            self.actionName = actionName
            self.completeTime = completeTime
            self.result = result
            self.status = status
            self.actionId = actionId
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case targetId = "TargetId"
            case errorCode = "ErrorCode"
            case actionName = "ActionName"
            case completeTime = "CompleteTime"
            case result = "Result"
            case status = "Status"
            case actionId = "ActionId"
            case targetType = "TargetType"
        }
    }

    public struct CreateQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RetryDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "AutoGrantedValue", required: false, type: .integer), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeStatus", required: true, type: .enum), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "AutoGranted", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "TestDurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "AnswerKey", required: false, type: .string)
        ]
        /// The number of seconds that a Worker must wait after requesting a Qualification of the Qualification type before the worker can retry the Qualification request. Constraints: None. If not specified, retries are disabled and Workers can request a Qualification of this type only once, even if the Worker has not been granted the Qualification. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must delete existing retry-enabled Qualification type and then create a new Qualification type with retries disabled.
        public let retryDelayInSeconds: Int64?
        /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
        public let autoGrantedValue: Int32?
        /// One or more words or phrases that describe the Qualification type, separated by commas. The keywords of a type make the type easier to find during a search.
        public let keywords: String?
        /// The initial status of the Qualification type. Constraints: Valid values are: Active | Inactive
        public let qualificationTypeStatus: QualificationTypeStatus
        ///  The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified.  Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
        public let test: String?
        /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
        public let autoGranted: Bool?
        /// A long description for the Qualification type. On the Amazon Mechanical Turk website, the long description is displayed when a Worker examines a Qualification type.
        public let description: String
        ///  The name you give to the Qualification type. The type name is used to represent the Qualification to Workers, and to find the type using a Qualification type search. It must be unique across all of your Qualification types.
        public let name: String
        /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
        public let testDurationInSeconds: Int64?
        /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure. Constraints: Must not be longer than 65535 bytes. Constraints: None. If not specified, you must process Qualification requests manually.
        public let answerKey: String?

        public init(retryDelayInSeconds: Int64? = nil, autoGrantedValue: Int32? = nil, keywords: String? = nil, qualificationTypeStatus: QualificationTypeStatus, test: String? = nil, autoGranted: Bool? = nil, description: String, name: String, testDurationInSeconds: Int64? = nil, answerKey: String? = nil) {
            self.retryDelayInSeconds = retryDelayInSeconds
            self.autoGrantedValue = autoGrantedValue
            self.keywords = keywords
            self.qualificationTypeStatus = qualificationTypeStatus
            self.test = test
            self.autoGranted = autoGranted
            self.description = description
            self.name = name
            self.testDurationInSeconds = testDurationInSeconds
            self.answerKey = answerKey
        }

        private enum CodingKeys: String, CodingKey {
            case retryDelayInSeconds = "RetryDelayInSeconds"
            case autoGrantedValue = "AutoGrantedValue"
            case keywords = "Keywords"
            case qualificationTypeStatus = "QualificationTypeStatus"
            case test = "Test"
            case autoGranted = "AutoGranted"
            case description = "Description"
            case name = "Name"
            case testDurationInSeconds = "TestDurationInSeconds"
            case answerKey = "AnswerKey"
        }
    }

    public struct ListWorkersWithQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        ///  The status of the Qualifications to return. Can be Granted | Revoked. 
        public let status: QualificationStatus?
        ///  Limit the number of results returned. 
        public let maxResults: Int32?
        /// Pagination Token
        public let nextToken: String?
        /// The ID of the Qualification type of the Qualifications to return.
        public let qualificationTypeId: String

        public init(status: QualificationStatus? = nil, maxResults: Int32? = nil, nextToken: String? = nil, qualificationTypeId: String) {
            self.status = status
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct ApproveAssignmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterFeedback", required: false, type: .string), 
            AWSShapeMember(label: "OverrideRejection", required: false, type: .boolean), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        ///  A message for the Worker, which the Worker can see in the Status section of the web site. 
        public let requesterFeedback: String?
        ///  A flag indicating that an assignment should be approved even if it was previously rejected. Defaults to False. 
        public let overrideRejection: Bool?
        ///  The ID of the assignment. The assignment must correspond to a HIT created by the Requester. 
        public let assignmentId: String

        public init(requesterFeedback: String? = nil, overrideRejection: Bool? = nil, assignmentId: String) {
            self.requesterFeedback = requesterFeedback
            self.overrideRejection = overrideRejection
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case requesterFeedback = "RequesterFeedback"
            case overrideRejection = "OverrideRejection"
            case assignmentId = "AssignmentId"
        }
    }

    public struct CreateHITWithHITTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation. 
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct ListQualificationRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        /// The ID of the QualificationType.
        public let qualificationTypeId: String?
        ///  The maximum number of results to return in a single call. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, qualificationTypeId: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualificationTypeId = qualificationTypeId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualificationTypeId = "QualificationTypeId"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateNotificationSettingsResponse: AWSShape {

    }

    public struct ListBonusPaymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "BonusPayments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The number of bonus payments on this page in the filtered results list, equivalent to the number of bonus payments being returned by this call. 
        public let numResults: Int32?
        /// A successful request to the ListBonusPayments operation returns a list of BonusPayment objects. 
        public let bonusPayments: [BonusPayment]?
        public let nextToken: String?

        public init(numResults: Int32? = nil, bonusPayments: [BonusPayment]? = nil, nextToken: String? = nil) {
            self.numResults = numResults
            self.bonusPayments = bonusPayments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case numResults = "NumResults"
            case bonusPayments = "BonusPayments"
            case nextToken = "NextToken"
        }
    }

    public enum ReviewPolicyLevel: String, CustomStringConvertible, Codable {
        case assignment = "Assignment"
        case hit = "HIT"
        public var description: String { return self.rawValue }
    }

    public struct UpdateHITReviewStatusResponse: AWSShape {

    }

    public struct QualificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Test", required: false, type: .string), 
            AWSShapeMember(label: "Answer", required: false, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: false, type: .string), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The ID of the Qualification request, a unique identifier generated when the request was submitted. 
        public let qualificationRequestId: String?
        ///  The contents of the Qualification test that was presented to the Worker, if the type has a test and the Worker has submitted answers. This value is identical to the QuestionForm associated with the Qualification type at the time the Worker requests the Qualification.
        public let test: String?
        ///  The Worker's answers for the Qualification type's test contained in a QuestionFormAnswers document, if the type has a test and the Worker has submitted answers. If the Worker does not provide any answers, Answer may be empty. 
        public let answer: String?
        ///  The ID of the Qualification type the Worker is requesting, as returned by the CreateQualificationType operation. 
        public let qualificationTypeId: String?
        ///  The ID of the Worker requesting the Qualification.
        public let workerId: String?
        /// The date and time the Qualification request had a status of Submitted. This is either the time the Worker submitted answers for a Qualification test, or the time the Worker requested the Qualification if the Qualification type does not have a test. 
        public let submitTime: TimeStamp?

        public init(qualificationRequestId: String? = nil, test: String? = nil, answer: String? = nil, qualificationTypeId: String? = nil, workerId: String? = nil, submitTime: TimeStamp? = nil) {
            self.qualificationRequestId = qualificationRequestId
            self.test = test
            self.answer = answer
            self.qualificationTypeId = qualificationTypeId
            self.workerId = workerId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationRequestId = "QualificationRequestId"
            case test = "Test"
            case answer = "Answer"
            case qualificationTypeId = "QualificationTypeId"
            case workerId = "WorkerId"
            case submitTime = "SubmitTime"
        }
    }

    public enum NotificationTransport: String, CustomStringConvertible, Codable {
        case email = "Email"
        case sqs = "SQS"
        case sns = "SNS"
        public var description: String { return self.rawValue }
    }

    public struct GetQualificationScoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Qualification", required: false, type: .structure)
        ]
        ///  The Qualification data structure of the Qualification assigned to a user, including the Qualification type and the value (score). 
        public let qualification: Qualification?

        public init(qualification: Qualification? = nil) {
            self.qualification = qualification
        }

        private enum CodingKeys: String, CodingKey {
            case qualification = "Qualification"
        }
    }

    public struct ParameterMapEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        ///  The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy. 
        public let key: String?
        ///  The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly. 
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case assignmentaccepted = "AssignmentAccepted"
        case assignmentabandoned = "AssignmentAbandoned"
        case assignmentreturned = "AssignmentReturned"
        case assignmentsubmitted = "AssignmentSubmitted"
        case assignmentrejected = "AssignmentRejected"
        case assignmentapproved = "AssignmentApproved"
        case hitcreated = "HITCreated"
        case hitexpired = "HITExpired"
        case hitreviewable = "HITReviewable"
        case hitextended = "HITExtended"
        case hitdisposed = "HITDisposed"
        case ping = "Ping"
        public var description: String { return self.rawValue }
    }

    public enum HITStatus: String, CustomStringConvertible, Codable {
        case assignable = "Assignable"
        case unassignable = "Unassignable"
        case reviewable = "Reviewable"
        case reviewing = "Reviewing"
        case disposed = "Disposed"
        public var description: String { return self.rawValue }
    }

    public struct ListAssignmentsForHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentStatuses", required: false, type: .list)
        ]
        /// The ID of the HIT.
        public let hITId: String
        public let maxResults: Int32?
        /// Pagination token
        public let nextToken: String?
        /// The status of the assignments to return: Submitted | Approved | Rejected
        public let assignmentStatuses: [AssignmentStatus]?

        public init(hITId: String, maxResults: Int32? = nil, nextToken: String? = nil, assignmentStatuses: [AssignmentStatus]? = nil) {
            self.hITId = hITId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.assignmentStatuses = assignmentStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case assignmentStatuses = "AssignmentStatuses"
        }
    }

    public struct CreateHITResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HIT", required: false, type: .structure)
        ]
        ///  Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation. 
        public let hit: HIT?

        public init(hit: HIT? = nil) {
            self.hit = hit
        }

        private enum CodingKeys: String, CodingKey {
            case hit = "HIT"
        }
    }

    public struct DeleteHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The ID of the HIT to be deleted.
        public let hITId: String

        public init(hITId: String) {
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case hITId = "HITId"
        }
    }

    public enum ReviewableHITStatus: String, CustomStringConvertible, Codable {
        case reviewable = "Reviewable"
        case reviewing = "Reviewing"
        public var description: String { return self.rawValue }
    }

    public struct QualificationRequirement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValues", required: false, type: .list), 
            AWSShapeMember(label: "LocaleValues", required: false, type: .list), 
            AWSShapeMember(label: "RequiredToPreview", required: false, type: .boolean), 
            AWSShapeMember(label: "Comparator", required: true, type: .enum), 
            AWSShapeMember(label: "ActionsGuarded", required: false, type: .enum), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        ///  The integer value to compare against the Qualification's value. IntegerValue must not be present if Comparator is Exists or DoesNotExist. IntegerValue can only be used if the Qualification type has an integer value; it cannot be used with the Worker_Locale QualificationType ID. When performing a set comparison by using the In or the NotIn comparator, you can use up to 15 IntegerValue elements in a QualificationRequirement data structure. 
        public let integerValues: [Int32]?
        ///  The locale value to compare against the Qualification's value. The local value must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions. LocaleValue can only be used with a Worker_Locale QualificationType ID. LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use a single LocaleValue element when using the EqualTo or NotEqualTo comparators. When performing a set comparison by using the In or the NotIn comparator, you can use up to 30 LocaleValue elements in a QualificationRequirement data structure. 
        public let localeValues: [Locale]?
        ///  DEPRECATED: Use the ActionsGuarded field instead. If RequiredToPreview is true, the question data for the HIT will not be shown when a Worker whose Qualifications do not meet this requirement tries to preview the HIT. That is, a Worker's Qualifications must meet all of the requirements for which RequiredToPreview is true in order to preview the HIT. If a Worker meets all of the requirements where RequiredToPreview is true (or if there are no such requirements), but does not meet all of the requirements for the HIT, the Worker will be allowed to preview the HIT's question data, but will not be allowed to accept and complete the HIT. The default is false. This should not be used in combination with the ActionsGuarded field. 
        public let requiredToPreview: Bool?
        /// The kind of comparison to make against a Qualification's value. You can compare a Qualification's value to an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You can compare it to a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue. You can check to see if the value is In or NotIn a set of IntegerValue or LocaleValue values. Lastly, a Qualification requirement can also test if a Qualification Exists or DoesNotExist in the user's profile, regardless of its value. 
        public let comparator: Comparator
        ///  Setting this attribute prevents Workers whose Qualifications do not meet this QualificationRequirement from taking the specified action. Valid arguments include "Accept" (Worker cannot accept the HIT, but can preview the HIT and see it in their search results), "PreviewAndAccept" (Worker cannot accept or preview the HIT, but can see the HIT in their search results), and "DiscoverPreviewAndAccept" (Worker cannot accept, preview, or see the HIT in their search results). It's possible for you to create a HIT with multiple QualificationRequirements (which can have different values for the ActionGuarded attribute). In this case, the Worker is only permitted to perform an action when they have met all QualificationRequirements guarding the action. The actions in the order of least restrictive to most restrictive are Discover, Preview and Accept. For example, if a Worker meets all QualificationRequirements that are set to DiscoverPreviewAndAccept, but do not meet all requirements that are set with PreviewAndAccept, then the Worker will be able to Discover, i.e. see the HIT in their search result, but will not be able to Preview or Accept the HIT. ActionsGuarded should not be used in combination with the RequiredToPreview field. 
        public let actionsGuarded: HITAccessActions?
        ///  The ID of the Qualification type for the requirement.
        public let qualificationTypeId: String

        public init(integerValues: [Int32]? = nil, localeValues: [Locale]? = nil, requiredToPreview: Bool? = nil, comparator: Comparator, actionsGuarded: HITAccessActions? = nil, qualificationTypeId: String) {
            self.integerValues = integerValues
            self.localeValues = localeValues
            self.requiredToPreview = requiredToPreview
            self.comparator = comparator
            self.actionsGuarded = actionsGuarded
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case integerValues = "IntegerValues"
            case localeValues = "LocaleValues"
            case requiredToPreview = "RequiredToPreview"
            case comparator = "Comparator"
            case actionsGuarded = "ActionsGuarded"
            case qualificationTypeId = "QualificationTypeId"
        }
    }

    public struct CreateHITTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reward", required: true, type: .string), 
            AWSShapeMember(label: "QualificationRequirements", required: false, type: .list), 
            AWSShapeMember(label: "Keywords", required: false, type: .string), 
            AWSShapeMember(label: "AutoApprovalDelayInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Title", required: true, type: .string), 
            AWSShapeMember(label: "AssignmentDurationInSeconds", required: true, type: .long), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        ///  The amount of money the Requester will pay a Worker for successfully completing the HIT. 
        public let reward: String
        ///  Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure. 
        public let qualificationRequirements: [QualificationRequirement]?
        ///  One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs. 
        public let keywords: String?
        ///  The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it. 
        public let autoApprovalDelayInSeconds: Int64?
        ///  The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned. 
        public let title: String
        ///  The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept. 
        public let assignmentDurationInSeconds: Int64
        ///  A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it. 
        public let description: String

        public init(reward: String, qualificationRequirements: [QualificationRequirement]? = nil, keywords: String? = nil, autoApprovalDelayInSeconds: Int64? = nil, title: String, assignmentDurationInSeconds: Int64, description: String) {
            self.reward = reward
            self.qualificationRequirements = qualificationRequirements
            self.keywords = keywords
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.title = title
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case reward = "Reward"
            case qualificationRequirements = "QualificationRequirements"
            case keywords = "Keywords"
            case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
            case title = "Title"
            case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
            case description = "Description"
        }
    }

    public enum QualificationTypeStatus: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct DeleteHITResponse: AWSShape {

    }

    public struct DisassociateQualificationFromWorkerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkerId", required: true, type: .string), 
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string)
        ]
        /// The ID of the Worker who possesses the Qualification to be revoked.
        public let workerId: String
        /// The ID of the Qualification type of the Qualification to be revoked.
        public let qualificationTypeId: String
        /// A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.
        public let reason: String?

        public init(workerId: String, qualificationTypeId: String, reason: String? = nil) {
            self.workerId = workerId
            self.qualificationTypeId = qualificationTypeId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case workerId = "WorkerId"
            case qualificationTypeId = "QualificationTypeId"
            case reason = "Reason"
        }
    }

    public struct RejectAssignmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterFeedback", required: true, type: .string), 
            AWSShapeMember(label: "AssignmentId", required: true, type: .string)
        ]
        ///  A message for the Worker, which the Worker can see in the Status section of the web site. 
        public let requesterFeedback: String
        ///  The ID of the assignment. The assignment must correspond to a HIT created by the Requester. 
        public let assignmentId: String

        public init(requesterFeedback: String, assignmentId: String) {
            self.requesterFeedback = requesterFeedback
            self.assignmentId = assignmentId
        }

        private enum CodingKeys: String, CodingKey {
            case requesterFeedback = "RequesterFeedback"
            case assignmentId = "AssignmentId"
        }
    }

    public struct Assignment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Answer", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "AssignmentId", required: false, type: .string), 
            AWSShapeMember(label: "AutoApprovalTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "WorkerId", required: false, type: .string), 
            AWSShapeMember(label: "Deadline", required: false, type: .timestamp), 
            AWSShapeMember(label: "RequesterFeedback", required: false, type: .string), 
            AWSShapeMember(label: "ApprovalTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AcceptTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "RejectionTime", required: false, type: .timestamp)
        ]
        ///  The Worker's answers submitted for the HIT contained in a QuestionFormAnswers document, if the Worker provides an answer. If the Worker does not provide any answers, Answer may contain a QuestionFormAnswers document, or Answer may be empty.
        public let answer: String?
        ///  The status of the assignment.
        public let assignmentStatus: AssignmentStatus?
        ///  A unique identifier for the assignment.
        public let assignmentId: String?
        ///  If results have been submitted, AutoApprovalTime is the date and time the results of the assignment results are considered Approved automatically if they have not already been explicitly approved or rejected by the Requester. This value is derived from the auto-approval delay specified by the Requester in the HIT. This value is omitted from the assignment if the Worker has not yet submitted results.
        public let autoApprovalTime: TimeStamp?
        ///  The ID of the Worker who accepted the HIT.
        public let workerId: String?
        ///  The date and time of the deadline for the assignment. This value is derived from the deadline specification for the HIT and the date and time the Worker accepted the HIT.
        public let deadline: TimeStamp?
        ///  The feedback string included with the call to the ApproveAssignment operation or the RejectAssignment operation, if the Requester approved or rejected the assignment and specified feedback.
        public let requesterFeedback: String?
        ///  If the Worker has submitted results and the Requester has approved the results, ApprovalTime is the date and time the Requester approved the results. This value is omitted from the assignment if the Requester has not yet approved the results.
        public let approvalTime: TimeStamp?
        ///  If the Worker has submitted results, SubmitTime is the date and time the assignment was submitted. This value is omitted from the assignment if the Worker has not yet submitted results.
        public let submitTime: TimeStamp?
        ///  The date and time the Worker accepted the assignment.
        public let acceptTime: TimeStamp?
        ///  The ID of the HIT.
        public let hITId: String?
        ///  If the Worker has submitted results and the Requester has rejected the results, RejectionTime is the date and time the Requester rejected the results.
        public let rejectionTime: TimeStamp?

        public init(answer: String? = nil, assignmentStatus: AssignmentStatus? = nil, assignmentId: String? = nil, autoApprovalTime: TimeStamp? = nil, workerId: String? = nil, deadline: TimeStamp? = nil, requesterFeedback: String? = nil, approvalTime: TimeStamp? = nil, submitTime: TimeStamp? = nil, acceptTime: TimeStamp? = nil, hITId: String? = nil, rejectionTime: TimeStamp? = nil) {
            self.answer = answer
            self.assignmentStatus = assignmentStatus
            self.assignmentId = assignmentId
            self.autoApprovalTime = autoApprovalTime
            self.workerId = workerId
            self.deadline = deadline
            self.requesterFeedback = requesterFeedback
            self.approvalTime = approvalTime
            self.submitTime = submitTime
            self.acceptTime = acceptTime
            self.hITId = hITId
            self.rejectionTime = rejectionTime
        }

        private enum CodingKeys: String, CodingKey {
            case answer = "Answer"
            case assignmentStatus = "AssignmentStatus"
            case assignmentId = "AssignmentId"
            case autoApprovalTime = "AutoApprovalTime"
            case workerId = "WorkerId"
            case deadline = "Deadline"
            case requesterFeedback = "RequesterFeedback"
            case approvalTime = "ApprovalTime"
            case submitTime = "SubmitTime"
            case acceptTime = "AcceptTime"
            case hITId = "HITId"
            case rejectionTime = "RejectionTime"
        }
    }

    public struct ListReviewPolicyResultsForHITResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignmentReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "HITId", required: false, type: .string), 
            AWSShapeMember(label: "HITReviewPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssignmentReviewReport", required: false, type: .structure), 
            AWSShapeMember(label: "HITReviewReport", required: false, type: .structure)
        ]
        ///  The name of the Assignment-level Review Policy. This contains only the PolicyName element. 
        public let assignmentReviewPolicy: ReviewPolicy?
        /// The HITId of the HIT for which results have been returned.
        public let hITId: String?
        /// The name of the HIT-level Review Policy. This contains only the PolicyName element.
        public let hITReviewPolicy: ReviewPolicy?
        public let nextToken: String?
        ///  Contains both ReviewResult and ReviewAction elements for an Assignment. 
        public let assignmentReviewReport: ReviewReport?
        /// Contains both ReviewResult and ReviewAction elements for a particular HIT. 
        public let hITReviewReport: ReviewReport?

        public init(assignmentReviewPolicy: ReviewPolicy? = nil, hITId: String? = nil, hITReviewPolicy: ReviewPolicy? = nil, nextToken: String? = nil, assignmentReviewReport: ReviewReport? = nil, hITReviewReport: ReviewReport? = nil) {
            self.assignmentReviewPolicy = assignmentReviewPolicy
            self.hITId = hITId
            self.hITReviewPolicy = hITReviewPolicy
            self.nextToken = nextToken
            self.assignmentReviewReport = assignmentReviewReport
            self.hITReviewReport = hITReviewReport
        }

        private enum CodingKeys: String, CodingKey {
            case assignmentReviewPolicy = "AssignmentReviewPolicy"
            case hITId = "HITId"
            case hITReviewPolicy = "HITReviewPolicy"
            case nextToken = "NextToken"
            case assignmentReviewReport = "AssignmentReviewReport"
            case hITReviewReport = "HITReviewReport"
        }
    }

    public struct RejectAssignmentResponse: AWSShape {

    }

    public struct CreateAdditionalAssignmentsForHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfAdditionalAssignments", required: true, type: .integer), 
            AWSShapeMember(label: "UniqueRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "HITId", required: true, type: .string)
        ]
        /// The number of additional assignments to request for this HIT.
        public let numberOfAdditionalAssignments: Int32
        ///  A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID. 
        public let uniqueRequestToken: String?
        /// The ID of the HIT to extend.
        public let hITId: String

        public init(numberOfAdditionalAssignments: Int32, uniqueRequestToken: String? = nil, hITId: String) {
            self.numberOfAdditionalAssignments = numberOfAdditionalAssignments
            self.uniqueRequestToken = uniqueRequestToken
            self.hITId = hITId
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfAdditionalAssignments = "NumberOfAdditionalAssignments"
            case uniqueRequestToken = "UniqueRequestToken"
            case hITId = "HITId"
        }
    }

    public struct ListWorkersWithQualificationTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Qualifications", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        ///  The list of Qualification elements returned by this call. 
        public let qualifications: [Qualification]?
        ///  The number of Qualifications on this page in the filtered results list, equivalent to the number of Qualifications being returned by this call.
        public let numResults: Int32?

        public init(nextToken: String? = nil, qualifications: [Qualification]? = nil, numResults: Int32? = nil) {
            self.nextToken = nextToken
            self.qualifications = qualifications
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case qualifications = "Qualifications"
            case numResults = "NumResults"
        }
    }

    public struct ListReviewPolicyResultsForHITRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RetrieveActions", required: false, type: .boolean), 
            AWSShapeMember(label: "HITId", required: true, type: .string), 
            AWSShapeMember(label: "RetrieveResults", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyLevels", required: false, type: .list)
        ]
        ///  Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes. 
        public let retrieveActions: Bool?
        /// The unique identifier of the HIT to retrieve review results for.
        public let hITId: String
        ///  Specify if the operation should retrieve a list of the results computed by the Review Policies. 
        public let retrieveResults: Bool?
        /// Pagination token
        public let nextToken: String?
        /// Limit the number of results returned.
        public let maxResults: Int32?
        ///  The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies. 
        public let policyLevels: [ReviewPolicyLevel]?

        public init(retrieveActions: Bool? = nil, hITId: String, retrieveResults: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil, policyLevels: [ReviewPolicyLevel]? = nil) {
            self.retrieveActions = retrieveActions
            self.hITId = hITId
            self.retrieveResults = retrieveResults
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.policyLevels = policyLevels
        }

        private enum CodingKeys: String, CodingKey {
            case retrieveActions = "RetrieveActions"
            case hITId = "HITId"
            case retrieveResults = "RetrieveResults"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case policyLevels = "PolicyLevels"
        }
    }

    public struct ListQualificationTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypes", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  The list of QualificationType elements returned by the query. 
        public let qualificationTypes: [QualificationType]?
        ///  The number of Qualification types on this page in the filtered results list, equivalent to the number of types this operation returns. 
        public let numResults: Int32?
        public let nextToken: String?

        public init(qualificationTypes: [QualificationType]? = nil, numResults: Int32? = nil, nextToken: String? = nil) {
            self.qualificationTypes = qualificationTypes
            self.numResults = numResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypes = "QualificationTypes"
            case numResults = "NumResults"
            case nextToken = "NextToken"
        }
    }

    public enum AssignmentStatus: String, CustomStringConvertible, Codable {
        case submitted = "Submitted"
        case approved = "Approved"
        case rejected = "Rejected"
        public var description: String { return self.rawValue }
    }

    public struct ListHITsForQualificationTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "HITs", required: false, type: .list), 
            AWSShapeMember(label: "NumResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        ///  The list of HIT elements returned by the query.
        public let hITs: [HIT]?
        ///  The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call. 
        public let numResults: Int32?

        public init(nextToken: String? = nil, hITs: [HIT]? = nil, numResults: Int32? = nil) {
            self.nextToken = nextToken
            self.hITs = hITs
            self.numResults = numResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case hITs = "HITs"
            case numResults = "NumResults"
        }
    }

    public struct DeleteQualificationTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QualificationTypeId", required: true, type: .string)
        ]
        /// The ID of the QualificationType to dispose.
        public let qualificationTypeId: String

        public init(qualificationTypeId: String) {
            self.qualificationTypeId = qualificationTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case qualificationTypeId = "QualificationTypeId"
        }
    }

}