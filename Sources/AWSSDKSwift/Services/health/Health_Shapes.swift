// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Health {

    public struct DescribeEntityAggregatesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of entities that are affected by each of the specified events.
        public let entityAggregates: [EntityAggregate]?

        public init(entityAggregates: [EntityAggregate]? = nil) {
            self.entityAggregates = entityAggregates
        }

        public init(dictionary: [String: Any]) throws {
            if let entityAggregates = dictionary["entityAggregates"] as? [[String: Any]] {
                self.entityAggregates = try entityAggregates.map({ try EntityAggregate(dictionary: $0) })
            } else { 
                self.entityAggregates = nil
            }
        }
    }

    public struct AffectedEntity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The most recent time that the entity was updated.
        public let lastUpdatedTime: Date?
        /// The most recent status of the entity affected by the event. The possible values are IMPAIRED, UNIMPAIRED, and UNKNOWN.
        public let statusCode: EntityStatusCode?
        /// The unique identifier for the entity. Format: arn:aws:health:entity-region:aws-account:entity/entity-id . Example: arn:aws:health:us-east-1:111222333444:entity/AVh5GGT7ul1arKr1sE1K 
        public let entityArn: String?
        /// A map of entity tags attached to the affected entity.
        public let tags: [String: String]?
        /// The 12-digit AWS account number that contains the affected entity.
        public let awsAccountId: String?
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// The ID of the affected entity.
        public let entityValue: String?

        public init(lastUpdatedTime: Date? = nil, statusCode: EntityStatusCode? = nil, entityArn: String? = nil, tags: [String: String]? = nil, awsAccountId: String? = nil, eventArn: String? = nil, entityValue: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.entityArn = entityArn
            self.tags = tags
            self.awsAccountId = awsAccountId
            self.eventArn = eventArn
            self.entityValue = entityValue
        }

        public init(dictionary: [String: Any]) throws {
            self.lastUpdatedTime = dictionary["lastUpdatedTime"] as? Date
            if let statusCode = dictionary["statusCode"] as? String { self.statusCode = EntityStatusCode(rawValue: statusCode) } else { self.statusCode = nil }
            self.entityArn = dictionary["entityArn"] as? String
            if let tags = dictionary["tags"] as? [String: String] {
                self.tags = tags
            } else { 
                self.tags = nil
            }
            self.awsAccountId = dictionary["awsAccountId"] as? String
            self.eventArn = dictionary["eventArn"] as? String
            self.entityValue = dictionary["entityValue"] as? String
        }
    }

    public struct EventDetailsErrorItem: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// A message that describes the error.
        public let errorMessage: String?
        /// The name of the error.
        public let errorName: String?

        public init(eventArn: String? = nil, errorMessage: String? = nil, errorName: String? = nil) {
            self.eventArn = eventArn
            self.errorMessage = errorMessage
            self.errorName = errorName
        }

        public init(dictionary: [String: Any]) throws {
            self.eventArn = dictionary["eventArn"] as? String
            self.errorMessage = dictionary["errorMessage"] as? String
            self.errorName = dictionary["errorName"] as? String
        }
    }

    public struct EventTypeFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let eventTypeCategories: [EventTypeCategory]?
        /// The AWS services associated with the event. For example, EC2, RDS.
        public let services: [String]?
        /// A list of event type codes.
        public let eventTypeCodes: [String]?

        public init(eventTypeCategories: [EventTypeCategory]? = nil, services: [String]? = nil, eventTypeCodes: [String]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.services = services
            self.eventTypeCodes = eventTypeCodes
        }

        public init(dictionary: [String: Any]) throws {
            if let eventTypeCategories = dictionary["eventTypeCategories"] as? [String] { self.eventTypeCategories = eventTypeCategories.flatMap({ EventTypeCategory(rawValue: $0)}) } else { self.eventTypeCategories = nil }
            self.services = dictionary["services"] as? [String]
            self.eventTypeCodes = dictionary["eventTypeCodes"] as? [String]
        }
    }

    public struct DescribeAffectedEntitiesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The entities that match the filter criteria.
        public let entities: [AffectedEntity]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(entities: [AffectedEntity]? = nil, nextToken: String? = nil) {
            self.entities = entities
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let entities = dictionary["entities"] as? [[String: Any]] {
                self.entities = try entities.map({ try AffectedEntity(dictionary: $0) })
            } else { 
                self.entities = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public enum EventTypeCategory: String, CustomStringConvertible {
        case issue = "issue"
        case accountnotification = "accountNotification"
        case scheduledchange = "scheduledChange"
        public var description: String { return self.rawValue }
    }

    public struct Event: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public let service: String?
        /// The AWS Availability Zone of the event. For example, us-east-1a.
        public let availabilityZone: String?
        /// The most recent date and time that the event was updated.
        public let lastUpdatedTime: Date?
        /// The most recent status of the event. Possible values are open, closed, and upcoming.
        public let statusCode: EventStatusCode?
        /// The 
        public let eventTypeCategory: EventTypeCategory?
        /// The AWS region name of the event.
        public let region: String?
        /// The date and time that the event ended.
        public let endTime: Date?
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public let eventTypeCode: String?
        /// The date and time that the event began.
        public let startTime: Date?
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let arn: String?

        public init(service: String? = nil, availabilityZone: String? = nil, lastUpdatedTime: Date? = nil, statusCode: EventStatusCode? = nil, eventTypeCategory: EventTypeCategory? = nil, region: String? = nil, endTime: Date? = nil, eventTypeCode: String? = nil, startTime: Date? = nil, arn: String? = nil) {
            self.service = service
            self.availabilityZone = availabilityZone
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.eventTypeCategory = eventTypeCategory
            self.region = region
            self.endTime = endTime
            self.eventTypeCode = eventTypeCode
            self.startTime = startTime
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.service = dictionary["service"] as? String
            self.availabilityZone = dictionary["availabilityZone"] as? String
            self.lastUpdatedTime = dictionary["lastUpdatedTime"] as? Date
            if let statusCode = dictionary["statusCode"] as? String { self.statusCode = EventStatusCode(rawValue: statusCode) } else { self.statusCode = nil }
            if let eventTypeCategory = dictionary["eventTypeCategory"] as? String { self.eventTypeCategory = EventTypeCategory(rawValue: eventTypeCategory) } else { self.eventTypeCategory = nil }
            self.region = dictionary["region"] as? String
            self.endTime = dictionary["endTime"] as? Date
            self.eventTypeCode = dictionary["eventTypeCode"] as? String
            self.startTime = dictionary["startTime"] as? Date
            self.arn = dictionary["arn"] as? String
        }
    }

    public struct DescribeEventDetailsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Error messages for any events that could not be retrieved.
        public let failedSet: [EventDetailsErrorItem]?
        /// Information about the events that could be retrieved.
        public let successfulSet: [EventDetails]?

        public init(failedSet: [EventDetailsErrorItem]? = nil, successfulSet: [EventDetails]? = nil) {
            self.failedSet = failedSet
            self.successfulSet = successfulSet
        }

        public init(dictionary: [String: Any]) throws {
            if let failedSet = dictionary["failedSet"] as? [[String: Any]] {
                self.failedSet = try failedSet.map({ try EventDetailsErrorItem(dictionary: $0) })
            } else { 
                self.failedSet = nil
            }
            if let successfulSet = dictionary["successfulSet"] as? [[String: Any]] {
                self.successfulSet = try successfulSet.map({ try EventDetails(dictionary: $0) })
            } else { 
                self.successfulSet = nil
            }
        }
    }

    public struct DescribeEventDetailsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(eventArns: [String], locale: String? = nil) {
            self.eventArns = eventArns
            self.locale = locale
        }

        public init(dictionary: [String: Any]) throws {
            guard let eventArns = dictionary["eventArns"] as? [String] else { throw InitializableError.missingRequiredParam("eventArns") }
            self.eventArns = eventArns
            self.locale = dictionary["locale"] as? String
        }
    }

    public enum EventStatusCode: String, CustomStringConvertible {
        case open = "open"
        case closed = "closed"
        case upcoming = "upcoming"
        public var description: String { return self.rawValue }
    }

    public struct EventDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The most recent description of the event.
        public let latestDescription: String?

        public init(latestDescription: String? = nil) {
            self.latestDescription = latestDescription
        }

        public init(dictionary: [String: Any]) throws {
            self.latestDescription = dictionary["latestDescription"] as? String
        }
    }

    public struct DescribeEventAggregatesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of events in each category that meet the optional filter criteria.
        public let eventAggregates: [EventAggregate]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(eventAggregates: [EventAggregate]? = nil, nextToken: String? = nil) {
            self.eventAggregates = eventAggregates
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let eventAggregates = dictionary["eventAggregates"] as? [[String: Any]] {
                self.eventAggregates = try eventAggregates.map({ try EventAggregate(dictionary: $0) })
            } else { 
                self.eventAggregates = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeEventAggregatesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// Values to narrow the results returned.
        public let filter: EventFilter?
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// The only currently supported value is eventTypeCategory.
        public let aggregateField: EventAggregateField

        public init(nextToken: String? = nil, filter: EventFilter? = nil, maxResults: Int32? = nil, aggregateField: EventAggregateField) {
            self.nextToken = nextToken
            self.filter = filter
            self.maxResults = maxResults
            self.aggregateField = aggregateField
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Health.EventFilter(dictionary: filter) } else { self.filter = nil }
            self.maxResults = dictionary["maxResults"] as? Int32
            guard let rawaggregateField = dictionary["aggregateField"] as? String, let aggregateField = EventAggregateField(rawValue: rawaggregateField) else { throw InitializableError.missingRequiredParam("aggregateField") }
            self.aggregateField = aggregateField
        }
    }

    public struct EventFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let eventTypeCategories: [EventTypeCategory]?
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]?
        /// A list of event status codes.
        public let eventStatusCodes: [EventStatusCode]?
        /// A list of dates and times that the event was last updated.
        public let lastUpdatedTimes: [DateTimeRange]?
        /// A map of entity tags attached to the affected entity.
        public let tags: [[String: String]]?
        /// A list of unique identifiers for event types. For example, "AWS_EC2_SYSTEM_MAINTENANCE_EVENT","AWS_RDS_MAINTENANCE_SCHEDULED" 
        public let eventTypeCodes: [String]?
        /// A list of entity ARNs (unique identifiers).
        public let entityArns: [String]?
        /// A list of entity identifiers, such as EC2 instance IDs (i-34ab692e) or EBS volumes (vol-426ab23e).
        public let entityValues: [String]?
        /// A list of AWS availability zones.
        public let availabilityZones: [String]?
        /// The AWS services associated with the event. For example, EC2, RDS.
        public let services: [String]?
        /// A list of dates and times that the event ended.
        public let endTimes: [DateTimeRange]?
        /// A list of AWS regions.
        public let regions: [String]?
        /// A list of dates and times that the event began.
        public let startTimes: [DateTimeRange]?

        public init(eventTypeCategories: [EventTypeCategory]? = nil, eventArns: [String]? = nil, eventStatusCodes: [EventStatusCode]? = nil, lastUpdatedTimes: [DateTimeRange]? = nil, tags: [[String: String]]? = nil, eventTypeCodes: [String]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil, availabilityZones: [String]? = nil, services: [String]? = nil, endTimes: [DateTimeRange]? = nil, regions: [String]? = nil, startTimes: [DateTimeRange]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.eventArns = eventArns
            self.eventStatusCodes = eventStatusCodes
            self.lastUpdatedTimes = lastUpdatedTimes
            self.tags = tags
            self.eventTypeCodes = eventTypeCodes
            self.entityArns = entityArns
            self.entityValues = entityValues
            self.availabilityZones = availabilityZones
            self.services = services
            self.endTimes = endTimes
            self.regions = regions
            self.startTimes = startTimes
        }

        public init(dictionary: [String: Any]) throws {
            if let eventTypeCategories = dictionary["eventTypeCategories"] as? [String] { self.eventTypeCategories = eventTypeCategories.flatMap({ EventTypeCategory(rawValue: $0)}) } else { self.eventTypeCategories = nil }
            self.eventArns = dictionary["eventArns"] as? [String]
            if let eventStatusCodes = dictionary["eventStatusCodes"] as? [String] { self.eventStatusCodes = eventStatusCodes.flatMap({ EventStatusCode(rawValue: $0)}) } else { self.eventStatusCodes = nil }
            if let lastUpdatedTimes = dictionary["lastUpdatedTimes"] as? [[String: Any]] {
                self.lastUpdatedTimes = try lastUpdatedTimes.map({ try DateTimeRange(dictionary: $0) })
            } else { 
                self.lastUpdatedTimes = nil
            }
            self.tags = dictionary["tags"] as? [[String: String]]
            self.eventTypeCodes = dictionary["eventTypeCodes"] as? [String]
            self.entityArns = dictionary["entityArns"] as? [String]
            self.entityValues = dictionary["entityValues"] as? [String]
            self.availabilityZones = dictionary["availabilityZones"] as? [String]
            self.services = dictionary["services"] as? [String]
            if let endTimes = dictionary["endTimes"] as? [[String: Any]] {
                self.endTimes = try endTimes.map({ try DateTimeRange(dictionary: $0) })
            } else { 
                self.endTimes = nil
            }
            self.regions = dictionary["regions"] as? [String]
            if let startTimes = dictionary["startTimes"] as? [[String: Any]] {
                self.startTimes = try startTimes.map({ try DateTimeRange(dictionary: $0) })
            } else { 
                self.startTimes = nil
            }
        }
    }

    public struct EventAggregate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of events of the associated issue type.
        public let count: Int32?
        /// The issue type for the associated count.
        public let aggregateValue: String?

        public init(count: Int32? = nil, aggregateValue: String? = nil) {
            self.count = count
            self.aggregateValue = aggregateValue
        }

        public init(dictionary: [String: Any]) throws {
            self.count = dictionary["count"] as? Int32
            self.aggregateValue = dictionary["aggregateValue"] as? String
        }
    }

    public enum EventAggregateField: String, CustomStringConvertible {
        case eventtypecategory = "eventTypeCategory"
        public var description: String { return self.rawValue }
    }

    public struct EntityAggregate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// The number entities that match the criteria for the specified events.
        public let count: Int32?

        public init(eventArn: String? = nil, count: Int32? = nil) {
            self.eventArn = eventArn
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.eventArn = dictionary["eventArn"] as? String
            self.count = dictionary["count"] as? Int32
        }
    }

    public struct EventType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public let service: String?
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let category: EventTypeCategory?
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public let code: String?

        public init(service: String? = nil, category: EventTypeCategory? = nil, code: String? = nil) {
            self.service = service
            self.category = category
            self.code = code
        }

        public init(dictionary: [String: Any]) throws {
            self.service = dictionary["service"] as? String
            if let category = dictionary["category"] as? String { self.category = EventTypeCategory(rawValue: category) } else { self.category = nil }
            self.code = dictionary["code"] as? String
        }
    }

    public struct DescribeEntityAggregatesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]?

        public init(eventArns: [String]? = nil) {
            self.eventArns = eventArns
        }

        public init(dictionary: [String: Any]) throws {
            self.eventArns = dictionary["eventArns"] as? [String]
        }
    }

    public struct DescribeEventTypesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event types that match the filter criteria. Event types have a category (issue, accountNotification, or scheduledChange), a service (for example, EC2, RDS, DATAPIPELINE, BILLING), and a code (in the format AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT).
        public let eventTypes: [EventType]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(eventTypes: [EventType]? = nil, nextToken: String? = nil) {
            self.eventTypes = eventTypes
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let eventTypes = dictionary["eventTypes"] as? [[String: Any]] {
                self.eventTypes = try eventTypes.map({ try EventType(dictionary: $0) })
            } else { 
                self.eventTypes = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct EventDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional metadata about the event.
        public let eventMetadata: [String: String]?
        /// Summary information about the event.
        public let event: Event?
        /// The most recent description of the event.
        public let eventDescription: EventDescription?

        public init(eventMetadata: [String: String]? = nil, event: Event? = nil, eventDescription: EventDescription? = nil) {
            self.eventMetadata = eventMetadata
            self.event = event
            self.eventDescription = eventDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let eventMetadata = dictionary["eventMetadata"] as? [String: String] {
                self.eventMetadata = eventMetadata
            } else { 
                self.eventMetadata = nil
            }
            if let event = dictionary["event"] as? [String: Any] { self.event = try Health.Event(dictionary: event) } else { self.event = nil }
            if let eventDescription = dictionary["eventDescription"] as? [String: Any] { self.eventDescription = try Health.EventDescription(dictionary: eventDescription) } else { self.eventDescription = nil }
        }
    }

    public struct DescribeAffectedEntitiesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned. At least one event ARN is required. 
        public let filter: EntityFilter
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EntityFilter, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            guard let filter = dictionary["filter"] as? [String: Any] else { throw InitializableError.missingRequiredParam("filter") }
            self.filter = try Health.EntityFilter(dictionary: filter)
            self.nextToken = dictionary["nextToken"] as? String
            self.locale = dictionary["locale"] as? String
        }
    }

    public struct DescribeEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned.
        public let filter: EventFilter?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EventFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Health.EventFilter(dictionary: filter) } else { self.filter = nil }
            self.nextToken = dictionary["nextToken"] as? String
            self.locale = dictionary["locale"] as? String
        }
    }

    public struct DateTimeRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ending date and time of a time range.
        public let to: Date?
        /// The starting date and time of a time range.
        public let from: Date?

        public init(to: Date? = nil, from: Date? = nil) {
            self.to = to
            self.from = from
        }

        public init(dictionary: [String: Any]) throws {
            self.to = dictionary["to"] as? Date
            self.from = dictionary["from"] as? Date
        }
    }

    public struct EntityFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]
        /// A list of the most recent dates and times that the entity was updated.
        public let lastUpdatedTimes: [DateTimeRange]?
        /// A list of entity status codes (IMPAIRED, UNIMPAIRED, or UNKNOWN).
        public let statusCodes: [EntityStatusCode]?
        /// A map of entity tags attached to the affected entity.
        public let tags: [[String: String]]?
        /// A list of entity ARNs (unique identifiers).
        public let entityArns: [String]?
        /// A list of IDs for affected entities.
        public let entityValues: [String]?

        public init(eventArns: [String], lastUpdatedTimes: [DateTimeRange]? = nil, statusCodes: [EntityStatusCode]? = nil, tags: [[String: String]]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil) {
            self.eventArns = eventArns
            self.lastUpdatedTimes = lastUpdatedTimes
            self.statusCodes = statusCodes
            self.tags = tags
            self.entityArns = entityArns
            self.entityValues = entityValues
        }

        public init(dictionary: [String: Any]) throws {
            guard let eventArns = dictionary["eventArns"] as? [String] else { throw InitializableError.missingRequiredParam("eventArns") }
            self.eventArns = eventArns
            if let lastUpdatedTimes = dictionary["lastUpdatedTimes"] as? [[String: Any]] {
                self.lastUpdatedTimes = try lastUpdatedTimes.map({ try DateTimeRange(dictionary: $0) })
            } else { 
                self.lastUpdatedTimes = nil
            }
            if let statusCodes = dictionary["statusCodes"] as? [String] { self.statusCodes = statusCodes.flatMap({ EntityStatusCode(rawValue: $0)}) } else { self.statusCodes = nil }
            self.tags = dictionary["tags"] as? [[String: String]]
            self.entityArns = dictionary["entityArns"] as? [String]
            self.entityValues = dictionary["entityValues"] as? [String]
        }
    }

    public enum EntityStatusCode: String, CustomStringConvertible {
        case impaired = "IMPAIRED"
        case unimpaired = "UNIMPAIRED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventTypesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned.
        public let filter: EventTypeFilter?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EventTypeFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Health.EventTypeFilter(dictionary: filter) } else { self.filter = nil }
            self.nextToken = dictionary["nextToken"] as? String
            self.locale = dictionary["locale"] as? String
        }
    }

    public struct DescribeEventsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The events that match the specified filter criteria.
        public let events: [Event]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let events = dictionary["events"] as? [[String: Any]] {
                self.events = try events.map({ try Event(dictionary: $0) })
            } else { 
                self.events = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

}