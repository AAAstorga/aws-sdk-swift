// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cloudfront {

    public struct GetStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the streaming distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let streamingDistribution = dictionary["StreamingDistribution"] as? [String: Any] { self.streamingDistribution = try Cloudfront.StreamingDistribution(dictionary: streamingDistribution) } else { self.streamingDistribution = nil }
        }
    }

    public struct TagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Tags"
        public static var queryParams: [String: String] {
            return ["Resource": "Resource"]
        }
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(resource: String, tags: Tags) {
            self.resource = resource
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resource = dictionary["Resource"] as? String else { throw InitializableError.missingRequiredParam("Resource") }
            self.resource = resource
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Cloudfront.Tags(dictionary: tags)
        }
    }

    public struct CloudFrontOriginAccessIdentitySummaryList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cloudFrontOriginAccessIdentitySummary: [CloudFrontOriginAccessIdentitySummary]?

        public init(cloudFrontOriginAccessIdentitySummary: [CloudFrontOriginAccessIdentitySummary]? = nil) {
            self.cloudFrontOriginAccessIdentitySummary = cloudFrontOriginAccessIdentitySummary
        }

        public init(dictionary: [String: Any]) throws {
            if let cloudFrontOriginAccessIdentitySummary = dictionary["CloudFrontOriginAccessIdentitySummary"] as? [[String: Any]] {
                self.cloudFrontOriginAccessIdentitySummary = try cloudFrontOriginAccessIdentitySummary.map({ try CloudFrontOriginAccessIdentitySummary(dictionary: $0) })
            } else { 
                self.cloudFrontOriginAccessIdentitySummary = nil
            }
        }
    }

    public struct Signer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An AWS account that is included in the TrustedSigners complex type for this RTMP distribution. Valid values include:    self, which is the AWS account used to create the distribution.   An AWS account number.  
        public let awsAccountNumber: String?
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber.
        public let keyPairIds: KeyPairIds?

        public init(awsAccountNumber: String? = nil, keyPairIds: KeyPairIds? = nil) {
            self.awsAccountNumber = awsAccountNumber
            self.keyPairIds = keyPairIds
        }

        public init(dictionary: [String: Any]) throws {
            self.awsAccountNumber = dictionary["AwsAccountNumber"] as? String
            if let keyPairIds = dictionary["KeyPairIds"] as? [String: Any] { self.keyPairIds = try Cloudfront.KeyPairIds(dictionary: keyPairIds) } else { self.keyPairIds = nil }
        }
    }

    public struct CreateStreamingDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag", "Location": "Location"]
        }
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information. 
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.location = dictionary["Location"] as? String
            if let streamingDistribution = dictionary["StreamingDistribution"] as? [String: Any] { self.streamingDistribution = try Cloudfront.StreamingDistribution(dictionary: streamingDistribution) } else { self.streamingDistribution = nil }
        }
    }

    public struct UpdateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let streamingDistribution = dictionary["StreamingDistribution"] as? [String: Any] { self.streamingDistribution = try Cloudfront.StreamingDistribution(dictionary: streamingDistribution) } else { self.streamingDistribution = nil }
        }
    }

    public struct QueryStringCacheKeysList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? [String]
        }
    }

    public enum ItemSelection: String, CustomStringConvertible {
        case none = "none"
        case whitelist = "whitelist"
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public struct InvalidationSummaryList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let invalidationSummary: [InvalidationSummary]?

        public init(invalidationSummary: [InvalidationSummary]? = nil) {
            self.invalidationSummary = invalidationSummary
        }

        public init(dictionary: [String: Any]) throws {
            if let invalidationSummary = dictionary["InvalidationSummary"] as? [[String: Any]] {
                self.invalidationSummary = try invalidationSummary.map({ try InvalidationSummary(dictionary: $0) })
            } else { 
                self.invalidationSummary = nil
            }
        }
    }

    public struct InvalidationBatch: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that you specify to uniquely identify an invalidation request. CloudFront uses the value to prevent you from accidentally resubmitting an identical request. Whenever you create a new invalidation request, you must specify a new value for CallerReference and change other values in the request as applicable. One way to ensure that the value of CallerReference is unique is to use a timestamp, for example, 20120301090000. If you make a second invalidation request with the same value for CallerReference, and if the rest of the request is the same, CloudFront doesn't create a new invalidation request. Instead, CloudFront returns information about the invalidation request that you previously created with the same CallerReference. If CallerReference is a value you already sent in a previous invalidation batch request but the content of any Path is different from the original request, CloudFront returns an InvalidationBatchAlreadyExists error.
        public let callerReference: String
        /// A complex type that contains information about the objects that you want to invalidate. For more information, see Specifying the Objects to Invalidate in the Amazon CloudFront Developer Guide. 
        public let paths: Paths

        public init(callerReference: String, paths: Paths) {
            self.callerReference = callerReference
            self.paths = paths
        }

        public init(dictionary: [String: Any]) throws {
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            guard let paths = dictionary["Paths"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Paths") }
            self.paths = try Cloudfront.Paths(dictionary: paths)
        }
    }

    public struct TrustedSigners: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Optional: A complex type that contains trusted signers for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: AwsAccountNumberList?
        /// Specifies whether you want to require viewers to use signed URLs to access the files specified by PathPattern and TargetOriginId.
        public let enabled: Bool
        /// The number of trusted signers for this cache behavior.
        public let quantity: Int32

        public init(items: AwsAccountNumberList? = nil, enabled: Bool, quantity: Int32) {
            self.items = items
            self.enabled = enabled
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.AwsAccountNumberList(dictionary: items) } else { self.items = nil }
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentityList"
        /// The CloudFrontOriginAccessIdentityList type. 
        public let cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList?

        public init(cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList? = nil) {
            self.cloudFrontOriginAccessIdentityList = cloudFrontOriginAccessIdentityList
        }

        public init(dictionary: [String: Any]) throws {
            if let cloudFrontOriginAccessIdentityList = dictionary["CloudFrontOriginAccessIdentityList"] as? [String: Any] { self.cloudFrontOriginAccessIdentityList = try Cloudfront.CloudFrontOriginAccessIdentityList(dictionary: cloudFrontOriginAccessIdentityList) } else { self.cloudFrontOriginAccessIdentityList = nil }
        }
    }

    public struct Headers: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains one Name element for each header that you want CloudFront to forward to the origin and to vary on for this cache behavior. If Quantity is 0, omit Items.
        public let items: HeaderList?
        /// The number of different headers that you want CloudFront to forward to the origin for this cache behavior. You can configure each cache behavior in a web distribution to do one of the following:    Forward all headers to your origin: Specify 1 for Quantity and * for Name.  If you configure CloudFront to forward all headers to your origin, CloudFront doesn't cache the objects associated with this cache behavior. Instead, it sends every request to the origin.     Forward a whitelist of headers you specify: Specify the number of headers that you want to forward, and specify the header names in Name elements. CloudFront caches your objects based on the values in all of the specified headers. CloudFront also forwards the headers that it forwards by default, but it caches your objects based only on the headers that you specify.     Forward only the default headers: Specify 0 for Quantity and omit Items. In this configuration, CloudFront doesn't cache based on the values in the request headers.  
        public let quantity: Int32

        public init(items: HeaderList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.HeaderList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct CreateStreamingDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistributionConfigWithTags"
        ///  The streaming distribution's configuration information. 
        public let streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags

        public init(streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags) {
            self.streamingDistributionConfigWithTags = streamingDistributionConfigWithTags
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamingDistributionConfigWithTags = dictionary["StreamingDistributionConfigWithTags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamingDistributionConfigWithTags") }
            self.streamingDistributionConfigWithTags = try Cloudfront.StreamingDistributionConfigWithTags(dictionary: streamingDistributionConfigWithTags)
        }
    }

    public struct QueryStringCacheKeys: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// (Optional) A list that contains the query string parameters that you want CloudFront to use as a basis for caching for this cache behavior. If Quantity is 0, you can omit Items. 
        public let items: QueryStringCacheKeysList?
        /// The number of whitelisted query string parameters for this cache behavior.
        public let quantity: Int32

        public init(items: QueryStringCacheKeysList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.QueryStringCacheKeysList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct LambdaFunctionAssociations: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Optional: A complex type that contains LambdaFunctionAssociation items for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: LambdaFunctionAssociationList?
        /// The number of Lambda function associations for this cache behavior.
        public let quantity: Int32

        public init(items: LambdaFunctionAssociationList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.LambdaFunctionAssociationList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct GetStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct Paths: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains a list of the paths that you want to invalidate.
        public let items: PathList?
        /// The number of objects that you want to invalidate.
        public let quantity: Int32

        public init(items: PathList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.PathList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct SslProtocolsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let sslProtocol: [SslProtocol]?

        public init(sslProtocol: [SslProtocol]? = nil) {
            self.sslProtocol = sslProtocol
        }

        public init(dictionary: [String: Any]) throws {
            if let sslProtocol = dictionary["SslProtocol"] as? [String] { self.sslProtocol = sslProtocol.flatMap({ SslProtocol(rawValue: $0)}) } else { self.sslProtocol = nil }
        }
    }

    public struct DefaultCacheBehavior: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        public let targetOriginId: String
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the Amazon Amazon CloudFront Developer Guide. If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        public let maxTTL: Int64?
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.    https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy
        public let allowedMethods: AllowedMethods?

        public init(defaultTTL: Int64? = nil, targetOriginId: String, forwardedValues: ForwardedValues, trustedSigners: TrustedSigners, compress: Bool? = nil, smoothStreaming: Bool? = nil, maxTTL: Int64? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, minTTL: Int64, viewerProtocolPolicy: ViewerProtocolPolicy, allowedMethods: AllowedMethods? = nil) {
            self.defaultTTL = defaultTTL
            self.targetOriginId = targetOriginId
            self.forwardedValues = forwardedValues
            self.trustedSigners = trustedSigners
            self.compress = compress
            self.smoothStreaming = smoothStreaming
            self.maxTTL = maxTTL
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.minTTL = minTTL
            self.viewerProtocolPolicy = viewerProtocolPolicy
            self.allowedMethods = allowedMethods
        }

        public init(dictionary: [String: Any]) throws {
            self.defaultTTL = dictionary["DefaultTTL"] as? Int64
            guard let targetOriginId = dictionary["TargetOriginId"] as? String else { throw InitializableError.missingRequiredParam("TargetOriginId") }
            self.targetOriginId = targetOriginId
            guard let forwardedValues = dictionary["ForwardedValues"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ForwardedValues") }
            self.forwardedValues = try Cloudfront.ForwardedValues(dictionary: forwardedValues)
            guard let trustedSigners = dictionary["TrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrustedSigners") }
            self.trustedSigners = try Cloudfront.TrustedSigners(dictionary: trustedSigners)
            self.compress = dictionary["Compress"] as? Bool
            self.smoothStreaming = dictionary["SmoothStreaming"] as? Bool
            self.maxTTL = dictionary["MaxTTL"] as? Int64
            if let lambdaFunctionAssociations = dictionary["LambdaFunctionAssociations"] as? [String: Any] { self.lambdaFunctionAssociations = try Cloudfront.LambdaFunctionAssociations(dictionary: lambdaFunctionAssociations) } else { self.lambdaFunctionAssociations = nil }
            guard let minTTL = dictionary["MinTTL"] as? Int64 else { throw InitializableError.missingRequiredParam("MinTTL") }
            self.minTTL = minTTL
            guard let rawViewerProtocolPolicy = dictionary["ViewerProtocolPolicy"] as? String, let viewerProtocolPolicy = ViewerProtocolPolicy(rawValue: rawViewerProtocolPolicy) else { throw InitializableError.missingRequiredParam("ViewerProtocolPolicy") }
            self.viewerProtocolPolicy = viewerProtocolPolicy
            if let allowedMethods = dictionary["AllowedMethods"] as? [String: Any] { self.allowedMethods = try Cloudfront.AllowedMethods(dictionary: allowedMethods) } else { self.allowedMethods = nil }
        }
    }

    public struct PathList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let path: [String]?

        public init(path: [String]? = nil) {
            self.path = path
        }

        public init(dictionary: [String: Any]) throws {
            self.path = dictionary["Path"] as? [String]
        }
    }

    public struct Invalidation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current invalidation information for the batch request. 
        public let invalidationBatch: InvalidationBatch
        /// The status of the invalidation request. When the invalidation batch is finished, the status is Completed.
        public let status: String
        /// The date and time the invalidation request was first made. 
        public let createTime: Date
        /// The identifier for the invalidation request. For example: IDFDVBD632BHDS5.
        public let id: String

        public init(invalidationBatch: InvalidationBatch, status: String, createTime: Date, id: String) {
            self.invalidationBatch = invalidationBatch
            self.status = status
            self.createTime = createTime
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let invalidationBatch = dictionary["InvalidationBatch"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InvalidationBatch") }
            self.invalidationBatch = try Cloudfront.InvalidationBatch(dictionary: invalidationBatch)
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let createTime = dictionary["CreateTime"] as? Date else { throw InitializableError.missingRequiredParam("CreateTime") }
            self.createTime = createTime
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  A string that contains an optional Tag value. The string length should be between 0 and 256 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let value: String?
        ///  A string that contains Tag key. The string length should be between 1 and 128 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct CreateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionConfig"
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(distributionConfig: DistributionConfig) {
            self.distributionConfig = distributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let distributionConfig = dictionary["DistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DistributionConfig") }
            self.distributionConfig = try Cloudfront.DistributionConfig(dictionary: distributionConfig)
        }
    }

    public struct GetCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The identity's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public enum ViewerProtocolPolicy: String, CustomStringConvertible {
        case allow_all = "allow-all"
        case https_only = "https-only"
        case redirect_to_https = "redirect-to-https"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The identity's id.
        public let id: String
        /// The identity's configuration information.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig
        /// The value of the ETag header that you received when retrieving the identity's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig, ifMatch: String? = nil) {
            self.id = id
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.ifMatch = ifMatch
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let cloudFrontOriginAccessIdentityConfig = dictionary["CloudFrontOriginAccessIdentityConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CloudFrontOriginAccessIdentityConfig") }
            self.cloudFrontOriginAccessIdentityConfig = try Cloudfront.CloudFrontOriginAccessIdentityConfig(dictionary: cloudFrontOriginAccessIdentityConfig)
            self.ifMatch = dictionary["If-Match"] as? String
        }
    }

    public struct GetInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Invalidation"
        /// The invalidation's information. For more information, see Invalidation Complex Type. 
        public let invalidation: Invalidation?

        public init(invalidation: Invalidation? = nil) {
            self.invalidation = invalidation
        }

        public init(dictionary: [String: Any]) throws {
            if let invalidation = dictionary["Invalidation"] as? [String: Any] { self.invalidation = try Cloudfront.Invalidation(dictionary: invalidation) } else { self.invalidation = nil }
        }
    }

    public struct CreateInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Invalidation"
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// The fully qualified URI of the distribution and invalidation batch request, including the Invalidation ID.
        public let location: String?
        /// The invalidation's information.
        public let invalidation: Invalidation?

        public init(location: String? = nil, invalidation: Invalidation? = nil) {
            self.location = location
            self.invalidation = invalidation
        }

        public init(dictionary: [String: Any]) throws {
            self.location = dictionary["Location"] as? String
            if let invalidation = dictionary["Invalidation"] as? [String: Any] { self.invalidation = try Cloudfront.Invalidation(dictionary: invalidation) } else { self.invalidation = nil }
        }
    }

    public struct StreamingDistributionSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: Date
        ///  Indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated throughout the Amazon CloudFront system.
        public let status: String
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        public let id: String
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
        public let aliases: Aliases
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items.If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
        public let s3Origin: S3Origin
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// Whether the distribution is enabled to accept end user requests for content.
        public let enabled: Bool
        ///  The ARN (Amazon Resource Name) for the streaming distribution. For example: arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let aRN: String
        /// The domain name corresponding to the distribution. For example: d604721fxaaqy9.cloudfront.net.
        public let domainName: String
        public let priceClass: PriceClass

        public init(lastModifiedTime: Date, status: String, id: String, aliases: Aliases, trustedSigners: TrustedSigners, s3Origin: S3Origin, comment: String, enabled: Bool, aRN: String, domainName: String, priceClass: PriceClass) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.id = id
            self.aliases = aliases
            self.trustedSigners = trustedSigners
            self.s3Origin = s3Origin
            self.comment = comment
            self.enabled = enabled
            self.aRN = aRN
            self.domainName = domainName
            self.priceClass = priceClass
        }

        public init(dictionary: [String: Any]) throws {
            guard let lastModifiedTime = dictionary["LastModifiedTime"] as? Date else { throw InitializableError.missingRequiredParam("LastModifiedTime") }
            self.lastModifiedTime = lastModifiedTime
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let aliases = dictionary["Aliases"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Aliases") }
            self.aliases = try Cloudfront.Aliases(dictionary: aliases)
            guard let trustedSigners = dictionary["TrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrustedSigners") }
            self.trustedSigners = try Cloudfront.TrustedSigners(dictionary: trustedSigners)
            guard let s3Origin = dictionary["S3Origin"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3Origin") }
            self.s3Origin = try Cloudfront.S3Origin(dictionary: s3Origin)
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            guard let rawPriceClass = dictionary["PriceClass"] as? String, let priceClass = PriceClass(rawValue: rawPriceClass) else { throw InitializableError.missingRequiredParam("PriceClass") }
            self.priceClass = priceClass
        }
    }

    public struct CacheBehavior: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        public let targetOriginId: String
        /// The pattern (for example, images/*.jpg) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution.  You can optionally include a slash (/) at the beginning of the path pattern. For example, /images/*.jpg. CloudFront behavior is the same with or without the leading /.  The path pattern for the default cache behavior is * and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see Path Pattern in the  Amazon CloudFront Developer Guide.
        public let pathPattern: String
        public let allowedMethods: AllowedMethods?
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the Amazon Amazon CloudFront Developer Guide. If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.     https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).    For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Specifying How Long Objects and Errors Stay in a CloudFront Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?

        public init(targetOriginId: String, pathPattern: String, allowedMethods: AllowedMethods? = nil, forwardedValues: ForwardedValues, trustedSigners: TrustedSigners, compress: Bool? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, smoothStreaming: Bool? = nil, minTTL: Int64, viewerProtocolPolicy: ViewerProtocolPolicy, defaultTTL: Int64? = nil) {
            self.targetOriginId = targetOriginId
            self.pathPattern = pathPattern
            self.allowedMethods = allowedMethods
            self.forwardedValues = forwardedValues
            self.trustedSigners = trustedSigners
            self.compress = compress
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.smoothStreaming = smoothStreaming
            self.minTTL = minTTL
            self.viewerProtocolPolicy = viewerProtocolPolicy
            self.defaultTTL = defaultTTL
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetOriginId = dictionary["TargetOriginId"] as? String else { throw InitializableError.missingRequiredParam("TargetOriginId") }
            self.targetOriginId = targetOriginId
            guard let pathPattern = dictionary["PathPattern"] as? String else { throw InitializableError.missingRequiredParam("PathPattern") }
            self.pathPattern = pathPattern
            if let allowedMethods = dictionary["AllowedMethods"] as? [String: Any] { self.allowedMethods = try Cloudfront.AllowedMethods(dictionary: allowedMethods) } else { self.allowedMethods = nil }
            guard let forwardedValues = dictionary["ForwardedValues"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ForwardedValues") }
            self.forwardedValues = try Cloudfront.ForwardedValues(dictionary: forwardedValues)
            guard let trustedSigners = dictionary["TrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrustedSigners") }
            self.trustedSigners = try Cloudfront.TrustedSigners(dictionary: trustedSigners)
            self.compress = dictionary["Compress"] as? Bool
            if let lambdaFunctionAssociations = dictionary["LambdaFunctionAssociations"] as? [String: Any] { self.lambdaFunctionAssociations = try Cloudfront.LambdaFunctionAssociations(dictionary: lambdaFunctionAssociations) } else { self.lambdaFunctionAssociations = nil }
            self.maxTTL = dictionary["MaxTTL"] as? Int64
            self.smoothStreaming = dictionary["SmoothStreaming"] as? Bool
            guard let minTTL = dictionary["MinTTL"] as? Int64 else { throw InitializableError.missingRequiredParam("MinTTL") }
            self.minTTL = minTTL
            guard let rawViewerProtocolPolicy = dictionary["ViewerProtocolPolicy"] as? String, let viewerProtocolPolicy = ViewerProtocolPolicy(rawValue: rawViewerProtocolPolicy) else { throw InitializableError.missingRequiredParam("ViewerProtocolPolicy") }
            self.viewerProtocolPolicy = viewerProtocolPolicy
            self.defaultTTL = dictionary["DefaultTTL"] as? Int64
        }
    }

    public struct DistributionConfigWithTags: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags
        /// A distribution configuration.
        public let distributionConfig: DistributionConfig

        public init(tags: Tags, distributionConfig: DistributionConfig) {
            self.tags = tags
            self.distributionConfig = distributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Cloudfront.Tags(dictionary: tags)
            guard let distributionConfig = dictionary["DistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DistributionConfig") }
            self.distributionConfig = try Cloudfront.DistributionConfig(dictionary: distributionConfig)
        }
    }

    public struct ListStreamingDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistributionList"
        /// The StreamingDistributionList type. 
        public let streamingDistributionList: StreamingDistributionList?

        public init(streamingDistributionList: StreamingDistributionList? = nil) {
            self.streamingDistributionList = streamingDistributionList
        }

        public init(dictionary: [String: Any]) throws {
            if let streamingDistributionList = dictionary["StreamingDistributionList"] as? [String: Any] { self.streamingDistributionList = try Cloudfront.StreamingDistributionList(dictionary: streamingDistributionList) } else { self.streamingDistributionList = nil }
        }
    }

    public struct Origins: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains origins for this distribution.
        public let items: OriginList?
        /// The number of origins for this distribution.
        public let quantity: Int32

        public init(items: OriginList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.OriginList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct GetDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionConfig"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig?

        public init(eTag: String? = nil, distributionConfig: DistributionConfig? = nil) {
            self.eTag = eTag
            self.distributionConfig = distributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let distributionConfig = dictionary["DistributionConfig"] as? [String: Any] { self.distributionConfig = try Cloudfront.DistributionConfig(dictionary: distributionConfig) } else { self.distributionConfig = nil }
        }
    }

    public struct InvalidationList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// A flag that indicates whether more invalidation batch requests remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more invalidation batches in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value that you can use for the Marker request parameter to continue listing your invalidation batches where they left off.
        public let nextMarker: String?
        /// The value that you provided for the Marker request parameter.
        public let marker: String
        /// A complex type that contains one InvalidationSummary element for each invalidation batch created by the current AWS account.
        public let items: InvalidationSummaryList?
        /// The number of invalidation batches that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: InvalidationSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let maxItems = dictionary["MaxItems"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.InvalidationSummaryList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct GetInvalidationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DistributionId": "DistributionId", "Id": "Id"]
        }
        /// The distribution's ID.
        public let distributionId: String
        /// The identifier for the invalidation request, for example, IDFDVBD632BHDS5.
        public let id: String

        public init(distributionId: String, id: String) {
            self.distributionId = distributionId
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let distributionId = dictionary["DistributionId"] as? String else { throw InitializableError.missingRequiredParam("DistributionId") }
            self.distributionId = distributionId
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ForwardedValues: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of QueryString and on the values that you specify for QueryStringCacheKeys, if any: If you specify true for QueryString and you don't specify any values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for QueryString and you specify one or more values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for QueryString, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see Configuring CloudFront to Cache Based on Query String Parameters in the Amazon CloudFront Developer Guide.
        public let queryString: Bool
        /// A complex type that specifies the Headers, if any, that you want CloudFront to vary upon for this cache behavior. 
        public let headers: Headers?
        /// A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see How CloudFront Forwards, Caches, and Logs Cookies in the Amazon CloudFront Developer Guide.
        public let cookies: CookiePreference
        /// A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
        public let queryStringCacheKeys: QueryStringCacheKeys?

        public init(queryString: Bool, headers: Headers? = nil, cookies: CookiePreference, queryStringCacheKeys: QueryStringCacheKeys? = nil) {
            self.queryString = queryString
            self.headers = headers
            self.cookies = cookies
            self.queryStringCacheKeys = queryStringCacheKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let queryString = dictionary["QueryString"] as? Bool else { throw InitializableError.missingRequiredParam("QueryString") }
            self.queryString = queryString
            if let headers = dictionary["Headers"] as? [String: Any] { self.headers = try Cloudfront.Headers(dictionary: headers) } else { self.headers = nil }
            guard let cookies = dictionary["Cookies"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Cookies") }
            self.cookies = try Cloudfront.CookiePreference(dictionary: cookies)
            if let queryStringCacheKeys = dictionary["QueryStringCacheKeys"] as? [String: Any] { self.queryStringCacheKeys = try Cloudfront.QueryStringCacheKeys(dictionary: queryStringCacheKeys) } else { self.queryStringCacheKeys = nil }
        }
    }

    public enum GeoRestrictionType: String, CustomStringConvertible {
        case blacklist = "blacklist"
        case whitelist = "whitelist"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public struct LocationList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let location: [String]?

        public init(location: [String]? = nil) {
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            self.location = dictionary["Location"] as? [String]
        }
    }

    public struct SignerList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let signer: [Signer]?

        public init(signer: [Signer]? = nil) {
            self.signer = signer
        }

        public init(dictionary: [String: Any]) throws {
            if let signer = dictionary["Signer"] as? [[String: Any]] {
                self.signer = try signer.map({ try Signer(dictionary: $0) })
            } else { 
                self.signer = nil
            }
        }
    }

    public struct UpdateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionConfig"
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(id: String, ifMatch: String? = nil, distributionConfig: DistributionConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.distributionConfig = distributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            self.ifMatch = dictionary["If-Match"] as? String
            guard let distributionConfig = dictionary["DistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DistributionConfig") }
            self.distributionConfig = try Cloudfront.DistributionConfig(dictionary: distributionConfig)
        }
    }

    public struct CacheBehaviorList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cacheBehavior: [CacheBehavior]?

        public init(cacheBehavior: [CacheBehavior]? = nil) {
            self.cacheBehavior = cacheBehavior
        }

        public init(dictionary: [String: Any]) throws {
            if let cacheBehavior = dictionary["CacheBehavior"] as? [[String: Any]] {
                self.cacheBehavior = try cacheBehavior.map({ try CacheBehavior(dictionary: $0) })
            } else { 
                self.cacheBehavior = nil
            }
        }
    }

    public struct LambdaFunctionAssociation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the event type that triggers a Lambda function invocation. Valid values are:    viewer-request     origin-request     viewer-response     origin-response   
        public let eventType: EventType?
        /// The ARN of the Lambda function.
        public let lambdaFunctionARN: String?

        public init(eventType: EventType? = nil, lambdaFunctionARN: String? = nil) {
            self.eventType = eventType
            self.lambdaFunctionARN = lambdaFunctionARN
        }

        public init(dictionary: [String: Any]) throws {
            if let eventType = dictionary["EventType"] as? String { self.eventType = EventType(rawValue: eventType) } else { self.eventType = nil }
            self.lambdaFunctionARN = dictionary["LambdaFunctionARN"] as? String
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Resource": "Resource"]
        }
        ///  An ARN of a CloudFront resource.
        public let resource: String

        public init(resource: String) {
            self.resource = resource
        }

        public init(dictionary: [String: Any]) throws {
            guard let resource = dictionary["Resource"] as? String else { throw InitializableError.missingRequiredParam("Resource") }
            self.resource = resource
        }
    }

    public struct OriginCustomHeader: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of a header that you want CloudFront to forward to your origin. For more information, see Forwarding Custom Headers to Your Origin (Web Distributions Only) in the Amazon Amazon CloudFront Developer Guide.
        public let headerName: String
        /// The value for the header that you specified in the HeaderName field.
        public let headerValue: String

        public init(headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let headerName = dictionary["HeaderName"] as? String else { throw InitializableError.missingRequiredParam("HeaderName") }
            self.headerName = headerName
            guard let headerValue = dictionary["HeaderValue"] as? String else { throw InitializableError.missingRequiredParam("HeaderValue") }
            self.headerValue = headerValue
        }
    }

    public struct ListInvalidationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Marker": "Marker", "MaxItems": "MaxItems"]
        }
        public static var pathParams: [String: String] {
            return ["DistributionId": "DistributionId"]
        }
        /// Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set Marker to the value of the NextMarker from the current page's response. This value is the same as the ID of the last invalidation batch on that page. 
        public let marker: String?
        /// The maximum number of invalidation batches that you want in the response body.
        public let maxItems: String?
        /// The distribution's ID.
        public let distributionId: String

        public init(marker: String? = nil, maxItems: String? = nil, distributionId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.distributionId = distributionId
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["MaxItems"] as? String
            guard let distributionId = dictionary["DistributionId"] as? String else { throw InitializableError.missingRequiredParam("DistributionId") }
            self.distributionId = distributionId
        }
    }

    public struct CacheBehaviors: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional: A complex type that contains cache behaviors for this distribution. If Quantity is 0, you can omit Items.
        public let items: CacheBehaviorList?
        /// The number of cache behaviors for this distribution. 
        public let quantity: Int32

        public init(items: CacheBehaviorList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.CacheBehaviorList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public enum CertificateSource: String, CustomStringConvertible {
        case cloudfront = "cloudfront"
        case iam = "iam"
        case acm = "acm"
        public var description: String { return self.rawValue }
    }

    public struct CreateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentity"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag", "Location": "Location"]
        }
        /// The current version of the origin access identity created.
        public let eTag: String?
        /// The fully qualified URI of the new origin access identity just created. For example: https://cloudfront.amazonaws.com/2010-11-01/origin-access-identity/cloudfront/E74FTE3AJFJ256A.
        public let location: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, location: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.location = location
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.location = dictionary["Location"] as? String
            if let cloudFrontOriginAccessIdentity = dictionary["CloudFrontOriginAccessIdentity"] as? [String: Any] { self.cloudFrontOriginAccessIdentity = try Cloudfront.CloudFrontOriginAccessIdentity(dictionary: cloudFrontOriginAccessIdentity) } else { self.cloudFrontOriginAccessIdentity = nil }
        }
    }

    public struct AllowedMethods: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the HTTP methods that you want CloudFront to process and forward to your origin.
        public let items: MethodsList
        public let cachedMethods: CachedMethods?
        /// The number of HTTP methods that you want CloudFront to forward to your origin. Valid values are 2 (for GET and HEAD requests), 3 (for GET, HEAD, and OPTIONS requests) and 7 (for GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests).
        public let quantity: Int32

        public init(items: MethodsList, cachedMethods: CachedMethods? = nil, quantity: Int32) {
            self.items = items
            self.cachedMethods = cachedMethods
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try Cloudfront.MethodsList(dictionary: items)
            if let cachedMethods = dictionary["CachedMethods"] as? [String: Any] { self.cachedMethods = try Cloudfront.CachedMethods(dictionary: cachedMethods) } else { self.cachedMethods = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct CreateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistributionConfig"
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(streamingDistributionConfig: StreamingDistributionConfig) {
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamingDistributionConfig = dictionary["StreamingDistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamingDistributionConfig") }
            self.streamingDistributionConfig = try Cloudfront.StreamingDistributionConfig(dictionary: streamingDistributionConfig)
        }
    }

    public struct ListStreamingDistributionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Marker": "Marker", "MaxItems": "MaxItems"]
        }
        /// The value that you provided for the Marker request parameter.
        public let marker: String?
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["MaxItems"] as? String
        }
    }

    public struct ListDistributionsByWebACLIdResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionList"
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        public init(dictionary: [String: Any]) throws {
            if let distributionList = dictionary["DistributionList"] as? [String: Any] { self.distributionList = try Cloudfront.DistributionList(dictionary: distributionList) } else { self.distributionList = nil }
        }
    }

    public struct ListDistributionsByWebACLIdRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Marker": "Marker", "MaxItems": "MaxItems"]
        }
        public static var pathParams: [String: String] {
            return ["WebACLId": "WebACLId"]
        }
        /// Use Marker and MaxItems to control pagination of results. If you have more than MaxItems distributions that satisfy the request, the response includes a NextMarker element. To get the next page of results, submit another request. For the value of Marker, specify the value of NextMarker from the last response. (For the first request, omit Marker.) 
        public let marker: String?
        /// The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
        public let maxItems: String?
        /// The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify "null" for the ID, the request returns a list of the distributions that aren't associated with a web ACL. 
        public let webACLId: String

        public init(marker: String? = nil, maxItems: String? = nil, webACLId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.webACLId = webACLId
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["MaxItems"] as? String
            guard let webACLId = dictionary["WebACLId"] as? String else { throw InitializableError.missingRequiredParam("WebACLId") }
            self.webACLId = webACLId
        }
    }

    public struct S3OriginConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can only access objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/CloudFront/ID-of-origin-access-identity  where  ID-of-origin-access-identity  is the value that CloudFront returned in the ID element when you created the origin access identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information about the origin access identity, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(originAccessIdentity: String) {
            self.originAccessIdentity = originAccessIdentity
        }

        public init(dictionary: [String: Any]) throws {
            guard let originAccessIdentity = dictionary["OriginAccessIdentity"] as? String else { throw InitializableError.missingRequiredParam("OriginAccessIdentity") }
            self.originAccessIdentity = originAccessIdentity
        }
    }

    public struct CookiePreference: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the WhitelistedNames complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the Forward element. 
        public let forward: ItemSelection
        /// Required if you specify whitelist for the value of Forward:. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies. If you specify all or none for the value of Forward, omit WhitelistedNames. If you change the value of Forward from whitelist to all or none and you don't delete the WhitelistedNames element and its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each cache behavior, see Amazon CloudFront Limits in the AWS General Reference.
        public let whitelistedNames: CookieNames?

        public init(forward: ItemSelection, whitelistedNames: CookieNames? = nil) {
            self.forward = forward
            self.whitelistedNames = whitelistedNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawForward = dictionary["Forward"] as? String, let forward = ItemSelection(rawValue: rawForward) else { throw InitializableError.missingRequiredParam("Forward") }
            self.forward = forward
            if let whitelistedNames = dictionary["WhitelistedNames"] as? [String: Any] { self.whitelistedNames = try Cloudfront.CookieNames(dictionary: whitelistedNames) } else { self.whitelistedNames = nil }
        }
    }

    public struct OriginSslProtocols: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains allowed SSL/TLS protocols for this distribution.
        public let items: SslProtocolsList
        /// The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin. 
        public let quantity: Int32

        public init(items: SslProtocolsList, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try Cloudfront.SslProtocolsList(dictionary: items)
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public enum MinimumProtocolVersion: String, CustomStringConvertible {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        public var description: String { return self.rawValue }
    }

    public struct CreateDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionConfigWithTags"
        /// The distribution's configuration information. 
        public let distributionConfigWithTags: DistributionConfigWithTags

        public init(distributionConfigWithTags: DistributionConfigWithTags) {
            self.distributionConfigWithTags = distributionConfigWithTags
        }

        public init(dictionary: [String: Any]) throws {
            guard let distributionConfigWithTags = dictionary["DistributionConfigWithTags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DistributionConfigWithTags") }
            self.distributionConfigWithTags = try Cloudfront.DistributionConfigWithTags(dictionary: distributionConfigWithTags)
        }
    }

    public struct CreateDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Distribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag", "Location": "Location"]
        }
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5. 
        public let location: String?
        /// The distribution's information. 
        public let distribution: Distribution?

        public init(eTag: String? = nil, location: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.distribution = distribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.location = dictionary["Location"] as? String
            if let distribution = dictionary["Distribution"] as? [String: Any] { self.distribution = try Cloudfront.Distribution(dictionary: distribution) } else { self.distribution = nil }
        }
    }

    public struct CreateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Distribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag", "Location": "Location"]
        }
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5.
        public let location: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, location: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.distribution = distribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.location = dictionary["Location"] as? String
            if let distribution = dictionary["Distribution"] as? [String: Any] { self.distribution = try Cloudfront.Distribution(dictionary: distribution) } else { self.distribution = nil }
        }
    }

    public struct ListDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "DistributionList"
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        public init(dictionary: [String: Any]) throws {
            if let distributionList = dictionary["DistributionList"] as? [String: Any] { self.distributionList = try Cloudfront.DistributionList(dictionary: distributionList) } else { self.distributionList = nil }
        }
    }

    public struct DistributionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// A flag that indicates whether more distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your distributions where they left off. 
        public let nextMarker: String?
        /// The value you provided for the Marker request parameter.
        public let marker: String
        /// A complex type that contains one DistributionSummary element for each distribution that was created by the current AWS account.
        public let items: DistributionSummaryList?
        /// The number of distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: DistributionSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let maxItems = dictionary["MaxItems"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.DistributionSummaryList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct TagKeys: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  A complex type that contains Tag key elements.
        public let items: TagKeyList?

        public init(items: TagKeyList? = nil) {
            self.items = items
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.TagKeyList(dictionary: items) } else { self.items = nil }
        }
    }

    public enum EventType: String, CustomStringConvertible {
        case viewer_request = "viewer-request"
        case viewer_response = "viewer-response"
        case origin_request = "origin-request"
        case origin_response = "origin-response"
        public var description: String { return self.rawValue }
    }

    public struct LoggingConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// An optional string that you want CloudFront to prefix to the access log filenames for this distribution, for example, myprefix/. If you want to enable logging, but you do not want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you do not want to enable logging when you create a distribution or if you want to disable logging for an existing distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket, prefix, and IncludeCookies, the values are automatically deleted.
        public let enabled: Bool
        /// Specifies whether you want CloudFront to include cookies in access logs, specify true for IncludeCookies. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you do not want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify false for IncludeCookies.
        public let includeCookies: Bool

        public init(bucket: String, prefix: String, enabled: Bool, includeCookies: Bool) {
            self.bucket = bucket
            self.prefix = prefix
            self.enabled = enabled
            self.includeCookies = includeCookies
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let prefix = dictionary["Prefix"] as? String else { throw InitializableError.missingRequiredParam("Prefix") }
            self.prefix = prefix
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let includeCookies = dictionary["IncludeCookies"] as? Bool else { throw InitializableError.missingRequiredParam("IncludeCookies") }
            self.includeCookies = includeCookies
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Marker": "Marker", "MaxItems": "MaxItems"]
        }
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page).
        public let marker: String?
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["MaxItems"] as? String
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Tags"
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(tags: Tags) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Cloudfront.Tags(dictionary: tags)
        }
    }

    public struct HeaderList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? [String]
        }
    }

    public struct ListDistributionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["Marker": "Marker", "MaxItems": "MaxItems"]
        }
        /// Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last distribution on that page).
        public let marker: String?
        /// The maximum number of distributions you want in the response body.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["MaxItems"] as? String
        }
    }

    public struct DistributionConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// (Optional) Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP version. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support Server Name Identification (SNI). In general, configuring CloudFront to communicate with viewers using HTTP/2 reduces latency. You can improve performance by optimizing for HTTP/2. For more information, do an Internet search for "http/2 optimization." 
        public let httpVersion: HttpVersion?
        /// The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). Specifying a default root object avoids exposing the contents of your distribution. Specify only the object name, for example, index.html. Do not add a / before the object name. If you don't want to specify a default root object when you create a distribution, include an empty DefaultRootObject element. To delete the default root object from an existing distribution, update the distribution configuration and include an empty DefaultRootObject element. To replace the default root object, update the distribution configuration and specify the new object. For more information about the default root object, see Creating a Default Root Object in the Amazon CloudFront Developer Guide.
        public let defaultRootObject: String?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the DistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value you already sent in a previous request to create a distribution, and if the content of the DistributionConfig is identical to the original request (ignoring white space), CloudFront returns the same the response that it returned to the original request. If CallerReference is a value you already sent in a previous request to create a distribution but the content of the DistributionConfig is different from the original request, CloudFront returns a DistributionAlreadyExists error.
        public let callerReference: String
        /// A complex type that controls the following:   Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.   How long CloudFront caches HTTP status codes in the 4xx and 5xx range.   For more information about custom error pages, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let customErrorResponses: CustomErrorResponses?
        /// A complex type that contains information about origins for this distribution. 
        public let origins: Origins
        /// A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about AWS WAF, see the AWS WAF Developer Guide. 
        public let webACLId: String?
        /// Any comments you want to include about the distribution. If you don't want to specify a comment, include an empty Comment element. To delete an existing comment, update the distribution configuration and include an empty Comment element. To add or change a comment, update the distribution configuration and specify the new comment.
        public let comment: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you do not want to enable logging when you create a distribution, or if you want to disable logging for an existing distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted.
        public let enabled: Bool
        /// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify true. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution.  In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the IpAddress parameter to restrict the IP addresses that can access your content, do not enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see Creating a Signed URL Using a Custom Policy in the Amazon CloudFront Developer Guide. If you're using an Amazon Route 53 alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:   You enable IPv6 for the distribution   You're using alternate domain names in the URLs for your objects   For more information, see Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name in the Amazon Route 53 Developer Guide. If you created a CNAME resource record set, either with Amazon Route 53 or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.
        public let isIPV6Enabled: Bool?
        /// The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance. For more information about price classes, see Choosing the Price Class for a CloudFront Distribution in the Amazon CloudFront Developer Guide. For information about CloudFront pricing, including how price classes map to CloudFront regions, see Amazon CloudFront Pricing.
        public let priceClass: PriceClass?
        public let viewerCertificate: ViewerCertificate?
        public let restrictions: Restrictions?
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases?
        /// A complex type that controls whether access logs are written for the distribution. For more information about logging, see Access Logs in the Amazon CloudFront Developer Guide.
        public let logging: LoggingConfig?
        /// A complex type that contains zero or more CacheBehavior elements. 
        public let cacheBehaviors: CacheBehaviors?
        /// A complex type that describes the default cache behavior if you do not specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior

        public init(httpVersion: HttpVersion? = nil, defaultRootObject: String? = nil, callerReference: String, customErrorResponses: CustomErrorResponses? = nil, origins: Origins, webACLId: String? = nil, comment: String, enabled: Bool, isIPV6Enabled: Bool? = nil, priceClass: PriceClass? = nil, viewerCertificate: ViewerCertificate? = nil, restrictions: Restrictions? = nil, aliases: Aliases? = nil, logging: LoggingConfig? = nil, cacheBehaviors: CacheBehaviors? = nil, defaultCacheBehavior: DefaultCacheBehavior) {
            self.httpVersion = httpVersion
            self.defaultRootObject = defaultRootObject
            self.callerReference = callerReference
            self.customErrorResponses = customErrorResponses
            self.origins = origins
            self.webACLId = webACLId
            self.comment = comment
            self.enabled = enabled
            self.isIPV6Enabled = isIPV6Enabled
            self.priceClass = priceClass
            self.viewerCertificate = viewerCertificate
            self.restrictions = restrictions
            self.aliases = aliases
            self.logging = logging
            self.cacheBehaviors = cacheBehaviors
            self.defaultCacheBehavior = defaultCacheBehavior
        }

        public init(dictionary: [String: Any]) throws {
            if let httpVersion = dictionary["HttpVersion"] as? String { self.httpVersion = HttpVersion(rawValue: httpVersion) } else { self.httpVersion = nil }
            self.defaultRootObject = dictionary["DefaultRootObject"] as? String
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            if let customErrorResponses = dictionary["CustomErrorResponses"] as? [String: Any] { self.customErrorResponses = try Cloudfront.CustomErrorResponses(dictionary: customErrorResponses) } else { self.customErrorResponses = nil }
            guard let origins = dictionary["Origins"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Origins") }
            self.origins = try Cloudfront.Origins(dictionary: origins)
            self.webACLId = dictionary["WebACLId"] as? String
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            self.isIPV6Enabled = dictionary["IsIPV6Enabled"] as? Bool
            if let priceClass = dictionary["PriceClass"] as? String { self.priceClass = PriceClass(rawValue: priceClass) } else { self.priceClass = nil }
            if let viewerCertificate = dictionary["ViewerCertificate"] as? [String: Any] { self.viewerCertificate = try Cloudfront.ViewerCertificate(dictionary: viewerCertificate) } else { self.viewerCertificate = nil }
            if let restrictions = dictionary["Restrictions"] as? [String: Any] { self.restrictions = try Cloudfront.Restrictions(dictionary: restrictions) } else { self.restrictions = nil }
            if let aliases = dictionary["Aliases"] as? [String: Any] { self.aliases = try Cloudfront.Aliases(dictionary: aliases) } else { self.aliases = nil }
            if let logging = dictionary["Logging"] as? [String: Any] { self.logging = try Cloudfront.LoggingConfig(dictionary: logging) } else { self.logging = nil }
            if let cacheBehaviors = dictionary["CacheBehaviors"] as? [String: Any] { self.cacheBehaviors = try Cloudfront.CacheBehaviors(dictionary: cacheBehaviors) } else { self.cacheBehaviors = nil }
            guard let defaultCacheBehavior = dictionary["DefaultCacheBehavior"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DefaultCacheBehavior") }
            self.defaultCacheBehavior = try Cloudfront.DefaultCacheBehavior(dictionary: defaultCacheBehavior)
        }
    }

    public struct Restrictions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let geoRestriction: GeoRestriction

        public init(geoRestriction: GeoRestriction) {
            self.geoRestriction = geoRestriction
        }

        public init(dictionary: [String: Any]) throws {
            guard let geoRestriction = dictionary["GeoRestriction"] as? [String: Any] else { throw InitializableError.missingRequiredParam("GeoRestriction") }
            self.geoRestriction = try Cloudfront.GeoRestriction(dictionary: geoRestriction)
        }
    }

    public struct ViewerCertificate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If you specify a value for ACMCertificateArn or for IAMCertificateId, you must also specify how you want CloudFront to serve HTTPS requests: using a method that works for all clients or one that works for most clients:    vip: CloudFront uses dedicated IP addresses for your content and can respond to HTTPS requests from any viewer. However, you must request permission to use this feature, and you incur additional monthly charges.    sni-only: CloudFront can respond to HTTPS requests from viewers that support Server Name Indication (SNI). All modern browsers support SNI, but some browsers still in use don't support SNI. If some of your users' browsers don't support SNI, we recommend that you do one of the following:   Use the vip option (dedicated IP addresses) instead of sni-only.   Use the CloudFront SSL/TLS certificate instead of a custom certificate. This requires that you use the CloudFront domain name of your distribution in the URLs for your objects, for example, https://d111111abcdef8.cloudfront.net/logo.png.   If you can control which browser your users use, upgrade the browser to one that supports SNI.   Use HTTP instead of HTTPS.     Do not specify a value for SSLSupportMethod if you specified &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;. For more information, see Using Alternate Domain Names and HTTPS in the Amazon CloudFront Developer Guide.
        public let sSLSupportMethod: SSLSupportMethod?
        public let iAMCertificateId: String?
        /// Specify the minimum version of the SSL/TLS protocol that you want CloudFront to use for HTTPS connections between viewers and CloudFront: SSLv3 or TLSv1. CloudFront serves your objects only to viewers that support SSL/TLS version that you specify and later versions. The TLSv1 protocol is more secure, so we recommend that you specify SSLv3 only if your users are using browsers or devices that don't support TLSv1. Note the following:   If you specify &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;, the minimum SSL protocol version is TLSv1 and can't be changed.   If you're using a custom certificate (if you specify a value for ACMCertificateArn or for IAMCertificateId) and if you're using SNI (if you specify sni-only for SSLSupportMethod), you must specify TLSv1 for MinimumProtocolVersion.  
        public let minimumProtocolVersion: MinimumProtocolVersion?
        public let aCMCertificateArn: String?
        /// Include one of these values to specify the following:   Whether you want viewers to use HTTP or HTTPS to request your objects.   If you want viewers to use HTTPS, whether you're using an alternate domain name such as example.com or the CloudFront domain name for your distribution, such as d111111abcdef8.cloudfront.net.   If you're using an alternate domain name, whether AWS Certificate Manager (ACM) provided the certificate, or you purchased a certificate from a third-party certificate authority and imported it into ACM or uploaded it to the IAM certificate store.   You must specify one (and only one) of the three values. Do not specify false for CloudFrontDefaultCertificate.  If you want viewers to use HTTP to request your objects: Specify the following value:  &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;  In addition, specify allow-all for ViewerProtocolPolicy for all of your cache behaviors.  If you want viewers to use HTTPS to request your objects: Choose the type of certificate that you want to use based on whether you're using an alternate domain name for your objects or the CloudFront domain name:    If you're using an alternate domain name, such as example.com: Specify one of the following values, depending on whether ACM provided your certificate or you purchased your certificate from third-party certificate authority:    &lt;ACMCertificateArn&gt;ARN for ACM SSL/TLS certificate&lt;ACMCertificateArn&gt; where ARN for ACM SSL/TLS certificate is the ARN for the ACM SSL/TLS certificate that you want to use for this distribution.    &lt;IAMCertificateId&gt;IAM certificate ID&lt;IAMCertificateId&gt; where IAM certificate ID is the ID that IAM returned when you added the certificate to the IAM certificate store.   If you specify ACMCertificateArn or IAMCertificateId, you must also specify a value for SSLSupportMethod. If you choose to use an ACM certificate or a certificate in the IAM certificate store, we recommend that you use only an alternate domain name in your object URLs (https://example.com/logo.jpg). If you use the domain name that is associated with your CloudFront distribution (https://d111111abcdef8.cloudfront.net/logo.jpg) and the viewer supports SNI, then CloudFront behaves normally. However, if the browser does not support SNI, the user's experience depends on the value that you choose for SSLSupportMethod:    vip: The viewer displays a warning because there is a mismatch between the CloudFront domain name and the domain name in your SSL/TLS certificate.    sni-only: CloudFront drops the connection with the browser without returning the object.      If you're using the CloudFront domain name for your distribution, such as d111111abcdef8.cloudfront.net : Specify the following value:   &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;   If you want viewers to use HTTPS, you must also specify one of the following values in your cache behaviors:     &lt;ViewerProtocolPolicy&gt;https-only&lt;ViewerProtocolPolicy&gt;       &lt;ViewerProtocolPolicy&gt;redirect-to-https&lt;ViewerProtocolPolicy&gt;     You can also optionally require that CloudFront use HTTPS to communicate with your origin by specifying one of the following values for the applicable origins:     &lt;OriginProtocolPolicy&gt;https-only&lt;OriginProtocolPolicy&gt;       &lt;OriginProtocolPolicy&gt;match-viewer&lt;OriginProtocolPolicy&gt;     For more information, see Using Alternate Domain Names and HTTPS in the Amazon CloudFront Developer Guide.  
        public let certificate: String?
        public let cloudFrontDefaultCertificate: Bool?
        ///  This field is deprecated. You can use one of the following: [ACMCertificateArn, IAMCertificateId, or CloudFrontDefaultCertificate]. 
        public let certificateSource: CertificateSource?

        public init(sSLSupportMethod: SSLSupportMethod? = nil, iAMCertificateId: String? = nil, minimumProtocolVersion: MinimumProtocolVersion? = nil, aCMCertificateArn: String? = nil, certificate: String? = nil, cloudFrontDefaultCertificate: Bool? = nil, certificateSource: CertificateSource? = nil) {
            self.sSLSupportMethod = sSLSupportMethod
            self.iAMCertificateId = iAMCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.aCMCertificateArn = aCMCertificateArn
            self.certificate = certificate
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.certificateSource = certificateSource
        }

        public init(dictionary: [String: Any]) throws {
            if let sSLSupportMethod = dictionary["SSLSupportMethod"] as? String { self.sSLSupportMethod = SSLSupportMethod(rawValue: sSLSupportMethod) } else { self.sSLSupportMethod = nil }
            self.iAMCertificateId = dictionary["IAMCertificateId"] as? String
            if let minimumProtocolVersion = dictionary["MinimumProtocolVersion"] as? String { self.minimumProtocolVersion = MinimumProtocolVersion(rawValue: minimumProtocolVersion) } else { self.minimumProtocolVersion = nil }
            self.aCMCertificateArn = dictionary["ACMCertificateArn"] as? String
            self.certificate = dictionary["Certificate"] as? String
            self.cloudFrontDefaultCertificate = dictionary["CloudFrontDefaultCertificate"] as? Bool
            if let certificateSource = dictionary["CertificateSource"] as? String { self.certificateSource = CertificateSource(rawValue: certificateSource) } else { self.certificateSource = nil }
        }
    }

    public struct UntagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "TagKeys"
        public static var queryParams: [String: String] {
            return ["Resource": "Resource"]
        }
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag key elements.
        public let tagKeys: TagKeys

        public init(resource: String, tagKeys: TagKeys) {
            self.resource = resource
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resource = dictionary["Resource"] as? String else { throw InitializableError.missingRequiredParam("Resource") }
            self.resource = resource
            guard let tagKeys = dictionary["TagKeys"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = try Cloudfront.TagKeys(dictionary: tagKeys)
        }
    }

    public struct GetStreamingDistributionConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct StreamingDistribution: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date and time that the distribution was last modified. 
        public let lastModifiedTime: Date?
        /// The current status of the RTMP distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// The current configuration information for the RTMP distribution.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// A complex type that lists the AWS accounts, if any, that you included in the TrustedSigners complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content. The Signer complex type lists the AWS account number of the trusted signer or self if the signer is the AWS account that created the distribution. The Signer element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create signed URLs. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let activeTrustedSigners: ActiveTrustedSigners
        public let aRN: String
        /// The domain name that corresponds to the streaming distribution. For example: s5c39gqb8ow64r.cloudfront.net. 
        public let domainName: String
        /// The identifier for the RTMP distribution. For example: EGTXBD79EXAMPLE.
        public let id: String

        public init(lastModifiedTime: Date? = nil, status: String, streamingDistributionConfig: StreamingDistributionConfig, activeTrustedSigners: ActiveTrustedSigners, aRN: String, domainName: String, id: String) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.streamingDistributionConfig = streamingDistributionConfig
            self.activeTrustedSigners = activeTrustedSigners
            self.aRN = aRN
            self.domainName = domainName
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModifiedTime = dictionary["LastModifiedTime"] as? Date
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let streamingDistributionConfig = dictionary["StreamingDistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamingDistributionConfig") }
            self.streamingDistributionConfig = try Cloudfront.StreamingDistributionConfig(dictionary: streamingDistributionConfig)
            guard let activeTrustedSigners = dictionary["ActiveTrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ActiveTrustedSigners") }
            self.activeTrustedSigners = try Cloudfront.ActiveTrustedSigners(dictionary: activeTrustedSigners)
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CustomHeaders: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Optional: A list that contains one OriginCustomHeader element for each custom header that you want CloudFront to forward to the origin. If Quantity is 0, omit Items.
        public let items: OriginCustomHeadersList?
        /// The number of custom headers, if any, for this distribution.
        public let quantity: Int32

        public init(items: OriginCustomHeadersList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.OriginCustomHeadersList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct CachedMethods: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the HTTP methods that you want CloudFront to cache responses to.
        public let items: MethodsList
        /// The number of HTTP methods for which you want CloudFront to cache responses. Valid values are 2 (for caching responses to GET and HEAD requests) and 3 (for caching responses to GET, HEAD, and OPTIONS requests).
        public let quantity: Int32

        public init(items: MethodsList, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let items = dictionary["Items"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Items") }
            self.items = try Cloudfront.MethodsList(dictionary: items)
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct DistributionSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 will automatically use an earlier version.
        public let httpVersion: HttpVersion
        /// A complex type that contains zero or more CustomErrorResponses elements.
        public let customErrorResponses: CustomErrorResponses
        /// A complex type that contains information about origins for this distribution.
        public let origins: Origins
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// Whether the distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// The Web ACL Id (if any) associated with the distribution.
        public let webACLId: String
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let aRN: String
        /// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.
        public let isIPV6Enabled: Bool
        public let restrictions: Restrictions
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: Date
        public let viewerCertificate: ViewerCertificate
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        public let id: String
        /// The current status of the distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases
        public let priceClass: PriceClass
        /// A complex type that contains zero or more CacheBehavior elements.
        public let cacheBehaviors: CacheBehaviors
        /// The domain name that corresponds to the distribution. For example: d604721fxaaqy9.cloudfront.net.
        public let domainName: String
        /// A complex type that describes the default cache behavior if you do not specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior

        public init(httpVersion: HttpVersion, customErrorResponses: CustomErrorResponses, origins: Origins, comment: String, enabled: Bool, webACLId: String, aRN: String, isIPV6Enabled: Bool, restrictions: Restrictions, lastModifiedTime: Date, viewerCertificate: ViewerCertificate, id: String, status: String, aliases: Aliases, priceClass: PriceClass, cacheBehaviors: CacheBehaviors, domainName: String, defaultCacheBehavior: DefaultCacheBehavior) {
            self.httpVersion = httpVersion
            self.customErrorResponses = customErrorResponses
            self.origins = origins
            self.comment = comment
            self.enabled = enabled
            self.webACLId = webACLId
            self.aRN = aRN
            self.isIPV6Enabled = isIPV6Enabled
            self.restrictions = restrictions
            self.lastModifiedTime = lastModifiedTime
            self.viewerCertificate = viewerCertificate
            self.id = id
            self.status = status
            self.aliases = aliases
            self.priceClass = priceClass
            self.cacheBehaviors = cacheBehaviors
            self.domainName = domainName
            self.defaultCacheBehavior = defaultCacheBehavior
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawHttpVersion = dictionary["HttpVersion"] as? String, let httpVersion = HttpVersion(rawValue: rawHttpVersion) else { throw InitializableError.missingRequiredParam("HttpVersion") }
            self.httpVersion = httpVersion
            guard let customErrorResponses = dictionary["CustomErrorResponses"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CustomErrorResponses") }
            self.customErrorResponses = try Cloudfront.CustomErrorResponses(dictionary: customErrorResponses)
            guard let origins = dictionary["Origins"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Origins") }
            self.origins = try Cloudfront.Origins(dictionary: origins)
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let webACLId = dictionary["WebACLId"] as? String else { throw InitializableError.missingRequiredParam("WebACLId") }
            self.webACLId = webACLId
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let isIPV6Enabled = dictionary["IsIPV6Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("IsIPV6Enabled") }
            self.isIPV6Enabled = isIPV6Enabled
            guard let restrictions = dictionary["Restrictions"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Restrictions") }
            self.restrictions = try Cloudfront.Restrictions(dictionary: restrictions)
            guard let lastModifiedTime = dictionary["LastModifiedTime"] as? Date else { throw InitializableError.missingRequiredParam("LastModifiedTime") }
            self.lastModifiedTime = lastModifiedTime
            guard let viewerCertificate = dictionary["ViewerCertificate"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ViewerCertificate") }
            self.viewerCertificate = try Cloudfront.ViewerCertificate(dictionary: viewerCertificate)
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let aliases = dictionary["Aliases"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Aliases") }
            self.aliases = try Cloudfront.Aliases(dictionary: aliases)
            guard let rawPriceClass = dictionary["PriceClass"] as? String, let priceClass = PriceClass(rawValue: rawPriceClass) else { throw InitializableError.missingRequiredParam("PriceClass") }
            self.priceClass = priceClass
            guard let cacheBehaviors = dictionary["CacheBehaviors"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CacheBehaviors") }
            self.cacheBehaviors = try Cloudfront.CacheBehaviors(dictionary: cacheBehaviors)
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            guard let defaultCacheBehavior = dictionary["DefaultCacheBehavior"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DefaultCacheBehavior") }
            self.defaultCacheBehavior = try Cloudfront.DefaultCacheBehavior(dictionary: defaultCacheBehavior)
        }
    }

    public struct CustomOriginConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The HTTPS port the custom origin listens on.
        public let hTTPSPort: Int32
        /// The HTTP port the custom origin listens on.
        public let hTTPPort: Int32
        /// The origin protocol policy to apply to your origin.
        public let originProtocolPolicy: OriginProtocolPolicy
        /// The SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS.
        public let originSslProtocols: OriginSslProtocols?

        public init(hTTPSPort: Int32, hTTPPort: Int32, originProtocolPolicy: OriginProtocolPolicy, originSslProtocols: OriginSslProtocols? = nil) {
            self.hTTPSPort = hTTPSPort
            self.hTTPPort = hTTPPort
            self.originProtocolPolicy = originProtocolPolicy
            self.originSslProtocols = originSslProtocols
        }

        public init(dictionary: [String: Any]) throws {
            guard let hTTPSPort = dictionary["HTTPSPort"] as? Int32 else { throw InitializableError.missingRequiredParam("HTTPSPort") }
            self.hTTPSPort = hTTPSPort
            guard let hTTPPort = dictionary["HTTPPort"] as? Int32 else { throw InitializableError.missingRequiredParam("HTTPPort") }
            self.hTTPPort = hTTPPort
            guard let rawOriginProtocolPolicy = dictionary["OriginProtocolPolicy"] as? String, let originProtocolPolicy = OriginProtocolPolicy(rawValue: rawOriginProtocolPolicy) else { throw InitializableError.missingRequiredParam("OriginProtocolPolicy") }
            self.originProtocolPolicy = originProtocolPolicy
            if let originSslProtocols = dictionary["OriginSslProtocols"] as? [String: Any] { self.originSslProtocols = try Cloudfront.OriginSslProtocols(dictionary: originSslProtocols) } else { self.originSslProtocols = nil }
        }
    }

    public struct CreateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag", "Location": "Location"]
        }
        /// The current version of the streaming distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            self.location = dictionary["Location"] as? String
            if let streamingDistribution = dictionary["StreamingDistribution"] as? [String: Any] { self.streamingDistribution = try Cloudfront.StreamingDistribution(dictionary: streamingDistribution) } else { self.streamingDistribution = nil }
        }
    }

    public struct KeyPairIdList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let keyPairId: [String]?

        public init(keyPairId: [String]? = nil) {
            self.keyPairId = keyPairId
        }

        public init(dictionary: [String: Any]) throws {
            self.keyPairId = dictionary["KeyPairId"] as? [String]
        }
    }

    public struct CustomErrorResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:   Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute 200, the response typically won't be intercepted.   If you don't care about distinguishing among different client errors or server errors, you can specify 400 or 500 as the ResponseCode for all 4xx or 5xx errors.   You might want to return a 200 status code (OK) and static website so your customers don't know that your website is down.   If you specify a value for ResponseCode, you must also specify a value for ResponsePagePath. If you don't want to specify a value, include an empty element, &lt;ResponseCode&gt;, in the XML document.
        public let responseCode: String?
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. If you don't want to specify a value, include an empty element, &lt;ErrorCachingMinTTL&gt;, in the XML document. For more information, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let errorCachingMinTTL: Int64?
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        public let errorCode: Int32
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:   The value of PathPattern matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named /4xx-errors. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, /4xx-errors/*.    The value of TargetOriginId specifies the value of the ID element for the origin that contains your custom error pages.   If you specify a value for ResponsePagePath, you must also specify a value for ResponseCode. If you don't want to specify a value, include an empty element, &lt;ResponsePagePath&gt;, in the XML document. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.
        public let responsePagePath: String?

        public init(responseCode: String? = nil, errorCachingMinTTL: Int64? = nil, errorCode: Int32, responsePagePath: String? = nil) {
            self.responseCode = responseCode
            self.errorCachingMinTTL = errorCachingMinTTL
            self.errorCode = errorCode
            self.responsePagePath = responsePagePath
        }

        public init(dictionary: [String: Any]) throws {
            self.responseCode = dictionary["ResponseCode"] as? String
            self.errorCachingMinTTL = dictionary["ErrorCachingMinTTL"] as? Int64
            guard let errorCode = dictionary["ErrorCode"] as? Int32 else { throw InitializableError.missingRequiredParam("ErrorCode") }
            self.errorCode = errorCode
            self.responsePagePath = dictionary["ResponsePagePath"] as? String
        }
    }

    public enum HttpVersion: String, CustomStringConvertible {
        case http1_1 = "http1.1"
        case http2 = "http2"
        public var description: String { return self.rawValue }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's configuration information. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let cloudFrontOriginAccessIdentityConfig = dictionary["CloudFrontOriginAccessIdentityConfig"] as? [String: Any] { self.cloudFrontOriginAccessIdentityConfig = try Cloudfront.CloudFrontOriginAccessIdentityConfig(dictionary: cloudFrontOriginAccessIdentityConfig) } else { self.cloudFrontOriginAccessIdentityConfig = nil }
        }
    }

    public struct CloudFrontOriginAccessIdentity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3. 
        public let s3CanonicalUserId: String
        /// The current configuration information for the identity. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?
        /// The ID for the origin access identity. For example: E74FTE3AJFJ256A. 
        public let id: String

        public init(s3CanonicalUserId: String, cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil, id: String) {
            self.s3CanonicalUserId = s3CanonicalUserId
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let s3CanonicalUserId = dictionary["S3CanonicalUserId"] as? String else { throw InitializableError.missingRequiredParam("S3CanonicalUserId") }
            self.s3CanonicalUserId = s3CanonicalUserId
            if let cloudFrontOriginAccessIdentityConfig = dictionary["CloudFrontOriginAccessIdentityConfig"] as? [String: Any] { self.cloudFrontOriginAccessIdentityConfig = try Cloudfront.CloudFrontOriginAccessIdentityConfig(dictionary: cloudFrontOriginAccessIdentityConfig) } else { self.cloudFrontOriginAccessIdentityConfig = nil }
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct TagList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [[String: Any]] {
                self.tag = try tag.map({ try Tag(dictionary: $0) })
            } else { 
                self.tag = nil
            }
        }
    }

    public struct GetDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public enum SslProtocol: String, CustomStringConvertible {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        case tlsv1_1 = "TLSv1.1"
        case tlsv1_2 = "TLSv1.2"
        public var description: String { return self.rawValue }
    }

    public struct StreamingLoggingConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you do not want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted. 
        public let enabled: Bool
        /// An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, myprefix/. If you want to enable logging, but you do not want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.prefix = prefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let bucket = dictionary["Bucket"] as? String else { throw InitializableError.missingRequiredParam("Bucket") }
            self.bucket = bucket
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let prefix = dictionary["Prefix"] as? String else { throw InitializableError.missingRequiredParam("Prefix") }
            self.prefix = prefix
        }
    }

    public enum OriginProtocolPolicy: String, CustomStringConvertible {
        case http_only = "http-only"
        case match_viewer = "match-viewer"
        case https_only = "https-only"
        public var description: String { return self.rawValue }
    }

    public struct GeoRestriction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  A complex type that contains a Location element for each country in which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). The Location element is a two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist. Include one Location element for each country. CloudFront and MaxMind both use ISO 3166 country codes. For the current list of countries and the corresponding codes, see ISO 3166-1-alpha-2 code on the International Organization for Standardization website. You can also refer to the country list in the CloudFront console, which includes both country names and codes.
        public let items: LocationList?
        /// The method that you want to use to restrict distribution of your content by country:    none: No geo restriction is enabled, meaning access to content is not restricted by client geo location.    blacklist: The Location elements specify the countries in which you do not want CloudFront to distribute your content.    whitelist: The Location elements specify the countries in which you want CloudFront to distribute your content.  
        public let restrictionType: GeoRestrictionType
        /// When geo restriction is enabled, this is the number of countries in your whitelist or blacklist. Otherwise, when it is not enabled, Quantity is 0, and you can omit Items.
        public let quantity: Int32

        public init(items: LocationList? = nil, restrictionType: GeoRestrictionType, quantity: Int32) {
            self.items = items
            self.restrictionType = restrictionType
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.LocationList(dictionary: items) } else { self.items = nil }
            guard let rawRestrictionType = dictionary["RestrictionType"] as? String, let restrictionType = GeoRestrictionType(rawValue: rawRestrictionType) else { throw InitializableError.missingRequiredParam("RestrictionType") }
            self.restrictionType = restrictionType
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct StreamingDistributionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value you provided for the MaxItems request parameter. 
        public let maxItems: Int32
        /// A flag that indicates whether more streaming distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list. 
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your RTMP distributions where they left off. 
        public let nextMarker: String?
        /// The value you provided for the Marker request parameter. 
        public let marker: String
        /// A complex type that contains one StreamingDistributionSummary element for each distribution that was created by the current AWS account.
        public let items: StreamingDistributionSummaryList?
        /// The number of streaming distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: StreamingDistributionSummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let maxItems = dictionary["MaxItems"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.StreamingDistributionSummaryList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct S3Origin: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The CloudFront origin access identity to associate with the RTMP distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content in the Amazon Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String
        /// The DNS name of the Amazon S3 origin. 
        public let domainName: String

        public init(originAccessIdentity: String, domainName: String) {
            self.originAccessIdentity = originAccessIdentity
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let originAccessIdentity = dictionary["OriginAccessIdentity"] as? String else { throw InitializableError.missingRequiredParam("OriginAccessIdentity") }
            self.originAccessIdentity = originAccessIdentity
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct AliasList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cNAME: [String]?

        public init(cNAME: [String]? = nil) {
            self.cNAME = cNAME
        }

        public init(dictionary: [String: Any]) throws {
            self.cNAME = dictionary["CNAME"] as? [String]
        }
    }

    public struct ListInvalidationsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "InvalidationList"
        /// Information about invalidation batches. 
        public let invalidationList: InvalidationList?

        public init(invalidationList: InvalidationList? = nil) {
            self.invalidationList = invalidationList
        }

        public init(dictionary: [String: Any]) throws {
            if let invalidationList = dictionary["InvalidationList"] as? [String: Any] { self.invalidationList = try Cloudfront.InvalidationList(dictionary: invalidationList) } else { self.invalidationList = nil }
        }
    }

    public struct CustomErrorResponseList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let customErrorResponse: [CustomErrorResponse]?

        public init(customErrorResponse: [CustomErrorResponse]? = nil) {
            self.customErrorResponse = customErrorResponse
        }

        public init(dictionary: [String: Any]) throws {
            if let customErrorResponse = dictionary["CustomErrorResponse"] as? [[String: Any]] {
                self.customErrorResponse = try customErrorResponse.map({ try CustomErrorResponse(dictionary: $0) })
            } else { 
                self.customErrorResponse = nil
            }
        }
    }

    public struct DistributionSummaryList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let distributionSummary: [DistributionSummary]?

        public init(distributionSummary: [DistributionSummary]? = nil) {
            self.distributionSummary = distributionSummary
        }

        public init(dictionary: [String: Any]) throws {
            if let distributionSummary = dictionary["DistributionSummary"] as? [[String: Any]] {
                self.distributionSummary = try distributionSummary.map({ try DistributionSummary(dictionary: $0) })
            } else { 
                self.distributionSummary = nil
            }
        }
    }

    public struct OriginCustomHeadersList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let originCustomHeader: [OriginCustomHeader]?

        public init(originCustomHeader: [OriginCustomHeader]? = nil) {
            self.originCustomHeader = originCustomHeader
        }

        public init(dictionary: [String: Any]) throws {
            if let originCustomHeader = dictionary["OriginCustomHeader"] as? [[String: Any]] {
                self.originCustomHeader = try originCustomHeader.map({ try OriginCustomHeader(dictionary: $0) })
            } else { 
                self.originCustomHeader = nil
            }
        }
    }

    public enum SSLSupportMethod: String, CustomStringConvertible {
        case sni_only = "sni-only"
        case vip = "vip"
        public var description: String { return self.rawValue }
    }

    public struct CloudFrontOriginAccessIdentitySummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID for the origin access identity. For example: E74FTE3AJFJ256A.
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.
        public let s3CanonicalUserId: String
        /// The comment for this origin access identity, as originally specified when created.
        public let comment: String

        public init(id: String, s3CanonicalUserId: String, comment: String) {
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let s3CanonicalUserId = dictionary["S3CanonicalUserId"] as? String else { throw InitializableError.missingRequiredParam("S3CanonicalUserId") }
            self.s3CanonicalUserId = s3CanonicalUserId
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
        }
    }

    public struct InvalidationSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID for an invalidation request.
        public let id: String
        /// The status of an invalidation request.
        public let status: String
        public let createTime: Date

        public init(id: String, status: String, createTime: Date) {
            self.id = id
            self.status = status
            self.createTime = createTime
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let createTime = dictionary["CreateTime"] as? Date else { throw InitializableError.missingRequiredParam("CreateTime") }
            self.createTime = createTime
        }
    }

    public struct ActiveTrustedSigners: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains one Signer complex type for each trusted signer that is specified in the TrustedSigners complex type. For more information, see ActiveTrustedSigners. 
        public let items: SignerList?
        /// Enabled is true if any of the AWS accounts listed in the TrustedSigners complex type for this RTMP distribution have active CloudFront key pairs. If not, Enabled is false. For more information, see ActiveTrustedSigners.
        public let enabled: Bool
        /// A complex type that contains one Signer complex type for each trusted signer specified in the TrustedSigners complex type. For more information, see ActiveTrustedSigners.
        public let quantity: Int32

        public init(items: SignerList? = nil, enabled: Bool, quantity: Int32) {
            self.items = items
            self.enabled = enabled
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.SignerList(dictionary: items) } else { self.items = nil }
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct StreamingDistributionConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution. 
        public let aliases: Aliases?
        /// A unique number that ensures that the request can't be replayed. If the CallerReference is new (no matter the content of the StreamingDistributionConfig object), a new streaming distribution is created. If the CallerReference is a value that you already sent in a previous request to create a streaming distribution, and the content of the StreamingDistributionConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request. If the CallerReference is a value that you already sent in a previous request to create a streaming distribution but the content of the StreamingDistributionConfig is different from the original request, CloudFront returns a DistributionAlreadyExists error. 
        public let callerReference: String
        /// A complex type that controls whether access logs are written for the streaming distribution. 
        public let logging: StreamingLoggingConfig?
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution. 
        public let s3Origin: S3Origin
        /// Whether the streaming distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// Any comments you want to include about the streaming distribution. 
        public let comment: String
        /// A complex type that specifies any AWS accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let trustedSigners: TrustedSigners
        /// A complex type that contains information about price class for this streaming distribution. 
        public let priceClass: PriceClass?

        public init(aliases: Aliases? = nil, callerReference: String, logging: StreamingLoggingConfig? = nil, s3Origin: S3Origin, enabled: Bool, comment: String, trustedSigners: TrustedSigners, priceClass: PriceClass? = nil) {
            self.aliases = aliases
            self.callerReference = callerReference
            self.logging = logging
            self.s3Origin = s3Origin
            self.enabled = enabled
            self.comment = comment
            self.trustedSigners = trustedSigners
            self.priceClass = priceClass
        }

        public init(dictionary: [String: Any]) throws {
            if let aliases = dictionary["Aliases"] as? [String: Any] { self.aliases = try Cloudfront.Aliases(dictionary: aliases) } else { self.aliases = nil }
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            if let logging = dictionary["Logging"] as? [String: Any] { self.logging = try Cloudfront.StreamingLoggingConfig(dictionary: logging) } else { self.logging = nil }
            guard let s3Origin = dictionary["S3Origin"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3Origin") }
            self.s3Origin = try Cloudfront.S3Origin(dictionary: s3Origin)
            guard let enabled = dictionary["Enabled"] as? Bool else { throw InitializableError.missingRequiredParam("Enabled") }
            self.enabled = enabled
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
            guard let trustedSigners = dictionary["TrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrustedSigners") }
            self.trustedSigners = try Cloudfront.TrustedSigners(dictionary: trustedSigners)
            if let priceClass = dictionary["PriceClass"] as? String { self.priceClass = PriceClass(rawValue: priceClass) } else { self.priceClass = nil }
        }
    }

    public struct MethodsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let method: [Method]?

        public init(method: [Method]? = nil) {
            self.method = method
        }

        public init(dictionary: [String: Any]) throws {
            if let method = dictionary["Method"] as? [String] { self.method = method.flatMap({ Method(rawValue: $0)}) } else { self.method = nil }
        }
    }

    public struct DeleteCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The value of the ETag header you received from a previous GET or PUT request. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The origin access identity's ID.
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.ifMatch = dictionary["If-Match"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateInvalidationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "InvalidationBatch"
        public static var pathParams: [String: String] {
            return ["DistributionId": "DistributionId"]
        }
        /// The batch information for the invalidation.
        public let invalidationBatch: InvalidationBatch
        /// The distribution's id.
        public let distributionId: String

        public init(invalidationBatch: InvalidationBatch, distributionId: String) {
            self.invalidationBatch = invalidationBatch
            self.distributionId = distributionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let invalidationBatch = dictionary["InvalidationBatch"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InvalidationBatch") }
            self.invalidationBatch = try Cloudfront.InvalidationBatch(dictionary: invalidationBatch)
            guard let distributionId = dictionary["DistributionId"] as? String else { throw InitializableError.missingRequiredParam("DistributionId") }
            self.distributionId = distributionId
        }
    }

    public struct TagKeyList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let key: [String]?

        public init(key: [String]? = nil) {
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? [String]
        }
    }

    public struct OriginList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let origin: [Origin]?

        public init(origin: [Origin]? = nil) {
            self.origin = origin
        }

        public init(dictionary: [String: Any]) throws {
            if let origin = dictionary["Origin"] as? [[String: Any]] {
                self.origin = try origin.map({ try Origin(dictionary: $0) })
            } else { 
                self.origin = nil
            }
        }
    }

    public struct GetDistributionConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct UpdateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Distribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.distribution = distribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let distribution = dictionary["Distribution"] as? [String: Any] { self.distribution = try Cloudfront.Distribution(dictionary: distribution) } else { self.distribution = nil }
        }
    }

    public enum PriceClass: String, CustomStringConvertible {
        case priceclass_100 = "PriceClass_100"
        case priceclass_200 = "PriceClass_200"
        case priceclass_all = "PriceClass_All"
        public var description: String { return self.rawValue }
    }

    public struct GetStreamingDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistributionConfig"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL. 
        public let eTag: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig?

        public init(eTag: String? = nil, streamingDistributionConfig: StreamingDistributionConfig? = nil) {
            self.eTag = eTag
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let streamingDistributionConfig = dictionary["StreamingDistributionConfig"] as? [String: Any] { self.streamingDistributionConfig = try Cloudfront.StreamingDistributionConfig(dictionary: streamingDistributionConfig) } else { self.streamingDistributionConfig = nil }
        }
    }

    public struct KeyPairIds: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let items: KeyPairIdList?
        /// The number of active CloudFront key pairs for AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let quantity: Int32

        public init(items: KeyPairIdList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.KeyPairIdList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct Origin: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains names and values for the custom headers that you want.
        public let customHeaders: CustomHeaders?
        /// A complex type that contains information about a custom origin. If the origin is an Amazon S3 bucket, use the S3OriginConfig element instead.
        public let customOriginConfig: CustomOriginConfig?
        ///  Amazon S3 origins: The DNS name of the Amazon S3 bucket from which you want CloudFront to get objects for this origin, for example, myawsbucket.s3.amazonaws.com. Constraints for Amazon S3 origins:    If you configured Amazon S3 Transfer Acceleration for your bucket, do not specify the s3-accelerate endpoint for DomainName.   The bucket name must be between 3 and 63 characters long (inclusive).   The bucket name must contain only lowercase characters, numbers, periods, underscores, and dashes.   The bucket name must not contain adjacent periods.    Custom Origins: The DNS domain name for the HTTP server from which you want CloudFront to get objects for this origin, for example, www.example.com.  Constraints for custom origins:    DomainName must be a valid DNS name that contains only a-z, A-Z, 0-9, dot (.), hyphen (-), or underscore (_) characters.   The name cannot exceed 128 characters.  
        public let domainName: String
        /// An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin. When you include the OriginPath element, specify the directory name, beginning with a /. CloudFront appends the directory name to the value of DomainName, for example, example.com/production. Do not include a / at the end of the directory name. For example, suppose you've specified the following values for your distribution:    DomainName: An Amazon S3 bucket named myawsbucket.    OriginPath: /production     CNAME: example.com    When a user enters example.com/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/index.html. When a user enters example.com/acme/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/acme/index.html.
        public let originPath: String?
        /// A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin, use the CustomOriginConfig element instead.
        public let s3OriginConfig: S3OriginConfig?
        /// A unique identifier for the origin. The value of Id must be unique within the distribution. When you specify the value of TargetOriginId for the default cache behavior or for another cache behavior, you indicate the origin to which you want the cache behavior to route requests by specifying the value of the Id element for that origin. When a request matches the path pattern for that cache behavior, CloudFront routes the request to the specified origin. For more information, see Cache Behavior Settings in the Amazon CloudFront Developer Guide.
        public let id: String

        public init(customHeaders: CustomHeaders? = nil, customOriginConfig: CustomOriginConfig? = nil, domainName: String, originPath: String? = nil, s3OriginConfig: S3OriginConfig? = nil, id: String) {
            self.customHeaders = customHeaders
            self.customOriginConfig = customOriginConfig
            self.domainName = domainName
            self.originPath = originPath
            self.s3OriginConfig = s3OriginConfig
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let customHeaders = dictionary["CustomHeaders"] as? [String: Any] { self.customHeaders = try Cloudfront.CustomHeaders(dictionary: customHeaders) } else { self.customHeaders = nil }
            if let customOriginConfig = dictionary["CustomOriginConfig"] as? [String: Any] { self.customOriginConfig = try Cloudfront.CustomOriginConfig(dictionary: customOriginConfig) } else { self.customOriginConfig = nil }
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            self.originPath = dictionary["OriginPath"] as? String
            if let s3OriginConfig = dictionary["S3OriginConfig"] as? [String: Any] { self.s3OriginConfig = try Cloudfront.S3OriginConfig(dictionary: s3OriginConfig) } else { self.s3OriginConfig = nil }
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct Tags: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  A complex type that contains Tag elements.
        public let items: TagList?

        public init(items: TagList? = nil) {
            self.items = items
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.TagList(dictionary: items) } else { self.items = nil }
        }
    }

    public struct LambdaFunctionAssociationList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let lambdaFunctionAssociation: [LambdaFunctionAssociation]?

        public init(lambdaFunctionAssociation: [LambdaFunctionAssociation]? = nil) {
            self.lambdaFunctionAssociation = lambdaFunctionAssociation
        }

        public init(dictionary: [String: Any]) throws {
            if let lambdaFunctionAssociation = dictionary["LambdaFunctionAssociation"] as? [[String: Any]] {
                self.lambdaFunctionAssociation = try lambdaFunctionAssociation.map({ try LambdaFunctionAssociation(dictionary: $0) })
            } else { 
                self.lambdaFunctionAssociation = nil
            }
        }
    }

    public struct StreamingDistributionSummaryList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let streamingDistributionSummary: [StreamingDistributionSummary]?

        public init(streamingDistributionSummary: [StreamingDistributionSummary]? = nil) {
            self.streamingDistributionSummary = streamingDistributionSummary
        }

        public init(dictionary: [String: Any]) throws {
            if let streamingDistributionSummary = dictionary["StreamingDistributionSummary"] as? [[String: Any]] {
                self.streamingDistributionSummary = try streamingDistributionSummary.map({ try StreamingDistributionSummary(dictionary: $0) })
            } else { 
                self.streamingDistributionSummary = nil
            }
        }
    }

    public struct GetCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentity"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the origin access identity's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let cloudFrontOriginAccessIdentity = dictionary["CloudFrontOriginAccessIdentity"] as? [String: Any] { self.cloudFrontOriginAccessIdentity = try Cloudfront.CloudFrontOriginAccessIdentity(dictionary: cloudFrontOriginAccessIdentity) } else { self.cloudFrontOriginAccessIdentity = nil }
        }
    }

    public struct GetDistributionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "Distribution"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The distribution's information.
        public let distribution: Distribution?

        public init(eTag: String? = nil, distribution: Distribution? = nil) {
            self.eTag = eTag
            self.distribution = distribution
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let distribution = dictionary["Distribution"] as? [String: Any] { self.distribution = try Cloudfront.Distribution(dictionary: distribution) } else { self.distribution = nil }
        }
    }

    public struct UpdateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "StreamingDistributionConfig"
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The value of the ETag header that you received when retrieving the streaming distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// The streaming distribution's id.
        public let id: String

        public init(ifMatch: String? = nil, streamingDistributionConfig: StreamingDistributionConfig, id: String) {
            self.ifMatch = ifMatch
            self.streamingDistributionConfig = streamingDistributionConfig
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.ifMatch = dictionary["If-Match"] as? String
            guard let streamingDistributionConfig = dictionary["StreamingDistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamingDistributionConfig") }
            self.streamingDistributionConfig = try Cloudfront.StreamingDistributionConfig(dictionary: streamingDistributionConfig)
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CloudFrontOriginAccessIdentityList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: Int32
        /// A flag that indicates whether more origin access identities remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more items in the list.
        public let isTruncated: Bool
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your origin access identities where they left off. 
        public let nextMarker: String?
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page). 
        public let marker: String
        /// A complex type that contains one CloudFrontOriginAccessIdentitySummary element for each origin access identity that was created by the current AWS account.
        public let items: CloudFrontOriginAccessIdentitySummaryList?
        /// The number of CloudFront origin access identities that were created by the current AWS account. 
        public let quantity: Int32

        public init(maxItems: Int32, isTruncated: Bool, nextMarker: String? = nil, marker: String, items: CloudFrontOriginAccessIdentitySummaryList? = nil, quantity: Int32) {
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextMarker = nextMarker
            self.marker = marker
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            guard let maxItems = dictionary["MaxItems"] as? Int32 else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.CloudFrontOriginAccessIdentitySummaryList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The identity's ID. 
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentityConfig"
        /// The current configuration information for the identity.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let cloudFrontOriginAccessIdentityConfig = dictionary["CloudFrontOriginAccessIdentityConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CloudFrontOriginAccessIdentityConfig") }
            self.cloudFrontOriginAccessIdentityConfig = try Cloudfront.CloudFrontOriginAccessIdentityConfig(dictionary: cloudFrontOriginAccessIdentityConfig)
        }
    }

    public struct Distribution: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date and time the distribution was last modified. 
        public let lastModifiedTime: Date
        /// This response element indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated to all CloudFront edge locations. 
        public let status: String
        /// CloudFront automatically adds this element to the response only if you've set up the distribution to serve private content with signed URLs. The element lists the key pair IDs that CloudFront is aware of for each trusted signer. The Signer child element lists the AWS account number of the trusted signer (or an empty Self element if the signer is you). The Signer element also includes the IDs of any active key pairs associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create working signed URLs.
        public let activeTrustedSigners: ActiveTrustedSigners
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let aRN: String
        /// The current configuration information for the distribution. Send a GET request to the /CloudFront API version/distribution ID/config resource.
        public let distributionConfig: DistributionConfig
        /// The domain name corresponding to the distribution. For example: d604721fxaaqy9.cloudfront.net. 
        public let domainName: String
        /// The number of invalidation batches currently in progress. 
        public let inProgressInvalidationBatches: Int32
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5. 
        public let id: String

        public init(lastModifiedTime: Date, status: String, activeTrustedSigners: ActiveTrustedSigners, aRN: String, distributionConfig: DistributionConfig, domainName: String, inProgressInvalidationBatches: Int32, id: String) {
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.activeTrustedSigners = activeTrustedSigners
            self.aRN = aRN
            self.distributionConfig = distributionConfig
            self.domainName = domainName
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let lastModifiedTime = dictionary["LastModifiedTime"] as? Date else { throw InitializableError.missingRequiredParam("LastModifiedTime") }
            self.lastModifiedTime = lastModifiedTime
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let activeTrustedSigners = dictionary["ActiveTrustedSigners"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ActiveTrustedSigners") }
            self.activeTrustedSigners = try Cloudfront.ActiveTrustedSigners(dictionary: activeTrustedSigners)
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let distributionConfig = dictionary["DistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DistributionConfig") }
            self.distributionConfig = try Cloudfront.DistributionConfig(dictionary: distributionConfig)
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            guard let inProgressInvalidationBatches = dictionary["InProgressInvalidationBatches"] as? Int32 else { throw InitializableError.missingRequiredParam("InProgressInvalidationBatches") }
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct StreamingDistributionConfigWithTags: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags
        /// A streaming distribution Configuration.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(tags: Tags, streamingDistributionConfig: StreamingDistributionConfig) {
            self.tags = tags
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Cloudfront.Tags(dictionary: tags)
            guard let streamingDistributionConfig = dictionary["StreamingDistributionConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamingDistributionConfig") }
            self.streamingDistributionConfig = try Cloudfront.StreamingDistributionConfig(dictionary: streamingDistributionConfig)
        }
    }

    public struct CloudFrontOriginAccessIdentityConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique number that ensures the request can't be replayed. If the CallerReference is new (no matter the content of the CloudFrontOriginAccessIdentityConfig object), a new origin access identity is created. If the CallerReference is a value already sent in a previous identity request, and the content of the CloudFrontOriginAccessIdentityConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request.  If the CallerReference is a value you already sent in a previous request to create an identity, but the content of the CloudFrontOriginAccessIdentityConfig is different from the original request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error. 
        public let callerReference: String
        /// Any comments you want to include about the origin access identity. 
        public let comment: String

        public init(callerReference: String, comment: String) {
            self.callerReference = callerReference
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
        }
    }

    public struct UpdateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = "CloudFrontOriginAccessIdentity"
        public static var headerParams: [String: String] {
            return ["ETag": "ETag"]
        }
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?

        public init(eTag: String? = nil, cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil) {
            self.eTag = eTag
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        }

        public init(dictionary: [String: Any]) throws {
            self.eTag = dictionary["ETag"] as? String
            if let cloudFrontOriginAccessIdentity = dictionary["CloudFrontOriginAccessIdentity"] as? [String: Any] { self.cloudFrontOriginAccessIdentity = try Cloudfront.CloudFrontOriginAccessIdentity(dictionary: cloudFrontOriginAccessIdentity) } else { self.cloudFrontOriginAccessIdentity = nil }
        }
    }

    public struct DeleteStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The value of the ETag header that you received when you disabled the streaming distribution. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The distribution ID. 
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.ifMatch = dictionary["If-Match"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CustomErrorResponses: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains a CustomErrorResponse element for each HTTP status code for which you want to specify a custom error page and/or a caching duration. 
        public let items: CustomErrorResponseList?
        /// The number of HTTP status codes for which you want to specify a custom error page and/or a caching duration. If Quantity is 0, you can omit Items.
        public let quantity: Int32

        public init(items: CustomErrorResponseList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.CustomErrorResponseList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct CookieNames: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains one Name element for each cookie that you want CloudFront to forward to the origin for this cache behavior.
        public let items: CookieNameList?
        /// The number of different cookies that you want CloudFront to forward to the origin for this cache behavior.
        public let quantity: Int32

        public init(items: CookieNameList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.CookieNameList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct CookieNameList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let name: [String]?

        public init(name: [String]? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? [String]
        }
    }

    public enum Method: String, CustomStringConvertible {
        case get = "GET"
        case head = "HEAD"
        case post = "POST"
        case put = "PUT"
        case patch = "PATCH"
        case options = "OPTIONS"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct AwsAccountNumberList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let awsAccountNumber: [String]?

        public init(awsAccountNumber: [String]? = nil) {
            self.awsAccountNumber = awsAccountNumber
        }

        public init(dictionary: [String: Any]) throws {
            self.awsAccountNumber = dictionary["AwsAccountNumber"] as? [String]
        }
    }

    public struct Aliases: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.
        public let items: AliasList?
        /// The number of CNAME aliases, if any, that you want to associate with this distribution.
        public let quantity: Int32

        public init(items: AliasList? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        public init(dictionary: [String: Any]) throws {
            if let items = dictionary["Items"] as? [String: Any] { self.items = try Cloudfront.AliasList(dictionary: items) } else { self.items = nil }
            guard let quantity = dictionary["Quantity"] as? Int32 else { throw InitializableError.missingRequiredParam("Quantity") }
            self.quantity = quantity
        }
    }

    public struct DeleteDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["If-Match": "IfMatch"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The value of the ETag header that you received when you disabled the distribution. For example: E2QWRUHAPOMQZL. 
        public let ifMatch: String?
        /// The distribution ID. 
        public let id: String

        public init(ifMatch: String? = nil, id: String) {
            self.ifMatch = ifMatch
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.ifMatch = dictionary["If-Match"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

}