// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SecurityHub {

    public struct ListEnabledProductsForImportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer)
        ]
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListEnabledProductsForImport operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {

    }

    public struct DateRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .integer), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]
        /// A date range value for the date filter.
        public let value: Int32?
        /// A date range unit for the date filter.
        public let unit: DateRangeUnit?

        public init(value: Int32? = nil, unit: DateRangeUnit? = nil) {
            self.value = value
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case unit = "Unit"
        }
    }

    public struct GetEnabledStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The standards subscription details returned by the operation.
        public let standardsSubscriptions: [StandardsSubscription]?
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(standardsSubscriptions: [StandardsSubscription]? = nil, nextToken: String? = nil) {
            self.standardsSubscriptions = standardsSubscriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptions = "StandardsSubscriptions"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string)
        ]
        /// The ARN of the insight that you want to delete.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public struct AwsSecurityFindingFilters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .list), 
            AWSShapeMember(label: "SeverityLabel", required: false, type: .list), 
            AWSShapeMember(label: "ResourceDetailsOther", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationDomain", required: false, type: .list), 
            AWSShapeMember(label: "SeverityProduct", required: false, type: .list), 
            AWSShapeMember(label: "MalwareName", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceImageId", required: false, type: .list), 
            AWSShapeMember(label: "NoteUpdatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorLastObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceType", required: false, type: .list), 
            AWSShapeMember(label: "VerificationState", required: false, type: .list), 
            AWSShapeMember(label: "MalwarePath", required: false, type: .list), 
            AWSShapeMember(label: "ProcessPid", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerName", required: false, type: .list), 
            AWSShapeMember(label: "RelatedFindingsId", required: false, type: .list), 
            AWSShapeMember(label: "AwsAccountId", required: false, type: .list), 
            AWSShapeMember(label: "RecordState", required: false, type: .list), 
            AWSShapeMember(label: "UserDefinedFields", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceSubnetId", required: false, type: .list), 
            AWSShapeMember(label: "MalwareState", required: false, type: .list), 
            AWSShapeMember(label: "Title", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsS3BucketOwnerId", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourcePort", required: false, type: .list), 
            AWSShapeMember(label: "WorkflowState", required: false, type: .list), 
            AWSShapeMember(label: "ProcessTerminatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorType", required: false, type: .list), 
            AWSShapeMember(label: "Confidence", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorCategory", required: false, type: .list), 
            AWSShapeMember(label: "NoteText", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyCreatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIamInstanceProfileArn", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceMac", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsS3BucketOwnerName", required: false, type: .list), 
            AWSShapeMember(label: "Criticality", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourcePartition", required: false, type: .list), 
            AWSShapeMember(label: "ProcessParentPid", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceKeyName", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationIpV4", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .list), 
            AWSShapeMember(label: "RecommendationText", required: false, type: .list), 
            AWSShapeMember(label: "FirstObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "ComplianceStatus", required: false, type: .list), 
            AWSShapeMember(label: "ProcessName", required: false, type: .list), 
            AWSShapeMember(label: "ResourceRegion", required: false, type: .list), 
            AWSShapeMember(label: "ProductFields", required: false, type: .list), 
            AWSShapeMember(label: "ProductName", required: false, type: .list), 
            AWSShapeMember(label: "RelatedFindingsProductArn", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerImageId", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIpV6Addresses", required: false, type: .list), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .list), 
            AWSShapeMember(label: "GeneratorId", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorSourceUrl", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .list), 
            AWSShapeMember(label: "SeverityNormalized", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyUserName", required: false, type: .list), 
            AWSShapeMember(label: "NetworkProtocol", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceIpV6", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceDomain", required: false, type: .list), 
            AWSShapeMember(label: "ResourceTags", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDirection", required: false, type: .list), 
            AWSShapeMember(label: "NoteUpdatedBy", required: false, type: .list), 
            AWSShapeMember(label: "LastObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorValue", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationIpV6", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerImageName", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyStatus", required: false, type: .list), 
            AWSShapeMember(label: "Keyword", required: false, type: .list), 
            AWSShapeMember(label: "ProcessLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIpV4Addresses", required: false, type: .list), 
            AWSShapeMember(label: "MalwareType", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationPort", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: false, type: .list), 
            AWSShapeMember(label: "SourceUrl", required: false, type: .list), 
            AWSShapeMember(label: "ProcessPath", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorSource", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceVpcId", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceIpV4", required: false, type: .list), 
            AWSShapeMember(label: "ProductArn", required: false, type: .list), 
            AWSShapeMember(label: "CompanyName", required: false, type: .list)
        ]
        /// Specifies the type of the resource for which details are provided.
        public let resourceType: [StringFilter]?
        /// The label of a finding's severity.
        public let severityLabel: [StringFilter]?
        /// The details of a resource that does not have a specific sub-field for the resource type defined.
        public let resourceDetailsOther: [MapFilter]?
        /// The destination domain of network-related information about a finding.
        public let networkDestinationDomain: [StringFilter]?
        /// The native severity as defined by the security findings provider's solution that generated the finding.
        public let severityProduct: [NumberFilter]?
        /// The name of the malware that was observed.
        public let malwareName: [StringFilter]?
        /// The Amazon Machine Image (AMI) ID of the instance.
        public let resourceAwsEc2InstanceImageId: [StringFilter]?
        /// The timestamp of when the note was updated.
        public let noteUpdatedAt: [DateFilter]?
        /// The date/time of the last observation of a threat intel indicator.
        public let threatIntelIndicatorLastObservedAt: [DateFilter]?
        /// The instance type of the instance.
        public let resourceAwsEc2InstanceType: [StringFilter]?
        /// Indicates the veracity of a finding. 
        public let verificationState: [StringFilter]?
        /// The filesystem path of the malware that was observed.
        public let malwarePath: [StringFilter]?
        /// The process ID.
        public let processPid: [NumberFilter]?
        /// The name of the container related to a finding.
        public let resourceContainerName: [StringFilter]?
        /// The solution-generated identifier for a related finding.
        public let relatedFindingsId: [StringFilter]?
        /// The AWS account ID in which a finding is generated.
        public let awsAccountId: [StringFilter]?
        /// The updated record state for the finding.
        public let recordState: [StringFilter]?
        /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. 
        public let userDefinedFields: [MapFilter]?
        /// The identifier of the subnet in which the instance was launched.
        public let resourceAwsEc2InstanceSubnetId: [StringFilter]?
        /// The state of the malware that was observed.
        public let malwareState: [StringFilter]?
        /// A finding's title.
        public let title: [StringFilter]?
        /// The canonical user ID of the owner of the S3 bucket.
        public let resourceAwsS3BucketOwnerId: [StringFilter]?
        /// The source port of network-related information about a finding.
        public let networkSourcePort: [NumberFilter]?
        /// The workflow state of a finding.
        public let workflowState: [StringFilter]?
        /// The date/time that the process was terminated.
        public let processTerminatedAt: [DateFilter]?
        /// The type of a threat intel indicator.
        public let threatIntelIndicatorType: [StringFilter]?
        /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale. 0 equates zero percent confidence and 100 equates to 100 percent confidence.
        public let confidence: [NumberFilter]?
        /// The category of a threat intel indicator.
        public let threatIntelIndicatorCategory: [StringFilter]?
        /// The text of a note.
        public let noteText: [StringFilter]?
        /// The date/time that the container was started.
        public let resourceContainerLaunchedAt: [DateFilter]?
        /// The creation date/time of the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyCreatedAt: [DateFilter]?
        /// The IAM profile ARN of the instance.
        public let resourceAwsEc2InstanceIamInstanceProfileArn: [StringFilter]?
        /// The source media access control (MAC) address of network-related information about a finding.
        public let networkSourceMac: [StringFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was created by the security findings provider.
        public let createdAt: [DateFilter]?
        /// The display name of the owner of the S3 bucket.
        public let resourceAwsS3BucketOwnerName: [StringFilter]?
        /// The level of importance assigned to the resources associated with the finding. A score of 0 means the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.
        public let criticality: [NumberFilter]?
        /// The date/time the instance was launched.
        public let resourceAwsEc2InstanceLaunchedAt: [DateFilter]?
        /// The canonical AWS partition name to which the region is assigned.
        public let resourcePartition: [StringFilter]?
        /// The parent process ID.
        public let processParentPid: [NumberFilter]?
        /// The key name associated with the instance.
        public let resourceAwsEc2InstanceKeyName: [StringFilter]?
        /// The destination IPv4 address of network-related information about a finding.
        public let networkDestinationIpV4: [IpFilter]?
        /// A finding type in the format of 'namespace/category/classifier' that classifies a finding.
        public let `type`: [StringFilter]?
        /// The recommendation of what to do about the issue described in a finding.
        public let recommendationText: [StringFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings provider.
        public let firstObservedAt: [DateFilter]?
        /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard (for example, AWS CIS Foundations). Contains compliance-related finding details.
        public let complianceStatus: [StringFilter]?
        /// The name of the process.
        public let processName: [StringFilter]?
        /// The canonical AWS external region name where this resource is located.
        public let resourceRegion: [StringFilter]?
        /// A data type where security findings providers can include additional solution-specific details that are not part of the defined AwsSecurityFinding format.
        public let productFields: [MapFilter]?
        /// The name of the solution (product) that generates findings.
        public let productName: [StringFilter]?
        /// The ARN of the solution that generated a related finding.
        public let relatedFindingsProductArn: [StringFilter]?
        /// The identifier of the image related to a finding.
        public let resourceContainerImageId: [StringFilter]?
        /// The IPv6 addresses associated with the instance.
        public let resourceAwsEc2InstanceIpV6Addresses: [IpFilter]?
        /// An ISO8601-formatted timestamp that indicates when the finding record was last updated by the security findings provider. 
        public let updatedAt: [DateFilter]?
        /// The security findings provider-specific identifier for a finding.
        public let id: [StringFilter]?
        /// This is the identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings provider's solutions, this generator can be called a rule, a check, a detector, a plug-in, etc.
        public let generatorId: [StringFilter]?
        /// The URL for more details from the source of the threat intel.
        public let threatIntelIndicatorSourceUrl: [StringFilter]?
        /// A finding's description.
        public let description: [StringFilter]?
        /// The normalized severity of a finding.
        public let severityNormalized: [NumberFilter]?
        /// The user associated with the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyUserName: [StringFilter]?
        /// The protocol of network-related information about a finding.
        public let networkProtocol: [StringFilter]?
        /// The source IPv6 address of network-related information about a finding.
        public let networkSourceIpV6: [IpFilter]?
        /// The source domain of network-related information about a finding.
        public let networkSourceDomain: [StringFilter]?
        /// A list of AWS tags associated with a resource at the time the finding was processed.
        public let resourceTags: [MapFilter]?
        /// Indicates the direction of network traffic associated with a finding.
        public let networkDirection: [StringFilter]?
        /// The principal that created a note.
        public let noteUpdatedBy: [StringFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings provider.
        public let lastObservedAt: [DateFilter]?
        /// The value of a threat intel indicator.
        public let threatIntelIndicatorValue: [StringFilter]?
        /// The destination IPv6 address of network-related information about a finding.
        public let networkDestinationIpV6: [IpFilter]?
        /// The name of the image related to a finding.
        public let resourceContainerImageName: [StringFilter]?
        /// The status of the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyStatus: [StringFilter]?
        /// A keyword for a finding.
        public let keyword: [KeywordFilter]?
        /// The date/time that the process was launched.
        public let processLaunchedAt: [DateFilter]?
        /// The IPv4 addresses associated with the instance.
        public let resourceAwsEc2InstanceIpV4Addresses: [IpFilter]?
        /// The type of the malware that was observed.
        public let malwareType: [StringFilter]?
        /// The destination port of network-related information about a finding.
        public let networkDestinationPort: [NumberFilter]?
        /// The canonical identifier for the given resource type.
        public let resourceId: [StringFilter]?
        /// A URL that links to a page about the current finding in the security findings provider's solution.
        public let sourceUrl: [StringFilter]?
        /// The path to the process executable.
        public let processPath: [StringFilter]?
        /// The source of the threat intel.
        public let threatIntelIndicatorSource: [StringFilter]?
        /// The identifier of the VPC in which the instance was launched.
        public let resourceAwsEc2InstanceVpcId: [StringFilter]?
        /// The source IPv4 address of network-related information about a finding.
        public let networkSourceIpV4: [IpFilter]?
        /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) once this provider's product (solution that generates findings) is registered with Security Hub.
        public let productArn: [StringFilter]?
        /// The name of the findings provider (company) that owns the solution (product) that generates findings.
        public let companyName: [StringFilter]?

        public init(resourceType: [StringFilter]? = nil, severityLabel: [StringFilter]? = nil, resourceDetailsOther: [MapFilter]? = nil, networkDestinationDomain: [StringFilter]? = nil, severityProduct: [NumberFilter]? = nil, malwareName: [StringFilter]? = nil, resourceAwsEc2InstanceImageId: [StringFilter]? = nil, noteUpdatedAt: [DateFilter]? = nil, threatIntelIndicatorLastObservedAt: [DateFilter]? = nil, resourceAwsEc2InstanceType: [StringFilter]? = nil, verificationState: [StringFilter]? = nil, malwarePath: [StringFilter]? = nil, processPid: [NumberFilter]? = nil, resourceContainerName: [StringFilter]? = nil, relatedFindingsId: [StringFilter]? = nil, awsAccountId: [StringFilter]? = nil, recordState: [StringFilter]? = nil, userDefinedFields: [MapFilter]? = nil, resourceAwsEc2InstanceSubnetId: [StringFilter]? = nil, malwareState: [StringFilter]? = nil, title: [StringFilter]? = nil, resourceAwsS3BucketOwnerId: [StringFilter]? = nil, networkSourcePort: [NumberFilter]? = nil, workflowState: [StringFilter]? = nil, processTerminatedAt: [DateFilter]? = nil, threatIntelIndicatorType: [StringFilter]? = nil, confidence: [NumberFilter]? = nil, threatIntelIndicatorCategory: [StringFilter]? = nil, noteText: [StringFilter]? = nil, resourceContainerLaunchedAt: [DateFilter]? = nil, resourceAwsIamAccessKeyCreatedAt: [DateFilter]? = nil, resourceAwsEc2InstanceIamInstanceProfileArn: [StringFilter]? = nil, networkSourceMac: [StringFilter]? = nil, createdAt: [DateFilter]? = nil, resourceAwsS3BucketOwnerName: [StringFilter]? = nil, criticality: [NumberFilter]? = nil, resourceAwsEc2InstanceLaunchedAt: [DateFilter]? = nil, resourcePartition: [StringFilter]? = nil, processParentPid: [NumberFilter]? = nil, resourceAwsEc2InstanceKeyName: [StringFilter]? = nil, networkDestinationIpV4: [IpFilter]? = nil, type: [StringFilter]? = nil, recommendationText: [StringFilter]? = nil, firstObservedAt: [DateFilter]? = nil, complianceStatus: [StringFilter]? = nil, processName: [StringFilter]? = nil, resourceRegion: [StringFilter]? = nil, productFields: [MapFilter]? = nil, productName: [StringFilter]? = nil, relatedFindingsProductArn: [StringFilter]? = nil, resourceContainerImageId: [StringFilter]? = nil, resourceAwsEc2InstanceIpV6Addresses: [IpFilter]? = nil, updatedAt: [DateFilter]? = nil, id: [StringFilter]? = nil, generatorId: [StringFilter]? = nil, threatIntelIndicatorSourceUrl: [StringFilter]? = nil, description: [StringFilter]? = nil, severityNormalized: [NumberFilter]? = nil, resourceAwsIamAccessKeyUserName: [StringFilter]? = nil, networkProtocol: [StringFilter]? = nil, networkSourceIpV6: [IpFilter]? = nil, networkSourceDomain: [StringFilter]? = nil, resourceTags: [MapFilter]? = nil, networkDirection: [StringFilter]? = nil, noteUpdatedBy: [StringFilter]? = nil, lastObservedAt: [DateFilter]? = nil, threatIntelIndicatorValue: [StringFilter]? = nil, networkDestinationIpV6: [IpFilter]? = nil, resourceContainerImageName: [StringFilter]? = nil, resourceAwsIamAccessKeyStatus: [StringFilter]? = nil, keyword: [KeywordFilter]? = nil, processLaunchedAt: [DateFilter]? = nil, resourceAwsEc2InstanceIpV4Addresses: [IpFilter]? = nil, malwareType: [StringFilter]? = nil, networkDestinationPort: [NumberFilter]? = nil, resourceId: [StringFilter]? = nil, sourceUrl: [StringFilter]? = nil, processPath: [StringFilter]? = nil, threatIntelIndicatorSource: [StringFilter]? = nil, resourceAwsEc2InstanceVpcId: [StringFilter]? = nil, networkSourceIpV4: [IpFilter]? = nil, productArn: [StringFilter]? = nil, companyName: [StringFilter]? = nil) {
            self.resourceType = resourceType
            self.severityLabel = severityLabel
            self.resourceDetailsOther = resourceDetailsOther
            self.networkDestinationDomain = networkDestinationDomain
            self.severityProduct = severityProduct
            self.malwareName = malwareName
            self.resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageId
            self.noteUpdatedAt = noteUpdatedAt
            self.threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAt
            self.resourceAwsEc2InstanceType = resourceAwsEc2InstanceType
            self.verificationState = verificationState
            self.malwarePath = malwarePath
            self.processPid = processPid
            self.resourceContainerName = resourceContainerName
            self.relatedFindingsId = relatedFindingsId
            self.awsAccountId = awsAccountId
            self.recordState = recordState
            self.userDefinedFields = userDefinedFields
            self.resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetId
            self.malwareState = malwareState
            self.title = title
            self.resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerId
            self.networkSourcePort = networkSourcePort
            self.workflowState = workflowState
            self.processTerminatedAt = processTerminatedAt
            self.threatIntelIndicatorType = threatIntelIndicatorType
            self.confidence = confidence
            self.threatIntelIndicatorCategory = threatIntelIndicatorCategory
            self.noteText = noteText
            self.resourceContainerLaunchedAt = resourceContainerLaunchedAt
            self.resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAt
            self.resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArn
            self.networkSourceMac = networkSourceMac
            self.createdAt = createdAt
            self.resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerName
            self.criticality = criticality
            self.resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAt
            self.resourcePartition = resourcePartition
            self.processParentPid = processParentPid
            self.resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyName
            self.networkDestinationIpV4 = networkDestinationIpV4
            self.`type` = `type`
            self.recommendationText = recommendationText
            self.firstObservedAt = firstObservedAt
            self.complianceStatus = complianceStatus
            self.processName = processName
            self.resourceRegion = resourceRegion
            self.productFields = productFields
            self.productName = productName
            self.relatedFindingsProductArn = relatedFindingsProductArn
            self.resourceContainerImageId = resourceContainerImageId
            self.resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6Addresses
            self.updatedAt = updatedAt
            self.id = id
            self.generatorId = generatorId
            self.threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrl
            self.description = description
            self.severityNormalized = severityNormalized
            self.resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserName
            self.networkProtocol = networkProtocol
            self.networkSourceIpV6 = networkSourceIpV6
            self.networkSourceDomain = networkSourceDomain
            self.resourceTags = resourceTags
            self.networkDirection = networkDirection
            self.noteUpdatedBy = noteUpdatedBy
            self.lastObservedAt = lastObservedAt
            self.threatIntelIndicatorValue = threatIntelIndicatorValue
            self.networkDestinationIpV6 = networkDestinationIpV6
            self.resourceContainerImageName = resourceContainerImageName
            self.resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatus
            self.keyword = keyword
            self.processLaunchedAt = processLaunchedAt
            self.resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4Addresses
            self.malwareType = malwareType
            self.networkDestinationPort = networkDestinationPort
            self.resourceId = resourceId
            self.sourceUrl = sourceUrl
            self.processPath = processPath
            self.threatIntelIndicatorSource = threatIntelIndicatorSource
            self.resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcId
            self.networkSourceIpV4 = networkSourceIpV4
            self.productArn = productArn
            self.companyName = companyName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case severityLabel = "SeverityLabel"
            case resourceDetailsOther = "ResourceDetailsOther"
            case networkDestinationDomain = "NetworkDestinationDomain"
            case severityProduct = "SeverityProduct"
            case malwareName = "MalwareName"
            case resourceAwsEc2InstanceImageId = "ResourceAwsEc2InstanceImageId"
            case noteUpdatedAt = "NoteUpdatedAt"
            case threatIntelIndicatorLastObservedAt = "ThreatIntelIndicatorLastObservedAt"
            case resourceAwsEc2InstanceType = "ResourceAwsEc2InstanceType"
            case verificationState = "VerificationState"
            case malwarePath = "MalwarePath"
            case processPid = "ProcessPid"
            case resourceContainerName = "ResourceContainerName"
            case relatedFindingsId = "RelatedFindingsId"
            case awsAccountId = "AwsAccountId"
            case recordState = "RecordState"
            case userDefinedFields = "UserDefinedFields"
            case resourceAwsEc2InstanceSubnetId = "ResourceAwsEc2InstanceSubnetId"
            case malwareState = "MalwareState"
            case title = "Title"
            case resourceAwsS3BucketOwnerId = "ResourceAwsS3BucketOwnerId"
            case networkSourcePort = "NetworkSourcePort"
            case workflowState = "WorkflowState"
            case processTerminatedAt = "ProcessTerminatedAt"
            case threatIntelIndicatorType = "ThreatIntelIndicatorType"
            case confidence = "Confidence"
            case threatIntelIndicatorCategory = "ThreatIntelIndicatorCategory"
            case noteText = "NoteText"
            case resourceContainerLaunchedAt = "ResourceContainerLaunchedAt"
            case resourceAwsIamAccessKeyCreatedAt = "ResourceAwsIamAccessKeyCreatedAt"
            case resourceAwsEc2InstanceIamInstanceProfileArn = "ResourceAwsEc2InstanceIamInstanceProfileArn"
            case networkSourceMac = "NetworkSourceMac"
            case createdAt = "CreatedAt"
            case resourceAwsS3BucketOwnerName = "ResourceAwsS3BucketOwnerName"
            case criticality = "Criticality"
            case resourceAwsEc2InstanceLaunchedAt = "ResourceAwsEc2InstanceLaunchedAt"
            case resourcePartition = "ResourcePartition"
            case processParentPid = "ProcessParentPid"
            case resourceAwsEc2InstanceKeyName = "ResourceAwsEc2InstanceKeyName"
            case networkDestinationIpV4 = "NetworkDestinationIpV4"
            case `type` = "Type"
            case recommendationText = "RecommendationText"
            case firstObservedAt = "FirstObservedAt"
            case complianceStatus = "ComplianceStatus"
            case processName = "ProcessName"
            case resourceRegion = "ResourceRegion"
            case productFields = "ProductFields"
            case productName = "ProductName"
            case relatedFindingsProductArn = "RelatedFindingsProductArn"
            case resourceContainerImageId = "ResourceContainerImageId"
            case resourceAwsEc2InstanceIpV6Addresses = "ResourceAwsEc2InstanceIpV6Addresses"
            case updatedAt = "UpdatedAt"
            case id = "Id"
            case generatorId = "GeneratorId"
            case threatIntelIndicatorSourceUrl = "ThreatIntelIndicatorSourceUrl"
            case description = "Description"
            case severityNormalized = "SeverityNormalized"
            case resourceAwsIamAccessKeyUserName = "ResourceAwsIamAccessKeyUserName"
            case networkProtocol = "NetworkProtocol"
            case networkSourceIpV6 = "NetworkSourceIpV6"
            case networkSourceDomain = "NetworkSourceDomain"
            case resourceTags = "ResourceTags"
            case networkDirection = "NetworkDirection"
            case noteUpdatedBy = "NoteUpdatedBy"
            case lastObservedAt = "LastObservedAt"
            case threatIntelIndicatorValue = "ThreatIntelIndicatorValue"
            case networkDestinationIpV6 = "NetworkDestinationIpV6"
            case resourceContainerImageName = "ResourceContainerImageName"
            case resourceAwsIamAccessKeyStatus = "ResourceAwsIamAccessKeyStatus"
            case keyword = "Keyword"
            case processLaunchedAt = "ProcessLaunchedAt"
            case resourceAwsEc2InstanceIpV4Addresses = "ResourceAwsEc2InstanceIpV4Addresses"
            case malwareType = "MalwareType"
            case networkDestinationPort = "NetworkDestinationPort"
            case resourceId = "ResourceId"
            case sourceUrl = "SourceUrl"
            case processPath = "ProcessPath"
            case threatIntelIndicatorSource = "ThreatIntelIndicatorSource"
            case resourceAwsEc2InstanceVpcId = "ResourceAwsEc2InstanceVpcId"
            case networkSourceIpV4 = "NetworkSourceIpV4"
            case productArn = "ProductArn"
            case companyName = "CompanyName"
        }
    }

    public struct ProcessDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminatedAt", required: false, type: .string), 
            AWSShapeMember(label: "ParentPid", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "Pid", required: false, type: .integer)
        ]
        /// The date/time that the process was terminated.
        public let terminatedAt: String?
        /// The parent process ID.
        public let parentPid: Int32?
        /// The name of the process.
        public let name: String?
        /// The path to the process executable.
        public let path: String?
        /// The date/time that the process was launched.
        public let launchedAt: String?
        /// The process ID.
        public let pid: Int32?

        public init(terminatedAt: String? = nil, parentPid: Int32? = nil, name: String? = nil, path: String? = nil, launchedAt: String? = nil, pid: Int32? = nil) {
            self.terminatedAt = terminatedAt
            self.parentPid = parentPid
            self.name = name
            self.path = path
            self.launchedAt = launchedAt
            self.pid = pid
        }

        private enum CodingKeys: String, CodingKey {
            case terminatedAt = "TerminatedAt"
            case parentPid = "ParentPid"
            case name = "Name"
            case path = "Path"
            case launchedAt = "LaunchedAt"
            case pid = "Pid"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct InviteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of IDs of the AWS accounts that you want to invite to Security Hub as members. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public enum ThreatIntelIndicatorCategory: String, CustomStringConvertible, Codable {
        case backdoor = "BACKDOOR"
        case cardStealer = "CARD_STEALER"
        case commandAndControl = "COMMAND_AND_CONTROL"
        case dropSite = "DROP_SITE"
        case exploitSite = "EXPLOIT_SITE"
        case keylogger = "KEYLOGGER"
        public var description: String { return self.rawValue }
    }

    public struct DisableImportFindingsForProductRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptionArn", location: .uri(locationName: "ProductSubscriptionArn"), required: true, type: .string)
        ]
        /// The ARN of a resource that represents your subscription to a supported product.
        public let productSubscriptionArn: String

        public init(productSubscriptionArn: String) {
            self.productSubscriptionArn = productSubscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptionArn = "ProductSubscriptionArn"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MemberStatus", required: false, type: .string), 
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "MasterId", required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", required: false, type: .timestamp)
        ]
        /// The status of the relationship between the member account and its master account. 
        public let memberStatus: String?
        /// The AWS account ID of a Security Hub member account.
        public let accountId: String?
        /// The email of a Security Hub member account.
        public let email: String?
        /// Time stamp at which this member account was updated.
        public let updatedAt: TimeStamp?
        /// The AWS account ID of the master Security Hub account to this member account.
        public let masterId: String?
        /// Time stamp at which the member account was invited to Security Hub.
        public let invitedAt: TimeStamp?

        public init(memberStatus: String? = nil, accountId: String? = nil, email: String? = nil, updatedAt: TimeStamp? = nil, masterId: String? = nil, invitedAt: TimeStamp? = nil) {
            self.memberStatus = memberStatus
            self.accountId = accountId
            self.email = email
            self.updatedAt = updatedAt
            self.masterId = masterId
            self.invitedAt = invitedAt
        }

        private enum CodingKeys: String, CodingKey {
            case memberStatus = "MemberStatus"
            case accountId = "AccountId"
            case email = "Email"
            case updatedAt = "UpdatedAt"
            case masterId = "MasterId"
            case invitedAt = "InvitedAt"
        }
    }

    public struct ThreatIntelIndicator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceUrl", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "LastObservedAt", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Category", required: false, type: .enum)
        ]
        /// The URL for more details from the source of the threat intel.
        public let sourceUrl: String?
        /// The source of the threat intel.
        public let source: String?
        /// The value of a threat intel indicator.
        public let value: String?
        /// The date/time of the last observation of a threat intel indicator.
        public let lastObservedAt: String?
        /// The type of a threat intel indicator.
        public let `type`: ThreatIntelIndicatorType?
        /// The category of a threat intel indicator.
        public let category: ThreatIntelIndicatorCategory?

        public init(sourceUrl: String? = nil, source: String? = nil, value: String? = nil, lastObservedAt: String? = nil, type: ThreatIntelIndicatorType? = nil, category: ThreatIntelIndicatorCategory? = nil) {
            self.sourceUrl = sourceUrl
            self.source = source
            self.value = value
            self.lastObservedAt = lastObservedAt
            self.`type` = `type`
            self.category = category
        }

        private enum CodingKeys: String, CodingKey {
            case sourceUrl = "SourceUrl"
            case source = "Source"
            case value = "Value"
            case lastObservedAt = "LastObservedAt"
            case `type` = "Type"
            case category = "Category"
        }
    }

    public struct SortCriterion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "Field", required: false, type: .string)
        ]
        /// The order used for sorting findings.
        public let sortOrder: SortOrder?
        /// The finding attribute used for sorting findings.
        public let field: String?

        public init(sortOrder: SortOrder? = nil, field: String? = nil) {
            self.sortOrder = sortOrder
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case sortOrder = "SortOrder"
            case field = "Field"
        }
    }

    public enum NetworkDirection: String, CustomStringConvertible, Codable {
        case `in` = "IN"
        case out = "OUT"
        public var description: String { return self.rawValue }
    }

    public struct DisableSecurityHubResponse: AWSShape {

    }

    public struct BatchEnableStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list)
        ]
        /// The details of the standards subscriptions that were enabled.
        public let standardsSubscriptions: [StandardsSubscription]?

        public init(standardsSubscriptions: [StandardsSubscription]? = nil) {
            self.standardsSubscriptions = standardsSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptions = "StandardsSubscriptions"
        }
    }

    public struct CreateInsightResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", required: true, type: .string)
        ]
        /// The ARN Of the created insight.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public enum ComplianceStatus: String, CustomStringConvertible, Codable {
        case passed = "PASSED"
        case warning = "WARNING"
        case failed = "FAILED"
        case notAvailable = "NOT_AVAILABLE"
        public var description: String { return self.rawValue }
    }

    public struct Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "ProcessingResult", required: false, type: .string)
        ]
        /// An ID of the AWS account that could not be processed. 
        public let accountId: String?
        /// The reason for why an account could not be processed.
        public let processingResult: String?

        public init(accountId: String? = nil, processingResult: String? = nil) {
            self.accountId = accountId
            self.processingResult = processingResult
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case processingResult = "ProcessingResult"
        }
    }

    public struct Malware: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// The state of the malware that was observed.
        public let state: MalwareState?
        /// The type of the malware that was observed.
        public let `type`: MalwareType?
        /// The name of the malware that was observed.
        public let name: String
        /// The filesystem path of the malware that was observed.
        public let path: String?

        public init(state: MalwareState? = nil, type: MalwareType? = nil, name: String, path: String? = nil) {
            self.state = state
            self.`type` = `type`
            self.name = name
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case `type` = "Type"
            case name = "Name"
            case path = "Path"
        }
    }

    public struct Recommendation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string)
        ]
        /// The recommendation of what to do about the issue described in a finding. 
        public let text: String?
        /// A URL to link to general remediation information for the finding type of a finding. 
        public let url: String?

        public init(text: String? = nil, url: String? = nil) {
            self.text = text
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case url = "Url"
        }
    }

    public struct DisassociateMembersResponse: AWSShape {

    }

    public struct Network: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIpV6", required: false, type: .string), 
            AWSShapeMember(label: "SourceIpV4", required: false, type: .string), 
            AWSShapeMember(label: "SourcePort", required: false, type: .integer), 
            AWSShapeMember(label: "SourceDomain", required: false, type: .string), 
            AWSShapeMember(label: "Direction", required: false, type: .enum), 
            AWSShapeMember(label: "DestinationIpV6", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPort", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .string), 
            AWSShapeMember(label: "SourceMac", required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpV4", required: false, type: .string), 
            AWSShapeMember(label: "DestinationDomain", required: false, type: .string)
        ]
        /// The source IPv6 address of network-related information about a finding.
        public let sourceIpV6: String?
        /// The source IPv4 address of network-related information about a finding.
        public let sourceIpV4: String?
        /// The source port of network-related information about a finding.
        public let sourcePort: Int32?
        /// The source domain of network-related information about a finding.
        public let sourceDomain: String?
        /// Indicates the direction of network traffic associated with a finding.
        public let direction: NetworkDirection?
        /// The destination IPv6 address of network-related information about a finding.
        public let destinationIpV6: String?
        /// The destination port of network-related information about a finding.
        public let destinationPort: Int32?
        /// The protocol of network-related information about a finding.
        public let `protocol`: String?
        /// The source media access control (MAC) address of network-related information about a finding.
        public let sourceMac: String?
        /// The destination IPv4 address of network-related information about a finding.
        public let destinationIpV4: String?
        /// The destination domain of network-related information about a finding.
        public let destinationDomain: String?

        public init(sourceIpV6: String? = nil, sourceIpV4: String? = nil, sourcePort: Int32? = nil, sourceDomain: String? = nil, direction: NetworkDirection? = nil, destinationIpV6: String? = nil, destinationPort: Int32? = nil, protocol: String? = nil, sourceMac: String? = nil, destinationIpV4: String? = nil, destinationDomain: String? = nil) {
            self.sourceIpV6 = sourceIpV6
            self.sourceIpV4 = sourceIpV4
            self.sourcePort = sourcePort
            self.sourceDomain = sourceDomain
            self.direction = direction
            self.destinationIpV6 = destinationIpV6
            self.destinationPort = destinationPort
            self.`protocol` = `protocol`
            self.sourceMac = sourceMac
            self.destinationIpV4 = destinationIpV4
            self.destinationDomain = destinationDomain
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIpV6 = "SourceIpV6"
            case sourceIpV4 = "SourceIpV4"
            case sourcePort = "SourcePort"
            case sourceDomain = "SourceDomain"
            case direction = "Direction"
            case destinationIpV6 = "DestinationIpV6"
            case destinationPort = "DestinationPort"
            case `protocol` = "Protocol"
            case sourceMac = "SourceMac"
            case destinationIpV4 = "DestinationIpV4"
            case destinationDomain = "DestinationDomain"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case asc = "asc"
        case desc = "desc"
        public var description: String { return self.rawValue }
    }

    public struct GetMasterAccountRequest: AWSShape {

    }

    public struct BatchDisableStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list)
        ]
        /// The details of the standards subscriptions that were disabled.
        public let standardsSubscriptions: [StandardsSubscription]?

        public init(standardsSubscriptions: [StandardsSubscription]? = nil) {
            self.standardsSubscriptions = standardsSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptions = "StandardsSubscriptions"
        }
    }

    public struct UpdateInsightResponse: AWSShape {

    }

    public struct EnableImportFindingsForProductResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptionArn", required: false, type: .string)
        ]
        /// The ARN of a resource that represents your subscription to the product that generates the findings that you want to import into Security Hub.
        public let productSubscriptionArn: String?

        public init(productSubscriptionArn: String? = nil) {
            self.productSubscriptionArn = productSubscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptionArn = "ProductSubscriptionArn"
        }
    }

    public struct InviteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct Note: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedBy", required: true, type: .string)
        ]
        /// The text of a note.
        public let text: String
        /// The timestamp of when the note was updated.
        public let updatedAt: String
        /// The principal that created a note.
        public let updatedBy: String

        public init(text: String, updatedAt: String, updatedBy: String) {
            self.text = text
            self.updatedAt = updatedAt
            self.updatedBy = updatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case updatedAt = "UpdatedAt"
            case updatedBy = "UpdatedBy"
        }
    }

    public enum StringFilterComparison: String, CustomStringConvertible, Codable {
        case equals = "EQUALS"
        case contains = "CONTAINS"
        case prefix = "PREFIX"
        public var description: String { return self.rawValue }
    }

    public struct AwsIamAccessKeyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UserName", required: false, type: .string)
        ]
        /// The creation date/time of the IAM access key related to a finding.
        public let createdAt: String?
        /// The status of the IAM access key related to a finding.
        public let status: AwsIamAccessKeyStatus?
        /// The user associated with the IAM access key related to a finding.
        public let userName: String?

        public init(createdAt: String? = nil, status: AwsIamAccessKeyStatus? = nil, userName: String? = nil) {
            self.createdAt = createdAt
            self.status = status
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case status = "Status"
            case userName = "UserName"
        }
    }

    public struct DeleteInsightResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", required: true, type: .string)
        ]
        /// The ARN of the insight that was deleted.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterId", required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", required: false, type: .string)
        ]
        /// The account ID of the master Security Hub account whose invitation you're accepting. 
        public let masterId: String?
        /// The ID of the invitation that is sent to the AWS account by the Security Hub master account. 
        public let invitationId: String?

        public init(masterId: String? = nil, invitationId: String? = nil) {
            self.masterId = masterId
            self.invitationId = invitationId
        }

        private enum CodingKeys: String, CodingKey {
            case masterId = "MasterId"
            case invitationId = "InvitationId"
        }
    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Invitations", required: false, type: .list)
        ]
        /// The token that is required for pagination.
        public let nextToken: String?
        /// The details of the invitations returned by the operation.
        public let invitations: [Invitation]?

        public init(nextToken: String? = nil, invitations: [Invitation]? = nil) {
            self.nextToken = nextToken
            self.invitations = invitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case invitations = "Invitations"
        }
    }

    public enum DateRangeUnit: String, CustomStringConvertible, Codable {
        case days = "DAYS"
        public var description: String { return self.rawValue }
    }

    public struct Remediation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recommendation", required: false, type: .structure)
        ]
        /// Provides a recommendation on how to remediate the issue identified within a finding.
        public let recommendation: Recommendation?

        public init(recommendation: Recommendation? = nil) {
            self.recommendation = recommendation
        }

        private enum CodingKeys: String, CodingKey {
            case recommendation = "Recommendation"
        }
    }

    public struct DeleteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs of the Security Hub member accounts that you want to delete. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct DeleteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct GetMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: true, type: .list)
        ]
        /// A list of account IDs for the Security Hub member accounts on which you want to return the details. 
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct DisassociateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// The account IDs of the member accounts that you want to disassociate from the master account.
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct ListEnabledProductsForImportResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of ARNs for the resources that represent your subscriptions to products. 
        public let productSubscriptions: [String]?
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(productSubscriptions: [String]? = nil, nextToken: String? = nil) {
            self.productSubscriptions = productSubscriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptions = "ProductSubscriptions"
            case nextToken = "NextToken"
        }
    }

    public struct StringFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Comparison", required: false, type: .enum)
        ]
        /// The string filter value.
        public let value: String?
        /// Represents the condition to be applied to a string value when querying for findings. 
        public let comparison: StringFilterComparison?

        public init(value: String? = nil, comparison: StringFilterComparison? = nil) {
            self.value = value
            self.comparison = comparison
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case comparison = "Comparison"
        }
    }

    public struct BatchImportFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedCount", required: true, type: .integer), 
            AWSShapeMember(label: "FailedFindings", required: false, type: .list), 
            AWSShapeMember(label: "SuccessCount", required: true, type: .integer)
        ]
        /// The number of findings that cannot be imported.
        public let failedCount: Int32
        /// The list of the findings that cannot be imported.
        public let failedFindings: [ImportFindingsError]?
        /// The number of findings that were successfully imported
        public let successCount: Int32

        public init(failedCount: Int32, failedFindings: [ImportFindingsError]? = nil, successCount: Int32) {
            self.failedCount = failedCount
            self.failedFindings = failedFindings
            self.successCount = successCount
        }

        private enum CodingKeys: String, CodingKey {
            case failedCount = "FailedCount"
            case failedFindings = "FailedFindings"
            case successCount = "SuccessCount"
        }
    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {

    }

    public enum WorkflowState: String, CustomStringConvertible, Codable {
        case new = "NEW"
        case assigned = "ASSIGNED"
        case inProgress = "IN_PROGRESS"
        case deferred = "DEFERRED"
        case resolved = "RESOLVED"
        public var description: String { return self.rawValue }
    }

    public struct DisableImportFindingsForProductResponse: AWSShape {

    }

    public struct BatchDisableStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionArns", required: true, type: .list)
        ]
        /// The ARNS of the standards subscriptions that you want to disable.
        public let standardsSubscriptionArns: [String]

        public init(standardsSubscriptionArns: [String]) {
            self.standardsSubscriptionArns = standardsSubscriptionArns
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionArns = "StandardsSubscriptionArns"
        }
    }

    public struct Insight: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string), 
            AWSShapeMember(label: "InsightArn", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The attribute by which the insight's findings are grouped. This attribute is used as a findings aggregator for the purposes of viewing and managing multiple related findings under a single operand.
        public let groupByAttribute: String
        /// The ARN of a Security Hub insight.
        public let insightArn: String
        /// A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight. 
        public let filters: AwsSecurityFindingFilters
        /// The name of a Security Hub insight.
        public let name: String

        public init(groupByAttribute: String, insightArn: String, filters: AwsSecurityFindingFilters, name: String) {
            self.groupByAttribute = groupByAttribute
            self.insightArn = insightArn
            self.filters = filters
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case groupByAttribute = "GroupByAttribute"
            case insightArn = "InsightArn"
            case filters = "Filters"
            case name = "Name"
        }
    }

    public struct ImportFindingsError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorCode", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: true, type: .string)
        ]
        /// The code of the error made during the BatchImportFindings operation. 
        public let errorCode: String
        /// The id of the error made during the BatchImportFindings operation.
        public let id: String
        /// The message of the error made during the BatchImportFindings operation. 
        public let errorMessage: String

        public init(errorCode: String, id: String, errorMessage: String) {
            self.errorCode = errorCode
            self.id = id
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case id = "Id"
            case errorMessage = "ErrorMessage"
        }
    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs specifying accounts whose invitations to Security Hub you want to delete. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct GetInsightsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Insights", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The insights returned by the operation.
        public let insights: [Insight]
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(insights: [Insight], nextToken: String? = nil) {
            self.insights = insights
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case insights = "Insights"
            case nextToken = "NextToken"
        }
    }

    public struct BatchEnableStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionRequests", required: true, type: .list)
        ]
        /// The list of standards that you want to enable.
        public let standardsSubscriptionRequests: [StandardsSubscriptionRequest]

        public init(standardsSubscriptionRequests: [StandardsSubscriptionRequest]) {
            self.standardsSubscriptionRequests = standardsSubscriptionRequests
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionRequests = "StandardsSubscriptionRequests"
        }
    }

    public struct AccountDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string)
        ]
        /// The ID of an AWS account.
        public let accountId: String?
        /// The email of an AWS account.
        public let email: String?

        public init(accountId: String? = nil, email: String? = nil) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case email = "Email"
        }
    }

    public struct CreateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountDetails", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the accounts that you want to associate with the master Security Hub account.
        public let accountDetails: [AccountDetails]?

        public init(accountDetails: [AccountDetails]? = nil) {
            self.accountDetails = accountDetails
        }

        private enum CodingKeys: String, CodingKey {
            case accountDetails = "AccountDetails"
        }
    }

    public struct ResourceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Container", required: false, type: .structure), 
            AWSShapeMember(label: "Other", required: false, type: .map), 
            AWSShapeMember(label: "AwsEc2Instance", required: false, type: .structure), 
            AWSShapeMember(label: "AwsIamAccessKey", required: false, type: .structure), 
            AWSShapeMember(label: "AwsS3Bucket", required: false, type: .structure)
        ]
        /// Container details related to a finding.
        public let container: ContainerDetails?
        /// The details of a resource that does not have a specific sub-field for the resource type defined.
        public let other: [String: String]?
        /// The details of an AWS EC2 instance.
        public let awsEc2Instance: AwsEc2InstanceDetails?
        /// AWS IAM access key details related to a finding.
        public let awsIamAccessKey: AwsIamAccessKeyDetails?
        /// The details of an AWS S3 Bucket.
        public let awsS3Bucket: AwsS3BucketDetails?

        public init(container: ContainerDetails? = nil, other: [String: String]? = nil, awsEc2Instance: AwsEc2InstanceDetails? = nil, awsIamAccessKey: AwsIamAccessKeyDetails? = nil, awsS3Bucket: AwsS3BucketDetails? = nil) {
            self.container = container
            self.other = other
            self.awsEc2Instance = awsEc2Instance
            self.awsIamAccessKey = awsIamAccessKey
            self.awsS3Bucket = awsS3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case container = "Container"
            case other = "Other"
            case awsEc2Instance = "AwsEc2Instance"
            case awsIamAccessKey = "AwsIamAccessKey"
            case awsS3Bucket = "AwsS3Bucket"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {

    }

    public struct BatchImportFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", required: true, type: .list)
        ]
        /// A list of findings that you want to import. Must be submitted in the AWSSecurityFinding format.
        public let findings: [AwsSecurityFinding]

        public init(findings: [AwsSecurityFinding]) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "Findings"
        }
    }

    public enum ThreatIntelIndicatorType: String, CustomStringConvertible, Codable {
        case domain = "DOMAIN"
        case emailAddress = "EMAIL_ADDRESS"
        case hashMd5 = "HASH_MD5"
        case hashSha1 = "HASH_SHA1"
        case hashSha256 = "HASH_SHA256"
        case hashSha512 = "HASH_SHA512"
        case ipv4Address = "IPV4_ADDRESS"
        case ipv6Address = "IPV6_ADDRESS"
        case mutex = "MUTEX"
        case process = "PROCESS"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationsCount", required: false, type: .integer)
        ]
        /// The number of all membership invitations sent to this Security Hub member account, not including the currently accepted invitation. 
        public let invitationsCount: Int32?

        public init(invitationsCount: Int32? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "InvitationsCount"
        }
    }

    public struct AwsS3BucketDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "OwnerName", required: false, type: .string)
        ]
        /// The canonical user ID of the owner of the S3 bucket.
        public let ownerId: String?
        /// The display name of the owner of the S3 bucket.
        public let ownerName: String?

        public init(ownerId: String? = nil, ownerName: String? = nil) {
            self.ownerId = ownerId
            self.ownerName = ownerName
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "OwnerId"
            case ownerName = "OwnerName"
        }
    }

    public struct GetInsightResultsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string)
        ]
        /// The ARN of the insight whose results you want to see.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public enum MalwareState: String, CustomStringConvertible, Codable {
        case observed = "OBSERVED"
        case removalFailed = "REMOVAL_FAILED"
        case removed = "REMOVED"
        public var description: String { return self.rawValue }
    }

    public struct StandardsSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionArn", required: true, type: .string), 
            AWSShapeMember(label: "StandardsArn", required: true, type: .string), 
            AWSShapeMember(label: "StandardsInput", required: true, type: .map), 
            AWSShapeMember(label: "StandardsStatus", required: true, type: .enum)
        ]
        /// The ARN of a resource that represents your subscription to a supported standard.
        public let standardsSubscriptionArn: String
        /// The ARN of a standard.
        public let standardsArn: String
        public let standardsInput: [String: String]
        /// The standard's status.
        public let standardsStatus: StandardsStatus

        public init(standardsSubscriptionArn: String, standardsArn: String, standardsInput: [String: String], standardsStatus: StandardsStatus) {
            self.standardsSubscriptionArn = standardsSubscriptionArn
            self.standardsArn = standardsArn
            self.standardsInput = standardsInput
            self.standardsStatus = standardsStatus
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionArn = "StandardsSubscriptionArn"
            case standardsArn = "StandardsArn"
            case standardsInput = "StandardsInput"
            case standardsStatus = "StandardsStatus"
        }
    }

    public struct NoteUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedBy", required: true, type: .string)
        ]
        /// The updated note text.
        public let text: String
        /// The principal that updated the note.
        public let updatedBy: String

        public init(text: String, updatedBy: String) {
            self.text = text
            self.updatedBy = updatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case updatedBy = "UpdatedBy"
        }
    }

    public struct DateFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "DateRange", required: false, type: .structure), 
            AWSShapeMember(label: "Start", required: false, type: .string)
        ]
        /// An end date for the date filter.
        public let end: String?
        /// A date range for the date filter.
        public let dateRange: DateRange?
        /// A start date for the date filter.
        public let start: String?

        public init(end: String? = nil, dateRange: DateRange? = nil, start: String? = nil) {
            self.end = end
            self.dateRange = dateRange
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case end = "End"
            case dateRange = "DateRange"
            case start = "Start"
        }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A collection of attributes that is use for querying findings.
        public let filters: AwsSecurityFindingFilters?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetFindings operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// A collection of attributes used for sorting findings.
        public let sortCriteria: [SortCriterion]?
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?

        public init(filters: AwsSecurityFindingFilters? = nil, nextToken: String? = nil, sortCriteria: [SortCriterion]? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nextToken = "NextToken"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct StandardsSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsInput", required: false, type: .map), 
            AWSShapeMember(label: "StandardsArn", required: true, type: .string)
        ]
        public let standardsInput: [String: String]?
        /// The ARN of the standard that you want to enable.
        public let standardsArn: String

        public init(standardsInput: [String: String]? = nil, standardsArn: String) {
            self.standardsInput = standardsInput
            self.standardsArn = standardsArn
        }

        private enum CodingKeys: String, CodingKey {
            case standardsInput = "StandardsInput"
            case standardsArn = "StandardsArn"
        }
    }

    public struct GetInsightResultsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightResults", required: true, type: .structure)
        ]
        /// The insight results returned by the operation.
        public let insightResults: InsightResults

        public init(insightResults: InsightResults) {
            self.insightResults = insightResults
        }

        private enum CodingKeys: String, CodingKey {
            case insightResults = "InsightResults"
        }
    }

    public struct UpdateInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupByAttribute", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string)
        ]
        /// The updated GroupBy attribute that defines this insight.
        public let groupByAttribute: String?
        /// The updated filters that define this insight.
        public let filters: AwsSecurityFindingFilters?
        /// The updated name for the insight.
        public let name: String?
        /// The ARN of the insight that you want to update.
        public let insightArn: String

        public init(groupByAttribute: String? = nil, filters: AwsSecurityFindingFilters? = nil, name: String? = nil, insightArn: String) {
            self.groupByAttribute = groupByAttribute
            self.filters = filters
            self.name = name
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupByAttribute = "GroupByAttribute"
            case filters = "Filters"
            case name = "Name"
            case insightArn = "InsightArn"
        }
    }

    public enum MapFilterComparison: String, CustomStringConvertible, Codable {
        case contains = "CONTAINS"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "Note", required: false, type: .structure), 
            AWSShapeMember(label: "RecordState", required: false, type: .enum)
        ]
        /// A collection of attributes that specify what findings you want to update.
        public let filters: AwsSecurityFindingFilters
        /// The updated note for the finding.
        public let note: NoteUpdate?
        /// The updated record state for the finding.
        public let recordState: RecordState?

        public init(filters: AwsSecurityFindingFilters, note: NoteUpdate? = nil, recordState: RecordState? = nil) {
            self.filters = filters
            self.note = note
            self.recordState = recordState
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case note = "Note"
            case recordState = "RecordState"
        }
    }

    public struct GetInsightsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArns", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNS of the insights that you want to describe.
        public let insightArns: [String]?
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetInsights operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?

        public init(insightArns: [String]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.insightArns = insightArns
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case insightArns = "InsightArns"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct EnableSecurityHubRequest: AWSShape {

    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Member details returned by the operation.
        public let members: [Member]?
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "Members"
            case nextToken = "NextToken"
        }
    }

    public struct EnableSecurityHubResponse: AWSShape {

    }

    public struct AcceptInvitationResponse: AWSShape {

    }

    public enum StandardsStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case ready = "READY"
        case failed = "FAILED"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct GetEnabledStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionArns", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of standards subscription ARNS that you want to list and describe.
        public let standardsSubscriptionArns: [String]?
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetEnabledStandards operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?

        public init(standardsSubscriptionArns: [String]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.standardsSubscriptionArns = standardsSubscriptionArns
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionArns = "StandardsSubscriptionArns"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct AwsEc2InstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "IpV4Addresses", required: false, type: .list), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "IpV6Addresses", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The identifier of the subnet in which the instance was launched.
        public let subnetId: String?
        /// The identifier of the VPC in which the instance was launched.
        public let vpcId: String?
        /// The IAM profile ARN of the instance.
        public let iamInstanceProfileArn: String?
        /// The IPv4 addresses associated with the instance.
        public let ipV4Addresses: [String]?
        /// The Amazon Machine Image (AMI) ID of the instance.
        public let imageId: String?
        /// The date/time the instance was launched.
        public let launchedAt: String?
        /// The key name associated with the instance.
        public let keyName: String?
        /// The IPv6 addresses associated with the instance.
        public let ipV6Addresses: [String]?
        /// The instance type of the instance. 
        public let `type`: String?

        public init(subnetId: String? = nil, vpcId: String? = nil, iamInstanceProfileArn: String? = nil, ipV4Addresses: [String]? = nil, imageId: String? = nil, launchedAt: String? = nil, keyName: String? = nil, ipV6Addresses: [String]? = nil, type: String? = nil) {
            self.subnetId = subnetId
            self.vpcId = vpcId
            self.iamInstanceProfileArn = iamInstanceProfileArn
            self.ipV4Addresses = ipV4Addresses
            self.imageId = imageId
            self.launchedAt = launchedAt
            self.keyName = keyName
            self.ipV6Addresses = ipV6Addresses
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case vpcId = "VpcId"
            case iamInstanceProfileArn = "IamInstanceProfileArn"
            case ipV4Addresses = "IpV4Addresses"
            case imageId = "ImageId"
            case launchedAt = "LaunchedAt"
            case keyName = "KeyName"
            case ipV6Addresses = "IpV6Addresses"
            case `type` = "Type"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "MemberStatus", required: false, type: .string)
        ]
        /// The account ID of the master Security Hub account who sent the invitation. 
        public let accountId: String?
        /// The ID of the invitation sent by the master Security Hub account.
        public let invitationId: String?
        /// The timestamp of when the invitation was sent.
        public let invitedAt: TimeStamp?
        /// The current relationship status between the inviter and invitee accounts.
        public let memberStatus: String?

        public init(accountId: String? = nil, invitationId: String? = nil, invitedAt: TimeStamp? = nil, memberStatus: String? = nil) {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.memberStatus = memberStatus
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case invitationId = "InvitationId"
            case invitedAt = "InvitedAt"
            case memberStatus = "MemberStatus"
        }
    }

    public struct InsightResultValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: true, type: .integer), 
            AWSShapeMember(label: "GroupByAttributeValue", required: true, type: .string)
        ]
        /// The number of findings returned for each GroupByAttributeValue.
        public let count: Int32
        /// The value of the attribute by which the findings are grouped for the insight's whose results are returned by the GetInsightResults operation.
        public let groupByAttributeValue: String

        public init(count: Int32, groupByAttributeValue: String) {
            self.count = count
            self.groupByAttributeValue = groupByAttributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case groupByAttributeValue = "GroupByAttributeValue"
        }
    }

    public struct AwsSecurityFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "SourceUrl", required: false, type: .string), 
            AWSShapeMember(label: "WorkflowState", required: false, type: .enum), 
            AWSShapeMember(label: "ThreatIntelIndicators", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .string), 
            AWSShapeMember(label: "Resources", required: true, type: .list), 
            AWSShapeMember(label: "UserDefinedFields", required: false, type: .map), 
            AWSShapeMember(label: "Compliance", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Confidence", required: false, type: .integer), 
            AWSShapeMember(label: "LastObservedAt", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .string), 
            AWSShapeMember(label: "Malware", required: false, type: .list), 
            AWSShapeMember(label: "RecordState", required: false, type: .enum), 
            AWSShapeMember(label: "Note", required: false, type: .structure), 
            AWSShapeMember(label: "VerificationState", required: false, type: .enum), 
            AWSShapeMember(label: "Network", required: false, type: .structure), 
            AWSShapeMember(label: "Remediation", required: false, type: .structure), 
            AWSShapeMember(label: "Process", required: false, type: .structure), 
            AWSShapeMember(label: "AwsAccountId", required: true, type: .string), 
            AWSShapeMember(label: "Types", required: true, type: .list), 
            AWSShapeMember(label: "Criticality", required: false, type: .integer), 
            AWSShapeMember(label: "Severity", required: true, type: .structure), 
            AWSShapeMember(label: "ProductArn", required: true, type: .string), 
            AWSShapeMember(label: "GeneratorId", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "RelatedFindings", required: false, type: .list), 
            AWSShapeMember(label: "ProductFields", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "FirstObservedAt", required: false, type: .string)
        ]
        /// The schema version for which a finding is formatted.
        public let schemaVersion: String
        /// A URL that links to a page about the current finding in the security findings provider's solution.
        public let sourceUrl: String?
        /// The workflow state of a finding. 
        public let workflowState: WorkflowState?
        /// Threat intel details related to a finding.
        public let threatIntelIndicators: [ThreatIntelIndicator]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was created by the security findings provider.
        public let createdAt: String
        /// A set of resource data types that describe the resources to which the finding refers.
        public let resources: [Resource]
        /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. 
        public let userDefinedFields: [String: String]?
        /// This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard (for example, AWS CIS Foundations). Contains compliance-related finding details.
        public let compliance: Compliance?
        /// A finding's description.
        public let description: String?
        /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale. 0 equates zero percent confidence and 100 equates to 100 percent confidence.
        public let confidence: Int32?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings provider.
        public let lastObservedAt: String?
        /// An ISO8601-formatted timestamp that indicates when the finding record was last updated by the security findings provider. 
        public let updatedAt: String
        /// A list of malware related to a finding.
        public let malware: [Malware]?
        /// The record state of a finding.
        public let recordState: RecordState?
        /// A user-defined note added to a finding.
        public let note: Note?
        /// Indicates the veracity of a finding. 
        public let verificationState: VerificationState?
        /// The details of network-related information about a finding.
        public let network: Network?
        /// An data type that describes the remediation options for a finding.
        public let remediation: Remediation?
        /// The details of process-related information about a finding.
        public let process: ProcessDetails?
        /// The AWS account ID in which a finding is generated.
        public let awsAccountId: String
        /// One or more finding types in the format of 'namespace/category/classifier' that classify a finding. Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications
        public let types: [String]
        /// The level of importance assigned to the resources associated with the finding. A score of 0 means the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.
        public let criticality: Int32?
        /// A finding's severity.
        public let severity: Severity
        /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) once this provider's product (solution that generates findings) is registered with Security Hub. 
        public let productArn: String
        /// This is the identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings provider's solutions, this generator can be called a rule, a check, a detector, a plug-in, etc. 
        public let generatorId: String
        /// The security findings provider-specific identifier for a finding.
        public let id: String
        /// A list of related findings.
        public let relatedFindings: [RelatedFinding]?
        /// A data type where security findings providers can include additional solution-specific details that are not part of the defined AwsSecurityFinding format.
        public let productFields: [String: String]?
        /// A finding's title.
        public let title: String?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings provider.
        public let firstObservedAt: String?

        public init(schemaVersion: String, sourceUrl: String? = nil, workflowState: WorkflowState? = nil, threatIntelIndicators: [ThreatIntelIndicator]? = nil, createdAt: String, resources: [Resource], userDefinedFields: [String: String]? = nil, compliance: Compliance? = nil, description: String? = nil, confidence: Int32? = nil, lastObservedAt: String? = nil, updatedAt: String, malware: [Malware]? = nil, recordState: RecordState? = nil, note: Note? = nil, verificationState: VerificationState? = nil, network: Network? = nil, remediation: Remediation? = nil, process: ProcessDetails? = nil, awsAccountId: String, types: [String], criticality: Int32? = nil, severity: Severity, productArn: String, generatorId: String, id: String, relatedFindings: [RelatedFinding]? = nil, productFields: [String: String]? = nil, title: String? = nil, firstObservedAt: String? = nil) {
            self.schemaVersion = schemaVersion
            self.sourceUrl = sourceUrl
            self.workflowState = workflowState
            self.threatIntelIndicators = threatIntelIndicators
            self.createdAt = createdAt
            self.resources = resources
            self.userDefinedFields = userDefinedFields
            self.compliance = compliance
            self.description = description
            self.confidence = confidence
            self.lastObservedAt = lastObservedAt
            self.updatedAt = updatedAt
            self.malware = malware
            self.recordState = recordState
            self.note = note
            self.verificationState = verificationState
            self.network = network
            self.remediation = remediation
            self.process = process
            self.awsAccountId = awsAccountId
            self.types = types
            self.criticality = criticality
            self.severity = severity
            self.productArn = productArn
            self.generatorId = generatorId
            self.id = id
            self.relatedFindings = relatedFindings
            self.productFields = productFields
            self.title = title
            self.firstObservedAt = firstObservedAt
        }

        private enum CodingKeys: String, CodingKey {
            case schemaVersion = "SchemaVersion"
            case sourceUrl = "SourceUrl"
            case workflowState = "WorkflowState"
            case threatIntelIndicators = "ThreatIntelIndicators"
            case createdAt = "CreatedAt"
            case resources = "Resources"
            case userDefinedFields = "UserDefinedFields"
            case compliance = "Compliance"
            case description = "Description"
            case confidence = "Confidence"
            case lastObservedAt = "LastObservedAt"
            case updatedAt = "UpdatedAt"
            case malware = "Malware"
            case recordState = "RecordState"
            case note = "Note"
            case verificationState = "VerificationState"
            case network = "Network"
            case remediation = "Remediation"
            case process = "Process"
            case awsAccountId = "AwsAccountId"
            case types = "Types"
            case criticality = "Criticality"
            case severity = "Severity"
            case productArn = "ProductArn"
            case generatorId = "GeneratorId"
            case id = "Id"
            case relatedFindings = "RelatedFindings"
            case productFields = "ProductFields"
            case title = "Title"
            case firstObservedAt = "FirstObservedAt"
        }
    }

    public struct ContainerDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "ImageName", required: false, type: .string), 
            AWSShapeMember(label: "ImageId", required: false, type: .string)
        ]
        /// The name of the container related to a finding.
        public let name: String?
        /// The date/time that the container was started.
        public let launchedAt: String?
        /// The name of the image related to a finding.
        public let imageName: String?
        /// The identifier of the image related to a finding.
        public let imageId: String?

        public init(name: String? = nil, launchedAt: String? = nil, imageName: String? = nil, imageId: String? = nil) {
            self.name = name
            self.launchedAt = launchedAt
            self.imageName = imageName
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case launchedAt = "LaunchedAt"
            case imageName = "ImageName"
            case imageId = "ImageId"
        }
    }

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public enum Partition: String, CustomStringConvertible, Codable {
        case aws = "aws"
        case awsCn = "aws-cn"
        case awsUsGov = "aws-us-gov"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFindingsResponse: AWSShape {

    }

    public struct DisableSecurityHubRequest: AWSShape {

    }

    public struct KeywordFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A value for the keyword.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Master", required: false, type: .structure)
        ]
        /// A list of details about the Security Hub master account for the current member account. 
        public let master: Invitation?

        public init(master: Invitation? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "Master"
        }
    }

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Findings details returned by the operation.
        public let findings: [AwsSecurityFinding]
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(findings: [AwsSecurityFinding], nextToken: String? = nil) {
            self.findings = findings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "Findings"
            case nextToken = "NextToken"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "Partition", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .structure), 
            AWSShapeMember(label: "Region", required: false, type: .string)
        ]
        /// A list of AWS tags associated with a resource at the time the finding was processed.
        public let tags: [String: String]?
        /// Specifies the type of the resource for which details are provided.
        public let `type`: String
        /// The canonical AWS partition name to which the region is assigned.
        public let partition: Partition?
        /// The canonical identifier for the given resource type.
        public let id: String
        /// Provides additional details about the resource.
        public let details: ResourceDetails?
        /// The canonical AWS external region name where this resource is located.
        public let region: String?

        public init(tags: [String: String]? = nil, type: String, partition: Partition? = nil, id: String, details: ResourceDetails? = nil, region: String? = nil) {
            self.tags = tags
            self.`type` = `type`
            self.partition = partition
            self.id = id
            self.details = details
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case `type` = "Type"
            case partition = "Partition"
            case id = "Id"
            case details = "Details"
            case region = "Region"
        }
    }

    public struct InsightResults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResultValues", required: true, type: .list), 
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string), 
            AWSShapeMember(label: "InsightArn", required: true, type: .string)
        ]
        /// The list of insight result values returned by the GetInsightResults operation.
        public let resultValues: [InsightResultValue]
        /// The attribute by which the findings are grouped for the insight's whose results are returned by the GetInsightResults operation.
        public let groupByAttribute: String
        /// The ARN of the insight whose results are returned by the GetInsightResults operation.
        public let insightArn: String

        public init(resultValues: [InsightResultValue], groupByAttribute: String, insightArn: String) {
            self.resultValues = resultValues
            self.groupByAttribute = groupByAttribute
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case resultValues = "ResultValues"
            case groupByAttribute = "GroupByAttribute"
            case insightArn = "InsightArn"
        }
    }

    public struct CreateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed.
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        /// Indicates the maximum number of items that you want in the response. 
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListInvitations operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The attribute by which the insight's findings are grouped. This attribute is used as a findings aggregator for the purposes of viewing and managing multiple related findings under a single operand. 
        public let groupByAttribute: String
        /// A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight.
        public let filters: AwsSecurityFindingFilters
        /// The user-defined name that identifies the insight that you want to create.
        public let name: String

        public init(groupByAttribute: String, filters: AwsSecurityFindingFilters, name: String) {
            self.groupByAttribute = groupByAttribute
            self.filters = filters
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case groupByAttribute = "GroupByAttribute"
            case filters = "Filters"
            case name = "Name"
        }
    }

    public enum RecordState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case archived = "ARCHIVED"
        public var description: String { return self.rawValue }
    }

    public struct IpFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: false, type: .string)
        ]
        /// Finding's CIDR value.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
        }
    }

    public struct GetMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list), 
            AWSShapeMember(label: "Members", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed.
        public let unprocessedAccounts: [Result]?
        /// A list of details about the Security Hub member accounts.
        public let members: [Member]?

        public init(unprocessedAccounts: [Result]? = nil, members: [Member]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
            case members = "Members"
        }
    }

    public struct RelatedFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductArn", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ARN of the solution that generated a related finding.
        public let productArn: String
        /// The solution-generated identifier for a related finding.
        public let id: String

        public init(productArn: String, id: String) {
            self.productArn = productArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case productArn = "ProductArn"
            case id = "Id"
        }
    }

    public struct EnableImportFindingsForProductRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductArn", required: true, type: .string)
        ]
        /// The ARN of the product that generates findings that you want to import into Security Hub.
        public let productArn: String

        public init(productArn: String) {
            self.productArn = productArn
        }

        private enum CodingKeys: String, CodingKey {
            case productArn = "ProductArn"
        }
    }

    public enum AwsIamAccessKeyStatus: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum MalwareType: String, CustomStringConvertible, Codable {
        case adware = "ADWARE"
        case blendedThreat = "BLENDED_THREAT"
        case botnetAgent = "BOTNET_AGENT"
        case coinMiner = "COIN_MINER"
        case exploitKit = "EXPLOIT_KIT"
        case keylogger = "KEYLOGGER"
        case macro = "MACRO"
        case potentiallyUnwanted = "POTENTIALLY_UNWANTED"
        case spyware = "SPYWARE"
        case ransomware = "RANSOMWARE"
        case remoteAccess = "REMOTE_ACCESS"
        case rootkit = "ROOTKIT"
        case trojan = "TROJAN"
        case virus = "VIRUS"
        case worm = "WORM"
        public var description: String { return self.rawValue }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "OnlyAssociated", location: .querystring(locationName: "OnlyAssociated"), required: false, type: .boolean)
        ]
        /// Indicates the maximum number of items that you want in the response. 
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListMembers operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data. 
        public let nextToken: String?
        /// Specifies what member accounts the response includes based on their relationship status with the master account. The default value is TRUE. If onlyAssociated is set to TRUE, the response includes member accounts whose relationship status with the master is set to ENABLED or DISABLED. If onlyAssociated is set to FALSE, the response includes all existing member accounts. 
        public let onlyAssociated: Bool?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, onlyAssociated: Bool? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.onlyAssociated = onlyAssociated
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case onlyAssociated = "OnlyAssociated"
        }
    }

    public enum VerificationState: String, CustomStringConvertible, Codable {
        case unknown = "UNKNOWN"
        case truePositive = "TRUE_POSITIVE"
        case falsePositive = "FALSE_POSITIVE"
        case benignPositive = "BENIGN_POSITIVE"
        public var description: String { return self.rawValue }
    }

    public struct MapFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comparison", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// Represents the condition to be applied to a key value when querying for findings with a map filter.
        public let comparison: MapFilterComparison?
        /// The value for the key in the map filter.
        public let value: String?
        /// The key of the map filter.
        public let key: String?

        public init(comparison: MapFilterComparison? = nil, value: String? = nil, key: String? = nil) {
            self.comparison = comparison
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case comparison = "Comparison"
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs specifying accounts whose invitations to Security Hub you want to decline. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct NumberFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Eq", required: false, type: .double), 
            AWSShapeMember(label: "Lte", required: false, type: .double), 
            AWSShapeMember(label: "Gte", required: false, type: .double)
        ]
        /// Represents the "equal to" condition to be applied to a single field when querying for findings.
        public let eq: Double?
        /// Represents the "less than equal" condition to be applied to a single field when querying for findings. 
        public let lte: Double?
        /// Represents the "greater than equal" condition to be applied to a single field when querying for findings. 
        public let gte: Double?

        public init(eq: Double? = nil, lte: Double? = nil, gte: Double? = nil) {
            self.eq = eq
            self.lte = lte
            self.gte = gte
        }

        private enum CodingKeys: String, CodingKey {
            case eq = "Eq"
            case lte = "Lte"
            case gte = "Gte"
        }
    }

    public struct Severity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Product", required: false, type: .double), 
            AWSShapeMember(label: "Normalized", required: true, type: .integer)
        ]
        /// The native severity as defined by the security findings provider's solution that generated the finding.
        public let product: Double?
        /// The normalized severity of a finding.
        public let normalized: Int32

        public init(product: Double? = nil, normalized: Int32) {
            self.product = product
            self.normalized = normalized
        }

        private enum CodingKeys: String, CodingKey {
            case product = "Product"
            case normalized = "Normalized"
        }
    }

    public struct Compliance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Indicates the result of a compliance check.
        public let status: ComplianceStatus?

        public init(status: ComplianceStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

}