// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Route53 {

    public struct HostedZone: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that includes the Comment and PrivateZone elements. If you omitted the HostedZoneConfig and Comment elements from the request, the Config and Comment elements don't appear in the response.
        public let config: HostedZoneConfig?
        /// The number of resource record sets in the hosted zone.
        public let resourceRecordSetCount: Int64?
        /// The value that you specified for CallerReference when you created the hosted zone.
        public let callerReference: String
        /// The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar. For information about how to specify characters other than a-z, 0-9, and - (hyphen) and how to specify internationalized domain names, see CreateHostedZone.
        public let name: String
        /// The ID that Amazon Route 53 assigned to the hosted zone when you created it.
        public let id: String

        public init(config: HostedZoneConfig? = nil, resourceRecordSetCount: Int64? = nil, callerReference: String, name: String, id: String) {
            self.config = config
            self.resourceRecordSetCount = resourceRecordSetCount
            self.callerReference = callerReference
            self.name = name
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let config = dictionary["Config"] as? [String: Any] { self.config = try Route53.HostedZoneConfig(dictionary: config) } else { self.config = nil }
            self.resourceRecordSetCount = dictionary["ResourceRecordSetCount"] as? Int64
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public enum ChangeAction: String, CustomStringConvertible {
        case create = "CREATE"
        case delete = "DELETE"
        case upsert = "UPSERT"
        public var description: String { return self.rawValue }
    }

    public struct DelegationSetNameServers: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nameServer: [String]?

        public init(nameServer: [String]? = nil) {
            self.nameServer = nameServer
        }

        public init(dictionary: [String: Any]) throws {
            self.nameServer = dictionary["NameServer"] as? [String]
        }
    }

    public enum HealthCheckType: String, CustomStringConvertible {
        case http = "HTTP"
        case https = "HTTPS"
        case http_str_match = "HTTP_STR_MATCH"
        case https_str_match = "HTTPS_STR_MATCH"
        case tcp = "TCP"
        case calculated = "CALCULATED"
        case cloudwatch_metric = "CLOUDWATCH_METRIC"
        public var description: String { return self.rawValue }
    }

    public struct ListHostedZonesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "Marker", "delegationsetid": "DelegationSetId", "maxitems": "MaxItems"]
        }
        /// If you're using reusable delegation sets and you want to list all of the hosted zones that are associated with a reusable delegation set, specify the ID of that reusable delegation set. 
        public let delegationSetId: String?
        /// (Optional) If you have more hosted zones than the value of maxitems, ListHostedZones returns only the first maxitems hosted zones. To get the next group of maxitems hosted zones, submit another request to ListHostedZones. For the value of marker, specify the value of the NextMarker element that was returned in the previous response. Hosted zones are listed in the order in which they were created.
        public let marker: String?
        /// (Optional) The maximum number of hosted zones to be included in the response body for this request. If you have more than maxitems hosted zones, the value of the IsTruncated element in the response is true, and the value of the NextMarker element is the hosted zone ID of the first hosted zone in the next group of maxitems hosted zones.
        public let maxItems: String?

        public init(delegationSetId: String? = nil, marker: String? = nil, maxItems: String? = nil) {
            self.delegationSetId = delegationSetId
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.delegationSetId = dictionary["Delegationsetid"] as? String
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["Maxitems"] as? String
        }
    }

    public struct GetTrafficPolicyInstanceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the traffic policy instance that you want to get information about.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct TrafficPolicyInstances: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let trafficPolicyInstance: [TrafficPolicyInstance]?

        public init(trafficPolicyInstance: [TrafficPolicyInstance]? = nil) {
            self.trafficPolicyInstance = trafficPolicyInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let trafficPolicyInstance = dictionary["TrafficPolicyInstance"] as? [[String: Any]] {
                self.trafficPolicyInstance = try trafficPolicyInstance.map({ try TrafficPolicyInstance(dictionary: $0) })
            } else { 
                self.trafficPolicyInstance = nil
            }
        }
    }

    public struct GeoLocationDetailsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let geoLocationDetails: [GeoLocationDetails]?

        public init(geoLocationDetails: [GeoLocationDetails]? = nil) {
            self.geoLocationDetails = geoLocationDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let geoLocationDetails = dictionary["GeoLocationDetails"] as? [[String: Any]] {
                self.geoLocationDetails = try geoLocationDetails.map({ try GeoLocationDetails(dictionary: $0) })
            } else { 
                self.geoLocationDetails = nil
            }
        }
    }

    public struct GetHealthCheckStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains one HealthCheckObservation element for each Amazon Route 53 health checker that is reporting a status about the health check endpoint.
        public let healthCheckObservations: HealthCheckObservations

        public init(healthCheckObservations: HealthCheckObservations) {
            self.healthCheckObservations = healthCheckObservations
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckObservations = dictionary["HealthCheckObservations"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheckObservations") }
            self.healthCheckObservations = try Route53.HealthCheckObservations(dictionary: healthCheckObservations)
        }
    }

    public struct ListVPCAssociationAuthorizationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["maxresults": "MaxResults", "nexttoken": "NextToken"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        ///  Optional: If a response includes a NextToken element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of results, submit another request, and include the value of the NextToken element in from the response in the NextToken parameter in another ListVPCAssociationAuthorizations request.
        public let nextToken: String?
        /// The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone.
        public let hostedZoneId: String
        ///  Optional: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return.
        public let maxResults: String?

        public init(nextToken: String? = nil, hostedZoneId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.hostedZoneId = hostedZoneId
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["Nexttoken"] as? String
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
            self.maxResults = dictionary["Maxresults"] as? String
        }
    }

    public struct DeleteReusableDelegationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the reusable delegation set you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateHealthCheckResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// A complex type that contains identifying information about the health check.
        public let healthCheck: HealthCheck
        /// The unique URL representing the new health check.
        public let location: String

        public init(healthCheck: HealthCheck, location: String) {
            self.healthCheck = healthCheck
            self.location = location
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheck = dictionary["HealthCheck"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheck") }
            self.healthCheck = try Route53.HealthCheck(dictionary: healthCheck)
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
        }
    }

    public struct TestDNSAnswerRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["resolverip": "ResolverIP", "edns0clientsubnetip": "EDNS0ClientSubnetIP", "recordname": "RecordName", "hostedzoneid": "HostedZoneId", "edns0clientsubnetmask": "EDNS0ClientSubnetMask", "recordtype": "RecordType"]
        }
        /// The type of the resource record set.
        public let recordType: RRType
        /// If the resolver that you specified for resolverip supports EDNS0, specify the IP address of a client in the applicable location.
        public let eDNS0ClientSubnetIP: String?
        /// If you specify an IP address for edns0clientsubnetip, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify 192.0.2.44 for edns0clientsubnetip and 24 for edns0clientsubnetmask, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits.
        public let eDNS0ClientSubnetMask: String?
        /// The name of the resource record set that you want Amazon Route 53 to simulate a query for.
        public let recordName: String
        /// The ID of the hosted zone that you want Amazon Route 53 to simulate a query for.
        public let hostedZoneId: String
        /// If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, TestDnsAnswer uses the IP address of a DNS resolver in the AWS US East region.
        public let resolverIP: String?

        public init(recordType: RRType, eDNS0ClientSubnetIP: String? = nil, eDNS0ClientSubnetMask: String? = nil, recordName: String, hostedZoneId: String, resolverIP: String? = nil) {
            self.recordType = recordType
            self.eDNS0ClientSubnetIP = eDNS0ClientSubnetIP
            self.eDNS0ClientSubnetMask = eDNS0ClientSubnetMask
            self.recordName = recordName
            self.hostedZoneId = hostedZoneId
            self.resolverIP = resolverIP
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawRecordType = dictionary["Recordtype"] as? String, let recordType = RRType(rawValue: rawRecordType) else { throw InitializableError.missingRequiredParam("Recordtype") }
            self.recordType = recordType
            self.eDNS0ClientSubnetIP = dictionary["Edns0clientsubnetip"] as? String
            self.eDNS0ClientSubnetMask = dictionary["Edns0clientsubnetmask"] as? String
            guard let recordName = dictionary["Recordname"] as? String else { throw InitializableError.missingRequiredParam("Recordname") }
            self.recordName = recordName
            guard let hostedZoneId = dictionary["Hostedzoneid"] as? String else { throw InitializableError.missingRequiredParam("Hostedzoneid") }
            self.hostedZoneId = hostedZoneId
            self.resolverIP = dictionary["Resolverip"] as? String
        }
    }

    public struct ListTrafficPoliciesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of MaxItems traffic policies by calling ListTrafficPolicies again and specifying the value of the TrafficPolicyIdMarker element in the TrafficPolicyIdMarker request parameter. Valid Values: true | false 
        public let isTruncated: Bool
        /// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicies that produced the current response.
        public let maxItems: String
        /// If the value of IsTruncated is true, TrafficPolicyIdMarker is the ID of the first traffic policy in the next group of MaxItems traffic policies.
        public let trafficPolicyIdMarker: String
        /// A list that contains one TrafficPolicySummary element for each traffic policy that was created by the current AWS account.
        public let trafficPolicySummaries: TrafficPolicySummaries

        public init(isTruncated: Bool, maxItems: String, trafficPolicyIdMarker: String, trafficPolicySummaries: TrafficPolicySummaries) {
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.trafficPolicyIdMarker = trafficPolicyIdMarker
            self.trafficPolicySummaries = trafficPolicySummaries
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let trafficPolicyIdMarker = dictionary["TrafficPolicyIdMarker"] as? String else { throw InitializableError.missingRequiredParam("TrafficPolicyIdMarker") }
            self.trafficPolicyIdMarker = trafficPolicyIdMarker
            guard let trafficPolicySummaries = dictionary["TrafficPolicySummaries"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicySummaries") }
            self.trafficPolicySummaries = try Route53.TrafficPolicySummaries(dictionary: trafficPolicySummaries)
        }
    }

    public struct GetTrafficPolicyInstanceCountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of traffic policy instances that are associated with the current AWS account.
        public let trafficPolicyInstanceCount: Int32

        public init(trafficPolicyInstanceCount: Int32) {
            self.trafficPolicyInstanceCount = trafficPolicyInstanceCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicyInstanceCount = dictionary["TrafficPolicyInstanceCount"] as? Int32 else { throw InitializableError.missingRequiredParam("TrafficPolicyInstanceCount") }
            self.trafficPolicyInstanceCount = trafficPolicyInstanceCount
        }
    }

    public struct GetHealthCheckLastFailureReasonRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["HealthCheckId": "HealthCheckId"]
        }
        /// The ID for the health check for which you want the last failure reason. When you created the health check, CreateHealthCheck returned the ID in the response, in the HealthCheckId element.
        public let healthCheckId: String

        public init(healthCheckId: String) {
            self.healthCheckId = healthCheckId
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckId = dictionary["HealthCheckId"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckId") }
            self.healthCheckId = healthCheckId
        }
    }

    public struct TrafficPolicySummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version number of the latest version of the traffic policy.
        public let latestVersion: Int32
        /// The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy to create a traffic policy instance.
        public let `type`: RRType
        /// The name that you specified for the traffic policy when you created it.
        public let name: String
        /// The number of traffic policies that are associated with the current AWS account.
        public let trafficPolicyCount: Int32
        /// The ID that Amazon Route 53 assigned to the traffic policy when you created it.
        public let id: String

        public init(latestVersion: Int32, type: RRType, name: String, trafficPolicyCount: Int32, id: String) {
            self.latestVersion = latestVersion
            self.`type` = `type`
            self.name = name
            self.trafficPolicyCount = trafficPolicyCount
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let latestVersion = dictionary["LatestVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("LatestVersion") }
            self.latestVersion = latestVersion
            guard let rawType = dictionary["Type"] as? String, let `type` = RRType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let trafficPolicyCount = dictionary["TrafficPolicyCount"] as? Int32 else { throw InitializableError.missingRequiredParam("TrafficPolicyCount") }
            self.trafficPolicyCount = trafficPolicyCount
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ChangeBatch: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the changes to make to the record sets.
        public let changes: Changes
        ///  Optional: Any comments you want to include about a change batch request.
        public let comment: String?

        public init(changes: Changes, comment: String? = nil) {
            self.changes = changes
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let changes = dictionary["Changes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Changes") }
            self.changes = try Route53.Changes(dictionary: changes)
            self.comment = dictionary["Comment"] as? String
        }
    }

    public struct UpdateTrafficPolicyInstanceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.
        public let trafficPolicyVersion: Int32
        /// The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.
        public let trafficPolicyId: String
        /// The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.
        public let tTL: Int64
        /// The ID of the traffic policy instance that you want to update.
        public let id: String

        public init(trafficPolicyVersion: Int32, trafficPolicyId: String, tTL: Int64, id: String) {
            self.trafficPolicyVersion = trafficPolicyVersion
            self.trafficPolicyId = trafficPolicyId
            self.tTL = tTL
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicyVersion = dictionary["TrafficPolicyVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("TrafficPolicyVersion") }
            self.trafficPolicyVersion = trafficPolicyVersion
            guard let trafficPolicyId = dictionary["TrafficPolicyId"] as? String else { throw InitializableError.missingRequiredParam("TrafficPolicyId") }
            self.trafficPolicyId = trafficPolicyId
            guard let tTL = dictionary["TTL"] as? Int64 else { throw InitializableError.missingRequiredParam("TTL") }
            self.tTL = tTL
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ListHostedZonesByNameRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["dnsname": "DNSName", "maxitems": "MaxItems", "hostedzoneid": "HostedZoneId"]
        }
        /// The maximum number of hosted zones to be included in the response body for this request. If you have more than maxitems hosted zones, then the value of the IsTruncated element in the response is true, and the values of NextDNSName and NextHostedZoneId specify the first hosted zone in the next group of maxitems hosted zones. 
        public let maxItems: String?
        /// (Optional) For your first request to ListHostedZonesByName, do not include the hostedzoneid parameter. If you have more hosted zones than the value of maxitems, ListHostedZonesByName returns only the first maxitems hosted zones. To get the next group of maxitems hosted zones, submit another request to ListHostedZonesByName and include both dnsname and hostedzoneid parameters. For the value of hostedzoneid, specify the value of the NextHostedZoneId element from the previous response.
        public let hostedZoneId: String?
        /// (Optional) For your first request to ListHostedZonesByName, include the dnsname parameter only if you want to specify the name of the first hosted zone in the response. If you don't include the dnsname parameter, Amazon Route 53 returns all of the hosted zones that were created by the current AWS account, in ASCII order. For subsequent requests, include both dnsname and hostedzoneid parameters. For dnsname, specify the value of NextDNSName from the previous response.
        public let dNSName: String?

        public init(maxItems: String? = nil, hostedZoneId: String? = nil, dNSName: String? = nil) {
            self.maxItems = maxItems
            self.hostedZoneId = hostedZoneId
            self.dNSName = dNSName
        }

        public init(dictionary: [String: Any]) throws {
            self.maxItems = dictionary["Maxitems"] as? String
            self.hostedZoneId = dictionary["Hostedzoneid"] as? String
            self.dNSName = dictionary["Dnsname"] as? String
        }
    }

    public struct HealthCheckObservations: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let healthCheckObservation: [HealthCheckObservation]?

        public init(healthCheckObservation: [HealthCheckObservation]? = nil) {
            self.healthCheckObservation = healthCheckObservation
        }

        public init(dictionary: [String: Any]) throws {
            if let healthCheckObservation = dictionary["HealthCheckObservation"] as? [[String: Any]] {
                self.healthCheckObservation = try healthCheckObservation.map({ try HealthCheckObservation(dictionary: $0) })
            } else { 
                self.healthCheckObservation = nil
            }
        }
    }

    public enum ChangeStatus: String, CustomStringConvertible {
        case pending = "PENDING"
        case insync = "INSYNC"
        public var description: String { return self.rawValue }
    }

    public enum VPCRegion: String, CustomStringConvertible {
        case us_east_1 = "us-east-1"
        case us_east_2 = "us-east-2"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case eu_west_1 = "eu-west-1"
        case eu_west_2 = "eu-west-2"
        case eu_central_1 = "eu-central-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_south_1 = "ap-south-1"
        case ap_northeast_1 = "ap-northeast-1"
        case ap_northeast_2 = "ap-northeast-2"
        case sa_east_1 = "sa-east-1"
        case ca_central_1 = "ca-central-1"
        case cn_north_1 = "cn-north-1"
        public var description: String { return self.rawValue }
    }

    public enum RRType: String, CustomStringConvertible {
        case soa = "SOA"
        case a = "A"
        case txt = "TXT"
        case ns = "NS"
        case cname = "CNAME"
        case mx = "MX"
        case naptr = "NAPTR"
        case ptr = "PTR"
        case srv = "SRV"
        case spf = "SPF"
        case aaaa = "AAAA"
        public var description: String { return self.rawValue }
    }

    public struct UpdateHealthCheckResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let healthCheck: HealthCheck

        public init(healthCheck: HealthCheck) {
            self.healthCheck = healthCheck
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheck = dictionary["HealthCheck"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheck") }
            self.healthCheck = try Route53.HealthCheck(dictionary: healthCheck)
        }
    }

    public struct ListTrafficPolicyInstancesByHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of MaxItems traffic policy instances by calling ListTrafficPolicyInstancesByHostedZone again and specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker elements in the corresponding request parameters.
        public let isTruncated: Bool
        /// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstancesByHostedZone that produced the current response. 
        public let maxItems: String
        /// A list that contains one TrafficPolicyInstance element for each traffic policy instance that matches the elements in the request. 
        public let trafficPolicyInstances: TrafficPolicyInstances
        /// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of the resource record sets that are associated with the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceTypeMarker: RRType?
        /// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceNameMarker: String?

        public init(isTruncated: Bool, maxItems: String, trafficPolicyInstances: TrafficPolicyInstances, trafficPolicyInstanceTypeMarker: RRType? = nil, trafficPolicyInstanceNameMarker: String? = nil) {
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.trafficPolicyInstances = trafficPolicyInstances
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let trafficPolicyInstances = dictionary["TrafficPolicyInstances"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstances") }
            self.trafficPolicyInstances = try Route53.TrafficPolicyInstances(dictionary: trafficPolicyInstances)
            if let trafficPolicyInstanceTypeMarker = dictionary["TrafficPolicyInstanceTypeMarker"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
            self.trafficPolicyInstanceNameMarker = dictionary["TrafficPolicyInstanceNameMarker"] as? String
        }
    }

    public struct DeleteVPCAssociationAuthorizationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AssociateVPCWithHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        /// A complex type that contains information about the VPC that you want to associate with a private hosted zone.
        public let vPC: VPC
        /// The ID of the private hosted zone that you want to associate an Amazon VPC with. Note that you can't associate a VPC with a hosted zone that doesn't have an existing VPC association.
        public let hostedZoneId: String
        ///  Optional: A comment about the association request.
        public let comment: String?

        public init(vPC: VPC, hostedZoneId: String, comment: String? = nil) {
            self.vPC = vPC
            self.hostedZoneId = hostedZoneId
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let vPC = dictionary["VPC"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPC") }
            self.vPC = try Route53.VPC(dictionary: vPC)
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
            self.comment = dictionary["Comment"] as? String
        }
    }

    public struct ResourceRecord: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current or new DNS record value, not to exceed 4,000 characters. In the case of a DELETE action, if the current value does not match the actual value, an error is returned. For descriptions about how to format Value for different record types, see Supported DNS Resource Record Types in the Amazon Route 53 Developer Guide. You can specify more than one value for all record types except CNAME and SOA.   If you're creating an alias resource record set, omit Value. 
        public let value: String

        public init(value: String) {
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
        }
    }

    public struct GetHealthCheckStatusRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["HealthCheckId": "HealthCheckId"]
        }
        /// The ID for the health check for which you want the current status. When you created the health check, CreateHealthCheck returned the ID in the response, in the HealthCheckId element.  If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console. You can't use GetHealthCheckStatus to get the status of a calculated health check. 
        public let healthCheckId: String

        public init(healthCheckId: String) {
            self.healthCheckId = healthCheckId
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckId = dictionary["HealthCheckId"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckId") }
            self.healthCheckId = healthCheckId
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of Value depends on the operation that you want to perform:    Add a tag to a health check or hosted zone: Value is the value that you want to give the new tag.    Edit a tag: Value is the new value that you want to assign the tag.  
        public let value: String?
        /// The value of Key depends on the operation that you want to perform:    Add a tag to a health check or hosted zone: Key is the name that you want to give the new tag.    Edit a tag: Key is the name of the tag whose Value element you want to remove.     Delete a key: Key is the name of the tag you want to remove.    Give a name to a health check: Edit the default Name tag. In the Amazon Route 53 console, the list of your health checks includes a Name column that lets you see the name that you've given to each health check.  
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct DelegationSet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains a list of the authoritative name servers for the hosted zone.
        public let nameServers: DelegationSetNameServers
        /// A unique string that identifies the request, and that allows you to retry failed CreateReusableDelegationSet requests without the risk of executing the operation twice. You must use a unique CallerReference string every time you submit a CreateReusableDelegationSet request. CallerReference can be any unique string, for example, a date/time stamp.
        public let callerReference: String?
        /// The ID that Amazon Route 53 assigns to a reusable delegation set.
        public let id: String?

        public init(nameServers: DelegationSetNameServers, callerReference: String? = nil, id: String? = nil) {
            self.nameServers = nameServers
            self.callerReference = callerReference
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let nameServers = dictionary["NameServers"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NameServers") }
            self.nameServers = try Route53.DelegationSetNameServers(dictionary: nameServers)
            self.callerReference = dictionary["CallerReference"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct VPCs: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vPC: [VPC]?

        public init(vPC: [VPC]? = nil) {
            self.vPC = vPC
        }

        public init(dictionary: [String: Any]) throws {
            if let vPC = dictionary["VPC"] as? [[String: Any]] {
                self.vPC = try vPC.map({ try VPC(dictionary: $0) })
            } else { 
                self.vPC = nil
            }
        }
    }

    public struct ChildHealthCheckList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let childHealthCheck: [String]?

        public init(childHealthCheck: [String]? = nil) {
            self.childHealthCheck = childHealthCheck
        }

        public init(dictionary: [String: Any]) throws {
            self.childHealthCheck = dictionary["ChildHealthCheck"] as? [String]
        }
    }

    public struct UpdateTrafficPolicyCommentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id", "Version": "Version"]
        }
        /// The new comment for the specified traffic policy and version.
        public let comment: String
        /// The value of Version for the traffic policy for which you want to update the comment.
        public let version: Int32
        /// The value of Id for the traffic policy for which you want to update the comment.
        public let id: String

        public init(comment: String, version: Int32, id: String) {
            self.comment = comment
            self.version = version
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let comment = dictionary["Comment"] as? String else { throw InitializableError.missingRequiredParam("Comment") }
            self.comment = comment
            guard let version = dictionary["Version"] as? Int32 else { throw InitializableError.missingRequiredParam("Version") }
            self.version = version
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateTrafficPolicyVersionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// A unique URL that represents a new traffic policy version.
        public let location: String
        /// A complex type that contains settings for the new version of the traffic policy.
        public let trafficPolicy: TrafficPolicy

        public init(location: String, trafficPolicy: TrafficPolicy) {
            self.location = location
            self.trafficPolicy = trafficPolicy
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
            guard let trafficPolicy = dictionary["TrafficPolicy"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicy") }
            self.trafficPolicy = try Route53.TrafficPolicy(dictionary: trafficPolicy)
        }
    }

    public struct ListTrafficPolicyInstancesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of MaxItems traffic policy instances by calling ListTrafficPolicyInstances again and specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker elements in the corresponding request parameters.
        public let isTruncated: Bool
        /// If IsTruncated is true, HostedZoneIdMarker is the ID of the hosted zone of the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let hostedZoneIdMarker: String?
        /// A list that contains one TrafficPolicyInstance element for each traffic policy instance that matches the elements in the request.
        public let trafficPolicyInstances: TrafficPolicyInstances
        /// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstances that produced the current response.
        public let maxItems: String
        /// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceNameMarker: String?
        /// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of the resource record sets that are associated with the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceTypeMarker: RRType?

        public init(isTruncated: Bool, hostedZoneIdMarker: String? = nil, trafficPolicyInstances: TrafficPolicyInstances, maxItems: String, trafficPolicyInstanceNameMarker: String? = nil, trafficPolicyInstanceTypeMarker: RRType? = nil) {
            self.isTruncated = isTruncated
            self.hostedZoneIdMarker = hostedZoneIdMarker
            self.trafficPolicyInstances = trafficPolicyInstances
            self.maxItems = maxItems
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.hostedZoneIdMarker = dictionary["HostedZoneIdMarker"] as? String
            guard let trafficPolicyInstances = dictionary["TrafficPolicyInstances"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstances") }
            self.trafficPolicyInstances = try Route53.TrafficPolicyInstances(dictionary: trafficPolicyInstances)
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            self.trafficPolicyInstanceNameMarker = dictionary["TrafficPolicyInstanceNameMarker"] as? String
            if let trafficPolicyInstanceTypeMarker = dictionary["TrafficPolicyInstanceTypeMarker"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
        }
    }

    public struct ListHostedZonesByNameResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains general information about the hosted zone.
        public let hostedZones: HostedZones
        /// The value that you specified for the maxitems parameter in the call to ListHostedZonesByName that produced the current response.
        public let maxItems: String
        /// A flag that indicates whether there are more hosted zones to be listed. If the response was truncated, you can get the next group of maxitems hosted zones by calling ListHostedZonesByName again and specifying the values of NextDNSName and NextHostedZoneId elements in the dnsname and hostedzoneid parameters.
        public let isTruncated: Bool
        /// If IsTruncated is true, the value of NextHostedZoneId identifies the first hosted zone in the next group of maxitems hosted zones. Call ListHostedZonesByName again and specify the value of NextDNSName and NextHostedZoneId in the dnsname and hostedzoneid parameters, respectively. This element is present only if IsTruncated is true.
        public let nextHostedZoneId: String?
        /// For the second and subsequent calls to ListHostedZonesByName, DNSName is the value that you specified for the dnsname parameter in the request that produced the current response.
        public let dNSName: String?
        /// If IsTruncated is true, the value of NextDNSName is the name of the first hosted zone in the next group of maxitems hosted zones. Call ListHostedZonesByName again and specify the value of NextDNSName and NextHostedZoneId in the dnsname and hostedzoneid parameters, respectively. This element is present only if IsTruncated is true.
        public let nextDNSName: String?
        /// The ID that Amazon Route 53 assigned to the hosted zone when you created it.
        public let hostedZoneId: String?

        public init(hostedZones: HostedZones, maxItems: String, isTruncated: Bool, nextHostedZoneId: String? = nil, dNSName: String? = nil, nextDNSName: String? = nil, hostedZoneId: String? = nil) {
            self.hostedZones = hostedZones
            self.maxItems = maxItems
            self.isTruncated = isTruncated
            self.nextHostedZoneId = nextHostedZoneId
            self.dNSName = dNSName
            self.nextDNSName = nextDNSName
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZones = dictionary["HostedZones"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HostedZones") }
            self.hostedZones = try Route53.HostedZones(dictionary: hostedZones)
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.nextHostedZoneId = dictionary["NextHostedZoneId"] as? String
            self.dNSName = dictionary["DNSName"] as? String
            self.nextDNSName = dictionary["NextDNSName"] as? String
            self.hostedZoneId = dictionary["HostedZoneId"] as? String
        }
    }

    public struct CreateHealthCheckRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the response to a CreateHealthCheck request. 
        public let healthCheckConfig: HealthCheckConfig
        /// A unique string that identifies the request and that allows failed CreateHealthCheck requests to be retried without the risk of executing the operation twice. You must use a unique CallerReference string every time you create a health check.
        public let callerReference: String

        public init(healthCheckConfig: HealthCheckConfig, callerReference: String) {
            self.healthCheckConfig = healthCheckConfig
            self.callerReference = callerReference
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckConfig = dictionary["HealthCheckConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheckConfig") }
            self.healthCheckConfig = try Route53.HealthCheckConfig(dictionary: healthCheckConfig)
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
        }
    }

    public struct CreateReusableDelegationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// The unique URL representing the new reusable delegation set.
        public let location: String
        /// A complex type that contains name server information.
        public let delegationSet: DelegationSet

        public init(location: String, delegationSet: DelegationSet) {
            self.location = location
            self.delegationSet = delegationSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
            guard let delegationSet = dictionary["DelegationSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DelegationSet") }
            self.delegationSet = try Route53.DelegationSet(dictionary: delegationSet)
        }
    }

    public struct AssociateVPCWithHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that describes the changes made to your hosted zone.
        public let changeInfo: ChangeInfo

        public init(changeInfo: ChangeInfo) {
            self.changeInfo = changeInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
        }
    }

    public struct HealthCheck: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version of the health check. You can optionally pass this value in a call to UpdateHealthCheck to prevent overwriting another change to the health check.
        public let healthCheckVersion: Int64
        /// A complex type that contains detailed information about one health check.
        public let healthCheckConfig: HealthCheckConfig
        /// A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.
        public let cloudWatchAlarmConfiguration: CloudWatchAlarmConfiguration?
        /// A unique string that you specified when you created the health check.
        public let callerReference: String
        /// The identifier that Amazon Route 53assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long. 
        public let id: String

        public init(healthCheckVersion: Int64, healthCheckConfig: HealthCheckConfig, cloudWatchAlarmConfiguration: CloudWatchAlarmConfiguration? = nil, callerReference: String, id: String) {
            self.healthCheckVersion = healthCheckVersion
            self.healthCheckConfig = healthCheckConfig
            self.cloudWatchAlarmConfiguration = cloudWatchAlarmConfiguration
            self.callerReference = callerReference
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckVersion = dictionary["HealthCheckVersion"] as? Int64 else { throw InitializableError.missingRequiredParam("HealthCheckVersion") }
            self.healthCheckVersion = healthCheckVersion
            guard let healthCheckConfig = dictionary["HealthCheckConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheckConfig") }
            self.healthCheckConfig = try Route53.HealthCheckConfig(dictionary: healthCheckConfig)
            if let cloudWatchAlarmConfiguration = dictionary["CloudWatchAlarmConfiguration"] as? [String: Any] { self.cloudWatchAlarmConfiguration = try Route53.CloudWatchAlarmConfiguration(dictionary: cloudWatchAlarmConfiguration) } else { self.cloudWatchAlarmConfiguration = nil }
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CloudWatchAlarmConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For the metric that the CloudWatch alarm is associated with, the value the metric is compared with.
        public let threshold: Double
        /// The name of the CloudWatch metric that the alarm is associated with.
        public let metricName: String
        /// For the metric that the CloudWatch alarm is associated with, the duration of one evaluation period in seconds.
        public let period: Int32
        /// For the metric that the CloudWatch alarm is associated with, the number of periods that the metric is compared to the threshold.
        public let evaluationPeriods: Int32
        /// For the metric that the CloudWatch alarm is associated with, the arithmetic operation that is used for the comparison.
        public let comparisonOperator: ComparisonOperator
        /// For the metric that the CloudWatch alarm is associated with, the statistic that is applied to the metric.
        public let statistic: Statistic
        /// The namespace of the metric that the alarm is associated with. For more information, see Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference in the Amazon CloudWatch User Guide.
        public let namespace: String
        /// For the metric that the CloudWatch alarm is associated with, a complex type that contains information about the dimensions for the metric.For information, see Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference in the Amazon CloudWatch User Guide.
        public let dimensions: DimensionList?

        public init(threshold: Double, metricName: String, period: Int32, evaluationPeriods: Int32, comparisonOperator: ComparisonOperator, statistic: Statistic, namespace: String, dimensions: DimensionList? = nil) {
            self.threshold = threshold
            self.metricName = metricName
            self.period = period
            self.evaluationPeriods = evaluationPeriods
            self.comparisonOperator = comparisonOperator
            self.statistic = statistic
            self.namespace = namespace
            self.dimensions = dimensions
        }

        public init(dictionary: [String: Any]) throws {
            guard let threshold = dictionary["Threshold"] as? Double else { throw InitializableError.missingRequiredParam("Threshold") }
            self.threshold = threshold
            guard let metricName = dictionary["MetricName"] as? String else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            guard let period = dictionary["Period"] as? Int32 else { throw InitializableError.missingRequiredParam("Period") }
            self.period = period
            guard let evaluationPeriods = dictionary["EvaluationPeriods"] as? Int32 else { throw InitializableError.missingRequiredParam("EvaluationPeriods") }
            self.evaluationPeriods = evaluationPeriods
            guard let rawComparisonOperator = dictionary["ComparisonOperator"] as? String, let comparisonOperator = ComparisonOperator(rawValue: rawComparisonOperator) else { throw InitializableError.missingRequiredParam("ComparisonOperator") }
            self.comparisonOperator = comparisonOperator
            guard let rawStatistic = dictionary["Statistic"] as? String, let statistic = Statistic(rawValue: rawStatistic) else { throw InitializableError.missingRequiredParam("Statistic") }
            self.statistic = statistic
            guard let namespace = dictionary["Namespace"] as? String else { throw InitializableError.missingRequiredParam("Namespace") }
            self.namespace = namespace
            if let dimensions = dictionary["Dimensions"] as? [String: Any] { self.dimensions = try Route53.DimensionList(dictionary: dimensions) } else { self.dimensions = nil }
        }
    }

    public struct DisassociateVPCFromHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that describes the changes made to the specified private hosted zone.
        public let changeInfo: ChangeInfo

        public init(changeInfo: ChangeInfo) {
            self.changeInfo = changeInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
        }
    }

    public struct GetChangeResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains information about the specified change batch.
        public let changeInfo: ChangeInfo

        public init(changeInfo: ChangeInfo) {
            self.changeInfo = changeInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
        }
    }

    public struct UpdateHealthCheckRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["HealthCheckId": "HealthCheckId"]
        }
        /// A sequential counter that Amazon Route 53 sets to 1 when you create a health check and increments by 1 each time you update settings for the health check. We recommend that you use GetHealthCheck or ListHealthChecks to get the current value of HealthCheckVersion for the health check that you want to update, and that you include that value in your UpdateHealthCheck request. This prevents Amazon Route 53 from overwriting an intervening update:   f the value in the UpdateHealthCheck request matches the value of HealthCheckVersion in the health check, Amazon Route 53 updates the health check with the new settings.   If the value of HealthCheckVersion in the health check is greater, the health check was changed after you got the version number. Amazon Route 53 does not update the health check, and it returns a HealthCheckVersionMismatch error.  
        public let healthCheckVersion: Int64?
        /// The IPv4 or IPv6 IP address for the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for IPAddress, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in FullyQualifiedDomainName at the interval that you specify in RequestInterval. Using an IP address that is returned by DNS, Amazon Route 53 then checks the health of the endpoint. Use one of the following formats for the value of IPAddress:     IPv4 address: four values between 0 and 255, separated by periods (.), for example, 192.0.2.44.    IPv6 address: eight groups of four hexadecimal values, separated by colons (:), for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345. You can also shorten IPv6 addresses as described in RFC 5952, for example, 2001:db8:85a3::abcd:1:2345.   If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for IPAddress. This ensures that the IP address of your instance never changes. For more information, see Elastic IP Addresses (EIP) in the Amazon EC2 User Guide for Linux Instances.  If a health check already has a value for IPAddress, you can change the value. However, you can't update an existing health check to add or remove the value of IPAddress.   For more information, see UpdateHealthCheckRequest$FullyQualifiedDomainName. Constraints: Amazon Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents:    RFC 5735, Special Use IPv4 Addresses     RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space     RFC 5156, Special-Use IPv6 Addresses   
        public let iPAddress: String?
        /// A complex type that contains one ChildHealthCheck element for each health check that you want to associate with a CALCULATED health check.
        public let childHealthChecks: ChildHealthCheckList?
        /// The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example the file /docs/route53-health-check.html.  Specify this value only if you want to change it.
        public let resourcePath: String?
        /// When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:    Healthy: Amazon Route 53 considers the health check to be healthy.    Unhealthy: Amazon Route 53 considers the health check to be unhealthy.    LastKnownStatus: Amazon Route 53 uses the status of the health check from the last time CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.  
        public let insufficientDataHealthStatus: InsufficientDataHealthStatus?
        /// Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.
        public let inverted: Bool?
        public let alarmIdentifier: AlarmIdentifier?
        /// The ID for the health check for which you want detailed information. When you created the health check, CreateHealthCheck returned the ID in the response, in the HealthCheckId element.
        public let healthCheckId: String
        /// A complex type that contains one Region element for each region from which you want Amazon Route 53 health checkers to check the specified endpoint.
        public let regions: HealthCheckRegionList?
        /// The number of child health checks that are associated with a CALCULATED health that Amazon Route 53 must consider healthy for the CALCULATED health check to be considered healthy. To specify the child health checks that you want to associate with a CALCULATED health check, use the ChildHealthChecks and ChildHealthCheck elements. Note the following:   If you specify a number greater than the number of child health checks, Amazon Route 53 always considers this health check to be unhealthy.   If you specify 0, Amazon Route 53 always considers this health check to be healthy.  
        public let healthThreshold: Int32?
        /// If the value of Type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy. (You can't change the value of Type when you update a health check.)
        public let searchString: String?
        /// Amazon Route 53 behavior depends on whether you specify a value for IPAddress.  If a health check already has a value for IPAddress, you can change the value. However, you can't update an existing health check to add or remove the value of IPAddress.    If you specify a value for IPAddress: Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of FullyQualifiedDomainName in the Host header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Amazon Route 53 to perform health checks. When Amazon Route 53 checks the health of an endpoint, here is how it constructs the Host header:   If you specify a value of 80 for Port and HTTP or HTTP_STR_MATCH for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to the endpoint in the Host header.   If you specify a value of 443 for Port and HTTPS or HTTPS_STR_MATCH for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to the endpoint in the Host header.   If you specify another value for Port and any value except TCP for Type, Amazon Route 53 passes  FullyQualifiedDomainName:Port  to the endpoint in the Host header.   If you don't specify a value for FullyQualifiedDomainName, Amazon Route 53 substitutes the value of IPAddress in the Host header in each of the above cases.  If you don't specify a value for IPAddress: If you don't specify a value for IPAddress, Amazon Route 53 sends a DNS request to the domain that you specify in FullyQualifiedDomainName at the interval you specify in RequestInterval. Using an IPv4 address that is returned by DNS, Amazon Route 53 then checks the health of the endpoint.  If you don't specify a value for IPAddress, Amazon Route 53 uses only IPv4 to send health checks to the endpoint. If there's no resource record set with a type of A for the name that you specify for FullyQualifiedDomainName, the health check fails with a "DNS resolution failed" error.  If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by FullyQualifiedDomainName, we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of FullyQualifiedDomainName, specify the domain name of the server (such as us-east-2-www.example.com), not the name of the resource record sets (www.example.com).  In this configuration, if the value of FullyQualifiedDomainName matches the name of the resource record sets and you then associate the health check with those resource record sets, health check results will be unpredictable.  In addition, if the value of Type is HTTP, HTTPS, HTTP_STR_MATCH, or HTTPS_STR_MATCH, Amazon Route 53 passes the value of FullyQualifiedDomainName in the Host header, as it does when you specify a value for IPAddress. If the value of Type is TCP, Amazon Route 53 doesn't pass a Host header.
        public let fullyQualifiedDomainName: String?
        /// The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see How Amazon Route 53 Determines Whether an Endpoint Is Healthy in the Amazon Route 53 Developer Guide. If you don't specify a value for FailureThreshold, the default value is three health checks.
        public let failureThreshold: Int32?
        /// Specify whether you want Amazon Route 53 to send the value of FullyQualifiedDomainName to the endpoint in the client_hello message during TLS negotiation. This allows the endpoint to respond to HTTPS health check requests with the applicable SSL/TLS certificate. Some endpoints require that HTTPS requests include the host name in the client_hello message. If you don't enable SNI, the status of the health check will be SSL alert handshake_failure. A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid. The SSL/TLS certificate on your endpoint includes a domain name in the Common Name field and possibly several more in the Subject Alternative Names field. One of the domain names in the certificate should match the value that you specify for FullyQualifiedDomainName. If the endpoint responds to the client_hello message with a certificate that does not include the domain name that you specified in FullyQualifiedDomainName, a health checker will retry the handshake. In the second attempt, the health checker will omit FullyQualifiedDomainName from the client_hello message.
        public let enableSNI: Bool?
        /// The port on the endpoint on which you want Amazon Route 53 to perform health checks.
        public let port: Int32?

        public init(healthCheckVersion: Int64? = nil, iPAddress: String? = nil, childHealthChecks: ChildHealthCheckList? = nil, resourcePath: String? = nil, insufficientDataHealthStatus: InsufficientDataHealthStatus? = nil, inverted: Bool? = nil, alarmIdentifier: AlarmIdentifier? = nil, healthCheckId: String, regions: HealthCheckRegionList? = nil, healthThreshold: Int32? = nil, searchString: String? = nil, fullyQualifiedDomainName: String? = nil, failureThreshold: Int32? = nil, enableSNI: Bool? = nil, port: Int32? = nil) {
            self.healthCheckVersion = healthCheckVersion
            self.iPAddress = iPAddress
            self.childHealthChecks = childHealthChecks
            self.resourcePath = resourcePath
            self.insufficientDataHealthStatus = insufficientDataHealthStatus
            self.inverted = inverted
            self.alarmIdentifier = alarmIdentifier
            self.healthCheckId = healthCheckId
            self.regions = regions
            self.healthThreshold = healthThreshold
            self.searchString = searchString
            self.fullyQualifiedDomainName = fullyQualifiedDomainName
            self.failureThreshold = failureThreshold
            self.enableSNI = enableSNI
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            self.healthCheckVersion = dictionary["HealthCheckVersion"] as? Int64
            self.iPAddress = dictionary["IPAddress"] as? String
            if let childHealthChecks = dictionary["ChildHealthChecks"] as? [String: Any] { self.childHealthChecks = try Route53.ChildHealthCheckList(dictionary: childHealthChecks) } else { self.childHealthChecks = nil }
            self.resourcePath = dictionary["ResourcePath"] as? String
            if let insufficientDataHealthStatus = dictionary["InsufficientDataHealthStatus"] as? String { self.insufficientDataHealthStatus = InsufficientDataHealthStatus(rawValue: insufficientDataHealthStatus) } else { self.insufficientDataHealthStatus = nil }
            self.inverted = dictionary["Inverted"] as? Bool
            if let alarmIdentifier = dictionary["AlarmIdentifier"] as? [String: Any] { self.alarmIdentifier = try Route53.AlarmIdentifier(dictionary: alarmIdentifier) } else { self.alarmIdentifier = nil }
            guard let healthCheckId = dictionary["HealthCheckId"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckId") }
            self.healthCheckId = healthCheckId
            if let regions = dictionary["Regions"] as? [String: Any] { self.regions = try Route53.HealthCheckRegionList(dictionary: regions) } else { self.regions = nil }
            self.healthThreshold = dictionary["HealthThreshold"] as? Int32
            self.searchString = dictionary["SearchString"] as? String
            self.fullyQualifiedDomainName = dictionary["FullyQualifiedDomainName"] as? String
            self.failureThreshold = dictionary["FailureThreshold"] as? Int32
            self.enableSNI = dictionary["EnableSNI"] as? Bool
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct ListReusableDelegationSetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "Marker", "maxitems": "MaxItems"]
        }
        /// If you're making the second or subsequent call to ListReusableDelegationSets, the Marker element matches the value that you specified in the marker parameter in the previous request.
        public let marker: String?
        /// The value that you specified for the maxitems parameter in the request that produced the current response.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["Maxitems"] as? String
        }
    }

    public struct Changes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let change: [Change]?

        public init(change: [Change]? = nil) {
            self.change = change
        }

        public init(dictionary: [String: Any]) throws {
            if let change = dictionary["Change"] as? [[String: Any]] {
                self.change = try change.map({ try Change(dictionary: $0) })
            } else { 
                self.change = nil
            }
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["ResourceId": "ResourceId", "ResourceType": "ResourceType"]
        }
        /// The ID of the resource for which you want to retrieve tags.
        public let resourceId: String
        /// The type of the resource.   The resource type for health checks is healthcheck.   The resource type for hosted zones is hostedzone.  
        public let resourceType: TagResourceType

        public init(resourceId: String, resourceType: TagResourceType) {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            guard let rawResourceType = dictionary["ResourceType"] as? String, let resourceType = TagResourceType(rawValue: rawResourceType) else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
        }
    }

    public struct CreateTrafficPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// A unique URL that represents a new traffic policy.
        public let location: String
        /// A complex type that contains settings for the new traffic policy.
        public let trafficPolicy: TrafficPolicy

        public init(location: String, trafficPolicy: TrafficPolicy) {
            self.location = location
            self.trafficPolicy = trafficPolicy
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
            guard let trafficPolicy = dictionary["TrafficPolicy"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicy") }
            self.trafficPolicy = try Route53.TrafficPolicy(dictionary: trafficPolicy)
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A ResourceTagSet containing tags associated with the specified resource.
        public let resourceTagSet: ResourceTagSet

        public init(resourceTagSet: ResourceTagSet) {
            self.resourceTagSet = resourceTagSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceTagSet = dictionary["ResourceTagSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ResourceTagSet") }
            self.resourceTagSet = try Route53.ResourceTagSet(dictionary: resourceTagSet)
        }
    }

    public enum TagResourceType: String, CustomStringConvertible {
        case healthcheck = "healthcheck"
        case hostedzone = "hostedzone"
        public var description: String { return self.rawValue }
    }

    public struct AliasTarget: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Alias resource record sets only: The value that you specify depends on where you want to route queries:  CloudFront distribution  Specify the domain name that CloudFront assigned when you created your distribution. Your CloudFront distribution must include an alternate domain name that matches the name of the resource record set. For example, if the name of the resource record set is acme.example.com, your CloudFront distribution must include acme.example.com as one of the alternate domain names. For more information, see Using Alternate Domain Names (CNAMEs) in the Amazon CloudFront Developer Guide.  Elastic Beanstalk environment  Specify the CNAME attribute for the environment. (The environment must have a regionalized domain name.) You can use the following methods to get the value of the CNAME attribute:    AWS Management Console: For information about how to get the value by using the console, see Using Custom Domains with AWS Elastic Beanstalk in the AWS Elastic Beanstalk Developer Guide.    Elastic Beanstalk API: Use the DescribeEnvironments action to get the value of the CNAME attribute. For more information, see DescribeEnvironments in the AWS Elastic Beanstalk API Reference.    AWS CLI: Use the describe-environments command to get the value of the CNAME attribute. For more information, see describe-environments in the AWS Command Line Interface Reference.    ELB load balancer  Specify the DNS name that is associated with the load balancer. Get the DNS name by using the AWS Management Console, the ELB API, or the AWS CLI.     AWS Management Console: Go to the EC2 page, choose Load Balancers in the navigation pane, choose the load balancer, choose the Description tab, and get the value of the DNS name field. (If you're routing traffic to a Classic Load Balancer, get the value that begins with dualstack.)     Elastic Load Balancing API: Use DescribeLoadBalancers to get the value of DNSName. For more information, see the applicable guide:   Classic Load Balancer: DescribeLoadBalancers    Application Load Balancer: DescribeLoadBalancers       AWS CLI: Use  describe-load-balancers  to get the value of DNSName.    Amazon S3 bucket that is configured as a static website  Specify the domain name of the Amazon S3 website endpoint in which you created the bucket, for example, s3-website-us-east-2.amazonaws.com. For more information about valid values, see the table Amazon Simple Storage Service (S3) Website Endpoints in the Amazon Web Services General Reference. For more information about using S3 buckets for websites, see Getting Started with Amazon Route 53 in the Amazon Route 53 Developer Guide.   Another Amazon Route 53 resource record set  Specify the value of the Name element for a resource record set in the current hosted zone.  
        public let dNSName: String
        ///  Alias resource records sets only: The value used depends on where you want to route traffic:  CloudFront distribution  Specify Z2FDTNDATAQYW2.  Alias resource record sets for CloudFront can't be created in a private zone.   Elastic Beanstalk environment  Specify the hosted zone ID for the region in which you created the environment. The environment must have a regionalized subdomain. For a list of regions and the corresponding hosted zone IDs, see AWS Elastic Beanstalk in the "AWS Regions and Endpoints" chapter of the Amazon Web Services General Reference.  ELB load balancer  Specify the value of the hosted zone ID for the load balancer. Use the following methods to get the hosted zone ID:    Elastic Load Balancing table in the "AWS Regions and Endpoints" chapter of the Amazon Web Services General Reference: Use the value in the "Amazon Route 53 Hosted Zone ID" column that corresponds with the region that you created your load balancer in.    AWS Management Console: Go to the Amazon EC2 page, click Load Balancers in the navigation pane, select the load balancer, and get the value of the Hosted zone field on the Description tab.    Elastic Load Balancing API: Use DescribeLoadBalancers to get the value of CanonicalHostedZoneNameId. For more information, see the applicable guide:   Classic Load Balancer: DescribeLoadBalancers    Application Load Balancer: DescribeLoadBalancers       AWS CLI: Use  describe-load-balancers  to get the value of CanonicalHostedZoneNameID.    An Amazon S3 bucket configured as a static website  Specify the hosted zone ID for the region that you created the bucket in. For more information about valid values, see the Amazon Simple Storage Service Website Endpoints table in the "AWS Regions and Endpoints" chapter of the Amazon Web Services General Reference.  Another Amazon Route 53 resource record set in your hosted zone  Specify the hosted zone ID of your hosted zone. (An alias resource record set can't reference a resource record set in a different hosted zone.)  
        public let hostedZoneId: String
        ///  Applies only to alias, weighted alias, latency alias, and failover alias record sets: If you set the value of EvaluateTargetHealth to true for the resource record set or sets in an alias, weighted alias, latency alias, or failover alias resource record set, and if you specify a value for  HealthCheck$Id  for every resource record set that is referenced by these alias resource record sets, the alias resource record sets inherit the health of the referenced resource record sets. In this configuration, when Amazon Route 53 receives a DNS query for an alias resource record set:   Amazon Route 53 looks at the resource record sets that are referenced by the alias resource record sets to determine which health checks they're using.   Amazon Route 53 checks the current status of each health check. (Amazon Route 53 periodically checks the health of the endpoint that is specified in a health check; it doesn't perform the health check when the DNS query arrives.)   Based on the status of the health checks, Amazon Route 53 determines which resource record sets are healthy. Unhealthy resource record sets are immediately removed from consideration. In addition, if all of the resource record sets that are referenced by an alias resource record set are unhealthy, that alias resource record set also is immediately removed from consideration.   Based on the configuration of the alias resource record sets (weighted alias or latency alias, for example) and the configuration of the resource record sets that they reference, Amazon Route 53 chooses a resource record set from the healthy resource record sets, and responds to the query.   Note the following:   You can't set EvaluateTargetHealth to true when the alias target is a CloudFront distribution.   If the AWS resource that you specify in AliasTarget is a resource record set or a group of resource record sets (for example, a group of weighted resource record sets), but it is not another alias resource record set, we recommend that you associate a health check with all of the resource record sets in the alias target.For more information, see What Happens When You Omit Health Checks? in the Amazon Route 53 Developer Guide.   If you specify an Elastic Beanstalk environment in HostedZoneId and DNSName, and if the environment contains an ELB load balancer, Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. (An environment automatically contains an ELB load balancer if it includes more than one EC2 instance.) If you set EvaluateTargetHealth to true and either no EC2 instances are healthy or the load balancer itself is unhealthy, Amazon Route 53 routes queries to other available resources that are healthy, if any. If the environment contains a single EC2 instance, there are no special requirements.   If you specify an ELB load balancer in  AliasTarget , Elastic Load Balancing routes queries only to the healthy EC2 instances that are registered with the load balancer. If no EC2 instances are healthy or if the load balancer itself is unhealthy, and if EvaluateTargetHealth is true for the corresponding alias resource record set, Amazon Route 53 routes queries to other resources. When you create a load balancer, you configure settings for Elastic Load Balancing health checks; they're not Amazon Route 53 health checks, but they perform a similar function. Do not create Amazon Route 53 health checks for the EC2 instances that you register with an ELB load balancer. For more information, see How Health Checks Work in More Complex Amazon Route 53 Configurations in the Amazon Route 53 Developers Guide.   We recommend that you set EvaluateTargetHealth to true only when you have enough idle capacity to handle the failure of one or more endpoints.   For more information and examples, see Amazon Route 53 Health Checks and DNS Failover in the Amazon Route 53 Developer Guide.
        public let evaluateTargetHealth: Bool

        public init(dNSName: String, hostedZoneId: String, evaluateTargetHealth: Bool) {
            self.dNSName = dNSName
            self.hostedZoneId = hostedZoneId
            self.evaluateTargetHealth = evaluateTargetHealth
        }

        public init(dictionary: [String: Any]) throws {
            guard let dNSName = dictionary["DNSName"] as? String else { throw InitializableError.missingRequiredParam("DNSName") }
            self.dNSName = dNSName
            guard let hostedZoneId = dictionary["HostedZoneId"] as? String else { throw InitializableError.missingRequiredParam("HostedZoneId") }
            self.hostedZoneId = hostedZoneId
            guard let evaluateTargetHealth = dictionary["EvaluateTargetHealth"] as? Bool else { throw InitializableError.missingRequiredParam("EvaluateTargetHealth") }
            self.evaluateTargetHealth = evaluateTargetHealth
        }
    }

    public struct TrafficPolicyInstance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID that Amazon Route 53 assigned to the new traffic policy instance.
        public let id: String
        /// The DNS type that Amazon Route 53 assigned to all of the resource record sets that it created for this traffic policy instance. 
        public let trafficPolicyType: RRType
        /// If State is Failed, an explanation of the reason for the failure. If State is another value, Message is empty.
        public let message: String
        /// The value of State is one of the following values:  Applied  Amazon Route 53 has finished creating resource record sets, and changes have propagated to all Amazon Route 53 edge locations.  Creating  Amazon Route 53 is creating the resource record sets. Use GetTrafficPolicyInstance to confirm that the CreateTrafficPolicyInstance request completed successfully.  Failed  Amazon Route 53 wasn't able to create or update the resource record sets. When the value of State is Failed, see Message for an explanation of what caused the request to fail.  
        public let state: String
        /// The DNS name, such as www.example.com, for which Amazon Route 53 responds to queries by using the resource record sets that are associated with this traffic policy instance. 
        public let name: String
        /// The version of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.
        public let trafficPolicyVersion: Int32
        /// The ID of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.
        public let trafficPolicyId: String
        /// The TTL that Amazon Route 53 assigned to all of the resource record sets that it created in the specified hosted zone.
        public let tTL: Int64
        /// The ID of the hosted zone that Amazon Route 53 created resource record sets in.
        public let hostedZoneId: String

        public init(id: String, trafficPolicyType: RRType, message: String, state: String, name: String, trafficPolicyVersion: Int32, trafficPolicyId: String, tTL: Int64, hostedZoneId: String) {
            self.id = id
            self.trafficPolicyType = trafficPolicyType
            self.message = message
            self.state = state
            self.name = name
            self.trafficPolicyVersion = trafficPolicyVersion
            self.trafficPolicyId = trafficPolicyId
            self.tTL = tTL
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let rawTrafficPolicyType = dictionary["TrafficPolicyType"] as? String, let trafficPolicyType = RRType(rawValue: rawTrafficPolicyType) else { throw InitializableError.missingRequiredParam("TrafficPolicyType") }
            self.trafficPolicyType = trafficPolicyType
            guard let message = dictionary["Message"] as? String else { throw InitializableError.missingRequiredParam("Message") }
            self.message = message
            guard let state = dictionary["State"] as? String else { throw InitializableError.missingRequiredParam("State") }
            self.state = state
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let trafficPolicyVersion = dictionary["TrafficPolicyVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("TrafficPolicyVersion") }
            self.trafficPolicyVersion = trafficPolicyVersion
            guard let trafficPolicyId = dictionary["TrafficPolicyId"] as? String else { throw InitializableError.missingRequiredParam("TrafficPolicyId") }
            self.trafficPolicyId = trafficPolicyId
            guard let tTL = dictionary["TTL"] as? Int64 else { throw InitializableError.missingRequiredParam("TTL") }
            self.tTL = tTL
            guard let hostedZoneId = dictionary["HostedZoneId"] as? String else { throw InitializableError.missingRequiredParam("HostedZoneId") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct UpdateTrafficPolicyInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains settings for the updated traffic policy instance.
        public let trafficPolicyInstance: TrafficPolicyInstance

        public init(trafficPolicyInstance: TrafficPolicyInstance) {
            self.trafficPolicyInstance = trafficPolicyInstance
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicyInstance = dictionary["TrafficPolicyInstance"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstance") }
            self.trafficPolicyInstance = try Route53.TrafficPolicyInstance(dictionary: trafficPolicyInstance)
        }
    }

    public struct ListTrafficPoliciesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["trafficpolicyid": "TrafficPolicyIdMarker", "maxitems": "MaxItems"]
        }
        /// (Conditional) For your first request to ListTrafficPolicies, do not include the TrafficPolicyIdMarker parameter. If you have more traffic policies than the value of MaxItems, ListTrafficPolicies returns only the first MaxItems traffic policies. To get the next group of MaxItems policies, submit another request to ListTrafficPolicies. For the value of TrafficPolicyIdMarker, specify the value of the TrafficPolicyIdMarker element that was returned in the previous response. Policies are listed in the order in which they were created.
        public let trafficPolicyIdMarker: String?
        /// (Optional) The maximum number of traffic policies to be included in the response body for this request. If you have more than MaxItems traffic policies, the value of the IsTruncated element in the response is true, and the value of the TrafficPolicyIdMarker element is the ID of the first traffic policy in the next group of MaxItems traffic policies.
        public let maxItems: String?

        public init(trafficPolicyIdMarker: String? = nil, maxItems: String? = nil) {
            self.trafficPolicyIdMarker = trafficPolicyIdMarker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.trafficPolicyIdMarker = dictionary["Trafficpolicyid"] as? String
            self.maxItems = dictionary["Maxitems"] as? String
        }
    }

    public struct DelegationSets: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let delegationSet: [DelegationSet]?

        public init(delegationSet: [DelegationSet]? = nil) {
            self.delegationSet = delegationSet
        }

        public init(dictionary: [String: Any]) throws {
            if let delegationSet = dictionary["DelegationSet"] as? [[String: Any]] {
                self.delegationSet = try delegationSet.map({ try DelegationSet(dictionary: $0) })
            } else { 
                self.delegationSet = nil
            }
        }
    }

    public struct GetGeoLocationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["subdivisioncode": "SubdivisionCode", "countrycode": "CountryCode", "continentcode": "ContinentCode"]
        }
        /// Amazon Route 53 supports the following continent codes:    AF: Africa    AN: Antarctica    AS: Asia    EU: Europe    OC: Oceania    NA: North America    SA: South America  
        public let continentCode: String?
        /// Amazon Route 53 uses the one- to three-letter subdivision codes that are specified in ISO standard 3166-1 alpha-2. Amazon Route 53 doesn't support subdivision codes for all countries. If you specify SubdivisionCode, you must also specify CountryCode. 
        public let subdivisionCode: String?
        /// Amazon Route 53 uses the two-letter country codes that are specified in ISO standard 3166-1 alpha-2.
        public let countryCode: String?

        public init(continentCode: String? = nil, subdivisionCode: String? = nil, countryCode: String? = nil) {
            self.continentCode = continentCode
            self.subdivisionCode = subdivisionCode
            self.countryCode = countryCode
        }

        public init(dictionary: [String: Any]) throws {
            self.continentCode = dictionary["Continentcode"] as? String
            self.subdivisionCode = dictionary["Subdivisioncode"] as? String
            self.countryCode = dictionary["Countrycode"] as? String
        }
    }

    public struct DisassociateVPCFromHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        /// A complex type that contains information about the VPC that you're disassociating from the specified hosted zone.
        public let vPC: VPC
        /// The ID of the private hosted zone that you want to disassociate a VPC from.
        public let hostedZoneId: String
        ///  Optional: A comment about the disassociation request.
        public let comment: String?

        public init(vPC: VPC, hostedZoneId: String, comment: String? = nil) {
            self.vPC = vPC
            self.hostedZoneId = hostedZoneId
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let vPC = dictionary["VPC"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPC") }
            self.vPC = try Route53.VPC(dictionary: vPC)
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
            self.comment = dictionary["Comment"] as? String
        }
    }

    public struct DeleteHealthCheckRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["HealthCheckId": "HealthCheckId"]
        }
        /// The ID of the health check that you want to delete.
        public let healthCheckId: String

        public init(healthCheckId: String) {
            self.healthCheckId = healthCheckId
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckId = dictionary["HealthCheckId"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckId") }
            self.healthCheckId = healthCheckId
        }
    }

    public struct HealthCheckRegionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let region: [HealthCheckRegion]?

        public init(region: [HealthCheckRegion]? = nil) {
            self.region = region
        }

        public init(dictionary: [String: Any]) throws {
            if let region = dictionary["Region"] as? [String] { self.region = region.flatMap({ HealthCheckRegion(rawValue: $0)}) } else { self.region = nil }
        }
    }

    public struct CreateHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// A complex type that describes the changes made to your hosted zone.
        public let changeInfo: ChangeInfo
        /// A complex type that contains general information about the hosted zone.
        public let hostedZone: HostedZone
        /// A complex type that contains information about an Amazon VPC that you associated with this hosted zone.
        public let vPC: VPC?
        /// The unique URL representing the new hosted zone.
        public let location: String
        /// A complex type that describes the name servers for this hosted zone.
        public let delegationSet: DelegationSet

        public init(changeInfo: ChangeInfo, hostedZone: HostedZone, vPC: VPC? = nil, location: String, delegationSet: DelegationSet) {
            self.changeInfo = changeInfo
            self.hostedZone = hostedZone
            self.vPC = vPC
            self.location = location
            self.delegationSet = delegationSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
            guard let hostedZone = dictionary["HostedZone"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HostedZone") }
            self.hostedZone = try Route53.HostedZone(dictionary: hostedZone)
            if let vPC = dictionary["VPC"] as? [String: Any] { self.vPC = try Route53.VPC(dictionary: vPC) } else { self.vPC = nil }
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
            guard let delegationSet = dictionary["DelegationSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DelegationSet") }
            self.delegationSet = try Route53.DelegationSet(dictionary: delegationSet)
        }
    }

    public struct GetTrafficPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains settings for the specified traffic policy.
        public let trafficPolicy: TrafficPolicy

        public init(trafficPolicy: TrafficPolicy) {
            self.trafficPolicy = trafficPolicy
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicy = dictionary["TrafficPolicy"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicy") }
            self.trafficPolicy = try Route53.TrafficPolicy(dictionary: trafficPolicy)
        }
    }

    public struct StatusReport: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A description of the status of the health check endpoint as reported by one of the Amazon Route 53 health checkers.
        public let status: String?
        /// The time at which the health checker performed the health check in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2014-10-27T17:48:16.751Z represents October 27, 2014 at 17:48:16.751 UTC.
        public let checkedTime: Date?

        public init(status: String? = nil, checkedTime: Date? = nil) {
            self.status = status
            self.checkedTime = checkedTime
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.checkedTime = dictionary["CheckedTime"] as? Date
        }
    }

    public struct ResourceRecordSets: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let resourceRecordSet: [ResourceRecordSet]?

        public init(resourceRecordSet: [ResourceRecordSet]? = nil) {
            self.resourceRecordSet = resourceRecordSet
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceRecordSet = dictionary["ResourceRecordSet"] as? [[String: Any]] {
                self.resourceRecordSet = try resourceRecordSet.map({ try ResourceRecordSet(dictionary: $0) })
            } else { 
                self.resourceRecordSet = nil
            }
        }
    }

    public struct TrafficPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The comment that you specify in the CreateTrafficPolicy request, if any.
        public let comment: String?
        /// The version number that Amazon Route 53 assigns to a traffic policy. For a new traffic policy, the value of Version is always 1.
        public let version: Int32
        /// The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy to create a traffic policy instance.
        public let `type`: RRType
        /// The name that you specified when you created the traffic policy.
        public let name: String
        /// The definition of a traffic policy in JSON format. You specify the JSON document to use for a new traffic policy in the CreateTrafficPolicy request. For more information about the JSON format, see Traffic Policy Document Format.
        public let document: String
        /// The ID that Amazon Route 53 assigned to a traffic policy when you created it.
        public let id: String

        public init(comment: String? = nil, version: Int32, type: RRType, name: String, document: String, id: String) {
            self.comment = comment
            self.version = version
            self.`type` = `type`
            self.name = name
            self.document = document
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.comment = dictionary["Comment"] as? String
            guard let version = dictionary["Version"] as? Int32 else { throw InitializableError.missingRequiredParam("Version") }
            self.version = version
            guard let rawType = dictionary["Type"] as? String, let `type` = RRType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let document = dictionary["Document"] as? String else { throw InitializableError.missingRequiredParam("Document") }
            self.document = document
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct GetGeoLocationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the codes and full continent, country, and subdivision names for the specified geolocation code.
        public let geoLocationDetails: GeoLocationDetails

        public init(geoLocationDetails: GeoLocationDetails) {
            self.geoLocationDetails = geoLocationDetails
        }

        public init(dictionary: [String: Any]) throws {
            guard let geoLocationDetails = dictionary["GeoLocationDetails"] as? [String: Any] else { throw InitializableError.missingRequiredParam("GeoLocationDetails") }
            self.geoLocationDetails = try Route53.GeoLocationDetails(dictionary: geoLocationDetails)
        }
    }

    public struct ChangeTagsForResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListGeoLocationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If IsTruncated is true, you can make a follow-up request to display more locations. Enter the value of NextContinentCode in the StartContinentCode parameter in another GET ListGeoLocations request.
        public let nextContinentCode: String?
        /// A value that indicates whether more locations remain to be listed after the last location in this response. If so, the value of IsTruncated is true. To get more values, submit another request and include the values of NextContinentCode, NextCountryCode, and NextSubdivisionCode in the StartContinentCode, StartCountryCode, and StartSubdivisionCode, as applicable.
        public let isTruncated: Bool
        /// The value that you specified for MaxItems in the request.
        public let maxItems: String
        /// If IsTruncated is true, you can make a follow-up request to display more locations. Enter the value of NextSubdivisionCode in the StartSubdivisionCode parameter in another GET ListGeoLocations request.
        public let nextSubdivisionCode: String?
        /// A complex type that contains one GeoLocationDetails element for each location that Amazon Route 53 supports for geolocation.
        public let geoLocationDetailsList: GeoLocationDetailsList
        /// If IsTruncated is true, you can make a follow-up request to display more locations. Enter the value of NextCountryCode in the StartCountryCode parameter in another GET ListGeoLocations request.
        public let nextCountryCode: String?

        public init(nextContinentCode: String? = nil, isTruncated: Bool, maxItems: String, nextSubdivisionCode: String? = nil, geoLocationDetailsList: GeoLocationDetailsList, nextCountryCode: String? = nil) {
            self.nextContinentCode = nextContinentCode
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.nextSubdivisionCode = nextSubdivisionCode
            self.geoLocationDetailsList = geoLocationDetailsList
            self.nextCountryCode = nextCountryCode
        }

        public init(dictionary: [String: Any]) throws {
            self.nextContinentCode = dictionary["NextContinentCode"] as? String
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            self.nextSubdivisionCode = dictionary["NextSubdivisionCode"] as? String
            guard let geoLocationDetailsList = dictionary["GeoLocationDetailsList"] as? [String: Any] else { throw InitializableError.missingRequiredParam("GeoLocationDetailsList") }
            self.geoLocationDetailsList = try Route53.GeoLocationDetailsList(dictionary: geoLocationDetailsList)
            self.nextCountryCode = dictionary["NextCountryCode"] as? String
        }
    }

    public struct HealthCheckObservation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the last failure reason as reported by one Amazon Route 53 health checker and the time of the failed health check.
        public let statusReport: StatusReport?
        /// The IP address of the Amazon Route 53 health checker that provided the failure reason in StatusReport.
        public let iPAddress: String?
        /// The region of the Amazon Route 53 health checker that provided the status in StatusReport.
        public let region: HealthCheckRegion?

        public init(statusReport: StatusReport? = nil, iPAddress: String? = nil, region: HealthCheckRegion? = nil) {
            self.statusReport = statusReport
            self.iPAddress = iPAddress
            self.region = region
        }

        public init(dictionary: [String: Any]) throws {
            if let statusReport = dictionary["StatusReport"] as? [String: Any] { self.statusReport = try Route53.StatusReport(dictionary: statusReport) } else { self.statusReport = nil }
            self.iPAddress = dictionary["IPAddress"] as? String
            if let region = dictionary["Region"] as? String { self.region = HealthCheckRegion(rawValue: region) } else { self.region = nil }
        }
    }

    public struct HealthChecks: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let healthCheck: [HealthCheck]?

        public init(healthCheck: [HealthCheck]? = nil) {
            self.healthCheck = healthCheck
        }

        public init(dictionary: [String: Any]) throws {
            if let healthCheck = dictionary["HealthCheck"] as? [[String: Any]] {
                self.healthCheck = try healthCheck.map({ try HealthCheck(dictionary: $0) })
            } else { 
                self.healthCheck = nil
            }
        }
    }

    public struct Dimension: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For the metric that the CloudWatch alarm is associated with, the value of one dimension.
        public let value: String
        /// For the metric that the CloudWatch alarm is associated with, the name of one dimension.
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct GetReusableDelegationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the reusable delegation set for which you want to get a list of the name server.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateVPCAssociationAuthorizationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        /// The ID of the private hosted zone that you want to authorize associating a VPC with.
        public let hostedZoneId: String
        /// A complex type that contains the VPC ID and region for the VPC that you want to authorize associating with your hosted zone.
        public let vPC: VPC

        public init(hostedZoneId: String, vPC: VPC) {
            self.hostedZoneId = hostedZoneId
            self.vPC = vPC
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
            guard let vPC = dictionary["VPC"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPC") }
            self.vPC = try Route53.VPC(dictionary: vPC)
        }
    }

    public struct GetTrafficPolicyInstanceCountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct TagResourceIdList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let resourceId: [String]?

        public init(resourceId: [String]? = nil) {
            self.resourceId = resourceId
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceId = dictionary["ResourceId"] as? [String]
        }
    }

    public struct DimensionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let dimension: [Dimension]?

        public init(dimension: [Dimension]? = nil) {
            self.dimension = dimension
        }

        public init(dictionary: [String: Any]) throws {
            if let dimension = dictionary["Dimension"] as? [[String: Any]] {
                self.dimension = try dimension.map({ try Dimension(dictionary: $0) })
            } else { 
                self.dimension = nil
            }
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public struct ListResourceRecordSetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the results were truncated, the name of the next record in the list. This element is present only if IsTruncated is true. 
        public let nextRecordName: String?
        /// Information about multiple resource record sets.
        public let resourceRecordSets: ResourceRecordSets
        /// A flag that indicates whether more resource record sets remain to be listed. If your results were truncated, you can make a follow-up pagination request by using the NextRecordName element.
        public let isTruncated: Bool
        /// If the results were truncated, the type of the next record in the list. This element is present only if IsTruncated is true. 
        public let nextRecordType: RRType?
        ///  Weighted, latency, geolocation, and failover resource record sets only: If results were truncated for a given DNS name and type, the value of SetIdentifier for the next resource record set that has the current DNS name and type.
        public let nextRecordIdentifier: String?
        /// The maximum number of records you requested.
        public let maxItems: String

        public init(nextRecordName: String? = nil, resourceRecordSets: ResourceRecordSets, isTruncated: Bool, nextRecordType: RRType? = nil, nextRecordIdentifier: String? = nil, maxItems: String) {
            self.nextRecordName = nextRecordName
            self.resourceRecordSets = resourceRecordSets
            self.isTruncated = isTruncated
            self.nextRecordType = nextRecordType
            self.nextRecordIdentifier = nextRecordIdentifier
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.nextRecordName = dictionary["NextRecordName"] as? String
            guard let resourceRecordSets = dictionary["ResourceRecordSets"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ResourceRecordSets") }
            self.resourceRecordSets = try Route53.ResourceRecordSets(dictionary: resourceRecordSets)
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            if let nextRecordType = dictionary["NextRecordType"] as? String { self.nextRecordType = RRType(rawValue: nextRecordType) } else { self.nextRecordType = nil }
            self.nextRecordIdentifier = dictionary["NextRecordIdentifier"] as? String
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
        }
    }

    public struct ListHostedZonesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains general information about the hosted zone.
        public let hostedZones: HostedZones
        /// A flag indicating whether there are more hosted zones to be listed. If the response was truncated, you can get the next group of maxitems hosted zones by calling ListHostedZones again and specifying the value of the NextMarker element in the marker parameter.
        public let isTruncated: Bool
        /// The value that you specified for the maxitems parameter in the call to ListHostedZones that produced the current response.
        public let maxItems: String
        /// If IsTruncated is true, the value of NextMarker identifies the first hosted zone in the next group of maxitems hosted zones. Call ListHostedZones again and specify the value of NextMarker in the marker parameter. This element is present only if IsTruncated is true.
        public let nextMarker: String?
        /// For the second and subsequent calls to ListHostedZones, Marker is the value that you specified for the marker parameter in the request that produced the current response.
        public let marker: String

        public init(hostedZones: HostedZones, isTruncated: Bool, maxItems: String, nextMarker: String? = nil, marker: String) {
            self.hostedZones = hostedZones
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZones = dictionary["HostedZones"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HostedZones") }
            self.hostedZones = try Route53.HostedZones(dictionary: hostedZones)
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
        }
    }

    public struct CreateTrafficPolicyInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["Location": "Location"]
        }
        /// A unique URL that represents a new traffic policy instance.
        public let location: String
        /// A complex type that contains settings for the new traffic policy instance.
        public let trafficPolicyInstance: TrafficPolicyInstance

        public init(location: String, trafficPolicyInstance: TrafficPolicyInstance) {
            self.location = location
            self.trafficPolicyInstance = trafficPolicyInstance
        }

        public init(dictionary: [String: Any]) throws {
            guard let location = dictionary["Location"] as? String else { throw InitializableError.missingRequiredParam("Location") }
            self.location = location
            guard let trafficPolicyInstance = dictionary["TrafficPolicyInstance"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstance") }
            self.trafficPolicyInstance = try Route53.TrafficPolicyInstance(dictionary: trafficPolicyInstance)
        }
    }

    public enum HealthCheckRegion: String, CustomStringConvertible {
        case us_east_1 = "us-east-1"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case eu_west_1 = "eu-west-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_northeast_1 = "ap-northeast-1"
        case sa_east_1 = "sa-east-1"
        public var description: String { return self.rawValue }
    }

    public struct ListTrafficPolicyInstancesByPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of MaxItems traffic policy instances by calling ListTrafficPolicyInstancesByPolicy again and specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker elements in the corresponding request parameters.
        public let isTruncated: Bool
        /// If IsTruncated is true, HostedZoneIdMarker is the ID of the hosted zone of the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let hostedZoneIdMarker: String?
        /// A list that contains one TrafficPolicyInstance element for each traffic policy instance that matches the elements in the request.
        public let trafficPolicyInstances: TrafficPolicyInstances
        /// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstancesByPolicy that produced the current response.
        public let maxItems: String
        /// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceNameMarker: String?
        /// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of the resource record sets that are associated with the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let trafficPolicyInstanceTypeMarker: RRType?

        public init(isTruncated: Bool, hostedZoneIdMarker: String? = nil, trafficPolicyInstances: TrafficPolicyInstances, maxItems: String, trafficPolicyInstanceNameMarker: String? = nil, trafficPolicyInstanceTypeMarker: RRType? = nil) {
            self.isTruncated = isTruncated
            self.hostedZoneIdMarker = hostedZoneIdMarker
            self.trafficPolicyInstances = trafficPolicyInstances
            self.maxItems = maxItems
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            self.hostedZoneIdMarker = dictionary["HostedZoneIdMarker"] as? String
            guard let trafficPolicyInstances = dictionary["TrafficPolicyInstances"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstances") }
            self.trafficPolicyInstances = try Route53.TrafficPolicyInstances(dictionary: trafficPolicyInstances)
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            self.trafficPolicyInstanceNameMarker = dictionary["TrafficPolicyInstanceNameMarker"] as? String
            if let trafficPolicyInstanceTypeMarker = dictionary["TrafficPolicyInstanceTypeMarker"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
        }
    }

    public struct ChangeInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that describes change information about changes made to your hosted zone. This element contains an ID that you use when performing a GetChange action to get detailed information about the change.
        public let comment: String?
        /// The current state of the request. PENDING indicates that this request has not yet been applied to all Amazon Route 53 DNS servers.
        public let status: ChangeStatus
        /// The date and time the change request was submitted, in Coordinated Universal Time (UTC) format: YYYY-MM-DDThh:mm:ssZ. For more information, see the Wikipedia entry ISO 8601.
        public let submittedAt: Date
        /// The ID of the request.
        public let id: String

        public init(comment: String? = nil, status: ChangeStatus, submittedAt: Date, id: String) {
            self.comment = comment
            self.status = status
            self.submittedAt = submittedAt
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.comment = dictionary["Comment"] as? String
            guard let rawStatus = dictionary["Status"] as? String, let status = ChangeStatus(rawValue: rawStatus) else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
            guard let submittedAt = dictionary["SubmittedAt"] as? Date else { throw InitializableError.missingRequiredParam("SubmittedAt") }
            self.submittedAt = submittedAt
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public enum InsufficientDataHealthStatus: String, CustomStringConvertible {
        case healthy = "Healthy"
        case unhealthy = "Unhealthy"
        case lastknownstatus = "LastKnownStatus"
        public var description: String { return self.rawValue }
    }

    public struct DeleteHealthCheckResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GeoLocation: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The two-letter code for the continent. Valid values: AF | AN | AS | EU | OC | NA | SA  Constraint: Specifying ContinentCode with either CountryCode or SubdivisionCode returns an InvalidInput error.
        public let continentCode: String?
        /// The code for the subdivision, for example, a state in the United States or a province in Canada.
        public let subdivisionCode: String?
        /// The two-letter code for the country.
        public let countryCode: String?

        public init(continentCode: String? = nil, subdivisionCode: String? = nil, countryCode: String? = nil) {
            self.continentCode = continentCode
            self.subdivisionCode = subdivisionCode
            self.countryCode = countryCode
        }

        public init(dictionary: [String: Any]) throws {
            self.continentCode = dictionary["ContinentCode"] as? String
            self.subdivisionCode = dictionary["SubdivisionCode"] as? String
            self.countryCode = dictionary["CountryCode"] as? String
        }
    }

    public struct ListResourceRecordSetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["name": "StartRecordName", "type": "StartRecordType", "maxitems": "MaxItems", "identifier": "StartRecordIdentifier"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        ///  Weighted resource record sets only: If results were truncated for a given DNS name and type, specify the value of NextRecordIdentifier from the previous response to get the next resource record set that has the current DNS name and type.
        public let startRecordIdentifier: String?
        /// (Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes more than maxitems resource record sets, the value of the IsTruncated element in the response is true, and the values of the NextRecordName and NextRecordType elements in the response identify the first resource record set in the next group of maxitems resource record sets.
        public let maxItems: String?
        /// The first name in the lexicographic ordering of domain names that you want the ListResourceRecordSets request to list.
        public let startRecordName: String?
        /// The type of resource record set to begin the record listing from. Valid values for basic resource record sets: A | AAAA | CNAME | MX | NAPTR | NS | PTR | SOA | SPF | SRV | TXT  Values for weighted, latency, geo, and failover resource record sets: A | AAAA | CNAME | MX | NAPTR | PTR | SPF | SRV | TXT  Values for alias resource record sets:     CloudFront distribution: A or AAAA    Elastic Beanstalk environment that has a regionalized subdomain: A    ELB load balancer: A | AAAA    Amazon S3 bucket: A   Constraint: Specifying type without specifying name returns an InvalidInput error.
        public let startRecordType: RRType?
        /// The ID of the hosted zone that contains the resource record sets that you want to get.
        public let hostedZoneId: String

        public init(startRecordIdentifier: String? = nil, maxItems: String? = nil, startRecordName: String? = nil, startRecordType: RRType? = nil, hostedZoneId: String) {
            self.startRecordIdentifier = startRecordIdentifier
            self.maxItems = maxItems
            self.startRecordName = startRecordName
            self.startRecordType = startRecordType
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            self.startRecordIdentifier = dictionary["Identifier"] as? String
            self.maxItems = dictionary["Maxitems"] as? String
            self.startRecordName = dictionary["Name"] as? String
            if let startRecordType = dictionary["Type"] as? String { self.startRecordType = RRType(rawValue: startRecordType) } else { self.startRecordType = nil }
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct GetHealthCheckLastFailureReasonResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list that contains one Observation element for each Amazon Route 53 health checker that is reporting a last failure reason. 
        public let healthCheckObservations: HealthCheckObservations

        public init(healthCheckObservations: HealthCheckObservations) {
            self.healthCheckObservations = healthCheckObservations
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckObservations = dictionary["HealthCheckObservations"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheckObservations") }
            self.healthCheckObservations = try Route53.HealthCheckObservations(dictionary: healthCheckObservations)
        }
    }

    public struct CreateTrafficPolicyVersionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The definition of this version of the traffic policy, in JSON format. You specified the JSON in the CreateTrafficPolicyVersion request. For more information about the JSON format, see CreateTrafficPolicy.
        public let document: String
        /// The comment that you specified in the CreateTrafficPolicyVersion request, if any.
        public let comment: String?
        /// The ID of the traffic policy for which you want to create a new version.
        public let id: String

        public init(document: String, comment: String? = nil, id: String) {
            self.document = document
            self.comment = comment
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let document = dictionary["Document"] as? String else { throw InitializableError.missingRequiredParam("Document") }
            self.document = document
            self.comment = dictionary["Comment"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct GeoLocationDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The full name of the subdivision, for example, a state in the United States or a province in Canada.
        public let subdivisionName: String?
        /// The code for the subdivision, for example, a state in the United States or a province in Canada.
        public let subdivisionCode: String?
        /// The two-letter code for the country.
        public let countryCode: String?
        /// The full name of the continent.
        public let continentName: String?
        /// The name of the country.
        public let countryName: String?
        /// The two-letter code for the continent.
        public let continentCode: String?

        public init(subdivisionName: String? = nil, subdivisionCode: String? = nil, countryCode: String? = nil, continentName: String? = nil, countryName: String? = nil, continentCode: String? = nil) {
            self.subdivisionName = subdivisionName
            self.subdivisionCode = subdivisionCode
            self.countryCode = countryCode
            self.continentName = continentName
            self.countryName = countryName
            self.continentCode = continentCode
        }

        public init(dictionary: [String: Any]) throws {
            self.subdivisionName = dictionary["SubdivisionName"] as? String
            self.subdivisionCode = dictionary["SubdivisionCode"] as? String
            self.countryCode = dictionary["CountryCode"] as? String
            self.continentName = dictionary["ContinentName"] as? String
            self.countryName = dictionary["CountryName"] as? String
            self.continentCode = dictionary["ContinentCode"] as? String
        }
    }

    public struct GetHealthCheckCountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ResourceTagSetList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let resourceTagSet: [ResourceTagSet]?

        public init(resourceTagSet: [ResourceTagSet]? = nil) {
            self.resourceTagSet = resourceTagSet
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceTagSet = dictionary["ResourceTagSet"] as? [[String: Any]] {
                self.resourceTagSet = try resourceTagSet.map({ try ResourceTagSet(dictionary: $0) })
            } else { 
                self.resourceTagSet = nil
            }
        }
    }

    public struct DeleteReusableDelegationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListTrafficPolicyVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of maxitems traffic policies by calling ListTrafficPolicyVersions again and specifying the value of the NextMarker element in the marker parameter.
        public let isTruncated: Bool
        /// The value that you specified for the maxitems parameter in the call to ListTrafficPolicyVersions that produced the current response.
        public let maxItems: String
        /// If IsTruncated is true, the value of TrafficPolicyVersionMarker identifies the first traffic policy in the next group of MaxItems traffic policies. Call ListTrafficPolicyVersions again and specify the value of TrafficPolicyVersionMarker in the TrafficPolicyVersionMarker request parameter. This element is present only if IsTruncated is true.
        public let trafficPolicyVersionMarker: String
        /// A list that contains one TrafficPolicy element for each traffic policy version that is associated with the specified traffic policy.
        public let trafficPolicies: TrafficPolicies

        public init(isTruncated: Bool, maxItems: String, trafficPolicyVersionMarker: String, trafficPolicies: TrafficPolicies) {
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.trafficPolicyVersionMarker = trafficPolicyVersionMarker
            self.trafficPolicies = trafficPolicies
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            guard let trafficPolicyVersionMarker = dictionary["TrafficPolicyVersionMarker"] as? String else { throw InitializableError.missingRequiredParam("TrafficPolicyVersionMarker") }
            self.trafficPolicyVersionMarker = trafficPolicyVersionMarker
            guard let trafficPolicies = dictionary["TrafficPolicies"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicies") }
            self.trafficPolicies = try Route53.TrafficPolicies(dictionary: trafficPolicies)
        }
    }

    public struct TagList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [[String: Any]] {
                self.tag = try tag.map({ try Tag(dictionary: $0) })
            } else { 
                self.tag = nil
            }
        }
    }

    public struct GetHealthCheckRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["HealthCheckId": "HealthCheckId"]
        }
        /// The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use this value to specify which health check to use. The value can be up to 64 characters long.
        public let healthCheckId: String

        public init(healthCheckId: String) {
            self.healthCheckId = healthCheckId
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckId = dictionary["HealthCheckId"] as? String else { throw InitializableError.missingRequiredParam("HealthCheckId") }
            self.healthCheckId = healthCheckId
        }
    }

    public struct ListHealthChecksRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["marker": "Marker", "maxitems": "MaxItems"]
        }
        /// If the response to a ListHealthChecks is more than one page, marker is the health check ID for the first health check on the next page of results. For more information, see ListHealthChecksResponse$MaxItems.
        public let marker: String?
        /// The maximum number of HealthCheck elements you want ListHealthChecks to return on each page of the response body. If the AWS account includes more HealthCheck elements than the value of maxitems, the response is broken into pages. Each page contains the number of HealthCheck elements specified by maxitems. For example, suppose you specify 10 for maxitems and the current AWS account has 51 health checks. In the response, ListHealthChecks sets ListHealthChecksResponse$IsTruncated to true and includes the ListHealthChecksResponse$NextMarker element. To access the second and subsequent pages, you resend the GET ListHealthChecks request, add the ListHealthChecksResponse$Marker parameter to the request, and specify the value of the ListHealthChecksResponse$NextMarker element from the previous response. On the last (sixth) page of the response, which contains only one HealthCheck element:   The value of ListHealthChecksResponse$IsTruncated is false.    ListHealthChecksResponse$NextMarker is omitted.  
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxItems = dictionary["Maxitems"] as? String
        }
    }

    public struct RecordData: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let recordDataEntry: [String]?

        public init(recordDataEntry: [String]? = nil) {
            self.recordDataEntry = recordDataEntry
        }

        public init(dictionary: [String: Any]) throws {
            self.recordDataEntry = dictionary["RecordDataEntry"] as? [String]
        }
    }

    public struct ListTagsForResourcesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of ResourceTagSets containing tags associated with the specified resources.
        public let resourceTagSets: ResourceTagSetList

        public init(resourceTagSets: ResourceTagSetList) {
            self.resourceTagSets = resourceTagSets
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceTagSets = dictionary["ResourceTagSets"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ResourceTagSets") }
            self.resourceTagSets = try Route53.ResourceTagSetList(dictionary: resourceTagSets)
        }
    }

    public struct ListReusableDelegationSetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more reusable delegation sets to be listed. If the response is truncated, you can get the next group of maxitems reusable delegation sets by calling ListReusableDelegationSets again and specifying the value of the NextMarker element in the marker parameter.
        public let isTruncated: Bool
        /// The value that you specified for the maxitems parameter in the call to ListReusableDelegationSets that produced the current response.
        public let maxItems: String
        /// If IsTruncated is true, the value of NextMarker identifies the first reusable delegation set in the next group of maxitems reusable delegation sets. Call ListReusableDelegationSets again and specify the value of NextMarker in the marker parameter.
        public let nextMarker: String?
        /// For the second and subsequent calls to ListReusableDelegationSets, Marker is the value that you specified for the marker parameter in the request that produced the current response.
        public let marker: String
        /// A complex type that contains one DelegationSet element for each reusable delegation set that was created by the current AWS account.
        public let delegationSets: DelegationSets

        public init(isTruncated: Bool, maxItems: String, nextMarker: String? = nil, marker: String, delegationSets: DelegationSets) {
            self.isTruncated = isTruncated
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.marker = marker
            self.delegationSets = delegationSets
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            guard let delegationSets = dictionary["DelegationSets"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DelegationSets") }
            self.delegationSets = try Route53.DelegationSets(dictionary: delegationSets)
        }
    }

    public struct AlarmIdentifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
        public let name: String
        /// A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy. For the current list of CloudWatch regions, see Amazon CloudWatch in the AWS Regions and Endpoints chapter of the Amazon Web Services General Reference.
        public let region: CloudWatchRegion

        public init(name: String, region: CloudWatchRegion) {
            self.name = name
            self.region = region
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let rawRegion = dictionary["Region"] as? String, let region = CloudWatchRegion(rawValue: rawRegion) else { throw InitializableError.missingRequiredParam("Region") }
            self.region = region
        }
    }

    public struct ListTrafficPolicyInstancesByPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["version": "TrafficPolicyVersion", "hostedzoneid": "HostedZoneIdMarker", "trafficpolicyinstancetype": "TrafficPolicyInstanceTypeMarker", "trafficpolicyinstancename": "TrafficPolicyInstanceNameMarker", "maxitems": "MaxItems", "id": "TrafficPolicyId"]
        }
        /// The maximum number of traffic policy instances to be included in the response body for this request. If you have more than MaxItems traffic policy instances, the value of the IsTruncated element in the response is true, and the values of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker represent the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let maxItems: String?
        /// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value. If the value of IsTruncated in the previous response was true, HostedZoneIdMarker is the ID of the hosted zone for the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get for this hosted zone. If the value of IsTruncated in the previous response was false, omit this value.
        public let hostedZoneIdMarker: String?
        /// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker is the DNS type of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get for this hosted zone.
        public let trafficPolicyInstanceTypeMarker: RRType?
        /// The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the traffic policy that is specified by TrafficPolicyId.
        public let trafficPolicyVersion: Int32
        /// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get for this hosted zone. If the value of IsTruncated in the previous response was false, omit this value.
        public let trafficPolicyInstanceNameMarker: String?
        /// The ID of the traffic policy for which you want to list traffic policy instances.
        public let trafficPolicyId: String

        public init(maxItems: String? = nil, hostedZoneIdMarker: String? = nil, trafficPolicyInstanceTypeMarker: RRType? = nil, trafficPolicyVersion: Int32, trafficPolicyInstanceNameMarker: String? = nil, trafficPolicyId: String) {
            self.maxItems = maxItems
            self.hostedZoneIdMarker = hostedZoneIdMarker
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
            self.trafficPolicyVersion = trafficPolicyVersion
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
            self.trafficPolicyId = trafficPolicyId
        }

        public init(dictionary: [String: Any]) throws {
            self.maxItems = dictionary["Maxitems"] as? String
            self.hostedZoneIdMarker = dictionary["Hostedzoneid"] as? String
            if let trafficPolicyInstanceTypeMarker = dictionary["Trafficpolicyinstancetype"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
            guard let trafficPolicyVersion = dictionary["Version"] as? Int32 else { throw InitializableError.missingRequiredParam("Version") }
            self.trafficPolicyVersion = trafficPolicyVersion
            self.trafficPolicyInstanceNameMarker = dictionary["Trafficpolicyinstancename"] as? String
            guard let trafficPolicyId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.trafficPolicyId = trafficPolicyId
        }
    }

    public struct ResourceRecordSet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Failover resource record sets only: To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set. Except where noted, the following failover behaviors assume that you have included the HealthCheckId element in both resource record sets:   When the primary resource record set is healthy, Amazon Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the secondary resource record set.   When the primary resource record set is unhealthy and the secondary resource record set is healthy, Amazon Route 53 responds to DNS queries with the applicable value from the secondary resource record set.   When the secondary resource record set is unhealthy, Amazon Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the primary resource record set.   If you omit the HealthCheckId element for the secondary resource record set, and if the primary resource record set is unhealthy, Amazon Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true regardless of the health of the associated endpoint.   You can't create non-failover resource record sets that have the same values for the Name and Type elements as failover resource record sets. For failover alias resource record sets, you must also include the EvaluateTargetHealth element and set the value to true. For more information about configuring failover for Amazon Route 53, see the following topics in the Amazon Route 53 Developer Guide:     Amazon Route 53 Health Checks and DNS Failover     Configuring Failover in a Private Hosted Zone    Valid values: PRIMARY | SECONDARY 
        public let failover: ResourceRecordSetFailover?
        ///  Geo location resource record sets only: A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of 192.0.2.111, create a resource record set with a Type of A and a ContinentCode of AF.  Creating geolocation and geolocation alias resource record sets in private hosted zones is not supported.  If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a continent to one resource and to route queries for a country on that continent to a different resource. You can't create two geolocation resource record sets that specify the same geographic location. The value * in the CountryCode element matches all geographic locations that aren't specified in other geolocation resource record sets that have the same values for the Name and Type elements.  Geolocation works by mapping IP addresses to locations. However, some IP addresses aren't mapped to geographic locations, so even if you create geolocation resource record sets that cover all seven continents, Amazon Route 53 will receive some DNS queries from locations that it can't identify. We recommend that you create a resource record set for which the value of CountryCode is *, which handles both queries that come from locations for which you haven't created geolocation resource record sets and queries from IP addresses that aren't mapped to a location. If you don't create a * resource record set, Amazon Route 53 returns a "no answer" response for queries from those locations.  You can't create non-geolocation resource record sets that have the same values for the Name and Type elements as geolocation resource record sets.
        public let geoLocation: GeoLocation?
        /// When you create a traffic policy instance, Amazon Route 53 automatically creates a resource record set. TrafficPolicyInstanceId is the ID of the traffic policy instance that Amazon Route 53 created this resource record set for.  To delete the resource record set that is associated with a traffic policy instance, use DeleteTrafficPolicyInstance. Amazon Route 53 will delete the resource record set automatically. If you delete the resource record set by using ChangeResourceRecordSets, Amazon Route 53 doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though it's no longer in use.  
        public let trafficPolicyInstanceId: String?
        /// The name of the domain you want to perform the action on. Enter a fully qualified domain name, for example, www.example.com. You can optionally include a trailing dot. If you omit the trailing dot, Amazon Route 53 still assumes that the domain name that you specify is fully qualified. This means that Amazon Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical. For information about how to specify characters other than a-z, 0-9, and - (hyphen) and how to specify internationalized domain names, see DNS Domain Name Format in the Amazon Route 53 Developer Guide. You can use the asterisk (*) wildcard to replace the leftmost label in a domain name. For example, *.example.com. Note the following:   The * must replace the entire label. For example, you can't specify *prod.example.com or prod*.example.com.   The * can't replace any of the middle labels, for example, marketing.*.example.com.   If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not as a wildcard.  You can't use the * wildcard for resource records sets that have a type of NS.    You can use the * wildcard as the leftmost label in a domain name, for example, *.example.com. You can't use an * for one of the middle labels, for example, marketing.*.example.com. In addition, the * must replace the entire label; for example, you can't specify prod*.example.com.
        public let name: String
        ///  Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Amazon Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Amazon Route 53 then responds to queries based on the ratio of a resource's weight to the total. Note the following:   You must specify a value for the Weight element for every weighted resource record set.   You can only specify one ResourceRecord per weighted resource record set.   You can't create latency, failover, or geolocation resource record sets that have the same values for the Name and Type elements as weighted resource record sets.   You can create a maximum of 100 weighted resource record sets that have the same values for the Name and Type elements.   For weighted (but not weighted alias) resource record sets, if you set Weight to 0 for a resource record set, Amazon Route 53 never responds to queries with the applicable value for that resource record set. However, if you set Weight to 0 for all resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with equal probability. The effect of setting Weight to 0 is different when you associate health checks with weighted resource record sets. For more information, see Options for Configuring Amazon Route 53 Active-Active and Active-Passive Failover in the Amazon Route 53 Developer Guide.  
        public let weight: Int64?
        ///  Latency-based resource record sets only: The Amazon EC2 Region where the resource that is specified in this resource record set resides. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type.  Creating latency and latency alias resource record sets in private hosted zones is not supported.  When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Amazon Route 53 selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Amazon Route 53 then returns the value that is associated with the selected resource record set. Note the following:   You can only specify one ResourceRecord per latency resource record set.   You can only create one latency resource record set for each Amazon EC2 Region.   You aren't required to create latency resource record sets for all Amazon EC2 Regions. Amazon Route 53 will choose the region with the best latency from among the regions for which you create latency resource record sets.   You can't create non-latency resource record sets that have the same values for the Name and Type elements as latency resource record sets.  
        public let region: ResourceRecordSetRegion?
        ///  Alias resource record sets only: Information about the CloudFront distribution, AWS Elastic Beanstalk environment, ELB load balancer, Amazon S3 bucket, or Amazon Route 53 resource record set to which you're redirecting queries. The AWS Elastic Beanstalk environment must have a regionalized subdomain. If you're creating resource records sets for a private hosted zone, note the following:   You can't create alias resource record sets for CloudFront distributions in a private hosted zone.   Creating geolocation alias resource record sets or latency alias resource record sets in a private hosted zone is unsupported.   For information about creating failover resource record sets in a private hosted zone, see Configuring Failover in a Private Hosted Zone in the Amazon Route 53 Developer Guide.  
        public let aliasTarget: AliasTarget?
        /// If you want Amazon Route 53 to return this resource record set in response to a DNS query only when a health check is passing, include the HealthCheckId element and specify the ID of the applicable health check. Amazon Route 53 determines whether a resource record set is healthy based on one of the following:   By periodically sending a request to the endpoint that is specified in the health check   By aggregating the status of a specified group of health checks (calculated health checks)   By determining the current state of a CloudWatch alarm (CloudWatch metric health checks)   For more information, see How Amazon Route 53 Determines Whether an Endpoint Is Healthy. The HealthCheckId element is only useful when Amazon Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you want Amazon Route 53 to base the choice in part on the status of a health check. Configuring health checks only makes sense in the following configurations:   You're checking the health of the resource record sets in a group of weighted, latency, geolocation, or failover resource record sets, and you specify health check IDs for all of the resource record sets. If the health check for one resource record set specifies an endpoint that is not healthy, Amazon Route 53 stops responding to queries using the value for that resource record set.   You set EvaluateTargetHealth to true for the resource record sets in a group of alias, weighted alias, latency alias, geolocation alias, or failover alias resource record sets, and you specify health check IDs for all of the resource record sets that are referenced by the alias resource record sets.    Amazon Route 53 doesn't check the health of the endpoint specified in the resource record set, for example, the endpoint specified by the IP address in the Value element. When you add a HealthCheckId element to a resource record set, Amazon Route 53 checks the health of the endpoint that you specified in the health check.   For geolocation resource record sets, if an endpoint is unhealthy, Amazon Route 53 looks for a resource record set for the larger, associated geographic region. For example, suppose you have resource record sets for a state in the United States, for the United States, for North America, and for all locations. If the endpoint for the state resource record set is unhealthy, Amazon Route 53 checks the resource record sets for the United States, for North America, and for all locations (a resource record set for which the value of CountryCode is *), in that order, until it finds a resource record set for which the endpoint is healthy.  If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of FullyQualifiedDomainName, specify the domain name of the server (such as us-east-2-www.example.com), not the name of the resource record sets (example.com).  n this configuration, if you create a health check for which the value of FullyQualifiedDomainName matches the name of the resource record sets and then associate the health check with those resource record sets, health check results will be unpredictable.  For more information, see the following topics in the Amazon Route 53 Developer Guide:    Amazon Route 53 Health Checks and DNS Failover     Configuring Failover in a Private Hosted Zone   
        public let healthCheckId: String?
        ///  Weighted, Latency, Geo, and Failover resource record sets only: An identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. The value of SetIdentifier must be unique for each resource record set that has the same combination of DNS name and type. Omit SetIdentifier for any other types of record sets.
        public let setIdentifier: String?
        /// The DNS record type. For information about different record types and how data is encoded for them, see Supported DNS Resource Record Types in the Amazon Route 53 Developer Guide. Valid values for basic resource record sets: A | AAAA | CNAME | MX | NAPTR | NS | PTR | SOA | SPF | SRV | TXT  Values for weighted, latency, geolocation, and failover resource record sets: A | AAAA | CNAME | MX | NAPTR | PTR | SPF | SRV | TXT. When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the group.  SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create resource record sets for which the value of Type is SPF. RFC 7208, Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1, has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to use it." In RFC 7208, see section 14.1, The SPF DNS Record Type.  Values for alias resource record sets:    CloudFront distributions: A  If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a value of A and one with a value of AAAA.     AWS Elastic Beanstalk environment that has a regionalized subdomain: A     ELB load balancers: A | AAAA     Amazon S3 buckets: A     Another resource record set in this hosted zone: Specify the type of the resource record set for which you're creating the alias. Specify any value except NS or SOA.  
        public let `type`: RRType
        /// Information about the resource records to act upon.  If you're creating an alias resource record set, omit ResourceRecords. 
        public let resourceRecords: ResourceRecords?
        /// The resource record cache time to live (TTL), in seconds. Note the following:   If you're creating an alias resource record set, omit TTL. Amazon Route 53 uses the value of TTL for the alias target.    If you're associating this resource record set with a health check (if you're adding a HealthCheckId element), we recommend that you specify a TTL of 60 seconds or less so clients respond quickly to changes in health status.   All of the resource record sets in a group of weighted, latency, geolocation, or failover resource record sets must have the same value for TTL.   If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a TTL of 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for Weight.  
        public let tTL: Int64?

        public init(failover: ResourceRecordSetFailover? = nil, geoLocation: GeoLocation? = nil, trafficPolicyInstanceId: String? = nil, name: String, weight: Int64? = nil, region: ResourceRecordSetRegion? = nil, aliasTarget: AliasTarget? = nil, healthCheckId: String? = nil, setIdentifier: String? = nil, type: RRType, resourceRecords: ResourceRecords? = nil, tTL: Int64? = nil) {
            self.failover = failover
            self.geoLocation = geoLocation
            self.trafficPolicyInstanceId = trafficPolicyInstanceId
            self.name = name
            self.weight = weight
            self.region = region
            self.aliasTarget = aliasTarget
            self.healthCheckId = healthCheckId
            self.setIdentifier = setIdentifier
            self.`type` = `type`
            self.resourceRecords = resourceRecords
            self.tTL = tTL
        }

        public init(dictionary: [String: Any]) throws {
            if let failover = dictionary["Failover"] as? String { self.failover = ResourceRecordSetFailover(rawValue: failover) } else { self.failover = nil }
            if let geoLocation = dictionary["GeoLocation"] as? [String: Any] { self.geoLocation = try Route53.GeoLocation(dictionary: geoLocation) } else { self.geoLocation = nil }
            self.trafficPolicyInstanceId = dictionary["TrafficPolicyInstanceId"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.weight = dictionary["Weight"] as? Int64
            if let region = dictionary["Region"] as? String { self.region = ResourceRecordSetRegion(rawValue: region) } else { self.region = nil }
            if let aliasTarget = dictionary["AliasTarget"] as? [String: Any] { self.aliasTarget = try Route53.AliasTarget(dictionary: aliasTarget) } else { self.aliasTarget = nil }
            self.healthCheckId = dictionary["HealthCheckId"] as? String
            self.setIdentifier = dictionary["SetIdentifier"] as? String
            guard let rawType = dictionary["Type"] as? String, let `type` = RRType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            if let resourceRecords = dictionary["ResourceRecords"] as? [String: Any] { self.resourceRecords = try Route53.ResourceRecords(dictionary: resourceRecords) } else { self.resourceRecords = nil }
            self.tTL = dictionary["TTL"] as? Int64
        }
    }

    public struct DeleteTrafficPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteTrafficPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id", "Version": "Version"]
        }
        /// The version number of the traffic policy that you want to delete.
        public let version: Int32
        /// The ID of the traffic policy that you want to delete.
        public let id: String

        public init(version: Int32, id: String) {
            self.version = version
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let version = dictionary["Version"] as? Int32 else { throw InitializableError.missingRequiredParam("Version") }
            self.version = version
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ResourceTagSet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID for the specified resource.
        public let resourceId: String?
        /// The tags associated with the specified resource.
        public let tags: TagList?
        /// The type of the resource.   The resource type for health checks is healthcheck.   The resource type for hosted zones is hostedzone.  
        public let resourceType: TagResourceType?

        public init(resourceId: String? = nil, tags: TagList? = nil, resourceType: TagResourceType? = nil) {
            self.resourceId = resourceId
            self.tags = tags
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceId = dictionary["ResourceId"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Route53.TagList(dictionary: tags) } else { self.tags = nil }
            if let resourceType = dictionary["ResourceType"] as? String { self.resourceType = TagResourceType(rawValue: resourceType) } else { self.resourceType = nil }
        }
    }

    public struct ListVPCAssociationAuthorizationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// When the response includes a NextToken element, there are more VPCs that can be associated with the specified hosted zone. To get the next page of VPCs, submit another ListVPCAssociationAuthorizations request, and include the value of the NextToken element from the response in the NextToken request parameter:  /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation?MaxItems=VPCs per page&amp;NextToken=  
        public let nextToken: String?
        /// The list of VPCs that are authorized to be associated with the specified hosted zone.
        public let vPCs: VPCs
        /// The ID of the hosted zone that you can associate the listed VPCs with.
        public let hostedZoneId: String

        public init(nextToken: String? = nil, vPCs: VPCs, hostedZoneId: String) {
            self.nextToken = nextToken
            self.vPCs = vPCs
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let vPCs = dictionary["VPCs"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPCs") }
            self.vPCs = try Route53.VPCs(dictionary: vPCs)
            guard let hostedZoneId = dictionary["HostedZoneId"] as? String else { throw InitializableError.missingRequiredParam("HostedZoneId") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct HealthCheckConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for IPAddress, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in FullyQualifiedDomainName at the interval that you specify in RequestInterval. Using an IP address returned by DNS, Amazon Route 53 then checks the health of the endpoint. Use one of the following formats for the value of IPAddress:     IPv4 address: four values between 0 and 255, separated by periods (.), for example, 192.0.2.44.    IPv6 address: eight groups of four hexadecimal values, separated by colons (:), for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345. You can also shorten IPv6 addresses as described in RFC 5952, for example, 2001:db8:85a3::abcd:1:2345.   If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for IPAddress. This ensures that the IP address of your instance will never change. For more information, see HealthCheckConfig$FullyQualifiedDomainName. Constraints: Amazon Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents:    RFC 5735, Special Use IPv4 Addresses     RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space     RFC 5156, Special-Use IPv6 Addresses    When the value of Type is CALCULATED or CLOUDWATCH_METRIC, omit IPAddress.
        public let iPAddress: String?
        /// (CALCULATED Health Checks Only) A complex type that contains one ChildHealthCheck element for each health check that you want to associate with a CALCULATED health check.
        public let childHealthChecks: ChildHealthCheckList?
        /// Specify whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint, and to display CloudWatch latency graphs on the Health Checks page in the Amazon Route 53 console.  You can't change the value of MeasureLatency after you create a health check. 
        public let measureLatency: Bool?
        /// The path, if any, that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example, the file /docs/route53-health-check.html. 
        public let resourcePath: String?
        /// When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:    Healthy: Amazon Route 53 considers the health check to be healthy.    Unhealthy: Amazon Route 53 considers the health check to be unhealthy.    LastKnownStatus: Amazon Route 53uses the status of the health check from the last time CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.  
        public let insufficientDataHealthStatus: InsufficientDataHealthStatus?
        /// Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.
        public let inverted: Bool?
        /// A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
        public let alarmIdentifier: AlarmIdentifier?
        /// A complex type that contains one Region element for each region from which you want Amazon Route 53 health checkers to check the specified endpoint. If you don't specify any regions, Amazon Route 53 health checkers automatically performs checks from all of the regions that are listed under Valid Values. If you update a health check to remove a region that has been performing health checks, Amazon Route 53 will briefly continue to perform checks from that region to ensure that some health checkers are always checking the endpoint (for example, if you replace three regions with four different regions). 
        public let regions: HealthCheckRegionList?
        /// The number of child health checks that are associated with a CALCULATED health that Amazon Route 53 must consider healthy for the CALCULATED health check to be considered healthy. To specify the child health checks that you want to associate with a CALCULATED health check, use the HealthCheckConfig$ChildHealthChecks and HealthCheckConfig$ChildHealthChecks elements. Note the following:   If you specify a number greater than the number of child health checks, Amazon Route 53 always considers this health check to be unhealthy.   If you specify 0, Amazon Route 53 always considers this health check to be healthy.  
        public let healthThreshold: Int32?
        /// If the value of Type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy. Amazon Route 53 considers case when searching for SearchString in the response body. 
        public let searchString: String?
        /// Amazon Route 53 behavior depends on whether you specify a value for IPAddress.  If you specify a value for IPAddress: Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of FullyQualifiedDomainName in the Host header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Amazon Route 53 to perform health checks. When Amazon Route 53 checks the health of an endpoint, here is how it constructs the Host header:   If you specify a value of 80 for Port and HTTP or HTTP_STR_MATCH for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to the endpoint in the Host header.    If you specify a value of 443 for Port and HTTPS or HTTPS_STR_MATCH for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to the endpoint in the Host header.   If you specify another value for Port and any value except TCP for Type, Amazon Route 53 passes FullyQualifiedDomainName:Port to the endpoint in the Host header.   If you don't specify a value for FullyQualifiedDomainName, Amazon Route 53 substitutes the value of IPAddress in the Host header in each of the preceding cases.  If you don't specify a value for IPAddress : Amazon Route 53 sends a DNS request to the domain that you specify for FullyQualifiedDomainName at the interval that you specify for RequestInterval. Using an IPv4 address that DNS returns, Amazon Route 53 then checks the health of the endpoint.  If you don't specify a value for IPAddress, Amazon Route 53 uses only IPv4 to send health checks to the endpoint. If there's no resource record set with a type of A for the name that you specify for FullyQualifiedDomainName, the health check fails with a "DNS resolution failed" error.  If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by FullyQualifiedDomainName, we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of FullyQualifiedDomainName, specify the domain name of the server (such as us-east-2-www.example.com), not the name of the resource record sets (www.example.com).  In this configuration, if you create a health check for which the value of FullyQualifiedDomainName matches the name of the resource record sets and you then associate the health check with those resource record sets, health check results will be unpredictable.  In addition, if the value that you specify for Type is HTTP, HTTPS, HTTP_STR_MATCH, or HTTPS_STR_MATCH, Amazon Route 53 passes the value of FullyQualifiedDomainName in the Host header, as it does when you specify a value for IPAddress. If the value of Type is TCP, Amazon Route 53 doesn't pass a Host header.
        public let fullyQualifiedDomainName: String?
        /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health check request. Each Amazon Route 53 health checker makes requests at this interval.  You can't change the value of RequestInterval after you create a health check.  If you don't specify a value for RequestInterval, the default value is 30 seconds.
        public let requestInterval: Int32?
        /// The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy.  You can't change the value of Type after you create a health check.  You can create the following types of health checks:    HTTP: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.    HTTPS: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.  If you specify HTTPS for the value of Type, the endpoint must support TLS v1.0 or later.     HTTP_STR_MATCH: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTP request and searches the first 5,120 bytes of the response body for the string that you specify in SearchString.    HTTPS_STR_MATCH: Amazon Route 53 tries to establish a TCP connection. If successful, Amazon Route 53 submits an HTTPS request and searches the first 5,120 bytes of the response body for the string that you specify in SearchString.    TCP: Amazon Route 53 tries to establish a TCP connection.    CLOUDWATCH_METRIC: The health check is associated with a CloudWatch alarm. If the state of the alarm is OK, the health check is considered healthy. If the state is ALARM, the health check is considered unhealthy. If CloudWatch doesn't have sufficient data to determine whether the state is OK or ALARM, the health check status depends on the setting for InsufficientDataHealthStatus: Healthy, Unhealthy, or LastKnownStatus.     CALCULATED: For health checks that monitor the status of other health checks, Amazon Route 53 adds up the number of health checks that Amazon Route 53 health checkers consider to be healthy and compares that number with the value of HealthThreshold.    For more information about how Amazon Route 53 determines whether an endpoint is healthy, see the introduction to this topic.
        public let `type`: HealthCheckType
        /// Specify whether you want Amazon Route 53 to send the value of FullyQualifiedDomainName to the endpoint in the client_hello message during TLS negotiation. This allows the endpoint to respond to HTTPS health check requests with the applicable SSL/TLS certificate. Some endpoints require that HTTPS requests include the host name in the client_hello message. If you don't enable SNI, the status of the health check will be SSL alert handshake_failure. A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid. The SSL/TLS certificate on your endpoint includes a domain name in the Common Name field and possibly several more in the Subject Alternative Names field. One of the domain names in the certificate should match the value that you specify for FullyQualifiedDomainName. If the endpoint responds to the client_hello message with a certificate that does not include the domain name that you specified in FullyQualifiedDomainName, a health checker will retry the handshake. In the second attempt, the health checker will omit FullyQualifiedDomainName from the client_hello message.
        public let enableSNI: Bool?
        /// The port on the endpoint on which you want Amazon Route 53 to perform health checks. Specify a value for Port only when you specify a value for IPAddress.
        public let port: Int32?
        /// The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see How Amazon Route 53 Determines Whether an Endpoint Is Healthy in the Amazon Route 53 Developer Guide. If you don't specify a value for FailureThreshold, the default value is three health checks.
        public let failureThreshold: Int32?

        public init(iPAddress: String? = nil, childHealthChecks: ChildHealthCheckList? = nil, measureLatency: Bool? = nil, resourcePath: String? = nil, insufficientDataHealthStatus: InsufficientDataHealthStatus? = nil, inverted: Bool? = nil, alarmIdentifier: AlarmIdentifier? = nil, regions: HealthCheckRegionList? = nil, healthThreshold: Int32? = nil, searchString: String? = nil, fullyQualifiedDomainName: String? = nil, requestInterval: Int32? = nil, type: HealthCheckType, enableSNI: Bool? = nil, port: Int32? = nil, failureThreshold: Int32? = nil) {
            self.iPAddress = iPAddress
            self.childHealthChecks = childHealthChecks
            self.measureLatency = measureLatency
            self.resourcePath = resourcePath
            self.insufficientDataHealthStatus = insufficientDataHealthStatus
            self.inverted = inverted
            self.alarmIdentifier = alarmIdentifier
            self.regions = regions
            self.healthThreshold = healthThreshold
            self.searchString = searchString
            self.fullyQualifiedDomainName = fullyQualifiedDomainName
            self.requestInterval = requestInterval
            self.`type` = `type`
            self.enableSNI = enableSNI
            self.port = port
            self.failureThreshold = failureThreshold
        }

        public init(dictionary: [String: Any]) throws {
            self.iPAddress = dictionary["IPAddress"] as? String
            if let childHealthChecks = dictionary["ChildHealthChecks"] as? [String: Any] { self.childHealthChecks = try Route53.ChildHealthCheckList(dictionary: childHealthChecks) } else { self.childHealthChecks = nil }
            self.measureLatency = dictionary["MeasureLatency"] as? Bool
            self.resourcePath = dictionary["ResourcePath"] as? String
            if let insufficientDataHealthStatus = dictionary["InsufficientDataHealthStatus"] as? String { self.insufficientDataHealthStatus = InsufficientDataHealthStatus(rawValue: insufficientDataHealthStatus) } else { self.insufficientDataHealthStatus = nil }
            self.inverted = dictionary["Inverted"] as? Bool
            if let alarmIdentifier = dictionary["AlarmIdentifier"] as? [String: Any] { self.alarmIdentifier = try Route53.AlarmIdentifier(dictionary: alarmIdentifier) } else { self.alarmIdentifier = nil }
            if let regions = dictionary["Regions"] as? [String: Any] { self.regions = try Route53.HealthCheckRegionList(dictionary: regions) } else { self.regions = nil }
            self.healthThreshold = dictionary["HealthThreshold"] as? Int32
            self.searchString = dictionary["SearchString"] as? String
            self.fullyQualifiedDomainName = dictionary["FullyQualifiedDomainName"] as? String
            self.requestInterval = dictionary["RequestInterval"] as? Int32
            guard let rawType = dictionary["Type"] as? String, let `type` = HealthCheckType(rawValue: rawType) else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            self.enableSNI = dictionary["EnableSNI"] as? Bool
            self.port = dictionary["Port"] as? Int32
            self.failureThreshold = dictionary["FailureThreshold"] as? Int32
        }
    }

    public enum Statistic: String, CustomStringConvertible {
        case average = "Average"
        case sum = "Sum"
        case samplecount = "SampleCount"
        case maximum = "Maximum"
        case minimum = "Minimum"
        public var description: String { return self.rawValue }
    }

    public struct ListTrafficPolicyVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["trafficpolicyversion": "TrafficPolicyVersionMarker", "maxitems": "MaxItems"]
        }
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// Specify the value of Id of the traffic policy for which you want to list all versions.
        public let id: String
        /// The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified traffic policy has more than MaxItems versions, the value of the IsTruncated element in the response is true, and the value of the TrafficPolicyVersionMarker element is the ID of the first version in the next group of MaxItems traffic policy versions.
        public let maxItems: String?
        /// For your first request to ListTrafficPolicyVersions, do not include the TrafficPolicyVersionMarker parameter. If you have more traffic policy versions than the value of MaxItems, ListTrafficPolicyVersions returns only the first group of MaxItems versions. To get the next group of MaxItems traffic policy versions, submit another request to ListTrafficPolicyVersions. For the value of TrafficPolicyVersionMarker, specify the value of the TrafficPolicyVersionMarker element that was returned in the previous response. Traffic policy versions are listed in sequential order.
        public let trafficPolicyVersionMarker: String?

        public init(id: String, maxItems: String? = nil, trafficPolicyVersionMarker: String? = nil) {
            self.id = id
            self.maxItems = maxItems
            self.trafficPolicyVersionMarker = trafficPolicyVersionMarker
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            self.maxItems = dictionary["Maxitems"] as? String
            self.trafficPolicyVersionMarker = dictionary["Trafficpolicyversion"] as? String
        }
    }

    public struct ListTrafficPolicyInstancesByHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["trafficpolicyinstancename": "TrafficPolicyInstanceNameMarker", "trafficpolicyinstancetype": "TrafficPolicyInstanceTypeMarker", "id": "HostedZoneId", "maxitems": "MaxItems"]
        }
        /// The maximum number of traffic policy instances to be included in the response body for this request. If you have more than MaxItems traffic policy instances, the value of the IsTruncated element in the response is true, and the values of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker represent the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let maxItems: String?
        /// For the first request to ListTrafficPolicyInstancesByHostedZone, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker is the DNS type of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get for this hosted zone.
        public let trafficPolicyInstanceTypeMarker: RRType?
        /// For the first request to ListTrafficPolicyInstancesByHostedZone, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get for this hosted zone. If the value of IsTruncated in the previous response was false, omit this value.
        public let trafficPolicyInstanceNameMarker: String?
        /// The ID of the hosted zone for which you want to list traffic policy instances.
        public let hostedZoneId: String

        public init(maxItems: String? = nil, trafficPolicyInstanceTypeMarker: RRType? = nil, trafficPolicyInstanceNameMarker: String? = nil, hostedZoneId: String) {
            self.maxItems = maxItems
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            self.maxItems = dictionary["Maxitems"] as? String
            if let trafficPolicyInstanceTypeMarker = dictionary["Trafficpolicyinstancetype"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
            self.trafficPolicyInstanceNameMarker = dictionary["Trafficpolicyinstancename"] as? String
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct ListHealthChecksResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A flag that indicates whether there are more health checks to be listed. If the response was truncated, you can get the next group of maxitems health checks by calling ListHealthChecks again and specifying the value of the NextMarker element in the marker parameter. Valid Values: true | false 
        public let isTruncated: Bool
        /// A complex type that contains one HealthCheck element for each health check that is associated with the current AWS account.
        public let healthChecks: HealthChecks
        /// If IsTruncated is true, the value of NextMarker identifies the first health check in the next group of maxitems health checks. Call ListHealthChecks again and specify the value of NextMarker in the marker parameter.
        public let nextMarker: String?
        /// For the second and subsequent calls to ListHealthChecks, Marker is the value that you specified for the marker parameter in the previous request.
        public let marker: String
        /// The value that you specified for the maxitems parameter in the call to ListHealthChecks that produced the current response.
        public let maxItems: String

        public init(isTruncated: Bool, healthChecks: HealthChecks, nextMarker: String? = nil, marker: String, maxItems: String) {
            self.isTruncated = isTruncated
            self.healthChecks = healthChecks
            self.nextMarker = nextMarker
            self.marker = marker
            self.maxItems = maxItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let isTruncated = dictionary["IsTruncated"] as? Bool else { throw InitializableError.missingRequiredParam("IsTruncated") }
            self.isTruncated = isTruncated
            guard let healthChecks = dictionary["HealthChecks"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthChecks") }
            self.healthChecks = try Route53.HealthChecks(dictionary: healthChecks)
            self.nextMarker = dictionary["NextMarker"] as? String
            guard let marker = dictionary["Marker"] as? String else { throw InitializableError.missingRequiredParam("Marker") }
            self.marker = marker
            guard let maxItems = dictionary["MaxItems"] as? String else { throw InitializableError.missingRequiredParam("MaxItems") }
            self.maxItems = maxItems
        }
    }

    public struct ResourceRecords: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let resourceRecord: [ResourceRecord]?

        public init(resourceRecord: [ResourceRecord]? = nil) {
            self.resourceRecord = resourceRecord
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceRecord = dictionary["ResourceRecord"] as? [[String: Any]] {
                self.resourceRecord = try resourceRecord.map({ try ResourceRecord(dictionary: $0) })
            } else { 
                self.resourceRecord = nil
            }
        }
    }

    public struct GetHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains general information about the hosted zone.
        public let hostedZone: HostedZone
        /// A complex type that contains information about VPCs associated with the specified hosted zone.
        public let vPCs: VPCs?
        /// A complex type that describes the name servers for this hosted zone.
        public let delegationSet: DelegationSet?

        public init(hostedZone: HostedZone, vPCs: VPCs? = nil, delegationSet: DelegationSet? = nil) {
            self.hostedZone = hostedZone
            self.vPCs = vPCs
            self.delegationSet = delegationSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZone = dictionary["HostedZone"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HostedZone") }
            self.hostedZone = try Route53.HostedZone(dictionary: hostedZone)
            if let vPCs = dictionary["VPCs"] as? [String: Any] { self.vPCs = try Route53.VPCs(dictionary: vPCs) } else { self.vPCs = nil }
            if let delegationSet = dictionary["DelegationSet"] as? [String: Any] { self.delegationSet = try Route53.DelegationSet(dictionary: delegationSet) } else { self.delegationSet = nil }
        }
    }

    public struct ChangeTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["ResourceId": "ResourceId", "ResourceType": "ResourceType"]
        }
        /// A complex type that contains a list of the tags that you want to add to the specified health check or hosted zone and/or the tags for which you want to edit the Value element. You can add a maximum of 10 tags to a health check or a hosted zone.
        public let addTags: TagList?
        /// The ID of the resource for which you want to add, change, or delete tags.
        public let resourceId: String
        /// A complex type that contains a list of the tags that you want to delete from the specified health check or hosted zone. You can specify up to 10 keys.
        public let removeTagKeys: TagKeyList?
        /// The type of the resource.   The resource type for health checks is healthcheck.   The resource type for hosted zones is hostedzone.  
        public let resourceType: TagResourceType

        public init(addTags: TagList? = nil, resourceId: String, removeTagKeys: TagKeyList? = nil, resourceType: TagResourceType) {
            self.addTags = addTags
            self.resourceId = resourceId
            self.removeTagKeys = removeTagKeys
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            if let addTags = dictionary["AddTags"] as? [String: Any] { self.addTags = try Route53.TagList(dictionary: addTags) } else { self.addTags = nil }
            guard let resourceId = dictionary["ResourceId"] as? String else { throw InitializableError.missingRequiredParam("ResourceId") }
            self.resourceId = resourceId
            if let removeTagKeys = dictionary["RemoveTagKeys"] as? [String: Any] { self.removeTagKeys = try Route53.TagKeyList(dictionary: removeTagKeys) } else { self.removeTagKeys = nil }
            guard let rawResourceType = dictionary["ResourceType"] as? String, let resourceType = TagResourceType(rawValue: rawResourceType) else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
        }
    }

    public struct UpdateHostedZoneCommentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The new comment for the hosted zone. If you don't specify a value for Comment, Amazon Route 53 deletes the existing value of the Comment element, if any.
        public let comment: String?
        /// The ID for the hosted zone for which you want to update the comment.
        public let id: String

        public init(comment: String? = nil, id: String) {
            self.comment = comment
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.comment = dictionary["Comment"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct TagKeyList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let key: [String]?

        public init(key: [String]? = nil) {
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.key = dictionary["Key"] as? [String]
        }
    }

    public struct DeleteVPCAssociationAuthorizationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        /// When removing authorization to associate a VPC that was created by one AWS account with a hosted zone that was created with a different AWS account, the ID of the hosted zone.
        public let hostedZoneId: String
        /// When removing authorization to associate a VPC that was created by one AWS account with a hosted zone that was created with a different AWS account, a complex type that includes the ID and region of the VPC.
        public let vPC: VPC

        public init(hostedZoneId: String, vPC: VPC) {
            self.hostedZoneId = hostedZoneId
            self.vPC = vPC
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
            guard let vPC = dictionary["VPC"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPC") }
            self.vPC = try Route53.VPC(dictionary: vPC)
        }
    }

    public struct CreateHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set when you created it. For more information about reusable delegation sets, see CreateReusableDelegationSet.  Type  String  Default  None  Parent   CreatedHostedZoneRequest   
        public let delegationSetId: String?
        /// The VPC that you want your hosted zone to be associated with. By providing this parameter, your newly created hosted can't be resolved anywhere other than the given VPC.
        public let vPC: VPC?
        /// A unique string that identifies the request and that allows failed CreateHostedZone requests to be retried without the risk of executing the operation twice. You must use a unique CallerReference string every time you create a hosted zone. CallerReference can be any unique string, for example, a date/time stamp.
        public let callerReference: String
        ///  (Optional) A complex type that contains an optional comment about your hosted zone. If you don't want to specify a comment, omit both the HostedZoneConfig and Comment elements.
        public let hostedZoneConfig: HostedZoneConfig?
        /// The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Amazon Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical. If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Amazon Route 53, change the name servers for your domain to the set of NameServers that CreateHostedZone returns in the DelegationSet element.
        public let name: String

        public init(delegationSetId: String? = nil, vPC: VPC? = nil, callerReference: String, hostedZoneConfig: HostedZoneConfig? = nil, name: String) {
            self.delegationSetId = delegationSetId
            self.vPC = vPC
            self.callerReference = callerReference
            self.hostedZoneConfig = hostedZoneConfig
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.delegationSetId = dictionary["DelegationSetId"] as? String
            if let vPC = dictionary["VPC"] as? [String: Any] { self.vPC = try Route53.VPC(dictionary: vPC) } else { self.vPC = nil }
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            if let hostedZoneConfig = dictionary["HostedZoneConfig"] as? [String: Any] { self.hostedZoneConfig = try Route53.HostedZoneConfig(dictionary: hostedZoneConfig) } else { self.hostedZoneConfig = nil }
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct DeleteHostedZoneResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains the ID, the status, and the date and time of your delete request.
        public let changeInfo: ChangeInfo

        public init(changeInfo: ChangeInfo) {
            self.changeInfo = changeInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
        }
    }

    public struct GetHostedZoneCountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The total number of public and private hosted zones associated with the current AWS account.
        public let hostedZoneCount: Int64

        public init(hostedZoneCount: Int64) {
            self.hostedZoneCount = hostedZoneCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZoneCount = dictionary["HostedZoneCount"] as? Int64 else { throw InitializableError.missingRequiredParam("HostedZoneCount") }
            self.hostedZoneCount = hostedZoneCount
        }
    }

    public struct DeleteTrafficPolicyInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetCheckerIpRangesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetHealthCheckResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains information about one health check that is associated with the current AWS account.
        public let healthCheck: HealthCheck

        public init(healthCheck: HealthCheck) {
            self.healthCheck = healthCheck
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheck = dictionary["HealthCheck"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HealthCheck") }
            self.healthCheck = try Route53.HealthCheck(dictionary: healthCheck)
        }
    }

    public struct UpdateTrafficPolicyCommentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains settings for the specified traffic policy.
        public let trafficPolicy: TrafficPolicy

        public init(trafficPolicy: TrafficPolicy) {
            self.trafficPolicy = trafficPolicy
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicy = dictionary["TrafficPolicy"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicy") }
            self.trafficPolicy = try Route53.TrafficPolicy(dictionary: trafficPolicy)
        }
    }

    public struct GetHostedZoneCountRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct HostedZones: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hostedZone: [HostedZone]?

        public init(hostedZone: [HostedZone]? = nil) {
            self.hostedZone = hostedZone
        }

        public init(dictionary: [String: Any]) throws {
            if let hostedZone = dictionary["HostedZone"] as? [[String: Any]] {
                self.hostedZone = try hostedZone.map({ try HostedZone(dictionary: $0) })
            } else { 
                self.hostedZone = nil
            }
        }
    }

    public struct UpdateHostedZoneCommentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hostedZone: HostedZone

        public init(hostedZone: HostedZone) {
            self.hostedZone = hostedZone
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZone = dictionary["HostedZone"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HostedZone") }
            self.hostedZone = try Route53.HostedZone(dictionary: hostedZone)
        }
    }

    public struct Change: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the resource record set to create, delete, or update.
        public let resourceRecordSet: ResourceRecordSet
        /// The action to perform:    CREATE: Creates a resource record set that has the specified values.    DELETE: Deletes a existing resource record set.  To delete the resource record set that is associated with a traffic policy instance, use  DeleteTrafficPolicyInstance . Amazon Route 53 will delete the resource record set automatically. If you delete the resource record set by using ChangeResourceRecordSets, Amazon Route 53 doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though it's no longer in use.      UPSERT: If a resource record set doesn't already exist, Amazon Route 53 creates it. If a resource record set does exist, Amazon Route 53 updates it with the values in the request.   The values that you need to include in the request depend on the type of resource record set that you're creating, deleting, or updating:  Basic resource record sets (excluding alias, failover, geolocation, latency, and weighted resource record sets)     Name     Type     TTL     Failover, geolocation, latency, or weighted resource record sets (excluding alias resource record sets)     Name     Type     TTL     SetIdentifier     Alias resource record sets (including failover alias, geolocation alias, latency alias, and weighted alias resource record sets)     Name     Type     AliasTarget (includes DNSName, EvaluateTargetHealth, and HostedZoneId)    SetIdentifier (for failover, geolocation, latency, and weighted resource record sets)  
        public let action: ChangeAction

        public init(resourceRecordSet: ResourceRecordSet, action: ChangeAction) {
            self.resourceRecordSet = resourceRecordSet
            self.action = action
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceRecordSet = dictionary["ResourceRecordSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ResourceRecordSet") }
            self.resourceRecordSet = try Route53.ResourceRecordSet(dictionary: resourceRecordSet)
            guard let rawAction = dictionary["Action"] as? String, let action = ChangeAction(rawValue: rawAction) else { throw InitializableError.missingRequiredParam("Action") }
            self.action = action
        }
    }

    public struct GetChangeRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the change batch request. The value that you specify here is the value that ChangeResourceRecordSets returned in the Id element when you submitted the request.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct GetCheckerIpRangesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let checkerIpRanges: [String]

        public init(checkerIpRanges: [String]) {
            self.checkerIpRanges = checkerIpRanges
        }

        public init(dictionary: [String: Any]) throws {
            guard let checkerIpRanges = dictionary["CheckerIpRanges"] as? [String] else { throw InitializableError.missingRequiredParam("CheckerIpRanges") }
            self.checkerIpRanges = checkerIpRanges
        }
    }

    public struct GetHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the hosted zone for which you want to get a list of the name servers in the delegation set.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DeleteHostedZoneRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the hosted zone you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateReusableDelegationSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique string that identifies the request, and that allows you to retry failed CreateReusableDelegationSet requests without the risk of executing the operation twice. You must use a unique CallerReference string every time you submit a CreateReusableDelegationSet request. CallerReference can be any unique string, for example a date/time stamp.
        public let callerReference: String
        /// If you want to mark the delegation set for an existing hosted zone as reusable, the ID for that hosted zone.
        public let hostedZoneId: String?

        public init(callerReference: String, hostedZoneId: String? = nil) {
            self.callerReference = callerReference
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            guard let callerReference = dictionary["CallerReference"] as? String else { throw InitializableError.missingRequiredParam("CallerReference") }
            self.callerReference = callerReference
            self.hostedZoneId = dictionary["HostedZoneId"] as? String
        }
    }

    public struct GetHealthCheckCountResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of health checks associated with the current AWS account.
        public let healthCheckCount: Int64

        public init(healthCheckCount: Int64) {
            self.healthCheckCount = healthCheckCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let healthCheckCount = dictionary["HealthCheckCount"] as? Int64 else { throw InitializableError.missingRequiredParam("HealthCheckCount") }
            self.healthCheckCount = healthCheckCount
        }
    }

    public struct HostedZoneConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates whether this is a private hosted zone.
        public let privateZone: Bool?
        /// Any comments that you want to include about the hosted zone.
        public let comment: String?

        public init(privateZone: Bool? = nil, comment: String? = nil) {
            self.privateZone = privateZone
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            self.privateZone = dictionary["PrivateZone"] as? Bool
            self.comment = dictionary["Comment"] as? String
        }
    }

    public struct TrafficPolicySummaries: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let trafficPolicySummary: [TrafficPolicySummary]?

        public init(trafficPolicySummary: [TrafficPolicySummary]? = nil) {
            self.trafficPolicySummary = trafficPolicySummary
        }

        public init(dictionary: [String: Any]) throws {
            if let trafficPolicySummary = dictionary["TrafficPolicySummary"] as? [[String: Any]] {
                self.trafficPolicySummary = try trafficPolicySummary.map({ try TrafficPolicySummary(dictionary: $0) })
            } else { 
                self.trafficPolicySummary = nil
            }
        }
    }

    public struct CreateVPCAssociationAuthorizationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the hosted zone that you authorized associating a VPC with.
        public let hostedZoneId: String
        /// The VPC that you authorized associating with a hosted zone.
        public let vPC: VPC

        public init(hostedZoneId: String, vPC: VPC) {
            self.hostedZoneId = hostedZoneId
            self.vPC = vPC
        }

        public init(dictionary: [String: Any]) throws {
            guard let hostedZoneId = dictionary["HostedZoneId"] as? String else { throw InitializableError.missingRequiredParam("HostedZoneId") }
            self.hostedZoneId = hostedZoneId
            guard let vPC = dictionary["VPC"] as? [String: Any] else { throw InitializableError.missingRequiredParam("VPC") }
            self.vPC = try Route53.VPC(dictionary: vPC)
        }
    }

    public struct DeleteTrafficPolicyInstanceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id"]
        }
        /// The ID of the traffic policy instance that you want to delete.   When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created the traffic policy instance. 
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct TestDNSAnswerResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The protocol that Amazon Route 53 used to respond to the request, either UDP or TCP. 
        public let `protocol`: String
        /// A code that indicates whether the request is valid or not. The most common response code is NOERROR, meaning that the request is valid. If the response is not valid, Amazon Route 53 returns a response code that describes the error. For a list of possible response codes, see DNS RCODES on the IANA website. 
        public let responseCode: String
        /// A list that contains values that Amazon Route 53 returned for this resource record set.
        public let recordData: RecordData
        /// The name of the resource record set that you submitted a request for.
        public let recordName: String
        /// The type of the resource record set that you submitted a request for.
        public let recordType: RRType
        /// The Amazon Route 53 name server used to respond to the request.
        public let nameserver: String

        public init(protocol: String, responseCode: String, recordData: RecordData, recordName: String, recordType: RRType, nameserver: String) {
            self.`protocol` = `protocol`
            self.responseCode = responseCode
            self.recordData = recordData
            self.recordName = recordName
            self.recordType = recordType
            self.nameserver = nameserver
        }

        public init(dictionary: [String: Any]) throws {
            guard let `protocol` = dictionary["Protocol"] as? String else { throw InitializableError.missingRequiredParam("Protocol") }
            self.`protocol` = `protocol`
            guard let responseCode = dictionary["ResponseCode"] as? String else { throw InitializableError.missingRequiredParam("ResponseCode") }
            self.responseCode = responseCode
            guard let recordData = dictionary["RecordData"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RecordData") }
            self.recordData = try Route53.RecordData(dictionary: recordData)
            guard let recordName = dictionary["RecordName"] as? String else { throw InitializableError.missingRequiredParam("RecordName") }
            self.recordName = recordName
            guard let rawRecordType = dictionary["RecordType"] as? String, let recordType = RRType(rawValue: rawRecordType) else { throw InitializableError.missingRequiredParam("RecordType") }
            self.recordType = recordType
            guard let nameserver = dictionary["Nameserver"] as? String else { throw InitializableError.missingRequiredParam("Nameserver") }
            self.nameserver = nameserver
        }
    }

    public struct ChangeResourceRecordSetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "HostedZoneId"]
        }
        /// A complex type that contains an optional comment and the Changes element.
        public let changeBatch: ChangeBatch
        /// The ID of the hosted zone that contains the resource record sets that you want to change.
        public let hostedZoneId: String

        public init(changeBatch: ChangeBatch, hostedZoneId: String) {
            self.changeBatch = changeBatch
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeBatch = dictionary["ChangeBatch"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeBatch") }
            self.changeBatch = try Route53.ChangeBatch(dictionary: changeBatch)
            guard let hostedZoneId = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct ListTrafficPolicyInstancesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["hostedzoneid": "HostedZoneIdMarker", "trafficpolicyinstancetype": "TrafficPolicyInstanceTypeMarker", "trafficpolicyinstancename": "TrafficPolicyInstanceNameMarker", "maxitems": "MaxItems"]
        }
        /// The maximum number of traffic policy instances to be included in the response body for this request. If you have more than MaxItems traffic policy instances, the value of the IsTruncated element in the response is true, and the values of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker represent the first traffic policy instance in the next group of MaxItems traffic policy instances.
        public let maxItems: String?
        /// For the first request to ListTrafficPolicyInstances, omit this value. If the value of IsTruncated in the previous response was true, you have more traffic policy instances. To get the next group of MaxItems traffic policy instances, submit another ListTrafficPolicyInstances request. For the value of HostedZoneIdMarker, specify the value of HostedZoneIdMarker from the previous response, which is the hosted zone ID of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get.
        public let hostedZoneIdMarker: String?
        /// For the first request to ListTrafficPolicyInstances, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker is the DNS type of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get.
        public let trafficPolicyInstanceTypeMarker: RRType?
        /// For the first request to ListTrafficPolicyInstances, omit this value. If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker is the name of the first traffic policy instance in the next group of MaxItems traffic policy instances. If the value of IsTruncated in the previous response was false, there are no more traffic policy instances to get.
        public let trafficPolicyInstanceNameMarker: String?

        public init(maxItems: String? = nil, hostedZoneIdMarker: String? = nil, trafficPolicyInstanceTypeMarker: RRType? = nil, trafficPolicyInstanceNameMarker: String? = nil) {
            self.maxItems = maxItems
            self.hostedZoneIdMarker = hostedZoneIdMarker
            self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.maxItems = dictionary["Maxitems"] as? String
            self.hostedZoneIdMarker = dictionary["Hostedzoneid"] as? String
            if let trafficPolicyInstanceTypeMarker = dictionary["Trafficpolicyinstancetype"] as? String { self.trafficPolicyInstanceTypeMarker = RRType(rawValue: trafficPolicyInstanceTypeMarker) } else { self.trafficPolicyInstanceTypeMarker = nil }
            self.trafficPolicyInstanceNameMarker = dictionary["Trafficpolicyinstancename"] as? String
        }
    }

    public struct VPC: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vPCId: String?
        /// The region in which you created the VPC that you want to associate with the specified Amazon Route 53 hosted zone.
        public let vPCRegion: VPCRegion?

        public init(vPCId: String? = nil, vPCRegion: VPCRegion? = nil) {
            self.vPCId = vPCId
            self.vPCRegion = vPCRegion
        }

        public init(dictionary: [String: Any]) throws {
            self.vPCId = dictionary["VPCId"] as? String
            if let vPCRegion = dictionary["VPCRegion"] as? String { self.vPCRegion = VPCRegion(rawValue: vPCRegion) } else { self.vPCRegion = nil }
        }
    }

    public struct ListGeoLocationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["startsubdivisioncode": "StartSubdivisionCode", "startcountrycode": "StartCountryCode", "maxitems": "MaxItems", "startcontinentcode": "StartContinentCode"]
        }
        /// (Optional) The maximum number of geolocations to be included in the response body for this request. If more than MaxItems geolocations remain to be listed, then the value of the IsTruncated element in the response is true.
        public let maxItems: String?
        /// The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Amazon Route 53 has already returned a page or more of results, if IsTruncated is true, and if NextContinentCode from the previous response has a value, enter that value in StartContinentCode to return the next page of results. Include StartContinentCode only if you want to list continents. Don't include StartContinentCode when you're listing countries or countries with their subdivisions.
        public let startContinentCode: String?
        /// The code for the subdivision (for example, state or province) with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Amazon Route 53 has already returned a page or more of results, if IsTruncated is true, and if NextSubdivisionCode from the previous response has a value, enter that value in StartSubdivisionCode to return the next page of results. To list subdivisions of a country, you must include both StartCountryCode and StartSubdivisionCode.
        public let startSubdivisionCode: String?
        /// The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Amazon Route 53 has already returned a page or more of results, if IsTruncated is true, and if NextCountryCode from the previous response has a value, enter that value in StartCountryCode to return the next page of results. Amazon Route 53 uses the two-letter country codes that are specified in ISO standard 3166-1 alpha-2.
        public let startCountryCode: String?

        public init(maxItems: String? = nil, startContinentCode: String? = nil, startSubdivisionCode: String? = nil, startCountryCode: String? = nil) {
            self.maxItems = maxItems
            self.startContinentCode = startContinentCode
            self.startSubdivisionCode = startSubdivisionCode
            self.startCountryCode = startCountryCode
        }

        public init(dictionary: [String: Any]) throws {
            self.maxItems = dictionary["Maxitems"] as? String
            self.startContinentCode = dictionary["Startcontinentcode"] as? String
            self.startSubdivisionCode = dictionary["Startsubdivisioncode"] as? String
            self.startCountryCode = dictionary["Startcountrycode"] as? String
        }
    }

    public struct ErrorMessages: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let message: [String]?

        public init(message: [String]? = nil) {
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            self.message = dictionary["Message"] as? [String]
        }
    }

    public struct GetTrafficPolicyInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains settings for the traffic policy instance.
        public let trafficPolicyInstance: TrafficPolicyInstance

        public init(trafficPolicyInstance: TrafficPolicyInstance) {
            self.trafficPolicyInstance = trafficPolicyInstance
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicyInstance = dictionary["TrafficPolicyInstance"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TrafficPolicyInstance") }
            self.trafficPolicyInstance = try Route53.TrafficPolicyInstance(dictionary: trafficPolicyInstance)
        }
    }

    public struct ListTagsForResourcesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["ResourceType": "ResourceType"]
        }
        /// A complex type that contains the ResourceId element for each resource for which you want to get a list of tags.
        public let resourceIds: TagResourceIdList
        /// The type of the resources.   The resource type for health checks is healthcheck.   The resource type for hosted zones is hostedzone.  
        public let resourceType: TagResourceType

        public init(resourceIds: TagResourceIdList, resourceType: TagResourceType) {
            self.resourceIds = resourceIds
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceIds = dictionary["ResourceIds"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ResourceIds") }
            self.resourceIds = try Route53.TagResourceIdList(dictionary: resourceIds)
            guard let rawResourceType = dictionary["ResourceType"] as? String, let resourceType = TagResourceType(rawValue: rawResourceType) else { throw InitializableError.missingRequiredParam("ResourceType") }
            self.resourceType = resourceType
        }
    }

    public enum ResourceRecordSetRegion: String, CustomStringConvertible {
        case us_east_1 = "us-east-1"
        case us_east_2 = "us-east-2"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case ca_central_1 = "ca-central-1"
        case eu_west_1 = "eu-west-1"
        case eu_west_2 = "eu-west-2"
        case eu_central_1 = "eu-central-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_northeast_1 = "ap-northeast-1"
        case ap_northeast_2 = "ap-northeast-2"
        case sa_east_1 = "sa-east-1"
        case cn_north_1 = "cn-north-1"
        case ap_south_1 = "ap-south-1"
        public var description: String { return self.rawValue }
    }

    public struct CreateTrafficPolicyInstanceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
        public let trafficPolicyVersion: Int32
        /// The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.
        public let trafficPolicyId: String
        /// The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using the resource record sets that Amazon Route 53 creates for this traffic policy instance.
        public let name: String
        /// (Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.
        public let tTL: Int64
        /// The ID of the hosted zone in which you want Amazon Route 53 to create resource record sets by using the configuration in a traffic policy.
        public let hostedZoneId: String

        public init(trafficPolicyVersion: Int32, trafficPolicyId: String, name: String, tTL: Int64, hostedZoneId: String) {
            self.trafficPolicyVersion = trafficPolicyVersion
            self.trafficPolicyId = trafficPolicyId
            self.name = name
            self.tTL = tTL
            self.hostedZoneId = hostedZoneId
        }

        public init(dictionary: [String: Any]) throws {
            guard let trafficPolicyVersion = dictionary["TrafficPolicyVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("TrafficPolicyVersion") }
            self.trafficPolicyVersion = trafficPolicyVersion
            guard let trafficPolicyId = dictionary["TrafficPolicyId"] as? String else { throw InitializableError.missingRequiredParam("TrafficPolicyId") }
            self.trafficPolicyId = trafficPolicyId
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let tTL = dictionary["TTL"] as? Int64 else { throw InitializableError.missingRequiredParam("TTL") }
            self.tTL = tTL
            guard let hostedZoneId = dictionary["HostedZoneId"] as? String else { throw InitializableError.missingRequiredParam("HostedZoneId") }
            self.hostedZoneId = hostedZoneId
        }
    }

    public struct GetReusableDelegationSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains information about the reusable delegation set.
        public let delegationSet: DelegationSet

        public init(delegationSet: DelegationSet) {
            self.delegationSet = delegationSet
        }

        public init(dictionary: [String: Any]) throws {
            guard let delegationSet = dictionary["DelegationSet"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DelegationSet") }
            self.delegationSet = try Route53.DelegationSet(dictionary: delegationSet)
        }
    }

    public struct ChangeResourceRecordSetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A complex type that contains information about changes made to your hosted zone. This element contains an ID that you use when performing a GetChange action to get detailed information about the change.
        public let changeInfo: ChangeInfo

        public init(changeInfo: ChangeInfo) {
            self.changeInfo = changeInfo
        }

        public init(dictionary: [String: Any]) throws {
            guard let changeInfo = dictionary["ChangeInfo"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ChangeInfo") }
            self.changeInfo = try Route53.ChangeInfo(dictionary: changeInfo)
        }
    }

    public struct TrafficPolicies: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let trafficPolicy: [TrafficPolicy]?

        public init(trafficPolicy: [TrafficPolicy]? = nil) {
            self.trafficPolicy = trafficPolicy
        }

        public init(dictionary: [String: Any]) throws {
            if let trafficPolicy = dictionary["TrafficPolicy"] as? [[String: Any]] {
                self.trafficPolicy = try trafficPolicy.map({ try TrafficPolicy(dictionary: $0) })
            } else { 
                self.trafficPolicy = nil
            }
        }
    }

    public struct CreateTrafficPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The definition of this traffic policy in JSON format. For more information, see Traffic Policy Document Format.
        public let document: String
        /// The name of the traffic policy.
        public let name: String
        /// (Optional) Any comments that you want to include about the traffic policy.
        public let comment: String?

        public init(document: String, name: String, comment: String? = nil) {
            self.document = document
            self.name = name
            self.comment = comment
        }

        public init(dictionary: [String: Any]) throws {
            guard let document = dictionary["Document"] as? String else { throw InitializableError.missingRequiredParam("Document") }
            self.document = document
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.comment = dictionary["Comment"] as? String
        }
    }

    public struct GetTrafficPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["Id": "Id", "Version": "Version"]
        }
        /// The version number of the traffic policy that you want to get information about.
        public let version: Int32
        /// The ID of the traffic policy that you want to get information about.
        public let id: String

        public init(version: Int32, id: String) {
            self.version = version
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let version = dictionary["Version"] as? Int32 else { throw InitializableError.missingRequiredParam("Version") }
            self.version = version
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public enum ResourceRecordSetFailover: String, CustomStringConvertible {
        case primary = "PRIMARY"
        case secondary = "SECONDARY"
        public var description: String { return self.rawValue }
    }

    public enum CloudWatchRegion: String, CustomStringConvertible {
        case us_east_1 = "us-east-1"
        case us_east_2 = "us-east-2"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case ca_central_1 = "ca-central-1"
        case eu_central_1 = "eu-central-1"
        case eu_west_1 = "eu-west-1"
        case eu_west_2 = "eu-west-2"
        case ap_south_1 = "ap-south-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_northeast_1 = "ap-northeast-1"
        case ap_northeast_2 = "ap-northeast-2"
        case sa_east_1 = "sa-east-1"
        public var description: String { return self.rawValue }
    }

}