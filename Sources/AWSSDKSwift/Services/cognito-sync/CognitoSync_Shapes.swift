// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension CognitoSync {

    public struct ListDatasetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// A set of datasets.
        public let datasets: [Dataset]?
        /// Number of datasets returned.
        public let count: Int32?

        public init(nextToken: String? = nil, datasets: [Dataset]? = nil, count: Int32? = nil) {
            self.nextToken = nextToken
            self.datasets = datasets
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let datasets = dictionary["Datasets"] as? [[String: Any]] {
                self.datasets = try datasets.map({ try Dataset(dictionary: $0) })
            } else { 
                self.datasets = nil
            }
            self.count = dictionary["Count"] as? Int32
        }
    }

    public struct DescribeDatasetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName", "IdentityId": "IdentityId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String

        public init(identityPoolId: String, datasetName: String, identityId: String) {
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public struct ListIdentityPoolUsageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["nextToken": "NextToken", "maxResults": "MaxResults"]
        }
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct UpdateRecordsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of records that have been updated.
        public let records: [Record]?

        public init(records: [Record]? = nil) {
            self.records = records
        }

        public init(dictionary: [String: Any]) throws {
            if let records = dictionary["Records"] as? [[String: Any]] {
                self.records = try records.map({ try Record(dictionary: $0) })
            } else { 
                self.records = nil
            }
        }
    }

    public struct BulkPublishRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct GetBulkPublishDetailsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date/time at which the last bulk publish was initiated.
        public let bulkPublishStartTime: Date?
        /// If BulkPublishStatus is SUCCEEDED, the time the last bulk publish operation completed.
        public let bulkPublishCompleteTime: Date?
        /// Status of the last bulk publish operation, valid values are: NOT_STARTED - No bulk publish has been requested for this identity pool IN_PROGRESS - Data is being published to the configured stream SUCCEEDED - All data for the identity pool has been published to the configured stream FAILED - Some portion of the data has failed to publish, check FailureMessage for the cause.
        public let bulkPublishStatus: BulkPublishStatus?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// If BulkPublishStatus is FAILED this field will contain the error message that caused the bulk publish to fail.
        public let failureMessage: String?

        public init(bulkPublishStartTime: Date? = nil, bulkPublishCompleteTime: Date? = nil, bulkPublishStatus: BulkPublishStatus? = nil, identityPoolId: String? = nil, failureMessage: String? = nil) {
            self.bulkPublishStartTime = bulkPublishStartTime
            self.bulkPublishCompleteTime = bulkPublishCompleteTime
            self.bulkPublishStatus = bulkPublishStatus
            self.identityPoolId = identityPoolId
            self.failureMessage = failureMessage
        }

        public init(dictionary: [String: Any]) throws {
            self.bulkPublishStartTime = dictionary["BulkPublishStartTime"] as? Date
            self.bulkPublishCompleteTime = dictionary["BulkPublishCompleteTime"] as? Date
            if let bulkPublishStatus = dictionary["BulkPublishStatus"] as? String { self.bulkPublishStatus = BulkPublishStatus(rawValue: bulkPublishStatus) } else { self.bulkPublishStatus = nil }
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            self.failureMessage = dictionary["FailureMessage"] as? String
        }
    }

    public struct GetBulkPublishDetailsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct RegisterDeviceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String?

        public init(deviceId: String? = nil) {
            self.deviceId = deviceId
        }

        public init(dictionary: [String: Any]) throws {
            self.deviceId = dictionary["DeviceId"] as? String
        }
    }

    public struct ListDatasetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["nextToken": "NextToken", "maxResults": "MaxResults"]
        }
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "IdentityId": "IdentityId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?

        public init(identityId: String, identityPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct GetIdentityPoolConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool for which to return a configuration.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct GetCognitoEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// The Cognito Identity Pool ID for the request
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct SubscribeToDatasetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetCognitoEventsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Cognito Events returned from the GetCognitoEvents request
        public let events: [String: String]?

        public init(events: [String: String]? = nil) {
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            if let events = dictionary["Events"] as? [String: String] {
                self.events = events
            } else { 
                self.events = nil
            }
        }
    }

    public enum StreamingStatus: String, CustomStringConvertible {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct RegisterDeviceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "IdentityId": "IdentityId"]
        }
        /// The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
        public let platform: Platform
        /// The push token.
        public let token: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.
        public let identityPoolId: String
        /// The unique ID for this identity.
        public let identityId: String

        public init(platform: Platform, token: String, identityPoolId: String, identityId: String) {
            self.platform = platform
            self.token = token
            self.identityPoolId = identityPoolId
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawPlatform = dictionary["Platform"] as? String, let platform = Platform(rawValue: rawPlatform) else { throw InitializableError.missingRequiredParam("Platform") }
            self.platform = platform
            guard let token = dictionary["Token"] as? String else { throw InitializableError.missingRequiredParam("Token") }
            self.token = token
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public enum Platform: String, CustomStringConvertible {
        case apns = "APNS"
        case apns_sandbox = "APNS_SANDBOX"
        case gcm = "GCM"
        case adm = "ADM"
        public var description: String { return self.rawValue }
    }

    public struct SetIdentityPoolConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool to modify.
        public let identityPoolId: String
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?

        public init(identityPoolId: String, pushSync: PushSync? = nil, cognitoStreams: CognitoStreams? = nil) {
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
            self.cognitoStreams = cognitoStreams
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            if let pushSync = dictionary["PushSync"] as? [String: Any] { self.pushSync = try CognitoSync.PushSync(dictionary: pushSync) } else { self.pushSync = nil }
            if let cognitoStreams = dictionary["CognitoStreams"] as? [String: Any] { self.cognitoStreams = try CognitoSync.CognitoStreams(dictionary: cognitoStreams) } else { self.cognitoStreams = nil }
        }
    }

    public struct CognitoStreams: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the role Amazon Cognito can assume in order to publish to the stream. This role must grant access to Amazon Cognito (cognito-sync) to invoke PutRecord on your Cognito stream.
        public let roleArn: String?
        /// Status of the Cognito streams. Valid values are: ENABLED - Streaming of updates to identity pool is enabled. DISABLED - Streaming of updates to identity pool is disabled. Bulk publish will also fail if StreamingStatus is DISABLED.
        public let streamingStatus: StreamingStatus?
        /// The name of the Cognito stream to receive updates. This stream must be in the developers account and in the same region as the identity pool.
        public let streamName: String?

        public init(roleArn: String? = nil, streamingStatus: StreamingStatus? = nil, streamName: String? = nil) {
            self.roleArn = roleArn
            self.streamingStatus = streamingStatus
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
            if let streamingStatus = dictionary["StreamingStatus"] as? String { self.streamingStatus = StreamingStatus(rawValue: streamingStatus) } else { self.streamingStatus = nil }
            self.streamName = dictionary["StreamName"] as? String
        }
    }

    public struct ListRecordsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["syncSessionToken": "SyncSessionToken", "lastSyncCount": "LastSyncCount", "nextToken": "NextToken", "maxResults": "MaxResults"]
        }
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName", "IdentityId": "IdentityId"]
        }
        /// A token containing a session ID, identity ID, and expiration.
        public let syncSessionToken: String?
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// The last server sync count for this record.
        public let lastSyncCount: Int64?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The maximum number of results to be returned.
        public let maxResults: Int32?

        public init(syncSessionToken: String? = nil, datasetName: String, lastSyncCount: Int64? = nil, identityId: String, identityPoolId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.syncSessionToken = syncSessionToken
            self.datasetName = datasetName
            self.lastSyncCount = lastSyncCount
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.syncSessionToken = dictionary["SyncSessionToken"] as? String
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
            self.lastSyncCount = dictionary["LastSyncCount"] as? Int64
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DescribeDatasetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Meta data for a collection of data for an identity. An identity can have multiple datasets. A dataset can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        public init(dictionary: [String: Any]) throws {
            if let dataset = dictionary["Dataset"] as? [String: Any] { self.dataset = try CognitoSync.Dataset(dictionary: dataset) } else { self.dataset = nil }
        }
    }

    public struct UnsubscribeFromDatasetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DeviceId": "DeviceId", "IdentityId": "IdentityId", "IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName"]
        }
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String
        /// Unique ID for this identity.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.
        public let identityPoolId: String
        /// The name of the dataset from which to unsubcribe.
        public let datasetName: String

        public init(deviceId: String, identityId: String, identityPoolId: String, datasetName: String) {
            self.deviceId = deviceId
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceId = dictionary["DeviceId"] as? String else { throw InitializableError.missingRequiredParam("DeviceId") }
            self.deviceId = deviceId
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
        }
    }

    public struct PushSync: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A role configured to allow Cognito to call SNS on behalf of the developer.
        public let roleArn: String?
        /// List of SNS platform application ARNs that could be used by clients.
        public let applicationArns: [String]?

        public init(roleArn: String? = nil, applicationArns: [String]? = nil) {
            self.roleArn = roleArn
            self.applicationArns = applicationArns
        }

        public init(dictionary: [String: Any]) throws {
            self.roleArn = dictionary["RoleArn"] as? String
            self.applicationArns = dictionary["ApplicationArns"] as? [String]
        }
    }

    public struct Record: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The date on which the record was last modified.
        public let lastModifiedDate: Date?
        /// The last modified date of the client device.
        public let deviceLastModifiedDate: Date?
        /// The key for the record.
        public let key: String?
        /// The server sync count for this record.
        public let syncCount: Int64?
        /// The value for the record.
        public let value: String?
        /// The user/device that made the last change to this record.
        public let lastModifiedBy: String?

        public init(lastModifiedDate: Date? = nil, deviceLastModifiedDate: Date? = nil, key: String? = nil, syncCount: Int64? = nil, value: String? = nil, lastModifiedBy: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.key = key
            self.syncCount = syncCount
            self.value = value
            self.lastModifiedBy = lastModifiedBy
        }

        public init(dictionary: [String: Any]) throws {
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.deviceLastModifiedDate = dictionary["DeviceLastModifiedDate"] as? Date
            self.key = dictionary["Key"] as? String
            self.syncCount = dictionary["SyncCount"] as? Int64
            self.value = dictionary["Value"] as? String
            self.lastModifiedBy = dictionary["LastModifiedBy"] as? String
        }
    }

    public struct IdentityUsage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of datasets for the identity.
        public let datasetCount: Int32?
        /// Date on which the identity was last modified.
        public let lastModifiedDate: Date?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// Total data storage for this identity.
        public let dataStorage: Int64?

        public init(datasetCount: Int32? = nil, lastModifiedDate: Date? = nil, identityId: String? = nil, identityPoolId: String? = nil, dataStorage: Int64? = nil) {
            self.datasetCount = datasetCount
            self.lastModifiedDate = lastModifiedDate
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.dataStorage = dataStorage
        }

        public init(dictionary: [String: Any]) throws {
            self.datasetCount = dictionary["DatasetCount"] as? Int32
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.identityId = dictionary["IdentityId"] as? String
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            self.dataStorage = dictionary["DataStorage"] as? Int64
        }
    }

    public struct DescribeIdentityPoolUsageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(identityPoolId: String) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct Dataset: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of records in this dataset.
        public let numRecords: Int64?
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String?
        /// Date when the dataset was last modified.
        public let lastModifiedDate: Date?
        /// Date on which the dataset was created.
        public let creationDate: Date?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String?
        /// Total size in bytes of the records in this dataset.
        public let dataStorage: Int64?
        /// The device that made the last change to this dataset.
        public let lastModifiedBy: String?

        public init(numRecords: Int64? = nil, datasetName: String? = nil, lastModifiedDate: Date? = nil, creationDate: Date? = nil, identityId: String? = nil, dataStorage: Int64? = nil, lastModifiedBy: String? = nil) {
            self.numRecords = numRecords
            self.datasetName = datasetName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.identityId = identityId
            self.dataStorage = dataStorage
            self.lastModifiedBy = lastModifiedBy
        }

        public init(dictionary: [String: Any]) throws {
            self.numRecords = dictionary["NumRecords"] as? Int64
            self.datasetName = dictionary["DatasetName"] as? String
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.creationDate = dictionary["CreationDate"] as? Date
            self.identityId = dictionary["IdentityId"] as? String
            self.dataStorage = dictionary["DataStorage"] as? Int64
            self.lastModifiedBy = dictionary["LastModifiedBy"] as? String
        }
    }

    public struct SetIdentityPoolConfigurationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
        public let identityPoolId: String?
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?

        public init(identityPoolId: String? = nil, pushSync: PushSync? = nil, cognitoStreams: CognitoStreams? = nil) {
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
            self.cognitoStreams = cognitoStreams
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            if let pushSync = dictionary["PushSync"] as? [String: Any] { self.pushSync = try CognitoSync.PushSync(dictionary: pushSync) } else { self.pushSync = nil }
            if let cognitoStreams = dictionary["CognitoStreams"] as? [String: Any] { self.cognitoStreams = try CognitoSync.CognitoStreams(dictionary: cognitoStreams) } else { self.cognitoStreams = nil }
        }
    }

    public enum Operation: String, CustomStringConvertible {
        case replace = "replace"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIdentityUsageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Usage information for the identity.
        public let identityUsage: IdentityUsage?

        public init(identityUsage: IdentityUsage? = nil) {
            self.identityUsage = identityUsage
        }

        public init(dictionary: [String: Any]) throws {
            if let identityUsage = dictionary["IdentityUsage"] as? [String: Any] { self.identityUsage = try CognitoSync.IdentityUsage(dictionary: identityUsage) } else { self.identityUsage = nil }
        }
    }

    public struct GetIdentityPoolConfigurationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.
        public let identityPoolId: String?
        /// Options to apply to this identity pool for push synchronization.
        public let pushSync: PushSync?
        /// Options to apply to this identity pool for Amazon Cognito streams.
        public let cognitoStreams: CognitoStreams?

        public init(identityPoolId: String? = nil, pushSync: PushSync? = nil, cognitoStreams: CognitoStreams? = nil) {
            self.identityPoolId = identityPoolId
            self.pushSync = pushSync
            self.cognitoStreams = cognitoStreams
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            if let pushSync = dictionary["PushSync"] as? [String: Any] { self.pushSync = try CognitoSync.PushSync(dictionary: pushSync) } else { self.pushSync = nil }
            if let cognitoStreams = dictionary["CognitoStreams"] as? [String: Any] { self.cognitoStreams = try CognitoSync.CognitoStreams(dictionary: cognitoStreams) } else { self.cognitoStreams = nil }
        }
    }

    public struct ListIdentityPoolUsageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of results to be returned.
        public let maxResults: Int32?
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// Usage information for the identity pools.
        public let identityPoolUsages: [IdentityPoolUsage]?
        /// Total number of identities for the identity pool.
        public let count: Int32?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, identityPoolUsages: [IdentityPoolUsage]? = nil, count: Int32? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.identityPoolUsages = identityPoolUsages
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["MaxResults"] as? Int32
            self.nextToken = dictionary["NextToken"] as? String
            if let identityPoolUsages = dictionary["IdentityPoolUsages"] as? [[String: Any]] {
                self.identityPoolUsages = try identityPoolUsages.map({ try IdentityPoolUsage(dictionary: $0) })
            } else { 
                self.identityPoolUsages = nil
            }
            self.count = dictionary["Count"] as? Int32
        }
    }

    public struct UpdateRecordsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var headerParams: [String: String] {
            return ["x-amz-Client-Context": "ClientContext"]
        }
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName", "IdentityId": "IdentityId"]
        }
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String?
        /// The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.
        public let syncSessionToken: String
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A list of patch operations.
        public let recordPatches: [RecordPatch]?
        /// Intended to supply a device ID that will populate the lastModifiedBy field referenced in other methods. The ClientContext field is not yet implemented.
        public let clientContext: String?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String

        public init(deviceId: String? = nil, syncSessionToken: String, datasetName: String, recordPatches: [RecordPatch]? = nil, clientContext: String? = nil, identityId: String, identityPoolId: String) {
            self.deviceId = deviceId
            self.syncSessionToken = syncSessionToken
            self.datasetName = datasetName
            self.recordPatches = recordPatches
            self.clientContext = clientContext
            self.identityId = identityId
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.deviceId = dictionary["DeviceId"] as? String
            guard let syncSessionToken = dictionary["SyncSessionToken"] as? String else { throw InitializableError.missingRequiredParam("SyncSessionToken") }
            self.syncSessionToken = syncSessionToken
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
            if let recordPatches = dictionary["RecordPatches"] as? [[String: Any]] {
                self.recordPatches = try recordPatches.map({ try RecordPatch(dictionary: $0) })
            } else { 
                self.recordPatches = nil
            }
            self.clientContext = dictionary["X-amz-Client-Context"] as? String
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
        }
    }

    public struct SubscribeToDatasetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DeviceId": "DeviceId", "IdentityId": "IdentityId", "IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName"]
        }
        /// The unique ID generated for this device by Cognito.
        public let deviceId: String
        /// Unique ID for this identity.
        public let identityId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which the identity belongs.
        public let identityPoolId: String
        /// The name of the dataset to subcribe to.
        public let datasetName: String

        public init(deviceId: String, identityId: String, identityPoolId: String, datasetName: String) {
            self.deviceId = deviceId
            self.identityId = identityId
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceId = dictionary["DeviceId"] as? String else { throw InitializableError.missingRequiredParam("DeviceId") }
            self.deviceId = deviceId
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
        }
    }

    public struct IdentityPoolUsage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of sync sessions for the identity pool.
        public let syncSessionsCount: Int64?
        /// Date on which the identity pool was last modified.
        public let lastModifiedDate: Date?
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?
        /// Data storage information for the identity pool.
        public let dataStorage: Int64?

        public init(syncSessionsCount: Int64? = nil, lastModifiedDate: Date? = nil, identityPoolId: String? = nil, dataStorage: Int64? = nil) {
            self.syncSessionsCount = syncSessionsCount
            self.lastModifiedDate = lastModifiedDate
            self.identityPoolId = identityPoolId
            self.dataStorage = dataStorage
        }

        public init(dictionary: [String: Any]) throws {
            self.syncSessionsCount = dictionary["SyncSessionsCount"] as? Int64
            self.lastModifiedDate = dictionary["LastModifiedDate"] as? Date
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
            self.dataStorage = dictionary["DataStorage"] as? Int64
        }
    }

    public struct DescribeIdentityPoolUsageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the usage of the identity pool.
        public let identityPoolUsage: IdentityPoolUsage?

        public init(identityPoolUsage: IdentityPoolUsage? = nil) {
            self.identityPoolUsage = identityPoolUsage
        }

        public init(dictionary: [String: Any]) throws {
            if let identityPoolUsage = dictionary["IdentityPoolUsage"] as? [String: Any] { self.identityPoolUsage = try CognitoSync.IdentityPoolUsage(dictionary: identityPoolUsage) } else { self.identityPoolUsage = nil }
        }
    }

    public struct ListRecordsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of all records.
        public let records: [Record]?
        /// Names of merged datasets.
        public let mergedDatasetNames: [String]?
        /// A token containing a session ID, identity ID, and expiration.
        public let syncSessionToken: String?
        /// Server sync count for this dataset.
        public let datasetSyncCount: Int64?
        /// Total number of records.
        public let count: Int32?
        /// Indicates whether the dataset exists.
        public let datasetExists: Bool?
        /// A boolean value specifying whether to delete the dataset locally.
        public let datasetDeletedAfterRequestedSyncCount: Bool?
        /// A pagination token for obtaining the next page of results.
        public let nextToken: String?
        /// The user/device that made the last change to this record.
        public let lastModifiedBy: String?

        public init(records: [Record]? = nil, mergedDatasetNames: [String]? = nil, syncSessionToken: String? = nil, datasetSyncCount: Int64? = nil, count: Int32? = nil, datasetExists: Bool? = nil, datasetDeletedAfterRequestedSyncCount: Bool? = nil, nextToken: String? = nil, lastModifiedBy: String? = nil) {
            self.records = records
            self.mergedDatasetNames = mergedDatasetNames
            self.syncSessionToken = syncSessionToken
            self.datasetSyncCount = datasetSyncCount
            self.count = count
            self.datasetExists = datasetExists
            self.datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCount
            self.nextToken = nextToken
            self.lastModifiedBy = lastModifiedBy
        }

        public init(dictionary: [String: Any]) throws {
            if let records = dictionary["Records"] as? [[String: Any]] {
                self.records = try records.map({ try Record(dictionary: $0) })
            } else { 
                self.records = nil
            }
            self.mergedDatasetNames = dictionary["MergedDatasetNames"] as? [String]
            self.syncSessionToken = dictionary["SyncSessionToken"] as? String
            self.datasetSyncCount = dictionary["DatasetSyncCount"] as? Int64
            self.count = dictionary["Count"] as? Int32
            self.datasetExists = dictionary["DatasetExists"] as? Bool
            self.datasetDeletedAfterRequestedSyncCount = dictionary["DatasetDeletedAfterRequestedSyncCount"] as? Bool
            self.nextToken = dictionary["NextToken"] as? String
            self.lastModifiedBy = dictionary["LastModifiedBy"] as? String
        }
    }

    public struct DeleteDatasetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "DatasetName": "DatasetName", "IdentityId": "IdentityId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
        public let datasetName: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String

        public init(identityPoolId: String, datasetName: String, identityId: String) {
            self.identityPoolId = identityPoolId
            self.datasetName = datasetName
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let datasetName = dictionary["DatasetName"] as? String else { throw InitializableError.missingRequiredParam("DatasetName") }
            self.datasetName = datasetName
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public enum BulkPublishStatus: String, CustomStringConvertible {
        case not_started = "NOT_STARTED"
        case in_progress = "IN_PROGRESS"
        case failed = "FAILED"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDatasetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        public init(dictionary: [String: Any]) throws {
            if let dataset = dictionary["Dataset"] as? [String: Any] { self.dataset = try CognitoSync.Dataset(dictionary: dataset) } else { self.dataset = nil }
        }
    }

    public struct RecordPatch: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An operation, either replace or remove.
        public let op: Operation
        /// The last modified date of the client device.
        public let deviceLastModifiedDate: Date?
        /// The key associated with the record patch.
        public let key: String
        /// Last known server sync count for this record. Set to 0 if unknown.
        public let syncCount: Int64
        /// The value associated with the record patch.
        public let value: String?

        public init(op: Operation, deviceLastModifiedDate: Date? = nil, key: String, syncCount: Int64, value: String? = nil) {
            self.op = op
            self.deviceLastModifiedDate = deviceLastModifiedDate
            self.key = key
            self.syncCount = syncCount
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawOp = dictionary["Op"] as? String, let op = Operation(rawValue: rawOp) else { throw InitializableError.missingRequiredParam("Op") }
            self.op = op
            self.deviceLastModifiedDate = dictionary["DeviceLastModifiedDate"] as? Date
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
            guard let syncCount = dictionary["SyncCount"] as? Int64 else { throw InitializableError.missingRequiredParam("SyncCount") }
            self.syncCount = syncCount
            self.value = dictionary["Value"] as? String
        }
    }

    public struct SetCognitoEventsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId"]
        }
        /// The Cognito Identity Pool to use when configuring Cognito Events
        public let identityPoolId: String
        /// The events to configure
        public let events: [String: String]

        public init(identityPoolId: String, events: [String: String]) {
            self.identityPoolId = identityPoolId
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let events = dictionary["Events"] as? [String: String] else { throw InitializableError.missingRequiredParam("Events") }
            self.events = events
        }
    }

    public struct DescribeIdentityUsageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["IdentityPoolId": "IdentityPoolId", "IdentityId": "IdentityId"]
        }
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityId: String

        public init(identityPoolId: String, identityId: String) {
            self.identityPoolId = identityPoolId
            self.identityId = identityId
        }

        public init(dictionary: [String: Any]) throws {
            guard let identityPoolId = dictionary["IdentityPoolId"] as? String else { throw InitializableError.missingRequiredParam("IdentityPoolId") }
            self.identityPoolId = identityPoolId
            guard let identityId = dictionary["IdentityId"] as? String else { throw InitializableError.missingRequiredParam("IdentityId") }
            self.identityId = identityId
        }
    }

    public struct UnsubscribeFromDatasetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct BulkPublishResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
        public let identityPoolId: String?

        public init(identityPoolId: String? = nil) {
            self.identityPoolId = identityPoolId
        }

        public init(dictionary: [String: Any]) throws {
            self.identityPoolId = dictionary["IdentityPoolId"] as? String
        }
    }

}