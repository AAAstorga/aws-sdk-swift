// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension KMS {

    public struct ListGrantsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grants", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean)
        ]
        /// A list of grants.
        public let grants: [GrantListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(grants: [GrantListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.grants = grants
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "Grants"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct DeleteImportedKeyMaterialRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// The identifier of the CMK whose key material to delete. The CMK's Origin must be EXTERNAL. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DescribeCustomKeyStoresResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStores", required: false, type: .list), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Contains metadata about each custom key store.
        public let customKeyStores: [CustomKeyStoresListEntry]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(customKeyStores: [CustomKeyStoresListEntry]? = nil, truncated: Bool? = nil, nextMarker: String? = nil) {
            self.customKeyStores = customKeyStores
            self.truncated = truncated
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStores = "CustomKeyStores"
            case truncated = "Truncated"
            case nextMarker = "NextMarker"
        }
    }

    public struct GenerateDataKeyWithoutPlaintextRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeySpec", required: false, type: .enum), 
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "NumberOfBytes", required: false, type: .integer), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list), 
            AWSShapeMember(label: "EncryptionContext", required: false, type: .map)
        ]
        /// The length of the data encryption key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
        public let keySpec: DataKeySpec?
        /// The identifier of the customer master key (CMK) under which to generate and encrypt the data encryption key. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// The length of the data encryption key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
        public let numberOfBytes: Int32?
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// A set of key-value pairs that represents additional authenticated data. For more information, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?

        public init(keySpec: DataKeySpec? = nil, keyId: String, numberOfBytes: Int32? = nil, grantTokens: [String]? = nil, encryptionContext: [String: String]? = nil) {
            self.keySpec = keySpec
            self.keyId = keyId
            self.numberOfBytes = numberOfBytes
            self.grantTokens = grantTokens
            self.encryptionContext = encryptionContext
        }

        private enum CodingKeys: String, CodingKey {
            case keySpec = "KeySpec"
            case keyId = "KeyId"
            case numberOfBytes = "NumberOfBytes"
            case grantTokens = "GrantTokens"
            case encryptionContext = "EncryptionContext"
        }
    }

    public struct CreateGrantRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GranteePrincipal", required: true, type: .string), 
            AWSShapeMember(label: "Constraints", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RetiringPrincipal", required: false, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list), 
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// The principal that is given permission to perform the operations that the grant permits. To specify the principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the AWS General Reference.
        public let granteePrincipal: String
        /// A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let constraints: GrantConstraints?
        /// A friendly name for identifying the grant. Use this value to prevent unintended creation of duplicate grants when retrying this request. When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens obtained in this way can be used interchangeably.
        public let name: String?
        /// The principal that is given permission to retire the grant by using RetireGrant operation. To specify the principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the AWS General Reference.
        public let retiringPrincipal: String?
        /// A list of operations that the grant permits.
        public let operations: [GrantOperation]
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(granteePrincipal: String, constraints: GrantConstraints? = nil, name: String? = nil, retiringPrincipal: String? = nil, operations: [GrantOperation], grantTokens: [String]? = nil, keyId: String) {
            self.granteePrincipal = granteePrincipal
            self.constraints = constraints
            self.name = name
            self.retiringPrincipal = retiringPrincipal
            self.operations = operations
            self.grantTokens = grantTokens
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case granteePrincipal = "GranteePrincipal"
            case constraints = "Constraints"
            case name = "Name"
            case retiringPrincipal = "RetiringPrincipal"
            case operations = "Operations"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
        }
    }

    public enum KeyState: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        case pendingdeletion = "PendingDeletion"
        case pendingimport = "PendingImport"
        case unavailable = "Unavailable"
        public var description: String { return self.rawValue }
    }

    public struct ConnectCustomKeyStoreResponse: AWSShape {

    }

    public enum AlgorithmSpec: String, CustomStringConvertible, Codable {
        case rsaesPkcs1V15 = "RSAES_PKCS1_V1_5"
        case rsaesOaepSha1 = "RSAES_OAEP_SHA_1"
        case rsaesOaepSha256 = "RSAES_OAEP_SHA_256"
        public var description: String { return self.rawValue }
    }

    public struct EnableKeyRotationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct ListKeysResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Keys", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean)
        ]
        /// A list of customer master keys (CMKs).
        public let keys: [KeyListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(keys: [KeyListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.keys = keys
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case keys = "Keys"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct GetKeyRotationStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct ListResourceTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received. Do not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(keyId: String, limit: Int32? = nil, marker: String? = nil) {
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct RetireGrantRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantToken", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "GrantId", required: false, type: .string)
        ]
        /// Token that identifies the grant to be retired.
        public let grantToken: String?
        /// The Amazon Resource Name (ARN) of the CMK associated with the grant.  For example: arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab 
        public let keyId: String?
        /// Unique identifier of the grant to retire. The grant ID is returned in the response to a CreateGrant operation.   Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123  
        public let grantId: String?

        public init(grantToken: String? = nil, keyId: String? = nil, grantId: String? = nil) {
            self.grantToken = grantToken
            self.keyId = keyId
            self.grantId = grantId
        }

        private enum CodingKeys: String, CodingKey {
            case grantToken = "GrantToken"
            case keyId = "KeyId"
            case grantId = "GrantId"
        }
    }

    public enum WrappingKeySpec: String, CustomStringConvertible, Codable {
        case rsa2048 = "RSA_2048"
        public var description: String { return self.rawValue }
    }

    public struct ListKeyPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "PolicyNames", required: false, type: .list), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean)
        ]
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A list of key policy names. Currently, there is only one key policy per CMK and it is always named default.
        public let policyNames: [String]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(nextMarker: String? = nil, policyNames: [String]? = nil, truncated: Bool? = nil) {
            self.nextMarker = nextMarker
            self.policyNames = policyNames
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case policyNames = "PolicyNames"
            case truncated = "Truncated"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// A unique identifier for the CMK you are tagging. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// One or more tags. Each tag consists of a tag key and a tag value.
        public let tags: [Tag]

        public init(keyId: String, tags: [Tag]) {
            self.keyId = keyId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case tags = "Tags"
        }
    }

    public struct ListAliasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Lists only aliases that refer to the specified CMK. The value of this parameter can be the ID or Amazon Resource Name (ARN) of a CMK in the caller's account and region. You cannot use an alias name or alias ARN in this value. This parameter is optional. If you omit it, ListAliases returns all aliases in the account and region.
        public let keyId: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(keyId: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct CreateAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasName", required: true, type: .string), 
            AWSShapeMember(label: "TargetKeyId", required: true, type: .string)
        ]
        /// String that contains the display name. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/AWS" are reserved.
        public let aliasName: String
        /// Identifies the CMK for which you are creating the alias. This value cannot be an alias. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
            case targetKeyId = "TargetKeyId"
        }
    }

    public struct GrantListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Constraints", required: false, type: .structure), 
            AWSShapeMember(label: "RetiringPrincipal", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Operations", required: false, type: .list), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "IssuingAccount", required: false, type: .string), 
            AWSShapeMember(label: "GranteePrincipal", required: false, type: .string), 
            AWSShapeMember(label: "GrantId", required: false, type: .string)
        ]
        /// A list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.
        public let constraints: GrantConstraints?
        /// The principal that can retire the grant.
        public let retiringPrincipal: String?
        /// The unique identifier for the customer master key (CMK) to which the grant applies.
        public let keyId: String?
        /// The friendly name that identifies the grant. If a name was provided in the CreateGrant request, that name is returned. Otherwise this value is null.
        public let name: String?
        /// The list of operations permitted by the grant.
        public let operations: [GrantOperation]?
        /// The date and time when the grant was created.
        public let creationDate: TimeStamp?
        /// The AWS account under which the grant was issued.
        public let issuingAccount: String?
        /// The principal that receives the grant's permissions.
        public let granteePrincipal: String?
        /// The unique identifier for the grant.
        public let grantId: String?

        public init(constraints: GrantConstraints? = nil, retiringPrincipal: String? = nil, keyId: String? = nil, name: String? = nil, operations: [GrantOperation]? = nil, creationDate: TimeStamp? = nil, issuingAccount: String? = nil, granteePrincipal: String? = nil, grantId: String? = nil) {
            self.constraints = constraints
            self.retiringPrincipal = retiringPrincipal
            self.keyId = keyId
            self.name = name
            self.operations = operations
            self.creationDate = creationDate
            self.issuingAccount = issuingAccount
            self.granteePrincipal = granteePrincipal
            self.grantId = grantId
        }

        private enum CodingKeys: String, CodingKey {
            case constraints = "Constraints"
            case retiringPrincipal = "RetiringPrincipal"
            case keyId = "KeyId"
            case name = "Name"
            case operations = "Operations"
            case creationDate = "CreationDate"
            case issuingAccount = "IssuingAccount"
            case granteePrincipal = "GranteePrincipal"
            case grantId = "GrantId"
        }
    }

    public struct CreateKeyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyMetadata", required: false, type: .structure)
        ]
        /// Metadata associated with the CMK.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case keyMetadata = "KeyMetadata"
        }
    }

    public struct CustomKeyStoresListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustAnchorCertificate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string), 
            AWSShapeMember(label: "CustomKeyStoreName", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionState", required: false, type: .enum), 
            AWSShapeMember(label: "ConnectionErrorCode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudHsmClusterId", required: false, type: .string)
        ]
        /// The trust anchor certificate of the associated AWS CloudHSM cluster. When you initialize the cluster, you create this certificate and save it in the customerCA.crt file.
        public let trustAnchorCertificate: String?
        /// The date and time when the custom key store was created.
        public let creationDate: TimeStamp?
        /// A unique identifier for the custom key store.
        public let customKeyStoreId: String?
        /// The user-specified friendly name for the custom key store.
        public let customKeyStoreName: String?
        /// Indicates whether the custom key store is connected to its AWS CloudHSM cluster. You can create and use CMKs in your custom key stores only when its connection state is CONNECTED. The value is DISCONNECTED if the key store has never been connected or you use the DisconnectCustomKeyStore operation to disconnect it. If the value is CONNECTED but you are having trouble using the custom key store, make sure that its associated AWS CloudHSM cluster is active and contains at least one active HSM. A value of FAILED indicates that an attempt to connect was unsuccessful. For help resolving a connection failure, see Troubleshooting a Custom Key Store in the AWS Key Management Service Developer Guide.
        public let connectionState: ConnectionStateType?
        /// Describes the connection error. Valid values are:    CLUSTER_NOT_FOUND - AWS KMS cannot find the AWS CloudHSM cluster with the specified cluster ID.    INSUFFICIENT_CLOUDHSM_HSMS - The associated AWS CloudHSM cluster does not contain any active HSMs. To connect a custom key store to its AWS CloudHSM cluster, the cluster must contain at least one active HSM.    INVALID_CREDENTIALS - AWS KMS does not have the correct password for the kmsuser crypto user in the AWS CloudHSM cluster.    NETWORK_ERRORS - Network errors are preventing AWS KMS from connecting to the custom key store.    USER_LOCKED_OUT - The kmsuser CU account is locked out of the associated AWS CloudHSM cluster due to too many failed password attempts. Before you can connect your custom key store to its AWS CloudHSM cluster, you must change the kmsuser account password and update the password value for the custom key store.   For help with connection failures, see Troubleshooting Custom Key Stores in the AWS Key Management Service Developer Guide.
        public let connectionErrorCode: ConnectionErrorCodeType?
        /// A unique identifier for the AWS CloudHSM cluster that is associated with the custom key store.
        public let cloudHsmClusterId: String?

        public init(trustAnchorCertificate: String? = nil, creationDate: TimeStamp? = nil, customKeyStoreId: String? = nil, customKeyStoreName: String? = nil, connectionState: ConnectionStateType? = nil, connectionErrorCode: ConnectionErrorCodeType? = nil, cloudHsmClusterId: String? = nil) {
            self.trustAnchorCertificate = trustAnchorCertificate
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customKeyStoreName = customKeyStoreName
            self.connectionState = connectionState
            self.connectionErrorCode = connectionErrorCode
            self.cloudHsmClusterId = cloudHsmClusterId
        }

        private enum CodingKeys: String, CodingKey {
            case trustAnchorCertificate = "TrustAnchorCertificate"
            case creationDate = "CreationDate"
            case customKeyStoreId = "CustomKeyStoreId"
            case customKeyStoreName = "CustomKeyStoreName"
            case connectionState = "ConnectionState"
            case connectionErrorCode = "ConnectionErrorCode"
            case cloudHsmClusterId = "CloudHsmClusterId"
        }
    }

    public struct PutKeyPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BypassPolicyLockoutSafetyCheck", required: false, type: .boolean), 
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Policy", required: true, type: .string), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string)
        ]
        /// A flag to indicate whether to bypass the key policy lockout safety check.  Setting this value to true increases the risk that the CMK becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.  Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the CMK. The default value is false.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// The key policy to attach to the CMK. The key policy must meet the following criteria:   If you don't set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the PutKeyPolicy request to make a subsequent PutKeyPolicy request on the CMK. This reduces the risk that the CMK becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section of the AWS Key Management Service Developer Guide.   Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to AWS KMS. For more information, see Changes that I make are not always immediately visible in the AWS Identity and Access Management User Guide.   The key policy size limit is 32 kilobytes (32768 bytes).
        public let policy: String
        /// The name of the key policy. The only valid value is default.
        public let policyName: String

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, keyId: String, policy: String, policyName: String) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.keyId = keyId
            self.policy = policy
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
            case keyId = "KeyId"
            case policy = "Policy"
            case policyName = "PolicyName"
        }
    }

    public struct RevokeGrantRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "GrantId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key associated with the grant. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// Identifier of the grant to be revoked.
        public let grantId: String

        public init(keyId: String, grantId: String) {
            self.keyId = keyId
            self.grantId = grantId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case grantId = "GrantId"
        }
    }

    public struct GetKeyRotationStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyRotationEnabled", required: false, type: .boolean)
        ]
        /// A Boolean value that specifies whether key rotation is enabled.
        public let keyRotationEnabled: Bool?

        public init(keyRotationEnabled: Bool? = nil) {
            self.keyRotationEnabled = keyRotationEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case keyRotationEnabled = "KeyRotationEnabled"
        }
    }

    public struct EnableKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct CreateCustomKeyStoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string)
        ]
        /// A unique identifier for the new custom key store.
        public let customKeyStoreId: String?

        public init(customKeyStoreId: String? = nil) {
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct ListKeyPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100. Currently only 1 policy can be attached to a key.
        public let limit: Int32?

        public init(marker: String? = nil, keyId: String, limit: Int32? = nil) {
            self.marker = marker
            self.keyId = keyId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case keyId = "KeyId"
            case limit = "Limit"
        }
    }

    public enum KeyUsageType: String, CustomStringConvertible, Codable {
        case encryptDecrypt = "ENCRYPT_DECRYPT"
        public var description: String { return self.rawValue }
    }

    public struct GenerateRandomResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Plaintext", required: false, type: .blob)
        ]
        /// The random byte string. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let plaintext: Data?

        public init(plaintext: Data? = nil) {
            self.plaintext = plaintext
        }

        private enum CodingKeys: String, CodingKey {
            case plaintext = "Plaintext"
        }
    }

    public enum KeyManagerType: String, CustomStringConvertible, Codable {
        case aws = "AWS"
        case customer = "CUSTOMER"
        public var description: String { return self.rawValue }
    }

    public struct ReEncryptRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationKeyId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationEncryptionContext", required: false, type: .map), 
            AWSShapeMember(label: "CiphertextBlob", required: true, type: .blob), 
            AWSShapeMember(label: "SourceEncryptionContext", required: false, type: .map), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list)
        ]
        /// A unique identifier for the CMK that is used to reencrypt the data. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let destinationKeyId: String
        /// Encryption context to use when the data is reencrypted.
        public let destinationEncryptionContext: [String: String]?
        /// Ciphertext of the data to reencrypt.
        public let ciphertextBlob: Data
        /// Encryption context used to encrypt and decrypt the data specified in the CiphertextBlob parameter.
        public let sourceEncryptionContext: [String: String]?
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?

        public init(destinationKeyId: String, destinationEncryptionContext: [String: String]? = nil, ciphertextBlob: Data, sourceEncryptionContext: [String: String]? = nil, grantTokens: [String]? = nil) {
            self.destinationKeyId = destinationKeyId
            self.destinationEncryptionContext = destinationEncryptionContext
            self.ciphertextBlob = ciphertextBlob
            self.sourceEncryptionContext = sourceEncryptionContext
            self.grantTokens = grantTokens
        }

        private enum CodingKeys: String, CodingKey {
            case destinationKeyId = "DestinationKeyId"
            case destinationEncryptionContext = "DestinationEncryptionContext"
            case ciphertextBlob = "CiphertextBlob"
            case sourceEncryptionContext = "SourceEncryptionContext"
            case grantTokens = "GrantTokens"
        }
    }

    public struct DescribeCustomKeyStoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "CustomKeyStoreName", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string)
        ]
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer.
        public let limit: Int32?
        /// Gets only information about the specified custom key store. Enter the friendly name of the custom key store. By default, this operation gets information about all custom key stores in the account and region. To limit the output to a particular custom key store, you can use either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
        public let customKeyStoreName: String?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// Gets only information about the specified custom key store. Enter the key store ID. By default, this operation gets information about all custom key stores in the account and region. To limit the output to a particular custom key store, you can use either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
        public let customKeyStoreId: String?

        public init(limit: Int32? = nil, customKeyStoreName: String? = nil, marker: String? = nil, customKeyStoreId: String? = nil) {
            self.limit = limit
            self.customKeyStoreName = customKeyStoreName
            self.marker = marker
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case customKeyStoreName = "CustomKeyStoreName"
            case marker = "Marker"
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct EncryptResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CiphertextBlob", required: false, type: .blob), 
            AWSShapeMember(label: "KeyId", required: false, type: .string)
        ]
        /// The encrypted plaintext. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let ciphertextBlob: Data?
        /// The ID of the key used during encryption.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case keyId = "KeyId"
        }
    }

    public struct DecryptResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Plaintext", required: false, type: .blob), 
            AWSShapeMember(label: "KeyId", required: false, type: .string)
        ]
        /// Decrypted plaintext data. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let plaintext: Data?
        /// ARN of the key used to perform the decryption. This value is returned if no errors are encountered during the operation.
        public let keyId: String?

        public init(plaintext: Data? = nil, keyId: String? = nil) {
            self.plaintext = plaintext
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case plaintext = "Plaintext"
            case keyId = "KeyId"
        }
    }

    public struct GenerateDataKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeySpec", required: false, type: .enum), 
            AWSShapeMember(label: "EncryptionContext", required: false, type: .map), 
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list), 
            AWSShapeMember(label: "NumberOfBytes", required: false, type: .integer)
        ]
        /// The length of the data encryption key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
        public let keySpec: DataKeySpec?
        /// A set of key-value pairs that represents additional authenticated data. For more information, see Encryption Context in the AWS Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// The identifier of the CMK under which to generate and encrypt the data encryption key. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The length of the data encryption key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
        public let numberOfBytes: Int32?

        public init(keySpec: DataKeySpec? = nil, encryptionContext: [String: String]? = nil, keyId: String, grantTokens: [String]? = nil, numberOfBytes: Int32? = nil) {
            self.keySpec = keySpec
            self.encryptionContext = encryptionContext
            self.keyId = keyId
            self.grantTokens = grantTokens
            self.numberOfBytes = numberOfBytes
        }

        private enum CodingKeys: String, CodingKey {
            case keySpec = "KeySpec"
            case encryptionContext = "EncryptionContext"
            case keyId = "KeyId"
            case grantTokens = "GrantTokens"
            case numberOfBytes = "NumberOfBytes"
        }
    }

    public struct UpdateAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasName", required: true, type: .string), 
            AWSShapeMember(label: "TargetKeyId", required: true, type: .string)
        ]
        /// String that contains the name of the alias to be modified. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/aws" are reserved.
        public let aliasName: String
        /// Unique identifier of the customer master key to be mapped to the alias. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To verify that the alias is mapped to the correct CMK, use ListAliases.
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
            case targetKeyId = "TargetKeyId"
        }
    }

    public struct ScheduleKeyDeletionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "PendingWindowInDays", required: false, type: .integer)
        ]
        /// The unique identifier of the customer master key (CMK) to delete. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the customer master key (CMK). This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30.
        public let pendingWindowInDays: Int32?

        public init(keyId: String, pendingWindowInDays: Int32? = nil) {
            self.keyId = keyId
            self.pendingWindowInDays = pendingWindowInDays
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case pendingWindowInDays = "PendingWindowInDays"
        }
    }

    public struct GenerateDataKeyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CiphertextBlob", required: false, type: .blob), 
            AWSShapeMember(label: "Plaintext", required: false, type: .blob), 
            AWSShapeMember(label: "KeyId", required: false, type: .string)
        ]
        /// The encrypted data encryption key. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let ciphertextBlob: Data?
        /// The data encryption key. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded. Use this data key for local encryption and decryption, then remove it from memory as soon as possible.
        public let plaintext: Data?
        /// The identifier of the CMK under which the data encryption key was generated and encrypted.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, plaintext: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.plaintext = plaintext
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case plaintext = "Plaintext"
            case keyId = "KeyId"
        }
    }

    public struct KeyListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "KeyArn", required: false, type: .string)
        ]
        /// Unique identifier of the key.
        public let keyId: String?
        /// ARN of the key.
        public let keyArn: String?

        public init(keyId: String? = nil, keyArn: String? = nil) {
            self.keyId = keyId
            self.keyArn = keyArn
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case keyArn = "KeyArn"
        }
    }

    public struct CreateCustomKeyStoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreName", required: true, type: .string), 
            AWSShapeMember(label: "TrustAnchorCertificate", required: true, type: .string), 
            AWSShapeMember(label: "CloudHsmClusterId", required: true, type: .string), 
            AWSShapeMember(label: "KeyStorePassword", required: true, type: .string)
        ]
        /// Specifies a friendly name for the custom key store. The name must be unique in your AWS account.
        public let customKeyStoreName: String
        /// Enter the content of the trust anchor certificate for the cluster. This is the content of the customerCA.crt file that you created when you initialized the cluster.
        public let trustAnchorCertificate: String
        /// Identifies the AWS CloudHSM cluster for the custom key store. Enter the cluster ID of any active AWS CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the DescribeClusters operation.
        public let cloudHsmClusterId: String
        /// Enter the password of the  kmsuser crypto user (CU) account in the specified AWS CloudHSM cluster. AWS KMS logs into the cluster as this user to manage key material on your behalf. This parameter tells AWS KMS the kmsuser account password; it does not change the password in the AWS CloudHSM cluster.
        public let keyStorePassword: String

        public init(customKeyStoreName: String, trustAnchorCertificate: String, cloudHsmClusterId: String, keyStorePassword: String) {
            self.customKeyStoreName = customKeyStoreName
            self.trustAnchorCertificate = trustAnchorCertificate
            self.cloudHsmClusterId = cloudHsmClusterId
            self.keyStorePassword = keyStorePassword
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreName = "CustomKeyStoreName"
            case trustAnchorCertificate = "TrustAnchorCertificate"
            case cloudHsmClusterId = "CloudHsmClusterId"
            case keyStorePassword = "KeyStorePassword"
        }
    }

    public struct GetParametersForImportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "WrappingKeySpec", required: true, type: .enum), 
            AWSShapeMember(label: "WrappingAlgorithm", required: true, type: .enum)
        ]
        /// The identifier of the CMK into which you will import key material. The CMK's Origin must be EXTERNAL. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public keys are supported.
        public let wrappingKeySpec: WrappingKeySpec
        /// The algorithm you will use to encrypt the key material before importing it with ImportKeyMaterial. For more information, see Encrypt the Key Material in the AWS Key Management Service Developer Guide.
        public let wrappingAlgorithm: AlgorithmSpec

        public init(keyId: String, wrappingKeySpec: WrappingKeySpec, wrappingAlgorithm: AlgorithmSpec) {
            self.keyId = keyId
            self.wrappingKeySpec = wrappingKeySpec
            self.wrappingAlgorithm = wrappingAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case wrappingKeySpec = "WrappingKeySpec"
            case wrappingAlgorithm = "WrappingAlgorithm"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagValue", required: true, type: .string), 
            AWSShapeMember(label: "TagKey", required: true, type: .string)
        ]
        /// The value of the tag.
        public let tagValue: String
        /// The key of the tag.
        public let tagKey: String

        public init(tagValue: String, tagKey: String) {
            self.tagValue = tagValue
            self.tagKey = tagKey
        }

        private enum CodingKeys: String, CodingKey {
            case tagValue = "TagValue"
            case tagKey = "TagKey"
        }
    }

    public struct EncryptRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionContext", required: false, type: .map), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list), 
            AWSShapeMember(label: "Plaintext", required: true, type: .blob)
        ]
        /// A unique identifier for the customer master key (CMK). To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the Decrypt API or decryption will fail. For more information, see Encryption Context.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Data to be encrypted.
        public let plaintext: Data

        public init(keyId: String, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, plaintext: Data) {
            self.keyId = keyId
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.plaintext = plaintext
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case plaintext = "Plaintext"
        }
    }

    public struct ListKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
        public let limit: Int32?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(limit: Int32? = nil, marker: String? = nil) {
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ImportKeyMaterialResponse: AWSShape {

    }

    public struct ReEncryptResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CiphertextBlob", required: false, type: .blob), 
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "SourceKeyId", required: false, type: .string)
        ]
        /// The reencrypted data. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let ciphertextBlob: Data?
        /// Unique identifier of the CMK used to reencrypt the data.
        public let keyId: String?
        /// Unique identifier of the CMK used to originally encrypt the data.
        public let sourceKeyId: String?

        public init(ciphertextBlob: Data? = nil, keyId: String? = nil, sourceKeyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
            self.sourceKeyId = sourceKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case keyId = "KeyId"
            case sourceKeyId = "SourceKeyId"
        }
    }

    public struct UpdateCustomKeyStoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewCustomKeyStoreName", required: false, type: .string), 
            AWSShapeMember(label: "CustomKeyStoreId", required: true, type: .string), 
            AWSShapeMember(label: "KeyStorePassword", required: false, type: .string), 
            AWSShapeMember(label: "CloudHsmClusterId", required: false, type: .string)
        ]
        /// Changes the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the AWS account.
        public let newCustomKeyStoreName: String?
        /// Identifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String
        /// Enter the current password of the kmsuser crypto user (CU) in the AWS CloudHSM cluster that is associated with the custom key store. This parameter tells AWS KMS the current password of the kmsuser crypto user (CU). It does not set or change the password of any users in the AWS CloudHSM cluster.
        public let keyStorePassword: String?
        /// Associates the custom key store with a related AWS CloudHSM cluster.  Enter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history with the original cluster. You cannot use this parameter to associate a custom key store with a different cluster. Clusters that share a backup history have the same cluster certificate. To view the cluster certificate of a cluster, use the DescribeClusters operation.
        public let cloudHsmClusterId: String?

        public init(newCustomKeyStoreName: String? = nil, customKeyStoreId: String, keyStorePassword: String? = nil, cloudHsmClusterId: String? = nil) {
            self.newCustomKeyStoreName = newCustomKeyStoreName
            self.customKeyStoreId = customKeyStoreId
            self.keyStorePassword = keyStorePassword
            self.cloudHsmClusterId = cloudHsmClusterId
        }

        private enum CodingKeys: String, CodingKey {
            case newCustomKeyStoreName = "NewCustomKeyStoreName"
            case customKeyStoreId = "CustomKeyStoreId"
            case keyStorePassword = "KeyStorePassword"
            case cloudHsmClusterId = "CloudHsmClusterId"
        }
    }

    public enum OriginType: String, CustomStringConvertible, Codable {
        case awsKms = "AWS_KMS"
        case external = "EXTERNAL"
        case awsCloudhsm = "AWS_CLOUDHSM"
        public var description: String { return self.rawValue }
    }

    public struct CreateGrantResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantId", required: false, type: .string), 
            AWSShapeMember(label: "GrantToken", required: false, type: .string)
        ]
        /// The unique identifier for the grant. You can use the GrantId in a subsequent RetireGrant or RevokeGrant operation.
        public let grantId: String?
        /// The grant token. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantToken: String?

        public init(grantId: String? = nil, grantToken: String? = nil) {
            self.grantId = grantId
            self.grantToken = grantToken
        }

        private enum CodingKeys: String, CodingKey {
            case grantId = "GrantId"
            case grantToken = "GrantToken"
        }
    }

    public struct ScheduleKeyDeletionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "DeletionDate", required: false, type: .timestamp)
        ]
        /// The unique identifier of the customer master key (CMK) for which deletion is scheduled.
        public let keyId: String?
        /// The date and time after which AWS KMS deletes the customer master key (CMK).
        public let deletionDate: TimeStamp?

        public init(keyId: String? = nil, deletionDate: TimeStamp? = nil) {
            self.keyId = keyId
            self.deletionDate = deletionDate
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case deletionDate = "DeletionDate"
        }
    }

    public struct CancelKeyDeletionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string)
        ]
        /// The unique identifier of the master key for which deletion is canceled.
        public let keyId: String?

        public init(keyId: String? = nil) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DescribeKeyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyMetadata", required: false, type: .structure)
        ]
        /// Metadata associated with the key.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case keyMetadata = "KeyMetadata"
        }
    }

    public struct ConnectCustomKeyStoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreId", required: true, type: .string)
        ]
        /// Enter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct GetKeyPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// A key policy document in JSON format.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public enum DataKeySpec: String, CustomStringConvertible, Codable {
        case aes256 = "AES_256"
        case aes128 = "AES_128"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionStateType: String, CustomStringConvertible, Codable {
        case connected = "CONNECTED"
        case connecting = "CONNECTING"
        case failed = "FAILED"
        case disconnected = "DISCONNECTED"
        case disconnecting = "DISCONNECTING"
        public var description: String { return self.rawValue }
    }

    public enum ExpirationModelType: String, CustomStringConvertible, Codable {
        case keyMaterialExpires = "KEY_MATERIAL_EXPIRES"
        case keyMaterialDoesNotExpire = "KEY_MATERIAL_DOES_NOT_EXPIRE"
        public var description: String { return self.rawValue }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// A unique identifier for the CMK from which you are removing tags. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// One or more tag keys. Specify only the tag keys, not the tag values.
        public let tagKeys: [String]

        public init(keyId: String, tagKeys: [String]) {
            self.keyId = keyId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case tagKeys = "TagKeys"
        }
    }

    public struct DeleteCustomKeyStoreResponse: AWSShape {

    }

    public struct GrantConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionContextSubset", required: false, type: .map), 
            AWSShapeMember(label: "EncryptionContextEquals", required: false, type: .map)
        ]
        /// A list of key-value pairs, all of which must be present in the encryption context of certain subsequent operations that the grant allows. When certain subsequent operations allowed by the grant include encryption context that matches this list or is a superset of this list, the grant allows the operation. Otherwise, the grant does not allow the operation.
        public let encryptionContextSubset: [String: String]?
        /// A list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows. When certain subsequent operations allowed by the grant include encryption context that matches this list, the grant allows the operation. Otherwise, the grant does not allow the operation.
        public let encryptionContextEquals: [String: String]?

        public init(encryptionContextSubset: [String: String]? = nil, encryptionContextEquals: [String: String]? = nil) {
            self.encryptionContextSubset = encryptionContextSubset
            self.encryptionContextEquals = encryptionContextEquals
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionContextSubset = "EncryptionContextSubset"
            case encryptionContextEquals = "EncryptionContextEquals"
        }
    }

    public struct ImportKeyMaterialRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "ImportToken", required: true, type: .blob), 
            AWSShapeMember(label: "ExpirationModel", required: false, type: .enum), 
            AWSShapeMember(label: "EncryptedKeyMaterial", required: true, type: .blob)
        ]
        /// The time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. You must omit this parameter when the ExpirationModel parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE. Otherwise it is required.
        public let validTo: TimeStamp?
        /// The identifier of the CMK to import the key material into. The CMK's Origin must be EXTERNAL. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// The import token that you received in the response to a previous GetParametersForImport request. It must be from the same response that contained the public key that you used to encrypt the key material.
        public let importToken: Data
        /// Specifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES, in which case you must include the ValidTo parameter. When this parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE, you must omit the ValidTo parameter.
        public let expirationModel: ExpirationModelType?
        /// The encrypted key material to import. It must be encrypted with the public key that you received in the response to a previous GetParametersForImport request, using the wrapping algorithm that you specified in that request.
        public let encryptedKeyMaterial: Data

        public init(validTo: TimeStamp? = nil, keyId: String, importToken: Data, expirationModel: ExpirationModelType? = nil, encryptedKeyMaterial: Data) {
            self.validTo = validTo
            self.keyId = keyId
            self.importToken = importToken
            self.expirationModel = expirationModel
            self.encryptedKeyMaterial = encryptedKeyMaterial
        }

        private enum CodingKeys: String, CodingKey {
            case validTo = "ValidTo"
            case keyId = "KeyId"
            case importToken = "ImportToken"
            case expirationModel = "ExpirationModel"
            case encryptedKeyMaterial = "EncryptedKeyMaterial"
        }
    }

    public struct DeleteAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasName", required: true, type: .string)
        ]
        /// The alias to be deleted. The name must start with the word "alias" followed by a forward slash (alias/). Aliases that begin with "alias/aws" are reserved.
        public let aliasName: String

        public init(aliasName: String) {
            self.aliasName = aliasName
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
        }
    }

    public struct ListResourceTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean)
        ]
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request. Do not assume or infer any information from this value.
        public let nextMarker: String?
        /// A list of tags. Each tag consists of a tag key and a tag value.
        public let tags: [Tag]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(nextMarker: String? = nil, tags: [Tag]? = nil, truncated: Bool? = nil) {
            self.nextMarker = nextMarker
            self.tags = tags
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case tags = "Tags"
            case truncated = "Truncated"
        }
    }

    public struct ListRetirableGrantsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "RetiringPrincipal", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// The retiring principal for which to list grants. To specify the retiring principal, use the Amazon Resource Name (ARN) of an AWS principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax for specifying a principal, see AWS Identity and Access Management (IAM) in the Example ARNs section of the Amazon Web Services General Reference.
        public let retiringPrincipal: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?

        public init(marker: String? = nil, retiringPrincipal: String, limit: Int32? = nil) {
            self.marker = marker
            self.retiringPrincipal = retiringPrincipal
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case retiringPrincipal = "RetiringPrincipal"
            case limit = "Limit"
        }
    }

    public struct DisconnectCustomKeyStoreResponse: AWSShape {

    }

    public struct DisableKeyRotationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public enum ConnectionErrorCodeType: String, CustomStringConvertible, Codable {
        case invalidCredentials = "INVALID_CREDENTIALS"
        case clusterNotFound = "CLUSTER_NOT_FOUND"
        case networkErrors = "NETWORK_ERRORS"
        case insufficientCloudhsmHsms = "INSUFFICIENT_CLOUDHSM_HSMS"
        case userLockedOut = "USER_LOCKED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct GenerateDataKeyWithoutPlaintextResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CiphertextBlob", required: false, type: .blob), 
            AWSShapeMember(label: "KeyId", required: false, type: .string)
        ]
        /// The encrypted data encryption key. When you use the HTTP API or the AWS CLI, the value is Base64-encdoded. Otherwise, it is not encoded.
        public let ciphertextBlob: Data?
        /// The identifier of the CMK under which the data encryption key was generated and encrypted.
        public let keyId: String?

        public init(ciphertextBlob: Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case keyId = "KeyId"
        }
    }

    public struct CancelKeyDeletionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// The unique identifier for the customer master key (CMK) for which to cancel deletion. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct AliasListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetKeyId", required: false, type: .string), 
            AWSShapeMember(label: "AliasName", required: false, type: .string), 
            AWSShapeMember(label: "AliasArn", required: false, type: .string)
        ]
        /// String that contains the key identifier referred to by the alias.
        public let targetKeyId: String?
        /// String that contains the alias.
        public let aliasName: String?
        /// String that contains the key ARN.
        public let aliasArn: String?

        public init(targetKeyId: String? = nil, aliasName: String? = nil, aliasArn: String? = nil) {
            self.targetKeyId = targetKeyId
            self.aliasName = aliasName
            self.aliasArn = aliasArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetKeyId = "TargetKeyId"
            case aliasName = "AliasName"
            case aliasArn = "AliasArn"
        }
    }

    public struct KeyMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyUsage", required: false, type: .enum), 
            AWSShapeMember(label: "ValidTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ExpirationModel", required: false, type: .enum), 
            AWSShapeMember(label: "KeyManager", required: false, type: .enum), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CloudHsmClusterId", required: false, type: .string), 
            AWSShapeMember(label: "KeyState", required: false, type: .enum), 
            AWSShapeMember(label: "DeletionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "AWSAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Origin", required: false, type: .enum), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// The cryptographic operations for which you can use the CMK. Currently the only allowed value is ENCRYPT_DECRYPT, which means you can use the CMK for the Encrypt and Decrypt operations.
        public let keyUsage: KeyUsageType?
        /// The time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. This value is present only for CMKs whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
        public let validTo: TimeStamp?
        /// A unique identifier for the custom key store that contains the CMK. This value is present only when the CMK is created in a custom key store.
        public let customKeyStoreId: String?
        /// The description of the CMK.
        public let description: String?
        /// Specifies whether the CMK is enabled. When KeyState is Enabled this value is true, otherwise it is false.
        public let enabled: Bool?
        /// Specifies whether the CMK's key material expires. This value is present only when Origin is EXTERNAL, otherwise this value is omitted.
        public let expirationModel: ExpirationModelType?
        /// The CMK's manager. CMKs are either customer-managed or AWS-managed. For more information about the difference, see Customer Master Keys in the AWS Key Management Service Developer Guide.
        public let keyManager: KeyManagerType?
        /// The date and time when the CMK was created.
        public let creationDate: TimeStamp?
        /// The cluster ID of the AWS CloudHSM cluster that contains the key material for the CMK. When you create a CMK in a custom key store, AWS KMS creates the key material for the CMK in the associated AWS CloudHSM cluster. This value is present only when the CMK is created in a custom key store.
        public let cloudHsmClusterId: String?
        /// The state of the CMK. For more information about how key state affects the use of a CMK, see How Key State Affects the Use of a Customer Master Key in the AWS Key Management Service Developer Guide.
        public let keyState: KeyState?
        /// The date and time after which AWS KMS deletes the CMK. This value is present only when KeyState is PendingDeletion.
        public let deletionDate: TimeStamp?
        /// The twelve-digit account ID of the AWS account that owns the CMK.
        public let aWSAccountId: String?
        /// The source of the CMK's key material. When this value is AWS_KMS, AWS KMS created the key material. When this value is EXTERNAL, the key material was imported from your existing key management infrastructure or the CMK lacks key material. When this value is AWS_CLOUDHSM, the key material was created in the AWS CloudHSM cluster associated with a custom key store.
        public let origin: OriginType?
        /// The Amazon Resource Name (ARN) of the CMK. For examples, see AWS Key Management Service (AWS KMS) in the Example ARNs section of the AWS General Reference.
        public let arn: String?
        /// The globally unique identifier for the CMK.
        public let keyId: String

        public init(keyUsage: KeyUsageType? = nil, validTo: TimeStamp? = nil, customKeyStoreId: String? = nil, description: String? = nil, enabled: Bool? = nil, expirationModel: ExpirationModelType? = nil, keyManager: KeyManagerType? = nil, creationDate: TimeStamp? = nil, cloudHsmClusterId: String? = nil, keyState: KeyState? = nil, deletionDate: TimeStamp? = nil, aWSAccountId: String? = nil, origin: OriginType? = nil, arn: String? = nil, keyId: String) {
            self.keyUsage = keyUsage
            self.validTo = validTo
            self.customKeyStoreId = customKeyStoreId
            self.description = description
            self.enabled = enabled
            self.expirationModel = expirationModel
            self.keyManager = keyManager
            self.creationDate = creationDate
            self.cloudHsmClusterId = cloudHsmClusterId
            self.keyState = keyState
            self.deletionDate = deletionDate
            self.aWSAccountId = aWSAccountId
            self.origin = origin
            self.arn = arn
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyUsage = "KeyUsage"
            case validTo = "ValidTo"
            case customKeyStoreId = "CustomKeyStoreId"
            case description = "Description"
            case enabled = "Enabled"
            case expirationModel = "ExpirationModel"
            case keyManager = "KeyManager"
            case creationDate = "CreationDate"
            case cloudHsmClusterId = "CloudHsmClusterId"
            case keyState = "KeyState"
            case deletionDate = "DeletionDate"
            case aWSAccountId = "AWSAccountId"
            case origin = "Origin"
            case arn = "Arn"
            case keyId = "KeyId"
        }
    }

    public struct DisconnectCustomKeyStoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreId", required: true, type: .string)
        ]
        /// Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct ListGrantsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, AWS KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int32?

        public init(keyId: String, marker: String? = nil, limit: Int32? = nil) {
            self.keyId = keyId
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct DeleteCustomKeyStoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreId", required: true, type: .string)
        ]
        /// Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct GetKeyPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// Specifies the name of the key policy. The only valid name is default. To get the names of key policies, use ListKeyPolicies.
        public let policyName: String

        public init(keyId: String, policyName: String) {
            self.keyId = keyId
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case policyName = "PolicyName"
        }
    }

    public struct DecryptRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GrantTokens", required: false, type: .list), 
            AWSShapeMember(label: "CiphertextBlob", required: true, type: .blob), 
            AWSShapeMember(label: "EncryptionContext", required: false, type: .map)
        ]
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Ciphertext to be decrypted. The blob includes metadata.
        public let ciphertextBlob: Data
        /// The encryption context. If this was specified in the Encrypt function, it must be specified here or the decryption operation will fail. For more information, see Encryption Context.
        public let encryptionContext: [String: String]?

        public init(grantTokens: [String]? = nil, ciphertextBlob: Data, encryptionContext: [String: String]? = nil) {
            self.grantTokens = grantTokens
            self.ciphertextBlob = ciphertextBlob
            self.encryptionContext = encryptionContext
        }

        private enum CodingKeys: String, CodingKey {
            case grantTokens = "GrantTokens"
            case ciphertextBlob = "CiphertextBlob"
            case encryptionContext = "EncryptionContext"
        }
    }

    public struct DisableKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DescribeKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "GrantTokens", required: false, type: .list)
        ]
        /// Describes the specified customer master key (CMK).  If you specify a predefined AWS alias (an AWS alias with no key ID), KMS associates the alias with an AWS managed CMK and returns its KeyId and Arn in the response. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// A list of grant tokens. For more information, see Grant Tokens in the AWS Key Management Service Developer Guide.
        public let grantTokens: [String]?

        public init(keyId: String, grantTokens: [String]? = nil) {
            self.keyId = keyId
            self.grantTokens = grantTokens
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case grantTokens = "GrantTokens"
        }
    }

    public struct GetParametersForImportResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: false, type: .string), 
            AWSShapeMember(label: "ParametersValidTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "PublicKey", required: false, type: .blob), 
            AWSShapeMember(label: "ImportToken", required: false, type: .blob)
        ]
        /// The identifier of the CMK to use in a subsequent ImportKeyMaterial request. This is the same CMK specified in the GetParametersForImport request.
        public let keyId: String?
        /// The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an ImportKeyMaterial request and you must send another GetParametersForImport request to get new ones.
        public let parametersValidTo: TimeStamp?
        /// The public key to use to encrypt the key material before importing it with ImportKeyMaterial.
        public let publicKey: Data?
        /// The import token to send in a subsequent ImportKeyMaterial request.
        public let importToken: Data?

        public init(keyId: String? = nil, parametersValidTo: TimeStamp? = nil, publicKey: Data? = nil, importToken: Data? = nil) {
            self.keyId = keyId
            self.parametersValidTo = parametersValidTo
            self.publicKey = publicKey
            self.importToken = importToken
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case parametersValidTo = "ParametersValidTo"
            case publicKey = "PublicKey"
            case importToken = "ImportToken"
        }
    }

    public struct GenerateRandomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfBytes", required: false, type: .integer)
        ]
        /// Generates the random byte string in the AWS CloudHSM cluster that is associated with the specified custom key store. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String?
        /// The length of the byte string.
        public let numberOfBytes: Int32?

        public init(customKeyStoreId: String? = nil, numberOfBytes: Int32? = nil) {
            self.customKeyStoreId = customKeyStoreId
            self.numberOfBytes = numberOfBytes
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
            case numberOfBytes = "NumberOfBytes"
        }
    }

    public struct UpdateKeyDescriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// A unique identifier for the customer master key (CMK). Specify the key ID or the Amazon Resource Name (ARN) of the CMK. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
        public let keyId: String
        /// New description for the CMK.
        public let description: String

        public init(keyId: String, description: String) {
            self.keyId = keyId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case description = "Description"
        }
    }

    public struct UpdateCustomKeyStoreResponse: AWSShape {

    }

    public enum GrantOperation: String, CustomStringConvertible, Codable {
        case decrypt = "Decrypt"
        case encrypt = "Encrypt"
        case generatedatakey = "GenerateDataKey"
        case generatedatakeywithoutplaintext = "GenerateDataKeyWithoutPlaintext"
        case reencryptfrom = "ReEncryptFrom"
        case reencryptto = "ReEncryptTo"
        case creategrant = "CreateGrant"
        case retiregrant = "RetireGrant"
        case describekey = "DescribeKey"
        public var description: String { return self.rawValue }
    }

    public struct ListAliasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .list), 
            AWSShapeMember(label: "Truncated", required: false, type: .boolean), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// A list of aliases.
        public let aliases: [AliasListEntry]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in this response to the Marker parameter in a subsequent request.
        public let truncated: Bool?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?

        public init(aliases: [AliasListEntry]? = nil, truncated: Bool? = nil, nextMarker: String? = nil) {
            self.aliases = aliases
            self.truncated = truncated
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case truncated = "Truncated"
            case nextMarker = "NextMarker"
        }
    }

    public struct CreateKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KeyUsage", required: false, type: .enum), 
            AWSShapeMember(label: "CustomKeyStoreId", required: false, type: .string), 
            AWSShapeMember(label: "Origin", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "BypassPolicyLockoutSafetyCheck", required: false, type: .boolean), 
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// A description of the CMK. Use a description that helps you decide whether the CMK is appropriate for a task.
        public let description: String?
        /// The intended use of the CMK. You can use CMKs only for symmetric encryption and decryption.
        public let keyUsage: KeyUsageType?
        /// Creates the CMK in the specified custom key store and the key material in its associated AWS CloudHSM cluster. To create a CMK in a custom key store, you must also specify the Origin parameter with a value of AWS_CLOUDHSM. The AWS CloudHSM cluster that is associated with the custom key store must have at least two active HSMs, each in a different Availability Zone in the Region. To find the ID of a custom key store, use the DescribeCustomKeyStores operation. The response includes the custom key store ID and the ID of the AWS CloudHSM cluster. This operation is part of the Custom Key Store feature feature in AWS KMS, which combines the convenience and extensive integration of AWS KMS with the isolation and control of a single-tenant key store.
        public let customKeyStoreId: String?
        /// The source of the CMK's key material. You cannot change the origin after you create the CMK. The default is AWS_KMS, which means AWS KMS creates the key material in its own key store. When the parameter value is EXTERNAL, AWS KMS creates a CMK without key material so that you can import key material from your existing key management infrastructure. For more information about importing key material into AWS KMS, see Importing Key Material in the AWS Key Management Service Developer Guide. When the parameter value is AWS_CLOUDHSM, AWS KMS creates the CMK in a AWS KMS custom key store and creates its key material in the associated AWS CloudHSM cluster. You must also use the CustomKeyStoreId parameter to identify the custom key store.
        public let origin: OriginType?
        /// One or more tags. Each tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings. Use this parameter to tag the CMK when it is created. Alternately, you can omit this parameter and instead tag the CMK after it is created using TagResource.
        public let tags: [Tag]?
        /// A flag to indicate whether to bypass the key policy lockout safety check.  Setting this value to true increases the risk that the CMK becomes unmanageable. Do not set this value to true indiscriminately. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide.  Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the CMK. The default value is false.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// The key policy to attach to the CMK. If you provide a key policy, it must meet the following criteria:   If you don't set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the CreateKey request to make a subsequent PutKeyPolicy request on the CMK. This reduces the risk that the CMK becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section of the AWS Key Management Service Developer Guide.   Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to AWS KMS. For more information, see Changes that I make are not always immediately visible in the AWS Identity and Access Management User Guide.   If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK. For more information, see Default Key Policy in the AWS Key Management Service Developer Guide. The key policy size limit is 32 kilobytes (32768 bytes).
        public let policy: String?

        public init(description: String? = nil, keyUsage: KeyUsageType? = nil, customKeyStoreId: String? = nil, origin: OriginType? = nil, tags: [Tag]? = nil, bypassPolicyLockoutSafetyCheck: Bool? = nil, policy: String? = nil) {
            self.description = description
            self.keyUsage = keyUsage
            self.customKeyStoreId = customKeyStoreId
            self.origin = origin
            self.tags = tags
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case keyUsage = "KeyUsage"
            case customKeyStoreId = "CustomKeyStoreId"
            case origin = "Origin"
            case tags = "Tags"
            case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
            case policy = "Policy"
        }
    }

}