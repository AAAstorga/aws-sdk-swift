// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Datapipeline {

    public struct PipelineObject: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the object.
        public let id: String
        /// The name of the object.
        public let name: String
        /// Key-value pairs that define the properties of the object.
        public let fields: [Field]

        public init(id: String, name: String, fields: [Field]) {
            self.id = id
            self.name = name
            self.fields = fields
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let fields = dictionary["fields"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("fields") }
            self.fields = try fields.map({ try Field(dictionary: $0) })
        }
    }

    public struct DescribePipelinesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IDs of the pipelines to describe. You can pass as many as 25 identifiers in a single call. To obtain pipeline IDs, call ListPipelines.
        public let pipelineIds: [String]

        public init(pipelineIds: [String]) {
            self.pipelineIds = pipelineIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineIds = dictionary["pipelineIds"] as? [String] else { throw InitializableError.missingRequiredParam("pipelineIds") }
            self.pipelineIds = pipelineIds
        }
    }

    public struct RemoveTagsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the pipeline.
        public let pipelineId: String
        /// The keys of the tags to remove.
        public let tagKeys: [String]

        public init(pipelineId: String, tagKeys: [String]) {
            self.pipelineId = pipelineId
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            guard let tagKeys = dictionary["tagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("tagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct PutPipelineDefinitionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether there were validation errors, and the pipeline definition is stored but cannot be activated until you correct the pipeline and call PutPipelineDefinition to commit the corrected pipeline.
        public let errored: Bool
        /// The validation errors that are associated with the objects defined in pipelineObjects.
        public let validationErrors: [ValidationError]?
        /// The validation warnings that are associated with the objects defined in pipelineObjects.
        public let validationWarnings: [ValidationWarning]?

        public init(errored: Bool, validationErrors: [ValidationError]? = nil, validationWarnings: [ValidationWarning]? = nil) {
            self.errored = errored
            self.validationErrors = validationErrors
            self.validationWarnings = validationWarnings
        }

        public init(dictionary: [String: Any]) throws {
            guard let errored = dictionary["errored"] as? Bool else { throw InitializableError.missingRequiredParam("errored") }
            self.errored = errored
            if let validationErrors = dictionary["validationErrors"] as? [[String: Any]] {
                self.validationErrors = try validationErrors.map({ try ValidationError(dictionary: $0) })
            } else { 
                self.validationErrors = nil
            }
            if let validationWarnings = dictionary["validationWarnings"] as? [[String: Any]] {
                self.validationWarnings = try validationWarnings.map({ try ValidationWarning(dictionary: $0) })
            } else { 
                self.validationWarnings = nil
            }
        }
    }

    public struct ParameterValue: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the parameter value.
        public let id: String
        /// The field value, expressed as a String.
        public let stringValue: String

        public init(id: String, stringValue: String) {
            self.id = id
            self.stringValue = stringValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let stringValue = dictionary["stringValue"] as? String else { throw InitializableError.missingRequiredParam("stringValue") }
            self.stringValue = stringValue
        }
    }

    public struct TaskObject: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the pipeline that provided the task.
        public let pipelineId: String?
        /// Connection information for the location where the task runner will publish the output of the task.
        public let objects: [String: PipelineObject]?
        /// An internal identifier for the task. This ID is passed to the SetTaskStatus and ReportTaskProgress actions.
        public let taskId: String?
        /// The ID of the pipeline task attempt object. AWS Data Pipeline uses this value to track how many times a task is attempted.
        public let attemptId: String?

        public init(pipelineId: String? = nil, objects: [String: PipelineObject]? = nil, taskId: String? = nil, attemptId: String? = nil) {
            self.pipelineId = pipelineId
            self.objects = objects
            self.taskId = taskId
            self.attemptId = attemptId
        }

        public init(dictionary: [String: Any]) throws {
            self.pipelineId = dictionary["pipelineId"] as? String
            if let objects = dictionary["objects"] as? [String: Any] {
                var objectsDict: [String: PipelineObject] = [:]
                for (key, value) in objects {
                    guard let pipelineObjectDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    objectsDict[key] = try PipelineObject(dictionary: pipelineObjectDict)
                }
                self.objects = objectsDict
            } else { 
                self.objects = nil
            }
            self.taskId = dictionary["taskId"] as? String
            self.attemptId = dictionary["attemptId"] as? String
        }
    }

    public struct DescribeObjectsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call DescribeObjects with the marker value from the previous call to retrieve the next set of results.
        public let marker: String?
        /// The ID of the pipeline that contains the object definitions.
        public let pipelineId: String
        /// Indicates whether any expressions in the object should be evaluated when the object descriptions are returned.
        public let evaluateExpressions: Bool?
        /// The IDs of the pipeline objects that contain the definitions to be described. You can pass as many as 25 identifiers in a single call to DescribeObjects.
        public let objectIds: [String]

        public init(marker: String? = nil, pipelineId: String, evaluateExpressions: Bool? = nil, objectIds: [String]) {
            self.marker = marker
            self.pipelineId = pipelineId
            self.evaluateExpressions = evaluateExpressions
            self.objectIds = objectIds
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["marker"] as? String
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            self.evaluateExpressions = dictionary["evaluateExpressions"] as? Bool
            guard let objectIds = dictionary["objectIds"] as? [String] else { throw InitializableError.missingRequiredParam("objectIds") }
            self.objectIds = objectIds
        }
    }

    public struct EvaluateExpressionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The evaluated expression.
        public let evaluatedExpression: String

        public init(evaluatedExpression: String) {
            self.evaluatedExpression = evaluatedExpression
        }

        public init(dictionary: [String: Any]) throws {
            guard let evaluatedExpression = dictionary["evaluatedExpression"] as? String else { throw InitializableError.missingRequiredParam("evaluatedExpression") }
            self.evaluatedExpression = evaluatedExpression
        }
    }

    public struct PollForTaskOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The information needed to complete the task that is being assigned to the task runner. One of the fields returned in this object is taskId, which contains an identifier for the task being assigned. The calling task runner uses taskId in subsequent calls to ReportTaskProgress and SetTaskStatus.
        public let taskObject: TaskObject?

        public init(taskObject: TaskObject? = nil) {
            self.taskObject = taskObject
        }

        public init(dictionary: [String: Any]) throws {
            if let taskObject = dictionary["taskObject"] as? [String: Any] { self.taskObject = try Datapipeline.TaskObject(dictionary: taskObject) } else { self.taskObject = nil }
        }
    }

    public struct PipelineDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of read-only fields that contain metadata about the pipeline: @userId, @accountId, and @pipelineState.
        public let fields: [Field]
        /// The name of the pipeline.
        public let name: String
        /// The pipeline identifier that was assigned by AWS Data Pipeline. This is a string of the form df-297EG78HU43EEXAMPLE.
        public let pipelineId: String
        /// Description of the pipeline.
        public let description: String?
        /// A list of tags to associated with a pipeline. Tags let you control access to pipelines. For more information, see Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        public let tags: [Tag]?

        public init(fields: [Field], name: String, pipelineId: String, description: String? = nil, tags: [Tag]? = nil) {
            self.fields = fields
            self.name = name
            self.pipelineId = pipelineId
            self.description = description
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let fields = dictionary["fields"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("fields") }
            self.fields = try fields.map({ try Field(dictionary: $0) })
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            self.description = dictionary["description"] as? String
            if let tags = dictionary["tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct ValidatePipelineDefinitionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The parameter values used with the pipeline.
        public let parameterValues: [ParameterValue]?
        /// The ID of the pipeline.
        public let pipelineId: String
        /// The objects that define the pipeline changes to validate against the pipeline.
        public let pipelineObjects: [PipelineObject]
        /// The parameter objects used with the pipeline.
        public let parameterObjects: [ParameterObject]?

        public init(parameterValues: [ParameterValue]? = nil, pipelineId: String, pipelineObjects: [PipelineObject], parameterObjects: [ParameterObject]? = nil) {
            self.parameterValues = parameterValues
            self.pipelineId = pipelineId
            self.pipelineObjects = pipelineObjects
            self.parameterObjects = parameterObjects
        }

        public init(dictionary: [String: Any]) throws {
            if let parameterValues = dictionary["parameterValues"] as? [[String: Any]] {
                self.parameterValues = try parameterValues.map({ try ParameterValue(dictionary: $0) })
            } else { 
                self.parameterValues = nil
            }
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            guard let pipelineObjects = dictionary["pipelineObjects"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("pipelineObjects") }
            self.pipelineObjects = try pipelineObjects.map({ try PipelineObject(dictionary: $0) })
            if let parameterObjects = dictionary["parameterObjects"] as? [[String: Any]] {
                self.parameterObjects = try parameterObjects.map({ try ParameterObject(dictionary: $0) })
            } else { 
                self.parameterObjects = nil
            }
        }
    }

    public struct ValidatePipelineDefinitionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether there were validation errors.
        public let errored: Bool
        /// Any validation errors that were found.
        public let validationErrors: [ValidationError]?
        /// Any validation warnings that were found.
        public let validationWarnings: [ValidationWarning]?

        public init(errored: Bool, validationErrors: [ValidationError]? = nil, validationWarnings: [ValidationWarning]? = nil) {
            self.errored = errored
            self.validationErrors = validationErrors
            self.validationWarnings = validationWarnings
        }

        public init(dictionary: [String: Any]) throws {
            guard let errored = dictionary["errored"] as? Bool else { throw InitializableError.missingRequiredParam("errored") }
            self.errored = errored
            if let validationErrors = dictionary["validationErrors"] as? [[String: Any]] {
                self.validationErrors = try validationErrors.map({ try ValidationError(dictionary: $0) })
            } else { 
                self.validationErrors = nil
            }
            if let validationWarnings = dictionary["validationWarnings"] as? [[String: Any]] {
                self.validationWarnings = try validationWarnings.map({ try ValidationWarning(dictionary: $0) })
            } else { 
                self.validationWarnings = nil
            }
        }
    }

    public struct ActivatePipelineInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of parameter values to pass to the pipeline at activation.
        public let parameterValues: [ParameterValue]?
        /// The ID of the pipeline.
        public let pipelineId: String
        /// The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.
        public let startTimestamp: Date?

        public init(parameterValues: [ParameterValue]? = nil, pipelineId: String, startTimestamp: Date? = nil) {
            self.parameterValues = parameterValues
            self.pipelineId = pipelineId
            self.startTimestamp = startTimestamp
        }

        public init(dictionary: [String: Any]) throws {
            if let parameterValues = dictionary["parameterValues"] as? [[String: Any]] {
                self.parameterValues = try parameterValues.map({ try ParameterValue(dictionary: $0) })
            } else { 
                self.parameterValues = nil
            }
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            self.startTimestamp = dictionary["startTimestamp"] as? Date
        }
    }

    public struct ParameterAttribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The field identifier.
        public let key: String
        /// The field value, expressed as a String.
        public let stringValue: String

        public init(key: String, stringValue: String) {
            self.key = key
            self.stringValue = stringValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let stringValue = dictionary["stringValue"] as? String else { throw InitializableError.missingRequiredParam("stringValue") }
            self.stringValue = stringValue
        }
    }

    public struct ReportTaskProgressOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If true, the calling task runner should cancel processing of the task. The task runner does not need to call SetTaskStatus for canceled tasks.
        public let canceled: Bool

        public init(canceled: Bool) {
            self.canceled = canceled
        }

        public init(dictionary: [String: Any]) throws {
            guard let canceled = dictionary["canceled"] as? Bool else { throw InitializableError.missingRequiredParam("canceled") }
            self.canceled = canceled
        }
    }

    public struct Operator: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The logical operation to be performed: equal (EQ), equal reference (REF_EQ), less than or equal (LE), greater than or equal (GE), or between (BETWEEN). Equal reference (REF_EQ) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below.   The comparison operators EQ and REF_EQ act on the following fields:   name @sphere parent @componentParent @instanceParent @status @scheduledStartTime @scheduledEndTime @actualStartTime @actualEndTime   The comparison operators GE, LE, and BETWEEN act on the following fields:   @scheduledStartTime @scheduledEndTime @actualStartTime @actualEndTime  Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".
        public let `type`: OperatorType?
        /// The value that the actual field value will be compared with.
        public let values: [String]?

        public init(type: OperatorType? = nil, values: [String]? = nil) {
            self.`type` = `type`
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            if let `type` = dictionary["type"] as? String { self.`type` = OperatorType(rawValue: `type`) } else { self.`type` = nil }
            self.values = dictionary["values"] as? [String]
        }
    }

    public struct PollForTaskInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The public DNS name of the calling task runner.
        public let hostname: String?
        /// The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for workerGroup in the call to PollForTask. There are no wildcard values permitted in workerGroup; the string must be an exact, case-sensitive, match.
        public let workerGroup: String
        /// Identity information for the EC2 instance that is hosting the task runner. You can get this value from the instance using http://169.254.169.254/latest/meta-data/instance-id. For more information, see Instance Metadata in the Amazon Elastic Compute Cloud User Guide. Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.
        public let instanceIdentity: InstanceIdentity?

        public init(hostname: String? = nil, workerGroup: String, instanceIdentity: InstanceIdentity? = nil) {
            self.hostname = hostname
            self.workerGroup = workerGroup
            self.instanceIdentity = instanceIdentity
        }

        public init(dictionary: [String: Any]) throws {
            self.hostname = dictionary["hostname"] as? String
            guard let workerGroup = dictionary["workerGroup"] as? String else { throw InitializableError.missingRequiredParam("workerGroup") }
            self.workerGroup = workerGroup
            if let instanceIdentity = dictionary["instanceIdentity"] as? [String: Any] { self.instanceIdentity = try Datapipeline.InstanceIdentity(dictionary: instanceIdentity) } else { self.instanceIdentity = nil }
        }
    }

    public struct SetTaskStatusOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum OperatorType: String, CustomStringConvertible {
        case eq = "EQ"
        case ref_eq = "REF_EQ"
        case le = "LE"
        case ge = "GE"
        case between = "BETWEEN"
        public var description: String { return self.rawValue }
    }

    public struct CreatePipelineOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID that AWS Data Pipeline assigns the newly created pipeline. For example, df-06372391ZG65EXAMPLE.
        public let pipelineId: String

        public init(pipelineId: String) {
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct QueryObjectsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the query applies to components or instances. The possible values are: COMPONENT, INSTANCE, and ATTEMPT.
        public let sphere: String
        /// The ID of the pipeline.
        public let pipelineId: String
        /// The maximum number of object names that QueryObjects will return in a single call. The default value is 100. 
        public let limit: Int32?
        /// The query that defines the objects to be returned. The Query object can contain a maximum of ten selectors. The conditions in the query are limited to top-level String fields in the object. These filters can be applied to components, instances, and attempts.
        public let query: Query?
        /// The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call QueryObjects with the marker value from the previous call to retrieve the next set of results.
        public let marker: String?

        public init(sphere: String, pipelineId: String, limit: Int32? = nil, query: Query? = nil, marker: String? = nil) {
            self.sphere = sphere
            self.pipelineId = pipelineId
            self.limit = limit
            self.query = query
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            guard let sphere = dictionary["sphere"] as? String else { throw InitializableError.missingRequiredParam("sphere") }
            self.sphere = sphere
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            self.limit = dictionary["limit"] as? Int32
            if let query = dictionary["query"] as? [String: Any] { self.query = try Datapipeline.Query(dictionary: query) } else { self.query = nil }
            self.marker = dictionary["marker"] as? String
        }
    }

    public struct ValidationWarning: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the object that contains the validation warning.
        public let id: String?
        /// A description of the validation warning.
        public let warnings: [String]?

        public init(id: String? = nil, warnings: [String]? = nil) {
            self.id = id
            self.warnings = warnings
        }

        public init(dictionary: [String: Any]) throws {
            self.id = dictionary["id"] as? String
            self.warnings = dictionary["warnings"] as? [String]
        }
    }

    public struct GetPipelineDefinitionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version of the pipeline definition to retrieve. Set this parameter to latest (default) to use the last definition saved to the pipeline or active to use the last definition that was activated.
        public let version: String?
        /// The ID of the pipeline.
        public let pipelineId: String

        public init(version: String? = nil, pipelineId: String) {
            self.version = version
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            self.version = dictionary["version"] as? String
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct DescribeObjectsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting point for the next page of results. To view the next page of results, call DescribeObjects again with this marker value. If the value is null, there are no more results.
        public let marker: String?
        /// Indicates whether there are more results to return.
        public let hasMoreResults: Bool?
        /// An array of object definitions.
        public let pipelineObjects: [PipelineObject]

        public init(marker: String? = nil, hasMoreResults: Bool? = nil, pipelineObjects: [PipelineObject]) {
            self.marker = marker
            self.hasMoreResults = hasMoreResults
            self.pipelineObjects = pipelineObjects
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["marker"] as? String
            self.hasMoreResults = dictionary["hasMoreResults"] as? Bool
            guard let pipelineObjects = dictionary["pipelineObjects"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("pipelineObjects") }
            self.pipelineObjects = try pipelineObjects.map({ try PipelineObject(dictionary: $0) })
        }
    }

    public struct DeactivatePipelineOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct GetPipelineDefinitionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The parameter values used in the pipeline definition.
        public let parameterValues: [ParameterValue]?
        /// The parameter objects used in the pipeline definition.
        public let parameterObjects: [ParameterObject]?
        /// The objects defined in the pipeline.
        public let pipelineObjects: [PipelineObject]?

        public init(parameterValues: [ParameterValue]? = nil, parameterObjects: [ParameterObject]? = nil, pipelineObjects: [PipelineObject]? = nil) {
            self.parameterValues = parameterValues
            self.parameterObjects = parameterObjects
            self.pipelineObjects = pipelineObjects
        }

        public init(dictionary: [String: Any]) throws {
            if let parameterValues = dictionary["parameterValues"] as? [[String: Any]] {
                self.parameterValues = try parameterValues.map({ try ParameterValue(dictionary: $0) })
            } else { 
                self.parameterValues = nil
            }
            if let parameterObjects = dictionary["parameterObjects"] as? [[String: Any]] {
                self.parameterObjects = try parameterObjects.map({ try ParameterObject(dictionary: $0) })
            } else { 
                self.parameterObjects = nil
            }
            if let pipelineObjects = dictionary["pipelineObjects"] as? [[String: Any]] {
                self.pipelineObjects = try pipelineObjects.map({ try PipelineObject(dictionary: $0) })
            } else { 
                self.pipelineObjects = nil
            }
        }
    }

    public struct ParameterObject: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the parameter object. 
        public let id: String
        /// The attributes of the parameter object.
        public let attributes: [ParameterAttribute]

        public init(id: String, attributes: [ParameterAttribute]) {
            self.id = id
            self.attributes = attributes
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let attributes = dictionary["attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("attributes") }
            self.attributes = try attributes.map({ try ParameterAttribute(dictionary: $0) })
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The key name of a tag defined by a user. For more information, see Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        public let key: String
        /// The optional value portion of a tag defined by a user. For more information, see Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            guard let value = dictionary["value"] as? String else { throw InitializableError.missingRequiredParam("value") }
            self.value = value
        }
    }

    public struct Selector: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let `operator`: Operator?
        /// The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.
        public let fieldName: String?

        public init(operator: Operator? = nil, fieldName: String? = nil) {
            self.`operator` = `operator`
            self.fieldName = fieldName
        }

        public init(dictionary: [String: Any]) throws {
            if let `operator` = dictionary["operator"] as? [String: Any] { self.`operator` = try Datapipeline.Operator(dictionary: `operator`) } else { self.`operator` = nil }
            self.fieldName = dictionary["fieldName"] as? String
        }
    }

    public struct PipelineIdName: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the pipeline that was assigned by AWS Data Pipeline. This is a string of the form df-297EG78HU43EEXAMPLE.
        public let id: String?
        /// The name of the pipeline.
        public let name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.id = dictionary["id"] as? String
            self.name = dictionary["name"] as? String
        }
    }

    public struct DeletePipelineInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the pipeline.
        public let pipelineId: String

        public init(pipelineId: String) {
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct EvaluateExpressionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the object.
        public let objectId: String
        /// The expression to evaluate.
        public let expression: String
        /// The ID of the pipeline.
        public let pipelineId: String

        public init(objectId: String, expression: String, pipelineId: String) {
            self.objectId = objectId
            self.expression = expression
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let objectId = dictionary["objectId"] as? String else { throw InitializableError.missingRequiredParam("objectId") }
            self.objectId = objectId
            guard let expression = dictionary["expression"] as? String else { throw InitializableError.missingRequiredParam("expression") }
            self.expression = expression
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct DescribePipelinesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of descriptions for the specified pipelines.
        public let pipelineDescriptionList: [PipelineDescription]

        public init(pipelineDescriptionList: [PipelineDescription]) {
            self.pipelineDescriptionList = pipelineDescriptionList
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineDescriptionList = dictionary["pipelineDescriptionList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("pipelineDescriptionList") }
            self.pipelineDescriptionList = try pipelineDescriptionList.map({ try PipelineDescription(dictionary: $0) })
        }
    }

    public enum TaskStatus: String, CustomStringConvertible {
        case finished = "FINISHED"
        case failed = "FAILED"
        case `false` = "FALSE"
        public var description: String { return self.rawValue }
    }

    public struct DeactivatePipelineInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the pipeline.
        public let pipelineId: String
        /// Indicates whether to cancel any running objects. The default is true, which sets the state of any running objects to CANCELED. If this value is false, the pipeline is deactivated after all running objects finish.
        public let cancelActive: Bool?

        public init(pipelineId: String, cancelActive: Bool? = nil) {
            self.pipelineId = pipelineId
            self.cancelActive = cancelActive
        }

        public init(dictionary: [String: Any]) throws {
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            self.cancelActive = dictionary["cancelActive"] as? Bool
        }
    }

    public struct RemoveTagsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ReportTaskProgressInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Key-value pairs that define the properties of the ReportTaskProgressInput object.
        public let fields: [Field]?
        /// The ID of the task assigned to the task runner. This value is provided in the response for PollForTask.
        public let taskId: String

        public init(fields: [Field]? = nil, taskId: String) {
            self.fields = fields
            self.taskId = taskId
        }

        public init(dictionary: [String: Any]) throws {
            if let fields = dictionary["fields"] as? [[String: Any]] {
                self.fields = try fields.map({ try Field(dictionary: $0) })
            } else { 
                self.fields = nil
            }
            guard let taskId = dictionary["taskId"] as? String else { throw InitializableError.missingRequiredParam("taskId") }
            self.taskId = taskId
        }
    }

    public struct CreatePipelineInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The description for the pipeline.
        public let description: String?
        /// The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account, because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.
        public let name: String
        /// A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines. For more information, see Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        public let tags: [Tag]?
        /// A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline. You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this parameter to ensure idempotency during repeated calls to CreatePipeline. For example, if the first call to CreatePipeline does not succeed, you can pass in the same unique identifier and pipeline name combination on a subsequent call to CreatePipeline. CreatePipeline ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the name and unique identifier combination is scoped to the AWS account or IAM user credentials.
        public let uniqueId: String

        public init(description: String? = nil, name: String, tags: [Tag]? = nil, uniqueId: String) {
            self.description = description
            self.name = name
            self.tags = tags
            self.uniqueId = uniqueId
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            if let tags = dictionary["tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let uniqueId = dictionary["uniqueId"] as? String else { throw InitializableError.missingRequiredParam("uniqueId") }
            self.uniqueId = uniqueId
        }
    }

    public struct Query: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of selectors that define the query. An object must satisfy all of the selectors to match the query.
        public let selectors: [Selector]?

        public init(selectors: [Selector]? = nil) {
            self.selectors = selectors
        }

        public init(dictionary: [String: Any]) throws {
            if let selectors = dictionary["selectors"] as? [[String: Any]] {
                self.selectors = try selectors.map({ try Selector(dictionary: $0) })
            } else { 
                self.selectors = nil
            }
        }
    }

    public struct ListPipelinesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting point for the results to be returned. For the first call, this value should be empty. As long as there are more results, continue to call ListPipelines with the marker value from the previous call to retrieve the next set of results.
        public let marker: String?

        public init(marker: String? = nil) {
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["marker"] as? String
        }
    }

    public struct SetStatusInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IDs of the objects. The corresponding objects can be either physical or components, but not a mix of both types.
        public let objectIds: [String]
        /// The status to be set on all the objects specified in objectIds. For components, use PAUSE or RESUME. For instances, use TRY_CANCEL, RERUN, or MARK_FINISHED.
        public let status: String
        /// The ID of the pipeline that contains the objects.
        public let pipelineId: String

        public init(objectIds: [String], status: String, pipelineId: String) {
            self.objectIds = objectIds
            self.status = status
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let objectIds = dictionary["objectIds"] as? [String] else { throw InitializableError.missingRequiredParam("objectIds") }
            self.objectIds = objectIds
            guard let status = dictionary["status"] as? String else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct ReportTaskRunnerHeartbeatInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The public DNS name of the task runner.
        public let hostname: String?
        /// The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created. You can only specify a single value for workerGroup. There are no wildcard values permitted in workerGroup; the string must be an exact, case-sensitive, match.
        public let workerGroup: String?
        /// The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application. If you have written a custom task runner, you should assign a unique identifier for the task runner.
        public let taskrunnerId: String

        public init(hostname: String? = nil, workerGroup: String? = nil, taskrunnerId: String) {
            self.hostname = hostname
            self.workerGroup = workerGroup
            self.taskrunnerId = taskrunnerId
        }

        public init(dictionary: [String: Any]) throws {
            self.hostname = dictionary["hostname"] as? String
            self.workerGroup = dictionary["workerGroup"] as? String
            guard let taskrunnerId = dictionary["taskrunnerId"] as? String else { throw InitializableError.missingRequiredParam("taskrunnerId") }
            self.taskrunnerId = taskrunnerId
        }
    }

    public struct ReportTaskRunnerHeartbeatOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates whether the calling task runner should terminate.
        public let terminate: Bool

        public init(terminate: Bool) {
            self.terminate = terminate
        }

        public init(dictionary: [String: Any]) throws {
            guard let terminate = dictionary["terminate"] as? Bool else { throw InitializableError.missingRequiredParam("terminate") }
            self.terminate = terminate
        }
    }

    public struct AddTagsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tags to add, as key/value pairs.
        public let tags: [Tag]
        /// The ID of the pipeline.
        public let pipelineId: String

        public init(tags: [Tag], pipelineId: String) {
            self.tags = tags
            self.pipelineId = pipelineId
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
        }
    }

    public struct InstanceIdentity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A description of an EC2 instance that is generated when the instance is launched and exposed to the instance via the instance metadata service in the form of a JSON representation of an object.
        public let document: String?
        /// A signature which can be used to verify the accuracy and authenticity of the information provided in the instance identity document.
        public let signature: String?

        public init(document: String? = nil, signature: String? = nil) {
            self.document = document
            self.signature = signature
        }

        public init(dictionary: [String: Any]) throws {
            self.document = dictionary["document"] as? String
            self.signature = dictionary["signature"] as? String
        }
    }

    public struct SetTaskStatusInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If an error occurred during the task, this value specifies a text description of the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.
        public let errorMessage: String?
        /// The ID of the task assigned to the task runner. This value is provided in the response for PollForTask.
        public let taskId: String
        /// If an error occurred during the task, this value specifies the stack trace associated with the error. This value is set on the physical attempt object. It is used to display error information to the user. The web service does not parse this value.
        public let errorStackTrace: String?
        /// If an error occurred during the task, this value specifies the error code. This value is set on the physical attempt object. It is used to display error information to the user. It should not start with string "Service_" which is reserved by the system.
        public let errorId: String?
        /// If FINISHED, the task successfully completed. If FAILED, the task ended unsuccessfully. Preconditions use false.
        public let taskStatus: TaskStatus

        public init(errorMessage: String? = nil, taskId: String, errorStackTrace: String? = nil, errorId: String? = nil, taskStatus: TaskStatus) {
            self.errorMessage = errorMessage
            self.taskId = taskId
            self.errorStackTrace = errorStackTrace
            self.errorId = errorId
            self.taskStatus = taskStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.errorMessage = dictionary["errorMessage"] as? String
            guard let taskId = dictionary["taskId"] as? String else { throw InitializableError.missingRequiredParam("taskId") }
            self.taskId = taskId
            self.errorStackTrace = dictionary["errorStackTrace"] as? String
            self.errorId = dictionary["errorId"] as? String
            guard let rawtaskStatus = dictionary["taskStatus"] as? String, let taskStatus = TaskStatus(rawValue: rawtaskStatus) else { throw InitializableError.missingRequiredParam("taskStatus") }
            self.taskStatus = taskStatus
        }
    }

    public struct ValidationError: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the object that contains the validation error.
        public let id: String?
        /// A description of the validation error.
        public let errors: [String]?

        public init(id: String? = nil, errors: [String]? = nil) {
            self.id = id
            self.errors = errors
        }

        public init(dictionary: [String: Any]) throws {
            self.id = dictionary["id"] as? String
            self.errors = dictionary["errors"] as? [String]
        }
    }

    public struct ActivatePipelineOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AddTagsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct PutPipelineDefinitionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The parameter values used with the pipeline.
        public let parameterValues: [ParameterValue]?
        /// The ID of the pipeline.
        public let pipelineId: String
        /// The objects that define the pipeline. These objects overwrite the existing pipeline definition.
        public let pipelineObjects: [PipelineObject]
        /// The parameter objects used with the pipeline.
        public let parameterObjects: [ParameterObject]?

        public init(parameterValues: [ParameterValue]? = nil, pipelineId: String, pipelineObjects: [PipelineObject], parameterObjects: [ParameterObject]? = nil) {
            self.parameterValues = parameterValues
            self.pipelineId = pipelineId
            self.pipelineObjects = pipelineObjects
            self.parameterObjects = parameterObjects
        }

        public init(dictionary: [String: Any]) throws {
            if let parameterValues = dictionary["parameterValues"] as? [[String: Any]] {
                self.parameterValues = try parameterValues.map({ try ParameterValue(dictionary: $0) })
            } else { 
                self.parameterValues = nil
            }
            guard let pipelineId = dictionary["pipelineId"] as? String else { throw InitializableError.missingRequiredParam("pipelineId") }
            self.pipelineId = pipelineId
            guard let pipelineObjects = dictionary["pipelineObjects"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("pipelineObjects") }
            self.pipelineObjects = try pipelineObjects.map({ try PipelineObject(dictionary: $0) })
            if let parameterObjects = dictionary["parameterObjects"] as? [[String: Any]] {
                self.parameterObjects = try parameterObjects.map({ try ParameterObject(dictionary: $0) })
            } else { 
                self.parameterObjects = nil
            }
        }
    }

    public struct QueryObjectsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting point for the next page of results. To view the next page of results, call QueryObjects again with this marker value. If the value is null, there are no more results.
        public let marker: String?
        /// Indicates whether there are more results that can be obtained by a subsequent call.
        public let hasMoreResults: Bool?
        /// The identifiers that match the query selectors.
        public let ids: [String]?

        public init(marker: String? = nil, hasMoreResults: Bool? = nil, ids: [String]? = nil) {
            self.marker = marker
            self.hasMoreResults = hasMoreResults
            self.ids = ids
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["marker"] as? String
            self.hasMoreResults = dictionary["hasMoreResults"] as? Bool
            self.ids = dictionary["ids"] as? [String]
        }
    }

    public struct ListPipelinesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting point for the next page of results. To view the next page of results, call ListPipelinesOutput again with this marker value. If the value is null, there are no more results.
        public let marker: String?
        /// Indicates whether there are more results that can be obtained by a subsequent call.
        public let hasMoreResults: Bool?
        /// The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call DescribePipelines and GetPipelineDefinition.
        public let pipelineIdList: [PipelineIdName]

        public init(marker: String? = nil, hasMoreResults: Bool? = nil, pipelineIdList: [PipelineIdName]) {
            self.marker = marker
            self.hasMoreResults = hasMoreResults
            self.pipelineIdList = pipelineIdList
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["marker"] as? String
            self.hasMoreResults = dictionary["hasMoreResults"] as? Bool
            guard let pipelineIdList = dictionary["pipelineIdList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("pipelineIdList") }
            self.pipelineIdList = try pipelineIdList.map({ try PipelineIdName(dictionary: $0) })
        }
    }

    public struct Field: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The field identifier.
        public let key: String
        /// The field value, expressed as the identifier of another object.
        public let refValue: String?
        /// The field value, expressed as a String.
        public let stringValue: String?

        public init(key: String, refValue: String? = nil, stringValue: String? = nil) {
            self.key = key
            self.refValue = refValue
            self.stringValue = stringValue
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            self.refValue = dictionary["refValue"] as? String
            self.stringValue = dictionary["stringValue"] as? String
        }
    }

}