// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
AWS AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
*/
public struct AppSync {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "appsync",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-07-25",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [AppSyncErrorType.self]
        )
    }

    ///  Deletes a DataSource object.
    public func deleteDataSource(_ input: DeleteDataSourceRequest) throws -> EventLoopFuture<DeleteDataSourceResponse> {
        return try client.send(operation: "DeleteDataSource", path: "/v1/apis/{apiId}/datasources/{name}", httpMethod: "DELETE", input: input)
    }

    ///  Retrieves a Type object.
    public func getType(_ input: GetTypeRequest) throws -> EventLoopFuture<GetTypeResponse> {
        return try client.send(operation: "GetType", path: "/v1/apis/{apiId}/types/{typeName}", httpMethod: "GET", input: input)
    }

    ///  List multiple functions.
    public func listFunctions(_ input: ListFunctionsRequest) throws -> EventLoopFuture<ListFunctionsResponse> {
        return try client.send(operation: "ListFunctions", path: "/v1/apis/{apiId}/functions", httpMethod: "GET", input: input)
    }

    ///  Deletes a Function.
    public func deleteFunction(_ input: DeleteFunctionRequest) throws -> EventLoopFuture<DeleteFunctionResponse> {
        return try client.send(operation: "DeleteFunction", path: "/v1/apis/{apiId}/functions/{functionId}", httpMethod: "DELETE", input: input)
    }

    ///  Updates a Function object.
    public func updateFunction(_ input: UpdateFunctionRequest) throws -> EventLoopFuture<UpdateFunctionResponse> {
        return try client.send(operation: "UpdateFunction", path: "/v1/apis/{apiId}/functions/{functionId}", httpMethod: "POST", input: input)
    }

    ///  Deletes an API key.
    public func deleteApiKey(_ input: DeleteApiKeyRequest) throws -> EventLoopFuture<DeleteApiKeyResponse> {
        return try client.send(operation: "DeleteApiKey", path: "/v1/apis/{apiId}/apikeys/{id}", httpMethod: "DELETE", input: input)
    }

    ///  Get a Function.
    public func getFunction(_ input: GetFunctionRequest) throws -> EventLoopFuture<GetFunctionResponse> {
        return try client.send(operation: "GetFunction", path: "/v1/apis/{apiId}/functions/{functionId}", httpMethod: "GET", input: input)
    }

    ///  Updates an API key.
    public func updateApiKey(_ input: UpdateApiKeyRequest) throws -> EventLoopFuture<UpdateApiKeyResponse> {
        return try client.send(operation: "UpdateApiKey", path: "/v1/apis/{apiId}/apikeys/{id}", httpMethod: "POST", input: input)
    }

    ///  Updates a DataSource object.
    public func updateDataSource(_ input: UpdateDataSourceRequest) throws -> EventLoopFuture<UpdateDataSourceResponse> {
        return try client.send(operation: "UpdateDataSource", path: "/v1/apis/{apiId}/datasources/{name}", httpMethod: "POST", input: input)
    }

    ///  Retrieves the introspection schema for a GraphQL API.
    public func getIntrospectionSchema(_ input: GetIntrospectionSchemaRequest) throws -> EventLoopFuture<GetIntrospectionSchemaResponse> {
        return try client.send(operation: "GetIntrospectionSchema", path: "/v1/apis/{apiId}/schema", httpMethod: "GET", input: input)
    }

    ///  Lists your GraphQL APIs.
    public func listGraphqlApis(_ input: ListGraphqlApisRequest) throws -> EventLoopFuture<ListGraphqlApisResponse> {
        return try client.send(operation: "ListGraphqlApis", path: "/v1/apis", httpMethod: "GET", input: input)
    }

    ///  Retrieves a Resolver object.
    public func getResolver(_ input: GetResolverRequest) throws -> EventLoopFuture<GetResolverResponse> {
        return try client.send(operation: "GetResolver", path: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}", httpMethod: "GET", input: input)
    }

    ///  Creates a DataSource object.
    public func createDataSource(_ input: CreateDataSourceRequest) throws -> EventLoopFuture<CreateDataSourceResponse> {
        return try client.send(operation: "CreateDataSource", path: "/v1/apis/{apiId}/datasources", httpMethod: "POST", input: input)
    }

    ///  Creates a Type object.
    public func createType(_ input: CreateTypeRequest) throws -> EventLoopFuture<CreateTypeResponse> {
        return try client.send(operation: "CreateType", path: "/v1/apis/{apiId}/types", httpMethod: "POST", input: input)
    }

    ///  Retrieves the current status of a schema creation operation.
    public func getSchemaCreationStatus(_ input: GetSchemaCreationStatusRequest) throws -> EventLoopFuture<GetSchemaCreationStatusResponse> {
        return try client.send(operation: "GetSchemaCreationStatus", path: "/v1/apis/{apiId}/schemacreation", httpMethod: "GET", input: input)
    }

    ///  Deletes a GraphqlApi object.
    public func deleteGraphqlApi(_ input: DeleteGraphqlApiRequest) throws -> EventLoopFuture<DeleteGraphqlApiResponse> {
        return try client.send(operation: "DeleteGraphqlApi", path: "/v1/apis/{apiId}", httpMethod: "DELETE", input: input)
    }

    ///  Retrieves a GraphqlApi object.
    public func getGraphqlApi(_ input: GetGraphqlApiRequest) throws -> EventLoopFuture<GetGraphqlApiResponse> {
        return try client.send(operation: "GetGraphqlApi", path: "/v1/apis/{apiId}", httpMethod: "GET", input: input)
    }

    ///  Lists the data sources for a given API.
    public func listDataSources(_ input: ListDataSourcesRequest) throws -> EventLoopFuture<ListDataSourcesResponse> {
        return try client.send(operation: "ListDataSources", path: "/v1/apis/{apiId}/datasources", httpMethod: "GET", input: input)
    }

    ///  Retrieves a DataSource object.
    public func getDataSource(_ input: GetDataSourceRequest) throws -> EventLoopFuture<GetDataSourceResponse> {
        return try client.send(operation: "GetDataSource", path: "/v1/apis/{apiId}/datasources/{name}", httpMethod: "GET", input: input)
    }

    ///  Lists the resolvers for a given API and type.
    public func listResolvers(_ input: ListResolversRequest) throws -> EventLoopFuture<ListResolversResponse> {
        return try client.send(operation: "ListResolvers", path: "/v1/apis/{apiId}/types/{typeName}/resolvers", httpMethod: "GET", input: input)
    }

    ///  Deletes a Type object.
    public func deleteType(_ input: DeleteTypeRequest) throws -> EventLoopFuture<DeleteTypeResponse> {
        return try client.send(operation: "DeleteType", path: "/v1/apis/{apiId}/types/{typeName}", httpMethod: "DELETE", input: input)
    }

    ///  List the resolvers that are associated with a specific function.
    public func listResolversByFunction(_ input: ListResolversByFunctionRequest) throws -> EventLoopFuture<ListResolversByFunctionResponse> {
        return try client.send(operation: "ListResolversByFunction", path: "/v1/apis/{apiId}/functions/{functionId}/resolvers", httpMethod: "GET", input: input)
    }

    ///  Adds a new schema to your GraphQL API. This operation is asynchronous. Use to determine when it has completed.
    public func startSchemaCreation(_ input: StartSchemaCreationRequest) throws -> EventLoopFuture<StartSchemaCreationResponse> {
        return try client.send(operation: "StartSchemaCreation", path: "/v1/apis/{apiId}/schemacreation", httpMethod: "POST", input: input)
    }

    ///  Creates a Function object. A function is a reusable entity. Multiple functions can be used to compose the resolver logic.
    public func createFunction(_ input: CreateFunctionRequest) throws -> EventLoopFuture<CreateFunctionResponse> {
        return try client.send(operation: "CreateFunction", path: "/v1/apis/{apiId}/functions", httpMethod: "POST", input: input)
    }

    ///  Updates a Type object.
    public func updateType(_ input: UpdateTypeRequest) throws -> EventLoopFuture<UpdateTypeResponse> {
        return try client.send(operation: "UpdateType", path: "/v1/apis/{apiId}/types/{typeName}", httpMethod: "POST", input: input)
    }

    ///  Creates a GraphqlApi object.
    public func createGraphqlApi(_ input: CreateGraphqlApiRequest) throws -> EventLoopFuture<CreateGraphqlApiResponse> {
        return try client.send(operation: "CreateGraphqlApi", path: "/v1/apis", httpMethod: "POST", input: input)
    }

    ///  Lists the types for a given API.
    public func listTypes(_ input: ListTypesRequest) throws -> EventLoopFuture<ListTypesResponse> {
        return try client.send(operation: "ListTypes", path: "/v1/apis/{apiId}/types", httpMethod: "GET", input: input)
    }

    ///  Deletes a Resolver object.
    public func deleteResolver(_ input: DeleteResolverRequest) throws -> EventLoopFuture<DeleteResolverResponse> {
        return try client.send(operation: "DeleteResolver", path: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}", httpMethod: "DELETE", input: input)
    }

    ///  Updates a Resolver object.
    public func updateResolver(_ input: UpdateResolverRequest) throws -> EventLoopFuture<UpdateResolverResponse> {
        return try client.send(operation: "UpdateResolver", path: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}", httpMethod: "POST", input: input)
    }

    ///  Lists the API keys for a given API.  API keys are deleted automatically sometime after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call DeleteApiKey to manually delete a key before it's automatically deleted. 
    public func listApiKeys(_ input: ListApiKeysRequest) throws -> EventLoopFuture<ListApiKeysResponse> {
        return try client.send(operation: "ListApiKeys", path: "/v1/apis/{apiId}/apikeys", httpMethod: "GET", input: input)
    }

    ///  Updates a GraphqlApi object.
    public func updateGraphqlApi(_ input: UpdateGraphqlApiRequest) throws -> EventLoopFuture<UpdateGraphqlApiResponse> {
        return try client.send(operation: "UpdateGraphqlApi", path: "/v1/apis/{apiId}", httpMethod: "POST", input: input)
    }

    ///  Creates a unique key that you can distribute to clients who are executing your API.
    public func createApiKey(_ input: CreateApiKeyRequest) throws -> EventLoopFuture<CreateApiKeyResponse> {
        return try client.send(operation: "CreateApiKey", path: "/v1/apis/{apiId}/apikeys", httpMethod: "POST", input: input)
    }

    ///  Creates a Resolver object. A resolver converts incoming requests into a format that a data source can understand and converts the data source's responses into GraphQL.
    public func createResolver(_ input: CreateResolverRequest) throws -> EventLoopFuture<CreateResolverResponse> {
        return try client.send(operation: "CreateResolver", path: "/v1/apis/{apiId}/types/{typeName}/resolvers", httpMethod: "POST", input: input)
    }


}