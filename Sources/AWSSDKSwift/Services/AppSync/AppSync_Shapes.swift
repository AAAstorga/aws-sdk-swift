// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AppSync {

    public struct GetDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSource", required: false, type: .structure)
        ]
        /// The DataSource object.
        public let dataSource: DataSource?

        public init(dataSource: DataSource? = nil) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct GetFunctionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionConfiguration", required: false, type: .structure)
        ]
        /// The Function object.
        public let functionConfiguration: FunctionConfiguration?

        public init(functionConfiguration: FunctionConfiguration? = nil) {
            self.functionConfiguration = functionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case functionConfiguration = "functionConfiguration"
        }
    }

    public struct UpdateResolverResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resolver", required: false, type: .structure)
        ]
        /// The updated Resolver object.
        public let resolver: Resolver?

        public init(resolver: Resolver? = nil) {
            self.resolver = resolver
        }

        private enum CodingKeys: String, CodingKey {
            case resolver = "resolver"
        }
    }

    public struct UpdateTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .structure)
        ]
        /// The updated Type object.
        public let `type`: `Type`?

        public init(type: `Type`? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct LogConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cloudWatchLogsRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "fieldLogLevel", required: true, type: .enum)
        ]
        /// The service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account. 
        public let cloudWatchLogsRoleArn: String
        /// The field logging level. Values can be NONE, ERROR, or ALL.     NONE: No field-level logs are captured.    ERROR: Logs the following information only for the fields that are in error:   The error section in the server response.   Field-level errors.   The generated request/response functions that got resolved for error fields.      ALL: The following information is logged for all fields in the query:   Field-level tracing information.   The generated request/response functions that got resolved for each field.    
        public let fieldLogLevel: FieldLogLevel

        public init(cloudWatchLogsRoleArn: String, fieldLogLevel: FieldLogLevel) {
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.fieldLogLevel = fieldLogLevel
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsRoleArn = "cloudWatchLogsRoleArn"
            case fieldLogLevel = "fieldLogLevel"
        }
    }

    public struct DeleteFunctionResponse: AWSShape {

    }

    public struct CreateResolverResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resolver", required: false, type: .structure)
        ]
        /// The Resolver object.
        public let resolver: Resolver?

        public init(resolver: Resolver? = nil) {
            self.resolver = resolver
        }

        private enum CodingKeys: String, CodingKey {
            case resolver = "resolver"
        }
    }

    public struct FunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "functionId", required: false, type: .string), 
            AWSShapeMember(label: "functionArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "functionVersion", required: false, type: .string), 
            AWSShapeMember(label: "dataSourceName", required: false, type: .string)
        ]
        /// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        public let requestMappingTemplate: String?
        /// A unique ID representing the Function object.
        public let functionId: String?
        /// The ARN of the Function object.
        public let functionArn: String?
        /// The Function description.
        public let description: String?
        /// The name of the Function object.
        public let name: String?
        /// The Function response mapping template.
        public let responseMappingTemplate: String?
        /// The version of the request mapping template. Currently only the 2018-05-29 version of the template is supported.
        public let functionVersion: String?
        /// The name of the DataSource.
        public let dataSourceName: String?

        public init(requestMappingTemplate: String? = nil, functionId: String? = nil, functionArn: String? = nil, description: String? = nil, name: String? = nil, responseMappingTemplate: String? = nil, functionVersion: String? = nil, dataSourceName: String? = nil) {
            self.requestMappingTemplate = requestMappingTemplate
            self.functionId = functionId
            self.functionArn = functionArn
            self.description = description
            self.name = name
            self.responseMappingTemplate = responseMappingTemplate
            self.functionVersion = functionVersion
            self.dataSourceName = dataSourceName
        }

        private enum CodingKeys: String, CodingKey {
            case requestMappingTemplate = "requestMappingTemplate"
            case functionId = "functionId"
            case functionArn = "functionArn"
            case description = "description"
            case name = "name"
            case responseMappingTemplate = "responseMappingTemplate"
            case functionVersion = "functionVersion"
            case dataSourceName = "dataSourceName"
        }
    }

    public struct DeleteGraphqlApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public enum DataSourceType: String, CustomStringConvertible, Codable {
        case awsLambda = "AWS_LAMBDA"
        case amazonDynamodb = "AMAZON_DYNAMODB"
        case amazonElasticsearch = "AMAZON_ELASTICSEARCH"
        case none = "NONE"
        case http = "HTTP"
        case relationalDatabase = "RELATIONAL_DATABASE"
        public var description: String { return self.rawValue }
    }

    public enum ResolverKind: String, CustomStringConvertible, Codable {
        case unit = "UNIT"
        case pipeline = "PIPELINE"
        public var description: String { return self.rawValue }
    }

    public struct ListGraphqlApisResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "graphqlApis", required: false, type: .list)
        ]
        /// An identifier to be passed in the next request to this operation to return the next set of items in the list.
        public let nextToken: String?
        /// The GraphqlApi objects.
        public let graphqlApis: [GraphqlApi]?

        public init(nextToken: String? = nil, graphqlApis: [GraphqlApi]? = nil) {
            self.nextToken = nextToken
            self.graphqlApis = graphqlApis
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case graphqlApis = "graphqlApis"
        }
    }

    public struct GetSchemaCreationStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// Detailed information about the status of the schema creation operation.
        public let details: String?
        /// The current state of the schema (PROCESSING, ACTIVE, or DELETING). Once the schema is in the ACTIVE state, you can add data.
        public let status: SchemaStatus?

        public init(details: String? = nil, status: SchemaStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct ListResolversRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The API ID.
        public let apiId: String
        /// The type name.
        public let typeName: String
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
        public let nextToken: String?

        public init(apiId: String, typeName: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.typeName = typeName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case typeName = "typeName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public enum FieldLogLevel: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case error = "ERROR"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteResolverResponse: AWSShape {

    }

    public struct CreateTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .structure)
        ]
        /// The Type object.
        public let `type`: `Type`?

        public init(type: `Type`? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct DeleteDataSourceResponse: AWSShape {

    }

    public struct GetSchemaCreationStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct GetFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionId", location: .uri(locationName: "functionId"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The Function ID.
        public let functionId: String
        /// The GraphQL API ID.
        public let apiId: String

        public init(functionId: String, apiId: String) {
            self.functionId = functionId
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case functionId = "functionId"
            case apiId = "apiId"
        }
    }

    public struct ListResolversByFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "functionId", location: .uri(locationName: "functionId"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?
        /// An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
        public let nextToken: String?
        /// The Function ID.
        public let functionId: String
        /// The API ID.
        public let apiId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, functionId: String, apiId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.functionId = functionId
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case functionId = "functionId"
            case apiId = "apiId"
        }
    }

    public struct UpdateApiKeyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKey", required: false, type: .structure)
        ]
        /// The API key.
        public let apiKey: ApiKey?

        public init(apiKey: ApiKey? = nil) {
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "apiKey"
        }
    }

    public struct AuthorizationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsIamConfig", required: false, type: .structure), 
            AWSShapeMember(label: "authorizationType", required: true, type: .enum)
        ]
        /// The AWS IAM settings.
        public let awsIamConfig: AwsIamConfig?
        /// The authorization type required by the HTTP endpoint.    AWS_IAM: The authorization type is Sigv4.  
        public let authorizationType: AuthorizationType

        public init(awsIamConfig: AwsIamConfig? = nil, authorizationType: AuthorizationType) {
            self.awsIamConfig = awsIamConfig
            self.authorizationType = authorizationType
        }

        private enum CodingKeys: String, CodingKey {
            case awsIamConfig = "awsIamConfig"
            case authorizationType = "authorizationType"
        }
    }

    public enum OutputType: String, CustomStringConvertible, Codable {
        case sdl = "SDL"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct UpdateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "expires", required: false, type: .long)
        ]
        /// The API key ID.
        public let id: String
        /// The ID for the GraphQL API.
        public let apiId: String
        /// A description of the purpose of the API key.
        public let description: String?
        /// The time from update time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .
        public let expires: Int64?

        public init(id: String, apiId: String, description: String? = nil, expires: Int64? = nil) {
            self.id = id
            self.apiId = apiId
            self.description = description
            self.expires = expires
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case apiId = "apiId"
            case description = "description"
            case expires = "expires"
        }
    }

    public enum TypeDefinitionFormat: String, CustomStringConvertible, Codable {
        case sdl = "SDL"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public enum AuthorizationType: String, CustomStringConvertible, Codable {
        case awsIam = "AWS_IAM"
        public var description: String { return self.rawValue }
    }

    public struct ListDataSourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The API ID.
        public let apiId: String
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
        public let nextToken: String?
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?

        public init(apiId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.apiId = apiId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct GetDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String
        /// The name of the data source.
        public let name: String

        public init(apiId: String, name: String) {
            self.apiId = apiId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case name = "name"
        }
    }

    public struct Resolver: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fieldName", required: false, type: .string), 
            AWSShapeMember(label: "dataSourceName", required: false, type: .string), 
            AWSShapeMember(label: "resolverArn", required: false, type: .string), 
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "pipelineConfig", required: false, type: .structure), 
            AWSShapeMember(label: "requestMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "kind", required: false, type: .enum), 
            AWSShapeMember(label: "typeName", required: false, type: .string)
        ]
        /// The resolver field name.
        public let fieldName: String?
        /// The resolver data source name.
        public let dataSourceName: String?
        /// The resolver ARN.
        public let resolverArn: String?
        /// The response mapping template.
        public let responseMappingTemplate: String?
        /// The PipelineConfig.
        public let pipelineConfig: PipelineConfig?
        /// The request mapping template.
        public let requestMappingTemplate: String?
        /// The resolver type.    UNIT: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.    PIPELINE: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of Function in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.  
        public let kind: ResolverKind?
        /// The resolver type name.
        public let typeName: String?

        public init(fieldName: String? = nil, dataSourceName: String? = nil, resolverArn: String? = nil, responseMappingTemplate: String? = nil, pipelineConfig: PipelineConfig? = nil, requestMappingTemplate: String? = nil, kind: ResolverKind? = nil, typeName: String? = nil) {
            self.fieldName = fieldName
            self.dataSourceName = dataSourceName
            self.resolverArn = resolverArn
            self.responseMappingTemplate = responseMappingTemplate
            self.pipelineConfig = pipelineConfig
            self.requestMappingTemplate = requestMappingTemplate
            self.kind = kind
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case fieldName = "fieldName"
            case dataSourceName = "dataSourceName"
            case resolverArn = "resolverArn"
            case responseMappingTemplate = "responseMappingTemplate"
            case pipelineConfig = "pipelineConfig"
            case requestMappingTemplate = "requestMappingTemplate"
            case kind = "kind"
            case typeName = "typeName"
        }
    }

    public struct GetIntrospectionSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "format", location: .querystring(locationName: "format"), required: true, type: .enum)
        ]
        /// The API ID.
        public let apiId: String
        /// The schema format: SDL or JSON.
        public let format: OutputType

        public init(apiId: String, format: OutputType) {
            self.apiId = apiId
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case format = "format"
        }
    }

    public struct GetIntrospectionSchemaResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "schema"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "schema", required: false, type: .blob)
        ]
        /// The schema, in GraphQL Schema Definition Language (SDL) format. For more information, see the GraphQL SDL documentation.
        public let schema: Data?

        public init(schema: Data? = nil) {
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case schema = "schema"
        }
    }

    public struct ApiKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "expires", required: false, type: .long)
        ]
        /// The API key ID.
        public let id: String?
        /// A description of the purpose of the API key.
        public let description: String?
        /// The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.
        public let expires: Int64?

        public init(id: String? = nil, description: String? = nil, expires: Int64? = nil) {
            self.id = id
            self.description = description
            self.expires = expires
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case description = "description"
            case expires = "expires"
        }
    }

    public struct AwsIamConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "signingRegion", required: false, type: .string), 
            AWSShapeMember(label: "signingServiceName", required: false, type: .string)
        ]
        /// The signing region for AWS IAM authorization.
        public let signingRegion: String?
        /// The signing service name for AWS IAM authorization.
        public let signingServiceName: String?

        public init(signingRegion: String? = nil, signingServiceName: String? = nil) {
            self.signingRegion = signingRegion
            self.signingServiceName = signingServiceName
        }

        private enum CodingKeys: String, CodingKey {
            case signingRegion = "signingRegion"
            case signingServiceName = "signingServiceName"
        }
    }

    public struct UpdateGraphqlApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "openIDConnectConfig", required: false, type: .structure), 
            AWSShapeMember(label: "authenticationType", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "userPoolConfig", required: false, type: .structure), 
            AWSShapeMember(label: "logConfig", required: false, type: .structure)
        ]
        /// The API ID.
        public let apiId: String
        /// The OpenID Connect configuration for the GraphqlApi object.
        public let openIDConnectConfig: OpenIDConnectConfig?
        /// The new authentication type for the GraphqlApi object.
        public let authenticationType: AuthenticationType?
        /// The new name for the GraphqlApi object.
        public let name: String
        /// The new Amazon Cognito user pool configuration for the GraphqlApi object.
        public let userPoolConfig: UserPoolConfig?
        /// The Amazon CloudWatch Logs configuration for the GraphqlApi object.
        public let logConfig: LogConfig?

        public init(apiId: String, openIDConnectConfig: OpenIDConnectConfig? = nil, authenticationType: AuthenticationType? = nil, name: String, userPoolConfig: UserPoolConfig? = nil, logConfig: LogConfig? = nil) {
            self.apiId = apiId
            self.openIDConnectConfig = openIDConnectConfig
            self.authenticationType = authenticationType
            self.name = name
            self.userPoolConfig = userPoolConfig
            self.logConfig = logConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case openIDConnectConfig = "openIDConnectConfig"
            case authenticationType = "authenticationType"
            case name = "name"
            case userPoolConfig = "userPoolConfig"
            case logConfig = "logConfig"
        }
    }

    public struct UserPoolConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userPoolId", required: true, type: .string), 
            AWSShapeMember(label: "defaultAction", required: true, type: .enum), 
            AWSShapeMember(label: "awsRegion", required: true, type: .string), 
            AWSShapeMember(label: "appIdClientRegex", required: false, type: .string)
        ]
        /// The user pool ID.
        public let userPoolId: String
        /// The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
        public let defaultAction: DefaultAction
        /// The AWS Region in which the user pool was created.
        public let awsRegion: String
        /// A regular expression for validating the incoming Amazon Cognito user pool app client ID.
        public let appIdClientRegex: String?

        public init(userPoolId: String, defaultAction: DefaultAction, awsRegion: String, appIdClientRegex: String? = nil) {
            self.userPoolId = userPoolId
            self.defaultAction = defaultAction
            self.awsRegion = awsRegion
            self.appIdClientRegex = appIdClientRegex
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolId = "userPoolId"
            case defaultAction = "defaultAction"
            case awsRegion = "awsRegion"
            case appIdClientRegex = "appIdClientRegex"
        }
    }

    public struct DynamodbDataSourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "useCallerCredentials", required: false, type: .boolean), 
            AWSShapeMember(label: "awsRegion", required: true, type: .string), 
            AWSShapeMember(label: "tableName", required: true, type: .string)
        ]
        /// Set to TRUE to use Amazon Cognito credentials with this data source.
        public let useCallerCredentials: Bool?
        /// The AWS Region.
        public let awsRegion: String
        /// The table name.
        public let tableName: String

        public init(useCallerCredentials: Bool? = nil, awsRegion: String, tableName: String) {
            self.useCallerCredentials = useCallerCredentials
            self.awsRegion = awsRegion
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case useCallerCredentials = "useCallerCredentials"
            case awsRegion = "awsRegion"
            case tableName = "tableName"
        }
    }

    public struct DeleteResolverRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fieldName", location: .uri(locationName: "fieldName"), required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The resolver field name.
        public let fieldName: String
        /// The name of the resolver type.
        public let typeName: String
        /// The API ID.
        public let apiId: String

        public init(fieldName: String, typeName: String, apiId: String) {
            self.fieldName = fieldName
            self.typeName = typeName
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case fieldName = "fieldName"
            case typeName = "typeName"
            case apiId = "apiId"
        }
    }

    public struct CreateFunctionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionConfiguration", required: false, type: .structure)
        ]
        /// The Function object.
        public let functionConfiguration: FunctionConfiguration?

        public init(functionConfiguration: FunctionConfiguration? = nil) {
            self.functionConfiguration = functionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case functionConfiguration = "functionConfiguration"
        }
    }

    public enum RelationalDatabaseSourceType: String, CustomStringConvertible, Codable {
        case rdsHttpEndpoint = "RDS_HTTP_ENDPOINT"
        public var description: String { return self.rawValue }
    }

    public struct LambdaDataSourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lambdaFunctionArn", required: true, type: .string)
        ]
        /// The ARN for the Lambda function.
        public let lambdaFunctionArn: String

        public init(lambdaFunctionArn: String) {
            self.lambdaFunctionArn = lambdaFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionArn = "lambdaFunctionArn"
        }
    }

    public struct UpdateTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "format", required: true, type: .enum), 
            AWSShapeMember(label: "definition", required: false, type: .string)
        ]
        /// The new type name.
        public let typeName: String
        /// The API ID.
        public let apiId: String
        /// The new type format: SDL or JSON.
        public let format: TypeDefinitionFormat
        /// The new definition.
        public let definition: String?

        public init(typeName: String, apiId: String, format: TypeDefinitionFormat, definition: String? = nil) {
            self.typeName = typeName
            self.apiId = apiId
            self.format = format
            self.definition = definition
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "typeName"
            case apiId = "apiId"
            case format = "format"
            case definition = "definition"
        }
    }

    public struct ElasticsearchDataSourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsRegion", required: true, type: .string), 
            AWSShapeMember(label: "endpoint", required: true, type: .string)
        ]
        /// The AWS Region.
        public let awsRegion: String
        /// The endpoint.
        public let endpoint: String

        public init(awsRegion: String, endpoint: String) {
            self.awsRegion = awsRegion
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case awsRegion = "awsRegion"
            case endpoint = "endpoint"
        }
    }

    public struct CreateDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "relationalDatabaseConfig", required: false, type: .structure), 
            AWSShapeMember(label: "dynamodbConfig", required: false, type: .structure), 
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "elasticsearchConfig", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "httpConfig", required: false, type: .structure), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "lambdaConfig", required: false, type: .structure)
        ]
        /// Relational database settings.
        public let relationalDatabaseConfig: RelationalDatabaseDataSourceConfig?
        /// Amazon DynamoDB settings.
        public let dynamodbConfig: DynamodbDataSourceConfig?
        /// The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
        public let serviceRoleArn: String?
        /// Amazon Elasticsearch Service settings.
        public let elasticsearchConfig: ElasticsearchDataSourceConfig?
        /// A description of the DataSource.
        public let description: String?
        /// The type of the DataSource.
        public let `type`: DataSourceType
        /// HTTP endpoint settings.
        public let httpConfig: HttpDataSourceConfig?
        /// The API ID for the GraphQL API for the DataSource.
        public let apiId: String
        /// A user-supplied name for the DataSource.
        public let name: String
        /// AWS Lambda settings.
        public let lambdaConfig: LambdaDataSourceConfig?

        public init(relationalDatabaseConfig: RelationalDatabaseDataSourceConfig? = nil, dynamodbConfig: DynamodbDataSourceConfig? = nil, serviceRoleArn: String? = nil, elasticsearchConfig: ElasticsearchDataSourceConfig? = nil, description: String? = nil, type: DataSourceType, httpConfig: HttpDataSourceConfig? = nil, apiId: String, name: String, lambdaConfig: LambdaDataSourceConfig? = nil) {
            self.relationalDatabaseConfig = relationalDatabaseConfig
            self.dynamodbConfig = dynamodbConfig
            self.serviceRoleArn = serviceRoleArn
            self.elasticsearchConfig = elasticsearchConfig
            self.description = description
            self.`type` = `type`
            self.httpConfig = httpConfig
            self.apiId = apiId
            self.name = name
            self.lambdaConfig = lambdaConfig
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseConfig = "relationalDatabaseConfig"
            case dynamodbConfig = "dynamodbConfig"
            case serviceRoleArn = "serviceRoleArn"
            case elasticsearchConfig = "elasticsearchConfig"
            case description = "description"
            case `type` = "type"
            case httpConfig = "httpConfig"
            case apiId = "apiId"
            case name = "name"
            case lambdaConfig = "lambdaConfig"
        }
    }

    public struct UpdateResolverRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "fieldName", location: .uri(locationName: "fieldName"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "pipelineConfig", required: false, type: .structure), 
            AWSShapeMember(label: "kind", required: false, type: .enum), 
            AWSShapeMember(label: "dataSourceName", required: false, type: .string), 
            AWSShapeMember(label: "requestMappingTemplate", required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string)
        ]
        /// The new response mapping template.
        public let responseMappingTemplate: String?
        /// The new field name.
        public let fieldName: String
        /// The API ID.
        public let apiId: String
        /// The PipelineConfig.
        public let pipelineConfig: PipelineConfig?
        /// The resolver type.    UNIT: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.    PIPELINE: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of Function in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.  
        public let kind: ResolverKind?
        /// The new data source name.
        public let dataSourceName: String?
        /// The new request mapping template.
        public let requestMappingTemplate: String
        /// The new type name.
        public let typeName: String

        public init(responseMappingTemplate: String? = nil, fieldName: String, apiId: String, pipelineConfig: PipelineConfig? = nil, kind: ResolverKind? = nil, dataSourceName: String? = nil, requestMappingTemplate: String, typeName: String) {
            self.responseMappingTemplate = responseMappingTemplate
            self.fieldName = fieldName
            self.apiId = apiId
            self.pipelineConfig = pipelineConfig
            self.kind = kind
            self.dataSourceName = dataSourceName
            self.requestMappingTemplate = requestMappingTemplate
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case responseMappingTemplate = "responseMappingTemplate"
            case fieldName = "fieldName"
            case apiId = "apiId"
            case pipelineConfig = "pipelineConfig"
            case kind = "kind"
            case dataSourceName = "dataSourceName"
            case requestMappingTemplate = "requestMappingTemplate"
            case typeName = "typeName"
        }
    }

    public struct DeleteApiKeyResponse: AWSShape {

    }

    public struct DeleteGraphqlApiResponse: AWSShape {

    }

    public struct CreateApiKeyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKey", required: false, type: .structure)
        ]
        /// The API key.
        public let apiKey: ApiKey?

        public init(apiKey: ApiKey? = nil) {
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "apiKey"
        }
    }

    public struct GetGraphqlApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The API ID for the GraphQL API.
        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct GetResolverResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resolver", required: false, type: .structure)
        ]
        /// The Resolver object.
        public let resolver: Resolver?

        public init(resolver: Resolver? = nil) {
            self.resolver = resolver
        }

        private enum CodingKeys: String, CodingKey {
            case resolver = "resolver"
        }
    }

    public struct CreateGraphqlApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "graphqlApi", required: false, type: .structure)
        ]
        /// The GraphqlApi.
        public let graphqlApi: GraphqlApi?

        public init(graphqlApi: GraphqlApi? = nil) {
            self.graphqlApi = graphqlApi
        }

        private enum CodingKeys: String, CodingKey {
            case graphqlApi = "graphqlApi"
        }
    }

    public struct `Type`: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "definition", required: false, type: .string), 
            AWSShapeMember(label: "format", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The type definition.
        public let definition: String?
        /// The type format: SDL or JSON.
        public let format: TypeDefinitionFormat?
        /// The type description.
        public let description: String?
        /// The type ARN.
        public let arn: String?
        /// The type name.
        public let name: String?

        public init(definition: String? = nil, format: TypeDefinitionFormat? = nil, description: String? = nil, arn: String? = nil, name: String? = nil) {
            self.definition = definition
            self.format = format
            self.description = description
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case definition = "definition"
            case format = "format"
            case description = "description"
            case arn = "arn"
            case name = "name"
        }
    }

    public struct CreateResolverRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "dataSourceName", required: false, type: .string), 
            AWSShapeMember(label: "requestMappingTemplate", required: true, type: .string), 
            AWSShapeMember(label: "kind", required: false, type: .enum), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string), 
            AWSShapeMember(label: "fieldName", required: true, type: .string), 
            AWSShapeMember(label: "pipelineConfig", required: false, type: .structure)
        ]
        /// The ID for the GraphQL API for which the resolver is being created.
        public let apiId: String
        /// The mapping template to be used for responses from the data source.
        public let responseMappingTemplate: String?
        /// The name of the data source for which the resolver is being created.
        public let dataSourceName: String?
        /// The mapping template to be used for requests. A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).
        public let requestMappingTemplate: String
        /// The resolver type.    UNIT: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.    PIPELINE: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of Function in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.  
        public let kind: ResolverKind?
        /// The name of the Type.
        public let typeName: String
        /// The name of the field to attach the resolver to.
        public let fieldName: String
        /// The PipelineConfig.
        public let pipelineConfig: PipelineConfig?

        public init(apiId: String, responseMappingTemplate: String? = nil, dataSourceName: String? = nil, requestMappingTemplate: String, kind: ResolverKind? = nil, typeName: String, fieldName: String, pipelineConfig: PipelineConfig? = nil) {
            self.apiId = apiId
            self.responseMappingTemplate = responseMappingTemplate
            self.dataSourceName = dataSourceName
            self.requestMappingTemplate = requestMappingTemplate
            self.kind = kind
            self.typeName = typeName
            self.fieldName = fieldName
            self.pipelineConfig = pipelineConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case responseMappingTemplate = "responseMappingTemplate"
            case dataSourceName = "dataSourceName"
            case requestMappingTemplate = "requestMappingTemplate"
            case kind = "kind"
            case typeName = "typeName"
            case fieldName = "fieldName"
            case pipelineConfig = "pipelineConfig"
        }
    }

    public enum SchemaStatus: String, CustomStringConvertible, Codable {
        case processing = "PROCESSING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFunctionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionConfiguration", required: false, type: .structure)
        ]
        /// The Function object.
        public let functionConfiguration: FunctionConfiguration?

        public init(functionConfiguration: FunctionConfiguration? = nil) {
            self.functionConfiguration = functionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case functionConfiguration = "functionConfiguration"
        }
    }

    public enum AuthenticationType: String, CustomStringConvertible, Codable {
        case apiKey = "API_KEY"
        case awsIam = "AWS_IAM"
        case amazonCognitoUserPools = "AMAZON_COGNITO_USER_POOLS"
        case openidConnect = "OPENID_CONNECT"
        public var description: String { return self.rawValue }
    }

    public struct GetResolverRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "fieldName", location: .uri(locationName: "fieldName"), required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String
        /// The resolver field name.
        public let fieldName: String
        /// The resolver type name.
        public let typeName: String

        public init(apiId: String, fieldName: String, typeName: String) {
            self.apiId = apiId
            self.fieldName = fieldName
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case fieldName = "fieldName"
            case typeName = "typeName"
        }
    }

    public struct GetTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string), 
            AWSShapeMember(label: "format", location: .querystring(locationName: "format"), required: true, type: .enum)
        ]
        /// The API ID.
        public let apiId: String
        /// The type name.
        public let typeName: String
        /// The type format: SDL or JSON.
        public let format: TypeDefinitionFormat

        public init(apiId: String, typeName: String, format: TypeDefinitionFormat) {
            self.apiId = apiId
            self.typeName = typeName
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case typeName = "typeName"
            case format = "format"
        }
    }

    public struct OpenIDConnectConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientId", required: false, type: .string), 
            AWSShapeMember(label: "iatTTL", required: false, type: .long), 
            AWSShapeMember(label: "authTTL", required: false, type: .long), 
            AWSShapeMember(label: "issuer", required: true, type: .string)
        ]
        /// The client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
        public let clientId: String?
        /// The number of milliseconds a token is valid after being issued to a user.
        public let iatTTL: Int64?
        /// The number of milliseconds a token is valid after being authenticated.
        public let authTTL: Int64?
        /// The issuer for the OpenID Connect configuration. The issuer returned by discovery must exactly match the value of iss in the ID token.
        public let issuer: String

        public init(clientId: String? = nil, iatTTL: Int64? = nil, authTTL: Int64? = nil, issuer: String) {
            self.clientId = clientId
            self.iatTTL = iatTTL
            self.authTTL = authTTL
            self.issuer = issuer
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "clientId"
            case iatTTL = "iatTTL"
            case authTTL = "authTTL"
            case issuer = "issuer"
        }
    }

    public struct ListFunctionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The GraphQL API ID.
        public let apiId: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, apiId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case apiId = "apiId"
        }
    }

    public struct GraphqlApi: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authenticationType", required: false, type: .enum), 
            AWSShapeMember(label: "apiId", required: false, type: .string), 
            AWSShapeMember(label: "logConfig", required: false, type: .structure), 
            AWSShapeMember(label: "uris", required: false, type: .map), 
            AWSShapeMember(label: "userPoolConfig", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "openIDConnectConfig", required: false, type: .structure)
        ]
        /// The authentication type.
        public let authenticationType: AuthenticationType?
        /// The API ID.
        public let apiId: String?
        /// The Amazon CloudWatch Logs configuration.
        public let logConfig: LogConfig?
        /// The URIs.
        public let uris: [String: String]?
        /// The Amazon Cognito user pool configuration.
        public let userPoolConfig: UserPoolConfig?
        /// The API name.
        public let name: String?
        /// The ARN.
        public let arn: String?
        /// The OpenID Connect configuration.
        public let openIDConnectConfig: OpenIDConnectConfig?

        public init(authenticationType: AuthenticationType? = nil, apiId: String? = nil, logConfig: LogConfig? = nil, uris: [String: String]? = nil, userPoolConfig: UserPoolConfig? = nil, name: String? = nil, arn: String? = nil, openIDConnectConfig: OpenIDConnectConfig? = nil) {
            self.authenticationType = authenticationType
            self.apiId = apiId
            self.logConfig = logConfig
            self.uris = uris
            self.userPoolConfig = userPoolConfig
            self.name = name
            self.arn = arn
            self.openIDConnectConfig = openIDConnectConfig
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationType = "authenticationType"
            case apiId = "apiId"
            case logConfig = "logConfig"
            case uris = "uris"
            case userPoolConfig = "userPoolConfig"
            case name = "name"
            case arn = "arn"
            case openIDConnectConfig = "openIDConnectConfig"
        }
    }

    public struct StartSchemaCreationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The current state of the schema (PROCESSING, ACTIVE, or DELETING). When the schema is in the ACTIVE state, you can add data.
        public let status: SchemaStatus?

        public init(status: SchemaStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DeleteTypeResponse: AWSShape {

    }

    public struct DeleteApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The ID for the API key.
        public let id: String
        /// The API ID.
        public let apiId: String

        public init(id: String, apiId: String) {
            self.id = id
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case apiId = "apiId"
        }
    }

    public struct RelationalDatabaseDataSourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "relationalDatabaseSourceType", required: false, type: .enum), 
            AWSShapeMember(label: "rdsHttpEndpointConfig", required: false, type: .structure)
        ]
        /// Source type for the relational database.    RDS_HTTP_ENDPOINT: The relational database source type is an Amazon RDS HTTP endpoint.  
        public let relationalDatabaseSourceType: RelationalDatabaseSourceType?
        /// Amazon RDS HTTP endpoint settings.
        public let rdsHttpEndpointConfig: RdsHttpEndpointConfig?

        public init(relationalDatabaseSourceType: RelationalDatabaseSourceType? = nil, rdsHttpEndpointConfig: RdsHttpEndpointConfig? = nil) {
            self.relationalDatabaseSourceType = relationalDatabaseSourceType
            self.rdsHttpEndpointConfig = rdsHttpEndpointConfig
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseSourceType = "relationalDatabaseSourceType"
            case rdsHttpEndpointConfig = "rdsHttpEndpointConfig"
        }
    }

    public struct ListTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "types", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The Type objects.
        public let types: [`Type`]?
        /// An identifier to be passed in the next request to this operation to return the next set of items in the list.
        public let nextToken: String?

        public init(types: [`Type`]? = nil, nextToken: String? = nil) {
            self.types = types
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case types = "types"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The name of the data source.
        public let name: String
        /// The API ID.
        public let apiId: String

        public init(name: String, apiId: String) {
            self.name = name
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case apiId = "apiId"
        }
    }

    public struct UpdateGraphqlApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "graphqlApi", required: false, type: .structure)
        ]
        /// The updated GraphqlApi object.
        public let graphqlApi: GraphqlApi?

        public init(graphqlApi: GraphqlApi? = nil) {
            self.graphqlApi = graphqlApi
        }

        private enum CodingKeys: String, CodingKey {
            case graphqlApi = "graphqlApi"
        }
    }

    public struct UpdateFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionId", location: .uri(locationName: "functionId"), required: true, type: .string), 
            AWSShapeMember(label: "requestMappingTemplate", required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "functionVersion", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "dataSourceName", required: true, type: .string)
        ]
        /// The function ID.
        public let functionId: String
        /// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        public let requestMappingTemplate: String
        /// The GraphQL API ID.
        public let apiId: String
        /// The version of the request mapping template. Currently the supported value is 2018-05-29. 
        public let functionVersion: String
        /// The Function description.
        public let description: String?
        /// The Function name.
        public let name: String
        /// The Function request mapping template. 
        public let responseMappingTemplate: String?
        /// The Function DataSource name.
        public let dataSourceName: String

        public init(functionId: String, requestMappingTemplate: String, apiId: String, functionVersion: String, description: String? = nil, name: String, responseMappingTemplate: String? = nil, dataSourceName: String) {
            self.functionId = functionId
            self.requestMappingTemplate = requestMappingTemplate
            self.apiId = apiId
            self.functionVersion = functionVersion
            self.description = description
            self.name = name
            self.responseMappingTemplate = responseMappingTemplate
            self.dataSourceName = dataSourceName
        }

        private enum CodingKeys: String, CodingKey {
            case functionId = "functionId"
            case requestMappingTemplate = "requestMappingTemplate"
            case apiId = "apiId"
            case functionVersion = "functionVersion"
            case description = "description"
            case name = "name"
            case responseMappingTemplate = "responseMappingTemplate"
            case dataSourceName = "dataSourceName"
        }
    }

    public struct CreateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "expires", required: false, type: .long)
        ]
        /// The ID for your GraphQL API.
        public let apiId: String
        /// A description of the purpose of the API key.
        public let description: String?
        /// The time from creation time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .
        public let expires: Int64?

        public init(apiId: String, description: String? = nil, expires: Int64? = nil) {
            self.apiId = apiId
            self.description = description
            self.expires = expires
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case description = "description"
            case expires = "expires"
        }
    }

    public struct CreateGraphqlApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "openIDConnectConfig", required: false, type: .structure), 
            AWSShapeMember(label: "userPoolConfig", required: false, type: .structure), 
            AWSShapeMember(label: "logConfig", required: false, type: .structure), 
            AWSShapeMember(label: "authenticationType", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The OpenID Connect configuration.
        public let openIDConnectConfig: OpenIDConnectConfig?
        /// The Amazon Cognito user pool configuration.
        public let userPoolConfig: UserPoolConfig?
        /// The Amazon CloudWatch Logs configuration.
        public let logConfig: LogConfig?
        /// The authentication type: API key, AWS IAM, or Amazon Cognito user pools.
        public let authenticationType: AuthenticationType
        /// A user-supplied name for the GraphqlApi.
        public let name: String

        public init(openIDConnectConfig: OpenIDConnectConfig? = nil, userPoolConfig: UserPoolConfig? = nil, logConfig: LogConfig? = nil, authenticationType: AuthenticationType, name: String) {
            self.openIDConnectConfig = openIDConnectConfig
            self.userPoolConfig = userPoolConfig
            self.logConfig = logConfig
            self.authenticationType = authenticationType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case openIDConnectConfig = "openIDConnectConfig"
            case userPoolConfig = "userPoolConfig"
            case logConfig = "logConfig"
            case authenticationType = "authenticationType"
            case name = "name"
        }
    }

    public struct DeleteFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionId", location: .uri(locationName: "functionId"), required: true, type: .string), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The Function ID.
        public let functionId: String
        /// The GraphQL API ID.
        public let apiId: String

        public init(functionId: String, apiId: String) {
            self.functionId = functionId
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case functionId = "functionId"
            case apiId = "apiId"
        }
    }

    public struct UpdateDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSource", required: false, type: .structure)
        ]
        /// The updated DataSource object.
        public let dataSource: DataSource?

        public init(dataSource: DataSource? = nil) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct GetGraphqlApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "graphqlApi", required: false, type: .structure)
        ]
        /// The GraphqlApi object.
        public let graphqlApi: GraphqlApi?

        public init(graphqlApi: GraphqlApi? = nil) {
            self.graphqlApi = graphqlApi
        }

        private enum CodingKeys: String, CodingKey {
            case graphqlApi = "graphqlApi"
        }
    }

    public struct StartSchemaCreationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "definition", required: true, type: .blob)
        ]
        /// The API ID.
        public let apiId: String
        /// The schema definition, in GraphQL schema language format.
        public let definition: Data

        public init(apiId: String, definition: Data) {
            self.apiId = apiId
            self.definition = definition
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case definition = "definition"
        }
    }

    public struct RdsHttpEndpointConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsRegion", required: false, type: .string), 
            AWSShapeMember(label: "databaseName", required: false, type: .string), 
            AWSShapeMember(label: "dbClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "awsSecretStoreArn", required: false, type: .string)
        ]
        /// AWS Region for RDS HTTP endpoint.
        public let awsRegion: String?
        /// Logical database name.
        public let databaseName: String?
        /// Amazon RDS cluster identifier.
        public let dbClusterIdentifier: String?
        /// Logical schema name.
        public let schema: String?
        /// AWS secret store ARN for database credentials.
        public let awsSecretStoreArn: String?

        public init(awsRegion: String? = nil, databaseName: String? = nil, dbClusterIdentifier: String? = nil, schema: String? = nil, awsSecretStoreArn: String? = nil) {
            self.awsRegion = awsRegion
            self.databaseName = databaseName
            self.dbClusterIdentifier = dbClusterIdentifier
            self.schema = schema
            self.awsSecretStoreArn = awsSecretStoreArn
        }

        private enum CodingKeys: String, CodingKey {
            case awsRegion = "awsRegion"
            case databaseName = "databaseName"
            case dbClusterIdentifier = "dbClusterIdentifier"
            case schema = "schema"
            case awsSecretStoreArn = "awsSecretStoreArn"
        }
    }

    public enum DefaultAction: String, CustomStringConvertible, Codable {
        case allow = "ALLOW"
        case deny = "DENY"
        public var description: String { return self.rawValue }
    }

    public struct ListFunctionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "functions", required: false, type: .list)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// A list of Function objects.
        public let functions: [FunctionConfiguration]?

        public init(nextToken: String? = nil, functions: [FunctionConfiguration]? = nil) {
            self.nextToken = nextToken
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case functions = "functions"
        }
    }

    public struct ListTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "format", location: .querystring(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
        public let nextToken: String?
        /// The type format: SDL or JSON.
        public let format: TypeDefinitionFormat
        /// The API ID.
        public let apiId: String
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, format: TypeDefinitionFormat, apiId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.format = format
            self.apiId = apiId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case format = "format"
            case apiId = "apiId"
            case maxResults = "maxResults"
        }
    }

    public struct UpdateDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "relationalDatabaseConfig", required: false, type: .structure), 
            AWSShapeMember(label: "name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "httpConfig", required: false, type: .structure), 
            AWSShapeMember(label: "elasticsearchConfig", required: false, type: .structure), 
            AWSShapeMember(label: "dynamodbConfig", required: false, type: .structure), 
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "lambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]
        /// The new description for the data source.
        public let description: String?
        /// The new relational database configuration.
        public let relationalDatabaseConfig: RelationalDatabaseDataSourceConfig?
        /// The new name for the data source.
        public let name: String
        /// The new HTTP endpoint configuration.
        public let httpConfig: HttpDataSourceConfig?
        /// The new Elasticsearch Service configuration.
        public let elasticsearchConfig: ElasticsearchDataSourceConfig?
        /// The new Amazon DynamoDB configuration.
        public let dynamodbConfig: DynamodbDataSourceConfig?
        /// The new service role ARN for the data source.
        public let serviceRoleArn: String?
        /// The new AWS Lambda configuration.
        public let lambdaConfig: LambdaDataSourceConfig?
        /// The new data source type.
        public let `type`: DataSourceType
        /// The API ID.
        public let apiId: String

        public init(description: String? = nil, relationalDatabaseConfig: RelationalDatabaseDataSourceConfig? = nil, name: String, httpConfig: HttpDataSourceConfig? = nil, elasticsearchConfig: ElasticsearchDataSourceConfig? = nil, dynamodbConfig: DynamodbDataSourceConfig? = nil, serviceRoleArn: String? = nil, lambdaConfig: LambdaDataSourceConfig? = nil, type: DataSourceType, apiId: String) {
            self.description = description
            self.relationalDatabaseConfig = relationalDatabaseConfig
            self.name = name
            self.httpConfig = httpConfig
            self.elasticsearchConfig = elasticsearchConfig
            self.dynamodbConfig = dynamodbConfig
            self.serviceRoleArn = serviceRoleArn
            self.lambdaConfig = lambdaConfig
            self.`type` = `type`
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case relationalDatabaseConfig = "relationalDatabaseConfig"
            case name = "name"
            case httpConfig = "httpConfig"
            case elasticsearchConfig = "elasticsearchConfig"
            case dynamodbConfig = "dynamodbConfig"
            case serviceRoleArn = "serviceRoleArn"
            case lambdaConfig = "lambdaConfig"
            case `type` = "type"
            case apiId = "apiId"
        }
    }

    public struct ListResolversResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resolvers", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The Resolver objects.
        public let resolvers: [Resolver]?
        /// An identifier to be passed in the next request to this operation to return the next set of items in the list.
        public let nextToken: String?

        public init(resolvers: [Resolver]? = nil, nextToken: String? = nil) {
            self.resolvers = resolvers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resolvers = "resolvers"
            case nextToken = "nextToken"
        }
    }

    public struct ListResolversByFunctionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resolvers", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of resolvers.
        public let resolvers: [Resolver]?
        /// An identifier that can be used to return the next set of items in the list.
        public let nextToken: String?

        public init(resolvers: [Resolver]? = nil, nextToken: String? = nil) {
            self.resolvers = resolvers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resolvers = "resolvers"
            case nextToken = "nextToken"
        }
    }

    public struct GetTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: false, type: .structure)
        ]
        /// The Type object.
        public let `type`: `Type`?

        public init(type: `Type`? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct ListGraphqlApisRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serviceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "dynamodbConfig", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaConfig", required: false, type: .structure), 
            AWSShapeMember(label: "elasticsearchConfig", required: false, type: .structure), 
            AWSShapeMember(label: "httpConfig", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "dataSourceArn", required: false, type: .string), 
            AWSShapeMember(label: "relationalDatabaseConfig", required: false, type: .structure), 
            AWSShapeMember(label: "type", required: false, type: .enum)
        ]
        /// The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
        public let serviceRoleArn: String?
        /// Amazon DynamoDB settings.
        public let dynamodbConfig: DynamodbDataSourceConfig?
        /// AWS Lambda settings.
        public let lambdaConfig: LambdaDataSourceConfig?
        /// Amazon Elasticsearch Service settings.
        public let elasticsearchConfig: ElasticsearchDataSourceConfig?
        /// HTTP endpoint settings.
        public let httpConfig: HttpDataSourceConfig?
        /// The description of the data source.
        public let description: String?
        /// The name of the data source.
        public let name: String?
        /// The data source ARN.
        public let dataSourceArn: String?
        /// Relational database settings.
        public let relationalDatabaseConfig: RelationalDatabaseDataSourceConfig?
        /// The type of the data source.    AMAZON_DYNAMODB: The data source is an Amazon DynamoDB table.    AMAZON_ELASTICSEARCH: The data source is an Amazon Elasticsearch Service domain.    AWS_LAMBDA: The data source is an AWS Lambda function.    NONE: There is no data source. This type is used when you wish to invoke a GraphQL operation without connecting to a data source, such as performing data transformation with resolvers or triggering a subscription to be invoked from a mutation.    HTTP: The data source is an HTTP endpoint.    RELATIONAL_DATABASE: The data source is a relational database.  
        public let `type`: DataSourceType?

        public init(serviceRoleArn: String? = nil, dynamodbConfig: DynamodbDataSourceConfig? = nil, lambdaConfig: LambdaDataSourceConfig? = nil, elasticsearchConfig: ElasticsearchDataSourceConfig? = nil, httpConfig: HttpDataSourceConfig? = nil, description: String? = nil, name: String? = nil, dataSourceArn: String? = nil, relationalDatabaseConfig: RelationalDatabaseDataSourceConfig? = nil, type: DataSourceType? = nil) {
            self.serviceRoleArn = serviceRoleArn
            self.dynamodbConfig = dynamodbConfig
            self.lambdaConfig = lambdaConfig
            self.elasticsearchConfig = elasticsearchConfig
            self.httpConfig = httpConfig
            self.description = description
            self.name = name
            self.dataSourceArn = dataSourceArn
            self.relationalDatabaseConfig = relationalDatabaseConfig
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRoleArn = "serviceRoleArn"
            case dynamodbConfig = "dynamodbConfig"
            case lambdaConfig = "lambdaConfig"
            case elasticsearchConfig = "elasticsearchConfig"
            case httpConfig = "httpConfig"
            case description = "description"
            case name = "name"
            case dataSourceArn = "dataSourceArn"
            case relationalDatabaseConfig = "relationalDatabaseConfig"
            case `type` = "type"
        }
    }

    public struct CreateDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSource", required: false, type: .structure)
        ]
        /// The DataSource object.
        public let dataSource: DataSource?

        public init(dataSource: DataSource? = nil) {
            self.dataSource = dataSource
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
        }
    }

    public struct ListDataSourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSources", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The DataSource objects.
        public let dataSources: [DataSource]?
        /// An identifier to be passed in the next request to this operation to return the next set of items in the list.
        public let nextToken: String?

        public init(dataSources: [DataSource]? = nil, nextToken: String? = nil) {
            self.dataSources = dataSources
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataSources = "dataSources"
            case nextToken = "nextToken"
        }
    }

    public struct HttpDataSourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "endpoint", required: false, type: .string)
        ]
        /// The authorization config in case the HTTP endpoint requires authorization.
        public let authorizationConfig: AuthorizationConfig?
        /// The HTTP URL endpoint. You can either specify the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If the port is not specified, AWS AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.
        public let endpoint: String?

        public init(authorizationConfig: AuthorizationConfig? = nil, endpoint: String? = nil) {
            self.authorizationConfig = authorizationConfig
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig = "authorizationConfig"
            case endpoint = "endpoint"
        }
    }

    public struct CreateTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "format", required: true, type: .enum), 
            AWSShapeMember(label: "definition", required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String
        /// The type format: SDL or JSON.
        public let format: TypeDefinitionFormat
        /// The type definition, in GraphQL Schema Definition Language (SDL) format. For more information, see the GraphQL SDL documentation.
        public let definition: String

        public init(apiId: String, format: TypeDefinitionFormat, definition: String) {
            self.apiId = apiId
            self.format = format
            self.definition = definition
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case format = "format"
            case definition = "definition"
        }
    }

    public struct DeleteTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "typeName", location: .uri(locationName: "typeName"), required: true, type: .string)
        ]
        /// The API ID.
        public let apiId: String
        /// The type name.
        public let typeName: String

        public init(apiId: String, typeName: String) {
            self.apiId = apiId
            self.typeName = typeName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case typeName = "typeName"
        }
    }

    public struct CreateFunctionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "functionVersion", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "dataSourceName", required: true, type: .string), 
            AWSShapeMember(label: "responseMappingTemplate", required: false, type: .string), 
            AWSShapeMember(label: "requestMappingTemplate", required: true, type: .string)
        ]
        /// The GraphQL API ID.
        public let apiId: String
        /// The Function description.
        public let description: String?
        /// The version of the request mapping template. Currently the supported value is 2018-05-29. 
        public let functionVersion: String
        /// The Function name. The function name does not have to be unique.
        public let name: String
        /// The Function DataSource name.
        public let dataSourceName: String
        /// The Function response mapping template. 
        public let responseMappingTemplate: String?
        /// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
        public let requestMappingTemplate: String

        public init(apiId: String, description: String? = nil, functionVersion: String, name: String, dataSourceName: String, responseMappingTemplate: String? = nil, requestMappingTemplate: String) {
            self.apiId = apiId
            self.description = description
            self.functionVersion = functionVersion
            self.name = name
            self.dataSourceName = dataSourceName
            self.responseMappingTemplate = responseMappingTemplate
            self.requestMappingTemplate = requestMappingTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case description = "description"
            case functionVersion = "functionVersion"
            case name = "name"
            case dataSourceName = "dataSourceName"
            case responseMappingTemplate = "responseMappingTemplate"
            case requestMappingTemplate = "requestMappingTemplate"
        }
    }

    public struct ListApiKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The API ID.
        public let apiId: String
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextToken: String?
        /// The maximum number of results you want the request to return.
        public let maxResults: Int32?

        public init(apiId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.apiId = apiId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct PipelineConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functions", required: false, type: .list)
        ]
        /// A list of Function objects.
        public let functions: [String]?

        public init(functions: [String]? = nil) {
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case functions = "functions"
        }
    }

    public struct ListApiKeysResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKeys", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The ApiKey objects.
        public let apiKeys: [ApiKey]?
        /// An identifier to be passed in the next request to this operation to return the next set of items in the list.
        public let nextToken: String?

        public init(apiKeys: [ApiKey]? = nil, nextToken: String? = nil) {
            self.apiKeys = apiKeys
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeys = "apiKeys"
            case nextToken = "nextToken"
        }
    }

}