// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Support {

    public struct DescribeCommunicationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A resumption point for pagination.
        public let nextToken: String?
        /// The communications for the case.
        public let communications: [Communication]?

        public init(nextToken: String? = nil, communications: [Communication]? = nil) {
            self.nextToken = nextToken
            self.communications = communications
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let communications = dictionary["communications"] as? [[String: Any]] {
                self.communications = try communications.map({ try Communication(dictionary: $0) })
            } else { 
                self.communications = nil
            }
        }
    }

    public struct TrustedAdvisorCostOptimizingSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The estimated monthly savings that might be realized if the recommended actions are taken.
        public let estimatedMonthlySavings: Double
        /// The estimated percentage of savings that might be realized if the recommended actions are taken.
        public let estimatedPercentMonthlySavings: Double

        public init(estimatedMonthlySavings: Double, estimatedPercentMonthlySavings: Double) {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.estimatedPercentMonthlySavings = estimatedPercentMonthlySavings
        }

        public init(dictionary: [String: Any]) throws {
            guard let estimatedMonthlySavings = dictionary["estimatedMonthlySavings"] as? Double else { throw InitializableError.missingRequiredParam("estimatedMonthlySavings") }
            self.estimatedMonthlySavings = estimatedMonthlySavings
            guard let estimatedPercentMonthlySavings = dictionary["estimatedPercentMonthlySavings"] as? Double else { throw InitializableError.missingRequiredParam("estimatedPercentMonthlySavings") }
            self.estimatedPercentMonthlySavings = estimatedPercentMonthlySavings
        }
    }

    public struct DescribeTrustedAdvisorCheckSummariesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The summary information for the requested Trusted Advisor checks.
        public let summaries: [TrustedAdvisorCheckSummary]

        public init(summaries: [TrustedAdvisorCheckSummary]) {
            self.summaries = summaries
        }

        public init(dictionary: [String: Any]) throws {
            guard let summaries = dictionary["summaries"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("summaries") }
            self.summaries = try summaries.map({ try TrustedAdvisorCheckSummary(dictionary: $0) })
        }
    }

    public struct ResolveCaseResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the case when the ResolveCase request was sent.
        public let initialCaseStatus: String?
        /// The status of the case after the ResolveCase request was processed.
        public let finalCaseStatus: String?

        public init(initialCaseStatus: String? = nil, finalCaseStatus: String? = nil) {
            self.initialCaseStatus = initialCaseStatus
            self.finalCaseStatus = finalCaseStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.initialCaseStatus = dictionary["initialCaseStatus"] as? String
            self.finalCaseStatus = dictionary["finalCaseStatus"] as? String
        }
    }

    public struct DescribeCasesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The details for the cases that match the request.
        public let cases: [CaseDetails]?
        /// A resumption point for pagination.
        public let nextToken: String?

        public init(cases: [CaseDetails]? = nil, nextToken: String? = nil) {
            self.cases = cases
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let cases = dictionary["cases"] as? [[String: Any]] {
                self.cases = try cases.map({ try CaseDetails(dictionary: $0) })
            } else { 
                self.cases = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct CreateCaseResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String?

        public init(caseId: String? = nil) {
            self.caseId = caseId
        }

        public init(dictionary: [String: Any]) throws {
            self.caseId = dictionary["caseId"] as? String
        }
    }

    public struct DescribeCasesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The start date for a filtered date search on support case communications. Case communications are available for 12 months after creation.
        public let afterTime: String?
        /// A resumption point for pagination.
        public let nextToken: String?
        /// Specifies whether communications should be included in the DescribeCases results. The default is true.
        public let includeCommunications: Bool?
        /// The ID displayed for a case in the AWS Support Center user interface.
        public let displayId: String?
        /// Specifies whether resolved support cases should be included in the DescribeCases results. The default is false.
        public let includeResolvedCases: Bool?
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?
        /// A list of ID numbers of the support cases you want returned. The maximum number of cases is 100.
        public let caseIdList: [String]?
        /// The end date for a filtered date search on support case communications. Case communications are available for 12 months after creation.
        public let beforeTime: String?
        /// The maximum number of results to return before paginating.
        public let maxResults: Int32?

        public init(afterTime: String? = nil, nextToken: String? = nil, includeCommunications: Bool? = nil, displayId: String? = nil, includeResolvedCases: Bool? = nil, language: String? = nil, caseIdList: [String]? = nil, beforeTime: String? = nil, maxResults: Int32? = nil) {
            self.afterTime = afterTime
            self.nextToken = nextToken
            self.includeCommunications = includeCommunications
            self.displayId = displayId
            self.includeResolvedCases = includeResolvedCases
            self.language = language
            self.caseIdList = caseIdList
            self.beforeTime = beforeTime
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.afterTime = dictionary["afterTime"] as? String
            self.nextToken = dictionary["nextToken"] as? String
            self.includeCommunications = dictionary["includeCommunications"] as? Bool
            self.displayId = dictionary["displayId"] as? String
            self.includeResolvedCases = dictionary["includeResolvedCases"] as? Bool
            self.language = dictionary["language"] as? String
            self.caseIdList = dictionary["caseIdList"] as? [String]
            self.beforeTime = dictionary["beforeTime"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct DescribeCommunicationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String
        /// The start date for a filtered date search on support case communications. Case communications are available for 12 months after creation.
        public let afterTime: String?
        /// A resumption point for pagination.
        public let nextToken: String?
        /// The maximum number of results to return before paginating.
        public let maxResults: Int32?
        /// The end date for a filtered date search on support case communications. Case communications are available for 12 months after creation.
        public let beforeTime: String?

        public init(caseId: String, afterTime: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil, beforeTime: String? = nil) {
            self.caseId = caseId
            self.afterTime = afterTime
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.beforeTime = beforeTime
        }

        public init(dictionary: [String: Any]) throws {
            guard let caseId = dictionary["caseId"] as? String else { throw InitializableError.missingRequiredParam("caseId") }
            self.caseId = caseId
            self.afterTime = dictionary["afterTime"] as? String
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
            self.beforeTime = dictionary["beforeTime"] as? String
        }
    }

    public struct AddCommunicationToCaseRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String?
        /// The email addresses in the CC line of an email to be added to the support case.
        public let ccEmailAddresses: [String]?
        /// The body of an email communication to add to the support case.
        public let communicationBody: String
        /// The ID of a set of one or more attachments for the communication to add to the case. Create the set by calling AddAttachmentsToSet 
        public let attachmentSetId: String?

        public init(caseId: String? = nil, ccEmailAddresses: [String]? = nil, communicationBody: String, attachmentSetId: String? = nil) {
            self.caseId = caseId
            self.ccEmailAddresses = ccEmailAddresses
            self.communicationBody = communicationBody
            self.attachmentSetId = attachmentSetId
        }

        public init(dictionary: [String: Any]) throws {
            self.caseId = dictionary["caseId"] as? String
            self.ccEmailAddresses = dictionary["ccEmailAddresses"] as? [String]
            guard let communicationBody = dictionary["communicationBody"] as? String else { throw InitializableError.missingRequiredParam("communicationBody") }
            self.communicationBody = communicationBody
            self.attachmentSetId = dictionary["attachmentSetId"] as? String
        }
    }

    public struct DescribeTrustedAdvisorCheckRefreshStatusesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The refresh status of the specified Trusted Advisor checks.
        public let statuses: [TrustedAdvisorCheckRefreshStatus]

        public init(statuses: [TrustedAdvisorCheckRefreshStatus]) {
            self.statuses = statuses
        }

        public init(dictionary: [String: Any]) throws {
            guard let statuses = dictionary["statuses"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("statuses") }
            self.statuses = try statuses.map({ try TrustedAdvisorCheckRefreshStatus(dictionary: $0) })
        }
    }

    public struct TrustedAdvisorCheckSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".
        public let status: String
        /// The unique identifier for the Trusted Advisor check.
        public let checkId: String
        /// Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.
        public let categorySpecificSummary: TrustedAdvisorCategorySpecificSummary
        /// The time of the last refresh of the check.
        public let timestamp: String
        /// Specifies whether the Trusted Advisor check has flagged resources.
        public let hasFlaggedResources: Bool?
        public let resourcesSummary: TrustedAdvisorResourcesSummary

        public init(status: String, checkId: String, categorySpecificSummary: TrustedAdvisorCategorySpecificSummary, timestamp: String, hasFlaggedResources: Bool? = nil, resourcesSummary: TrustedAdvisorResourcesSummary) {
            self.status = status
            self.checkId = checkId
            self.categorySpecificSummary = categorySpecificSummary
            self.timestamp = timestamp
            self.hasFlaggedResources = hasFlaggedResources
            self.resourcesSummary = resourcesSummary
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["status"] as? String else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            guard let checkId = dictionary["checkId"] as? String else { throw InitializableError.missingRequiredParam("checkId") }
            self.checkId = checkId
            guard let categorySpecificSummary = dictionary["categorySpecificSummary"] as? [String: Any] else { throw InitializableError.missingRequiredParam("categorySpecificSummary") }
            self.categorySpecificSummary = try Support.TrustedAdvisorCategorySpecificSummary(dictionary: categorySpecificSummary)
            guard let timestamp = dictionary["timestamp"] as? String else { throw InitializableError.missingRequiredParam("timestamp") }
            self.timestamp = timestamp
            self.hasFlaggedResources = dictionary["hasFlaggedResources"] as? Bool
            guard let resourcesSummary = dictionary["resourcesSummary"] as? [String: Any] else { throw InitializableError.missingRequiredParam("resourcesSummary") }
            self.resourcesSummary = try Support.TrustedAdvisorResourcesSummary(dictionary: resourcesSummary)
        }
    }

    public struct DescribeTrustedAdvisorCheckResultRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?
        /// The unique identifier for the Trusted Advisor check.
        public let checkId: String

        public init(language: String? = nil, checkId: String) {
            self.language = language
            self.checkId = checkId
        }

        public init(dictionary: [String: Any]) throws {
            self.language = dictionary["language"] as? String
            guard let checkId = dictionary["checkId"] as? String else { throw InitializableError.missingRequiredParam("checkId") }
            self.checkId = checkId
        }
    }

    public struct DescribeAttachmentRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the attachment to return. Attachment IDs are returned by the DescribeCommunications operation.
        public let attachmentId: String

        public init(attachmentId: String) {
            self.attachmentId = attachmentId
        }

        public init(dictionary: [String: Any]) throws {
            guard let attachmentId = dictionary["attachmentId"] as? String else { throw InitializableError.missingRequiredParam("attachmentId") }
            self.attachmentId = attachmentId
        }
    }

    public struct DescribeTrustedAdvisorCheckSummariesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IDs of the Trusted Advisor checks.
        public let checkIds: [String]

        public init(checkIds: [String]) {
            self.checkIds = checkIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let checkIds = dictionary["checkIds"] as? [String] else { throw InitializableError.missingRequiredParam("checkIds") }
            self.checkIds = checkIds
        }
    }

    public struct TrustedAdvisorCheckResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".
        public let status: String
        /// The unique identifier for the Trusted Advisor check.
        public let checkId: String
        /// The details about each resource listed in the check result.
        public let flaggedResources: [TrustedAdvisorResourceDetail]
        /// The time of the last refresh of the check.
        public let timestamp: String
        public let resourcesSummary: TrustedAdvisorResourcesSummary
        /// Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.
        public let categorySpecificSummary: TrustedAdvisorCategorySpecificSummary

        public init(status: String, checkId: String, flaggedResources: [TrustedAdvisorResourceDetail], timestamp: String, resourcesSummary: TrustedAdvisorResourcesSummary, categorySpecificSummary: TrustedAdvisorCategorySpecificSummary) {
            self.status = status
            self.checkId = checkId
            self.flaggedResources = flaggedResources
            self.timestamp = timestamp
            self.resourcesSummary = resourcesSummary
            self.categorySpecificSummary = categorySpecificSummary
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["status"] as? String else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            guard let checkId = dictionary["checkId"] as? String else { throw InitializableError.missingRequiredParam("checkId") }
            self.checkId = checkId
            guard let flaggedResources = dictionary["flaggedResources"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("flaggedResources") }
            self.flaggedResources = try flaggedResources.map({ try TrustedAdvisorResourceDetail(dictionary: $0) })
            guard let timestamp = dictionary["timestamp"] as? String else { throw InitializableError.missingRequiredParam("timestamp") }
            self.timestamp = timestamp
            guard let resourcesSummary = dictionary["resourcesSummary"] as? [String: Any] else { throw InitializableError.missingRequiredParam("resourcesSummary") }
            self.resourcesSummary = try Support.TrustedAdvisorResourcesSummary(dictionary: resourcesSummary)
            guard let categorySpecificSummary = dictionary["categorySpecificSummary"] as? [String: Any] else { throw InitializableError.missingRequiredParam("categorySpecificSummary") }
            self.categorySpecificSummary = try Support.TrustedAdvisorCategorySpecificSummary(dictionary: categorySpecificSummary)
        }
    }

    public struct DescribeTrustedAdvisorChecksResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about all available Trusted Advisor checks.
        public let checks: [TrustedAdvisorCheckDescription]

        public init(checks: [TrustedAdvisorCheckDescription]) {
            self.checks = checks
        }

        public init(dictionary: [String: Any]) throws {
            guard let checks = dictionary["checks"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("checks") }
            self.checks = try checks.map({ try TrustedAdvisorCheckDescription(dictionary: $0) })
        }
    }

    public struct DescribeAttachmentResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attachment content and file name.
        public let attachment: Attachment?

        public init(attachment: Attachment? = nil) {
            self.attachment = attachment
        }

        public init(dictionary: [String: Any]) throws {
            if let attachment = dictionary["attachment"] as? [String: Any] { self.attachment = try Support.Attachment(dictionary: attachment) } else { self.attachment = nil }
        }
    }

    public struct Service: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of categories that describe the type of support issue a case describes. Categories consist of a category name and a category code. Category names and codes are passed to AWS Support when you call CreateCase.
        public let categories: [Category]?
        /// The friendly name for an AWS service. The code element contains the corresponding code.
        public let name: String?
        /// The code for an AWS service returned by the DescribeServices response. The name element contains the corresponding friendly name.
        public let code: String?

        public init(categories: [Category]? = nil, name: String? = nil, code: String? = nil) {
            self.categories = categories
            self.name = name
            self.code = code
        }

        public init(dictionary: [String: Any]) throws {
            if let categories = dictionary["categories"] as? [[String: Any]] {
                self.categories = try categories.map({ try Category(dictionary: $0) })
            } else { 
                self.categories = nil
            }
            self.name = dictionary["name"] as? String
            self.code = dictionary["code"] as? String
        }
    }

    public struct TrustedAdvisorResourcesSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of AWS resources that were flagged (listed) by the Trusted Advisor check.
        public let resourcesFlagged: Int64
        /// The number of AWS resources ignored by Trusted Advisor because information was unavailable.
        public let resourcesIgnored: Int64
        /// The number of AWS resources ignored by Trusted Advisor because they were marked as suppressed by the user.
        public let resourcesSuppressed: Int64
        /// The number of AWS resources that were analyzed by the Trusted Advisor check.
        public let resourcesProcessed: Int64

        public init(resourcesFlagged: Int64, resourcesIgnored: Int64, resourcesSuppressed: Int64, resourcesProcessed: Int64) {
            self.resourcesFlagged = resourcesFlagged
            self.resourcesIgnored = resourcesIgnored
            self.resourcesSuppressed = resourcesSuppressed
            self.resourcesProcessed = resourcesProcessed
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourcesFlagged = dictionary["resourcesFlagged"] as? Int64 else { throw InitializableError.missingRequiredParam("resourcesFlagged") }
            self.resourcesFlagged = resourcesFlagged
            guard let resourcesIgnored = dictionary["resourcesIgnored"] as? Int64 else { throw InitializableError.missingRequiredParam("resourcesIgnored") }
            self.resourcesIgnored = resourcesIgnored
            guard let resourcesSuppressed = dictionary["resourcesSuppressed"] as? Int64 else { throw InitializableError.missingRequiredParam("resourcesSuppressed") }
            self.resourcesSuppressed = resourcesSuppressed
            guard let resourcesProcessed = dictionary["resourcesProcessed"] as? Int64 else { throw InitializableError.missingRequiredParam("resourcesProcessed") }
            self.resourcesProcessed = resourcesProcessed
        }
    }

    public struct CaseDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The email address of the account that submitted the case.
        public let submittedBy: String?
        /// The status of the case.
        public let status: String?
        /// The code for the AWS service returned by the call to DescribeServices.
        public let serviceCode: String?
        /// The ID displayed for the case in the AWS Support Center. This is a numeric string.
        public let displayId: String?
        /// The email addresses that receive copies of communication about the case.
        public let ccEmailAddresses: [String]?
        /// The code for the severity level returned by the call to DescribeSeverityLevels.
        public let severityCode: String?
        /// The time that the case was case created in the AWS Support Center.
        public let timeCreated: String?
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?
        /// The category of problem for the AWS Support case.
        public let categoryCode: String?
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String?
        /// The five most recent communications between you and AWS Support Center, including the IDs of any attachments to the communications. Also includes a nextToken that you can use to retrieve earlier communications.
        public let recentCommunications: RecentCaseCommunications?
        /// The subject line for the case in the AWS Support Center.
        public let subject: String?

        public init(submittedBy: String? = nil, status: String? = nil, serviceCode: String? = nil, displayId: String? = nil, ccEmailAddresses: [String]? = nil, severityCode: String? = nil, timeCreated: String? = nil, language: String? = nil, categoryCode: String? = nil, caseId: String? = nil, recentCommunications: RecentCaseCommunications? = nil, subject: String? = nil) {
            self.submittedBy = submittedBy
            self.status = status
            self.serviceCode = serviceCode
            self.displayId = displayId
            self.ccEmailAddresses = ccEmailAddresses
            self.severityCode = severityCode
            self.timeCreated = timeCreated
            self.language = language
            self.categoryCode = categoryCode
            self.caseId = caseId
            self.recentCommunications = recentCommunications
            self.subject = subject
        }

        public init(dictionary: [String: Any]) throws {
            self.submittedBy = dictionary["submittedBy"] as? String
            self.status = dictionary["status"] as? String
            self.serviceCode = dictionary["serviceCode"] as? String
            self.displayId = dictionary["displayId"] as? String
            self.ccEmailAddresses = dictionary["ccEmailAddresses"] as? [String]
            self.severityCode = dictionary["severityCode"] as? String
            self.timeCreated = dictionary["timeCreated"] as? String
            self.language = dictionary["language"] as? String
            self.categoryCode = dictionary["categoryCode"] as? String
            self.caseId = dictionary["caseId"] as? String
            if let recentCommunications = dictionary["recentCommunications"] as? [String: Any] { self.recentCommunications = try Support.RecentCaseCommunications(dictionary: recentCommunications) } else { self.recentCommunications = nil }
            self.subject = dictionary["subject"] as? String
        }
    }

    public struct DescribeServicesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A JSON-formatted list of AWS services.
        public let services: [Service]?

        public init(services: [Service]? = nil) {
            self.services = services
        }

        public init(dictionary: [String: Any]) throws {
            if let services = dictionary["services"] as? [[String: Any]] {
                self.services = try services.map({ try Service(dictionary: $0) })
            } else { 
                self.services = nil
            }
        }
    }

    public struct AddAttachmentsToSetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more attachments to add to the set. The limit is 3 attachments per set, and the size limit is 5 MB per attachment.
        public let attachments: [Attachment]
        /// The ID of the attachment set. If an attachmentSetId is not specified, a new attachment set is created, and the ID of the set is returned in the response. If an attachmentSetId is specified, the attachments are added to the specified set, if it exists.
        public let attachmentSetId: String?

        public init(attachments: [Attachment], attachmentSetId: String? = nil) {
            self.attachments = attachments
            self.attachmentSetId = attachmentSetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let attachments = dictionary["attachments"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("attachments") }
            self.attachments = try attachments.map({ try Attachment(dictionary: $0) })
            self.attachmentSetId = dictionary["attachmentSetId"] as? String
        }
    }

    public struct ResolveCaseRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String?

        public init(caseId: String? = nil) {
            self.caseId = caseId
        }

        public init(dictionary: [String: Any]) throws {
            self.caseId = dictionary["caseId"] as? String
        }
    }

    public struct AddAttachmentsToSetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ID of the attachment set. If an attachmentSetId was not specified, a new attachment set is created, and the ID of the set is returned in the response. If an attachmentSetId was specified, the attachments are added to the specified set, if it exists.
        public let attachmentSetId: String?
        /// The time and date when the attachment set expires.
        public let expiryTime: String?

        public init(attachmentSetId: String? = nil, expiryTime: String? = nil) {
            self.attachmentSetId = attachmentSetId
            self.expiryTime = expiryTime
        }

        public init(dictionary: [String: Any]) throws {
            self.attachmentSetId = dictionary["attachmentSetId"] as? String
            self.expiryTime = dictionary["expiryTime"] as? String
        }
    }

    public struct Category: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The category name for the support case.
        public let name: String?
        /// The category code for the support case.
        public let code: String?

        public init(name: String? = nil, code: String? = nil) {
            self.name = name
            self.code = code
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.code = dictionary["code"] as? String
        }
    }

    public struct DescribeTrustedAdvisorCheckRefreshStatusesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IDs of the Trusted Advisor checks to get the status of. Note: Specifying the check ID of a check that is automatically refreshed causes an InvalidParameterValue error.
        public let checkIds: [String]

        public init(checkIds: [String]) {
            self.checkIds = checkIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let checkIds = dictionary["checkIds"] as? [String] else { throw InitializableError.missingRequiredParam("checkIds") }
            self.checkIds = checkIds
        }
    }

    public struct DescribeSeverityLevelsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?

        public init(language: String? = nil) {
            self.language = language
        }

        public init(dictionary: [String: Any]) throws {
            self.language = dictionary["language"] as? String
        }
    }

    public struct RefreshTrustedAdvisorCheckRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier for the Trusted Advisor check to refresh. Note: Specifying the check ID of a check that is automatically refreshed causes an InvalidParameterValue error.
        public let checkId: String

        public init(checkId: String) {
            self.checkId = checkId
        }

        public init(dictionary: [String: Any]) throws {
            guard let checkId = dictionary["checkId"] as? String else { throw InitializableError.missingRequiredParam("checkId") }
            self.checkId = checkId
        }
    }

    public struct TrustedAdvisorCategorySpecificSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The summary information about cost savings for a Trusted Advisor check that is in the Cost Optimizing category.
        public let costOptimizing: TrustedAdvisorCostOptimizingSummary?

        public init(costOptimizing: TrustedAdvisorCostOptimizingSummary? = nil) {
            self.costOptimizing = costOptimizing
        }

        public init(dictionary: [String: Any]) throws {
            if let costOptimizing = dictionary["costOptimizing"] as? [String: Any] { self.costOptimizing = try Support.TrustedAdvisorCostOptimizingSummary(dictionary: costOptimizing) } else { self.costOptimizing = nil }
        }
    }

    public struct DescribeTrustedAdvisorCheckResultResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The detailed results of the Trusted Advisor check.
        public let result: TrustedAdvisorCheckResult?

        public init(result: TrustedAdvisorCheckResult? = nil) {
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            if let result = dictionary["result"] as? [String: Any] { self.result = try Support.TrustedAdvisorCheckResult(dictionary: result) } else { self.result = nil }
        }
    }

    public struct DescribeSeverityLevelsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The available severity levels for the support case. Available severity levels are defined by your service level agreement with AWS.
        public let severityLevels: [SeverityLevel]?

        public init(severityLevels: [SeverityLevel]? = nil) {
            self.severityLevels = severityLevels
        }

        public init(dictionary: [String: Any]) throws {
            if let severityLevels = dictionary["severityLevels"] as? [[String: Any]] {
                self.severityLevels = try severityLevels.map({ try SeverityLevel(dictionary: $0) })
            } else { 
                self.severityLevels = nil
            }
        }
    }

    public struct DescribeServicesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?
        /// A JSON-formatted list of service codes available for AWS services.
        public let serviceCodeList: [String]?

        public init(language: String? = nil, serviceCodeList: [String]? = nil) {
            self.language = language
            self.serviceCodeList = serviceCodeList
        }

        public init(dictionary: [String: Any]) throws {
            self.language = dictionary["language"] as? String
            self.serviceCodeList = dictionary["serviceCodeList"] as? [String]
        }
    }

    public struct AddCommunicationToCaseResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// True if AddCommunicationToCase succeeds. Otherwise, returns an error.
        public let result: Bool?

        public init(result: Bool? = nil) {
            self.result = result
        }

        public init(dictionary: [String: Any]) throws {
            self.result = dictionary["result"] as? Bool
        }
    }

    public struct TrustedAdvisorCheckDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The column headings for the data returned by the Trusted Advisor check. The order of the headings corresponds to the order of the data in the Metadata element of the TrustedAdvisorResourceDetail for the check. Metadata contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data. 
        public let metadata: [String]
        /// The display name for the Trusted Advisor check.
        public let name: String
        /// The description of the Trusted Advisor check, which includes the alert criteria and recommended actions (contains HTML markup).
        public let description: String
        /// The unique identifier for the Trusted Advisor check.
        public let id: String
        /// The category of the Trusted Advisor check.
        public let category: String

        public init(metadata: [String], name: String, description: String, id: String, category: String) {
            self.metadata = metadata
            self.name = name
            self.description = description
            self.id = id
            self.category = category
        }

        public init(dictionary: [String: Any]) throws {
            guard let metadata = dictionary["metadata"] as? [String] else { throw InitializableError.missingRequiredParam("metadata") }
            self.metadata = metadata
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let description = dictionary["description"] as? String else { throw InitializableError.missingRequiredParam("description") }
            self.description = description
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            guard let category = dictionary["category"] as? String else { throw InitializableError.missingRequiredParam("category") }
            self.category = category
        }
    }

    public struct Attachment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the attachment file.
        public let fileName: String?
        /// The content of the attachment file.
        public let data: Data?

        public init(fileName: String? = nil, data: Data? = nil) {
            self.fileName = fileName
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            self.fileName = dictionary["fileName"] as? String
            self.data = dictionary["data"] as? Data
        }
    }

    public struct RefreshTrustedAdvisorCheckResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current refresh status for a check, including the amount of time until the check is eligible for refresh.
        public let status: TrustedAdvisorCheckRefreshStatus

        public init(status: TrustedAdvisorCheckRefreshStatus) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("status") }
            self.status = try Support.TrustedAdvisorCheckRefreshStatus(dictionary: status)
        }
    }

    public struct TrustedAdvisorResourceDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional information about the identified resource. The exact metadata and its order can be obtained by inspecting the TrustedAdvisorCheckDescription object returned by the call to DescribeTrustedAdvisorChecks. Metadata contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data. 
        public let metadata: [String]
        /// The status code for the resource identified in the Trusted Advisor check.
        public let status: String
        /// Specifies whether the AWS resource was ignored by Trusted Advisor because it was marked as suppressed by the user.
        public let isSuppressed: Bool?
        /// The unique identifier for the identified resource.
        public let resourceId: String
        /// The AWS region in which the identified resource is located.
        public let region: String?

        public init(metadata: [String], status: String, isSuppressed: Bool? = nil, resourceId: String, region: String? = nil) {
            self.metadata = metadata
            self.status = status
            self.isSuppressed = isSuppressed
            self.resourceId = resourceId
            self.region = region
        }

        public init(dictionary: [String: Any]) throws {
            guard let metadata = dictionary["metadata"] as? [String] else { throw InitializableError.missingRequiredParam("metadata") }
            self.metadata = metadata
            guard let status = dictionary["status"] as? String else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            self.isSuppressed = dictionary["isSuppressed"] as? Bool
            guard let resourceId = dictionary["resourceId"] as? String else { throw InitializableError.missingRequiredParam("resourceId") }
            self.resourceId = resourceId
            self.region = dictionary["region"] as? String
        }
    }

    public struct DescribeTrustedAdvisorChecksRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String

        public init(language: String) {
            self.language = language
        }

        public init(dictionary: [String: Any]) throws {
            guard let language = dictionary["language"] as? String else { throw InitializableError.missingRequiredParam("language") }
            self.language = language
        }
    }

    public struct TrustedAdvisorCheckRefreshStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the Trusted Advisor check for which a refresh has been requested: "none", "enqueued", "processing", "success", or "abandoned".
        public let status: String
        /// The unique identifier for the Trusted Advisor check.
        public let checkId: String
        /// The amount of time, in milliseconds, until the Trusted Advisor check is eligible for refresh.
        public let millisUntilNextRefreshable: Int64

        public init(status: String, checkId: String, millisUntilNextRefreshable: Int64) {
            self.status = status
            self.checkId = checkId
            self.millisUntilNextRefreshable = millisUntilNextRefreshable
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["status"] as? String else { throw InitializableError.missingRequiredParam("status") }
            self.status = status
            guard let checkId = dictionary["checkId"] as? String else { throw InitializableError.missingRequiredParam("checkId") }
            self.checkId = checkId
            guard let millisUntilNextRefreshable = dictionary["millisUntilNextRefreshable"] as? Int64 else { throw InitializableError.missingRequiredParam("millisUntilNextRefreshable") }
            self.millisUntilNextRefreshable = millisUntilNextRefreshable
        }
    }

    public struct Communication: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The AWS Support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-12345678910-2013-c4c1d2bf33c5cf47 
        public let caseId: String?
        /// The email address of the account that submitted the AWS Support case.
        public let submittedBy: String?
        /// The text of the communication between the customer and AWS Support.
        public let body: String?
        /// Information about the attachments to the case communication.
        public let attachmentSet: [AttachmentDetails]?
        /// The time the communication was created.
        public let timeCreated: String?

        public init(caseId: String? = nil, submittedBy: String? = nil, body: String? = nil, attachmentSet: [AttachmentDetails]? = nil, timeCreated: String? = nil) {
            self.caseId = caseId
            self.submittedBy = submittedBy
            self.body = body
            self.attachmentSet = attachmentSet
            self.timeCreated = timeCreated
        }

        public init(dictionary: [String: Any]) throws {
            self.caseId = dictionary["caseId"] as? String
            self.submittedBy = dictionary["submittedBy"] as? String
            self.body = dictionary["body"] as? String
            if let attachmentSet = dictionary["attachmentSet"] as? [[String: Any]] {
                self.attachmentSet = try attachmentSet.map({ try AttachmentDetails(dictionary: $0) })
            } else { 
                self.attachmentSet = nil
            }
            self.timeCreated = dictionary["timeCreated"] as? String
        }
    }

    public struct SeverityLevel: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the severity level that corresponds to the severity level code.
        public let name: String?
        /// One of four values: "low," "medium," "high," and "urgent". These values correspond to response times returned to the caller in severityLevel.name. 
        public let code: String?

        public init(name: String? = nil, code: String? = nil) {
            self.name = name
            self.code = code
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.code = dictionary["code"] as? String
        }
    }

    public struct AttachmentDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The file name of the attachment.
        public let fileName: String?
        /// The ID of the attachment.
        public let attachmentId: String?

        public init(fileName: String? = nil, attachmentId: String? = nil) {
            self.fileName = fileName
            self.attachmentId = attachmentId
        }

        public init(dictionary: [String: Any]) throws {
            self.fileName = dictionary["fileName"] as? String
            self.attachmentId = dictionary["attachmentId"] as? String
        }
    }

    public struct RecentCaseCommunications: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A resumption point for pagination.
        public let nextToken: String?
        /// The five most recent communications associated with the case.
        public let communications: [Communication]?

        public init(nextToken: String? = nil, communications: [Communication]? = nil) {
            self.nextToken = nextToken
            self.communications = communications
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let communications = dictionary["communications"] as? [[String: Any]] {
                self.communications = try communications.map({ try Communication(dictionary: $0) })
            } else { 
                self.communications = nil
            }
        }
    }

    public struct CreateCaseRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of issue for the case. You can specify either "customer-service" or "technical." If you do not indicate a value, the default is "technical."
        public let issueType: String?
        /// The code for the AWS service returned by the call to DescribeServices.
        public let serviceCode: String?
        /// The ID of a set of one or more attachments for the case. Create the set by using AddAttachmentsToSet.
        public let attachmentSetId: String?
        /// The code for the severity level returned by the call to DescribeSeverityLevels.  The availability of severity levels depends on each customer's support subscription. In other words, your subscription may not necessarily require the urgent level of response time. 
        public let severityCode: String?
        /// A list of email addresses that AWS Support copies on case correspondence.
        public let ccEmailAddresses: [String]?
        /// The category of problem for the AWS Support case.
        public let categoryCode: String?
        /// The ISO 639-1 code for the language in which AWS provides support. AWS Support currently supports English ("en") and Japanese ("ja"). Language parameters must be passed explicitly for operations that take them.
        public let language: String?
        /// The communication body text when you create an AWS Support case by calling CreateCase.
        public let communicationBody: String
        /// The title of the AWS Support case.
        public let subject: String

        public init(issueType: String? = nil, serviceCode: String? = nil, attachmentSetId: String? = nil, severityCode: String? = nil, ccEmailAddresses: [String]? = nil, categoryCode: String? = nil, language: String? = nil, communicationBody: String, subject: String) {
            self.issueType = issueType
            self.serviceCode = serviceCode
            self.attachmentSetId = attachmentSetId
            self.severityCode = severityCode
            self.ccEmailAddresses = ccEmailAddresses
            self.categoryCode = categoryCode
            self.language = language
            self.communicationBody = communicationBody
            self.subject = subject
        }

        public init(dictionary: [String: Any]) throws {
            self.issueType = dictionary["issueType"] as? String
            self.serviceCode = dictionary["serviceCode"] as? String
            self.attachmentSetId = dictionary["attachmentSetId"] as? String
            self.severityCode = dictionary["severityCode"] as? String
            self.ccEmailAddresses = dictionary["ccEmailAddresses"] as? [String]
            self.categoryCode = dictionary["categoryCode"] as? String
            self.language = dictionary["language"] as? String
            guard let communicationBody = dictionary["communicationBody"] as? String else { throw InitializableError.missingRequiredParam("communicationBody") }
            self.communicationBody = communicationBody
            guard let subject = dictionary["subject"] as? String else { throw InitializableError.missingRequiredParam("subject") }
            self.subject = subject
        }
    }

}