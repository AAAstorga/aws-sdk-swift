// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AutoScaling {

    public struct DescribeAutoScalingNotificationTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingNotificationTypes", required: false, type: .list)
        ]
        /// The notification types.
        public let autoScalingNotificationTypes: [String]?

        public init(autoScalingNotificationTypes: [String]? = nil) {
            self.autoScalingNotificationTypes = autoScalingNotificationTypes
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
        }
    }

    public struct CustomizedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "Statistic", required: true, type: .enum), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .string)
        ]
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The unit of the metric.
        public let unit: String?
        /// The statistic of the metric.
        public let statistic: MetricStatistic
        /// The namespace of the metric.
        public let namespace: String
        /// The name of the metric.
        public let metricName: String

        public init(dimensions: [MetricDimension]? = nil, unit: String? = nil, statistic: MetricStatistic, namespace: String, metricName: String) {
            self.dimensions = dimensions
            self.unit = unit
            self.statistic = statistic
            self.namespace = namespace
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case unit = "Unit"
            case statistic = "Statistic"
            case namespace = "Namespace"
            case metricName = "MetricName"
        }
    }

    public struct PutLifecycleHookAnswer: AWSShape {

    }

    public struct ActivityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activity", required: false, type: .structure)
        ]
        /// A scaling activity.
        public let activity: Activity?

        public init(activity: Activity? = nil) {
            self.activity = activity
        }

        private enum CodingKeys: String, CodingKey {
            case activity = "Activity"
        }
    }

    public struct DescribeLifecycleHooksType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "LifecycleHookNames", required: false, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
        public let lifecycleHookNames: [String]?

        public init(autoScalingGroupName: String, lifecycleHookNames: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookNames = lifecycleHookNames
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookNames = "LifecycleHookNames"
        }
    }

    public struct DetachInstancesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to detaching the instances from the Auto Scaling group.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct PutLifecycleHookType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleTransition", required: false, type: .string), 
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string), 
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "DefaultResult", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string)
        ]
        /// The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: "Event": "autoscaling:TEST_NOTIFICATION".
        public let notificationTargetARN: String?
        /// The instance state to which you want to attach the lifecycle hook. The possible values are:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING   This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let lifecycleTransition: String?
        /// Contains additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let roleARN: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either CONTINUE or ABANDON. The default value is ABANDON.
        public let defaultResult: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(notificationTargetARN: String? = nil, lifecycleTransition: String? = nil, notificationMetadata: String? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String, roleARN: String? = nil, defaultResult: String? = nil, lifecycleHookName: String) {
            self.notificationTargetARN = notificationTargetARN
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.roleARN = roleARN
            self.defaultResult = defaultResult
            self.lifecycleHookName = lifecycleHookName
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTargetARN = "NotificationTargetARN"
            case lifecycleTransition = "LifecycleTransition"
            case notificationMetadata = "NotificationMetadata"
            case heartbeatTimeout = "HeartbeatTimeout"
            case autoScalingGroupName = "AutoScalingGroupName"
            case roleARN = "RoleARN"
            case defaultResult = "DefaultResult"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct DeleteNotificationConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicARN", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(topicARN: String, autoScalingGroupName: String) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case topicARN = "TopicARN"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DetachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
        public let shouldDecrementDesiredCapacity: Bool
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?

        public init(shouldDecrementDesiredCapacity: Bool, autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct CompleteLifecycleActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleActionResult", required: true, type: .string), 
            AWSShapeMember(label: "LifecycleActionToken", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The ID of the instance.
        public let instanceId: String?
        /// The action for the group to take. This parameter can be either CONTINUE or ABANDON.
        public let lifecycleActionResult: String
        /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(lifecycleHookName: String, instanceId: String? = nil, lifecycleActionResult: String, lifecycleActionToken: String? = nil, autoScalingGroupName: String) {
            self.lifecycleHookName = lifecycleHookName
            self.instanceId = instanceId
            self.lifecycleActionResult = lifecycleActionResult
            self.lifecycleActionToken = lifecycleActionToken
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookName = "LifecycleHookName"
            case instanceId = "InstanceId"
            case lifecycleActionResult = "LifecycleActionResult"
            case lifecycleActionToken = "LifecycleActionToken"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public enum MetricType: String, CustomStringConvertible, Codable {
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        public var description: String { return self.rawValue }
    }

    public struct BatchPutScheduledUpdateGroupActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ScheduledUpdateGroupActions", required: true, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more scheduled actions. The maximum number allowed is 50. 
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]

        public init(autoScalingGroupName: String, scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
        }
    }

    public struct DeleteLifecycleHookType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(lifecycleHookName: String, autoScalingGroupName: String) {
            self.lifecycleHookName = lifecycleHookName
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookName = "LifecycleHookName"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "PropagateAtLaunch", required: false, type: .boolean)
        ]
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The tag value.
        public let value: String?
        /// The name of the group.
        public let resourceId: String?
        /// The tag key.
        public let key: String
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?

        public init(resourceType: String? = nil, value: String? = nil, resourceId: String? = nil, key: String, propagateAtLaunch: Bool? = nil) {
            self.resourceType = resourceType
            self.value = value
            self.resourceId = resourceId
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case value = "Value"
            case resourceId = "ResourceId"
            case key = "Key"
            case propagateAtLaunch = "PropagateAtLaunch"
        }
    }

    public struct LifecycleHook: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleTransition", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "DefaultResult", required: false, type: .string), 
            AWSShapeMember(label: "GlobalTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleHookName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string), 
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string)
        ]
        /// The state of the EC2 instance to which to attach the lifecycle hook. The following are possible values:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING  
        public let lifecycleTransition: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON. The default value is CONTINUE.
        public let defaultResult: String?
        /// The maximum time, in seconds, that an instance can remain in a Pending:Wait or Terminating:Wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public let globalTimeout: Int32?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group for the lifecycle hook.
        public let autoScalingGroupName: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?

        public init(lifecycleTransition: String? = nil, roleARN: String? = nil, defaultResult: String? = nil, globalTimeout: Int32? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String? = nil, lifecycleHookName: String? = nil, notificationTargetARN: String? = nil, notificationMetadata: String? = nil) {
            self.lifecycleTransition = lifecycleTransition
            self.roleARN = roleARN
            self.defaultResult = defaultResult
            self.globalTimeout = globalTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleTransition = "LifecycleTransition"
            case roleARN = "RoleARN"
            case defaultResult = "DefaultResult"
            case globalTimeout = "GlobalTimeout"
            case heartbeatTimeout = "HeartbeatTimeout"
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookName = "LifecycleHookName"
            case notificationTargetARN = "NotificationTargetARN"
            case notificationMetadata = "NotificationMetadata"
        }
    }

    public struct CreateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthCheckType", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleHookSpecificationList", required: false, type: .list), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ServiceLinkedRoleARN", required: false, type: .string), 
            AWSShapeMember(label: "TargetGroupARNs", required: false, type: .list), 
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer), 
            AWSShapeMember(label: "MinSize", required: true, type: .integer), 
            AWSShapeMember(label: "LoadBalancerNames", required: false, type: .list), 
            AWSShapeMember(label: "MaxSize", required: true, type: .integer), 
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "DefaultCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string), 
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "MixedInstancesPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list)
        ]
        /// The service to use for the health checks. The valid values are EC2 and ELB. By default, health checks use Amazon EC2 instance status checks to determine the health of an instance. For more information, see Health Checks in the Amazon EC2 Auto Scaling User Guide.
        public let healthCheckType: String?
        /// One or more lifecycle hooks.
        public let lifecycleHookSpecificationList: [LifecycleHookSpecification]?
        /// The ID of the instance used to create a launch configuration for the group. This parameter, a launch configuration, a launch template, or a mixed instances policy must be specified. When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping. For more information, see Create an Auto Scaling Group Using an EC2 Instance in the Amazon EC2 Auto Scaling User Guide.
        public let instanceId: String?
        /// One or more tags. For more information, see Tagging Auto Scaling Groups and Instances in the Amazon EC2 Auto Scaling User Guide.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist.
        public let serviceLinkedRoleARN: String?
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]?
        /// The name of the launch configuration. This parameter, a launch template, a mixed instances policy, or an EC2 instance must be specified.
        public let launchConfigurationName: String?
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default is 0. This parameter is required if you are adding an ELB health check. For more information, see Health Checks in the Amazon EC2 Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// The minimum size of the group.
        public let minSize: Int32
        /// One or more Classic Load Balancers. To specify an Application Load Balancer, use TargetGroupARNs instead. For more information, see Using a Load Balancer With an Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.
        public let loadBalancerNames: [String]?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// A comma-separated list of subnet identifiers for your virtual private cloud (VPC). If you specify subnets and Availability Zones with this call, ensure that the subnets' Availability Zones match the Availability Zones specified. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets.
        public let availabilityZones: [String]?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The number of EC2 instances that should be running in the group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
        public let desiredCapacity: Int32?
        /// The launch template to use to launch instances. This parameter, a launch configuration, a mixed instances policy, or an EC2 instance must be specified.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The name of the placement group into which to launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The mixed instances policy to use to launch instances. This parameter, a launch template, a launch configuration, or an EC2 instance must be specified.
        public let mixedInstancesPolicy: MixedInstancesPolicy?
        /// The name of the Auto Scaling group. This name must be unique within the scope of your AWS account.
        public let autoScalingGroupName: String
        /// One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?

        public init(healthCheckType: String? = nil, lifecycleHookSpecificationList: [LifecycleHookSpecification]? = nil, instanceId: String? = nil, tags: [Tag]? = nil, serviceLinkedRoleARN: String? = nil, targetGroupARNs: [String]? = nil, launchConfigurationName: String? = nil, healthCheckGracePeriod: Int32? = nil, minSize: Int32, loadBalancerNames: [String]? = nil, maxSize: Int32, vPCZoneIdentifier: String? = nil, availabilityZones: [String]? = nil, defaultCooldown: Int32? = nil, desiredCapacity: Int32? = nil, launchTemplate: LaunchTemplateSpecification? = nil, placementGroup: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, mixedInstancesPolicy: MixedInstancesPolicy? = nil, autoScalingGroupName: String, terminationPolicies: [String]? = nil) {
            self.healthCheckType = healthCheckType
            self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
            self.instanceId = instanceId
            self.tags = tags
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.targetGroupARNs = targetGroupARNs
            self.launchConfigurationName = launchConfigurationName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.minSize = minSize
            self.loadBalancerNames = loadBalancerNames
            self.maxSize = maxSize
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.availabilityZones = availabilityZones
            self.defaultCooldown = defaultCooldown
            self.desiredCapacity = desiredCapacity
            self.launchTemplate = launchTemplate
            self.placementGroup = placementGroup
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.autoScalingGroupName = autoScalingGroupName
            self.terminationPolicies = terminationPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckType = "HealthCheckType"
            case lifecycleHookSpecificationList = "LifecycleHookSpecificationList"
            case instanceId = "InstanceId"
            case tags = "Tags"
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case targetGroupARNs = "TargetGroupARNs"
            case launchConfigurationName = "LaunchConfigurationName"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case minSize = "MinSize"
            case loadBalancerNames = "LoadBalancerNames"
            case maxSize = "MaxSize"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case availabilityZones = "AvailabilityZones"
            case defaultCooldown = "DefaultCooldown"
            case desiredCapacity = "DesiredCapacity"
            case launchTemplate = "LaunchTemplate"
            case placementGroup = "PlacementGroup"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
            case autoScalingGroupName = "AutoScalingGroupName"
            case terminationPolicies = "TerminationPolicies"
        }
    }

    public struct DetachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "LoadBalancerNames", required: true, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of the load balancers. You can specify up to 10 load balancers.
        public let loadBalancerNames: [String]

        public init(autoScalingGroupName: String, loadBalancerNames: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.loadBalancerNames = loadBalancerNames
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case loadBalancerNames = "LoadBalancerNames"
        }
    }

    public struct ExitStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DescribePoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyTypes", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PolicyNames", required: false, type: .list)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to be returned with each call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// One or more policy types. Valid values are SimpleScaling and StepScaling.
        public let policyTypes: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
        public let policyNames: [String]?

        public init(nextToken: String? = nil, maxRecords: Int32? = nil, policyTypes: [String]? = nil, autoScalingGroupName: String? = nil, policyNames: [String]? = nil) {
            self.nextToken = nextToken
            self.maxRecords = maxRecords
            self.policyTypes = policyTypes
            self.autoScalingGroupName = autoScalingGroupName
            self.policyNames = policyNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
            case policyTypes = "PolicyTypes"
            case autoScalingGroupName = "AutoScalingGroupName"
            case policyNames = "PolicyNames"
        }
    }

    public struct DeleteLifecycleHookAnswer: AWSShape {

    }

    public struct DetachLoadBalancersResultType: AWSShape {

    }

    public struct DetachLoadBalancerTargetGroupsResultType: AWSShape {

    }

    public struct Alarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmARN", required: false, type: .string), 
            AWSShapeMember(label: "AlarmName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String?
        /// The name of the alarm.
        public let alarmName: String?

        public init(alarmARN: String? = nil, alarmName: String? = nil) {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }

        private enum CodingKeys: String, CodingKey {
            case alarmARN = "AlarmARN"
            case alarmName = "AlarmName"
        }
    }

    public struct DescribeNotificationConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupNames: [String]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(autoScalingGroupNames: [String]? = nil, maxRecords: Int32? = nil, nextToken: String? = nil) {
            self.autoScalingGroupNames = autoScalingGroupNames
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupNames = "AutoScalingGroupNames"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 50.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The IDs of the instances. You can specify up to MaxRecords IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
        public let instanceIds: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, instanceIds: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DescribeLoadBalancersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int32?

        public init(autoScalingGroupName: String, nextToken: String? = nil, maxRecords: Int32? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.nextToken = nextToken
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean), 
            AWSShapeMember(label: "LifecycleState", required: true, type: .enum), 
            AWSShapeMember(label: "HealthStatus", required: true, type: .string), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure)
        ]
        /// The launch configuration associated with the instance.
        public let launchConfigurationName: String?
        /// The ID of the instance.
        public let instanceId: String
        /// The Availability Zone in which the instance is running.
        public let availabilityZone: String
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// A description of the current lifecycle state. The Quarantined state is not used.
        public let lifecycleState: LifecycleState
        /// The last reported health status of the instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and that Amazon EC2 Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?

        public init(launchConfigurationName: String? = nil, instanceId: String, availabilityZone: String, protectedFromScaleIn: Bool, lifecycleState: LifecycleState, healthStatus: String, launchTemplate: LaunchTemplateSpecification? = nil) {
            self.launchConfigurationName = launchConfigurationName
            self.instanceId = instanceId
            self.availabilityZone = availabilityZone
            self.protectedFromScaleIn = protectedFromScaleIn
            self.lifecycleState = lifecycleState
            self.healthStatus = healthStatus
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
            case instanceId = "InstanceId"
            case availabilityZone = "AvailabilityZone"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case lifecycleState = "LifecycleState"
            case healthStatus = "HealthStatus"
            case launchTemplate = "LaunchTemplate"
        }
    }

    public struct BatchDeleteScheduledActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ScheduledActionNames", required: true, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of the scheduled actions to delete. The maximum number allowed is 50. 
        public let scheduledActionNames: [String]

        public init(autoScalingGroupName: String, scheduledActionNames: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledActionNames = scheduledActionNames
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledActionNames = "ScheduledActionNames"
        }
    }

    public struct LaunchConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LaunchConfigurations", required: true, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The launch configurations.
        public let launchConfigurations: [LaunchConfiguration]

        public init(nextToken: String? = nil, launchConfigurations: [LaunchConfiguration]) {
            self.nextToken = nextToken
            self.launchConfigurations = launchConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case launchConfigurations = "LaunchConfigurations"
        }
    }

    public struct DescribeLifecycleHooksAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHooks", required: false, type: .list)
        ]
        /// The lifecycle hooks for the specified group.
        public let lifecycleHooks: [LifecycleHook]?

        public init(lifecycleHooks: [LifecycleHook]? = nil) {
            self.lifecycleHooks = lifecycleHooks
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHooks = "LifecycleHooks"
        }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible, Codable {
        case pendingspotbidplacement = "PendingSpotBidPlacement"
        case waitingforspotinstancerequestid = "WaitingForSpotInstanceRequestId"
        case waitingforspotinstanceid = "WaitingForSpotInstanceId"
        case waitingforinstanceid = "WaitingForInstanceId"
        case preinservice = "PreInService"
        case inprogress = "InProgress"
        case waitingforelbconnectiondraining = "WaitingForELBConnectionDraining"
        case midlifecycleaction = "MidLifecycleAction"
        case waitingforinstancewarmup = "WaitingForInstanceWarmup"
        case successful = "Successful"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct ExecutePolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BreachThreshold", required: false, type: .double), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "MetricValue", required: false, type: .double), 
            AWSShapeMember(label: "HonorCooldown", required: false, type: .boolean)
        ]
        /// The breach threshold for the alarm. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let breachThreshold: Double?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The name or ARN of the policy.
        public let policyName: String
        /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let metricValue: Double?
        /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy. This parameter is not supported if the policy type is StepScaling. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let honorCooldown: Bool?

        public init(breachThreshold: Double? = nil, autoScalingGroupName: String? = nil, policyName: String, metricValue: Double? = nil, honorCooldown: Bool? = nil) {
            self.breachThreshold = breachThreshold
            self.autoScalingGroupName = autoScalingGroupName
            self.policyName = policyName
            self.metricValue = metricValue
            self.honorCooldown = honorCooldown
        }

        private enum CodingKeys: String, CodingKey {
            case breachThreshold = "BreachThreshold"
            case autoScalingGroupName = "AutoScalingGroupName"
            case policyName = "PolicyName"
            case metricValue = "MetricValue"
            case honorCooldown = "HonorCooldown"
        }
    }

    public struct ActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Activities", required: true, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
        public let activities: [Activity]

        public init(nextToken: String? = nil, activities: [Activity]) {
            self.nextToken = nextToken
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case activities = "Activities"
        }
    }

    public struct DescribeAccountLimitsAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberOfLaunchConfigurations", required: false, type: .integer), 
            AWSShapeMember(label: "MaxNumberOfAutoScalingGroups", required: false, type: .integer), 
            AWSShapeMember(label: "NumberOfAutoScalingGroups", required: false, type: .integer), 
            AWSShapeMember(label: "MaxNumberOfLaunchConfigurations", required: false, type: .integer)
        ]
        /// The current number of launch configurations for your AWS account.
        public let numberOfLaunchConfigurations: Int32?
        /// The maximum number of groups allowed for your AWS account. The default limit is 20 per region.
        public let maxNumberOfAutoScalingGroups: Int32?
        /// The current number of groups for your AWS account.
        public let numberOfAutoScalingGroups: Int32?
        /// The maximum number of launch configurations allowed for your AWS account. The default limit is 100 per region.
        public let maxNumberOfLaunchConfigurations: Int32?

        public init(numberOfLaunchConfigurations: Int32? = nil, maxNumberOfAutoScalingGroups: Int32? = nil, numberOfAutoScalingGroups: Int32? = nil, maxNumberOfLaunchConfigurations: Int32? = nil) {
            self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
            self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
            self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
            self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
            case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
            case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
            case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
        }
    }

    public struct DescribeScalingActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ActivityIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
        public let activityIds: [String]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int32?

        public init(autoScalingGroupName: String? = nil, activityIds: [String]? = nil, nextToken: String? = nil, maxRecords: Int32? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.activityIds = activityIds
            self.nextToken = nextToken
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case activityIds = "ActivityIds"
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct ScheduledUpdateGroupAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinSize", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledActionName", required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledActionARN", required: false, type: .string), 
            AWSShapeMember(label: "Time", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxSize", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer)
        ]
        /// The minimum size of the group.
        public let minSize: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The name of the scheduled action.
        public let scheduledActionName: String?
        /// The recurring schedule for the action.
        public let recurrence: String?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public let scheduledActionARN: String?
        /// This parameter is deprecated.
        public let time: TimeStamp?
        /// The date and time that the action is scheduled to end. This date and time can be up to one month in the future.
        public let endTime: TimeStamp?
        /// The date and time that the action is scheduled to begin. This date and time can be up to one month in the future. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public let startTime: TimeStamp?
        /// The maximum size of the group.
        public let maxSize: Int32?
        /// The number of instances you prefer to maintain in the group.
        public let desiredCapacity: Int32?

        public init(minSize: Int32? = nil, autoScalingGroupName: String? = nil, scheduledActionName: String? = nil, recurrence: String? = nil, scheduledActionARN: String? = nil, time: TimeStamp? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, maxSize: Int32? = nil, desiredCapacity: Int32? = nil) {
            self.minSize = minSize
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledActionName = scheduledActionName
            self.recurrence = recurrence
            self.scheduledActionARN = scheduledActionARN
            self.time = time
            self.endTime = endTime
            self.startTime = startTime
            self.maxSize = maxSize
            self.desiredCapacity = desiredCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case minSize = "MinSize"
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledActionName = "ScheduledActionName"
            case recurrence = "Recurrence"
            case scheduledActionARN = "ScheduledActionARN"
            case time = "Time"
            case endTime = "EndTime"
            case startTime = "StartTime"
            case maxSize = "MaxSize"
            case desiredCapacity = "DesiredCapacity"
        }
    }

    public struct LoadBalancerTargetGroupState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerTargetGroupARN", required: false, type: .string)
        ]
        /// The state of the target group.    Adding - The Auto Scaling instances are being registered with the target group.    Added - All Auto Scaling instances are registered with the target group.    InService - At least one Auto Scaling instance passed an ELB health check.    Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All Auto Scaling instances are deregistered from the target group.  
        public let state: String?
        /// The Amazon Resource Name (ARN) of the target group.
        public let loadBalancerTargetGroupARN: String?

        public init(state: String? = nil, loadBalancerTargetGroupARN: String? = nil) {
            self.state = state
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
        }
    }

    public struct AttachLoadBalancerTargetGroupsResultType: AWSShape {

    }

    public struct DeleteAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ForceDelete", required: false, type: .boolean)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
        public let forceDelete: Bool?

        public init(autoScalingGroupName: String, forceDelete: Bool? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.forceDelete = forceDelete
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case forceDelete = "ForceDelete"
        }
    }

    public struct DeletePolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string)
        ]
        /// The name or Amazon Resource Name (ARN) of the policy.
        public let policyName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?

        public init(policyName: String, autoScalingGroupName: String? = nil) {
            self.policyName = policyName
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DescribeScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledActionNames", required: false, type: .list), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
        public let scheduledActionNames: [String]?
        /// The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let endTime: TimeStamp?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let startTime: TimeStamp?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(scheduledActionNames: [String]? = nil, endTime: TimeStamp? = nil, autoScalingGroupName: String? = nil, maxRecords: Int32? = nil, startTime: TimeStamp? = nil, nextToken: String? = nil) {
            self.scheduledActionNames = scheduledActionNames
            self.endTime = endTime
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
            self.startTime = startTime
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledActionNames = "ScheduledActionNames"
            case endTime = "EndTime"
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
            case startTime = "StartTime"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteScheduledActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The name of the action to delete.
        public let scheduledActionName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(scheduledActionName: String, autoScalingGroupName: String) {
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledActionName = "ScheduledActionName"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct TargetTrackingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredefinedMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "CustomizedMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "DisableScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetValue", required: true, type: .double)
        ]
        /// A predefined metric. You can specify either a predefined metric or a customized metric.
        public let predefinedMetricSpecification: PredefinedMetricSpecification?
        /// A customized metric.
        public let customizedMetricSpecification: CustomizedMetricSpecification?
        /// Indicates whether scaling in by the target tracking policy is disabled. If scaling in is disabled, the target tracking policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking policy can remove instances from the Auto Scaling group. The default is disabled.
        public let disableScaleIn: Bool?
        /// The target value for the metric.
        public let targetValue: Double

        public init(predefinedMetricSpecification: PredefinedMetricSpecification? = nil, customizedMetricSpecification: CustomizedMetricSpecification? = nil, disableScaleIn: Bool? = nil, targetValue: Double) {
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.targetValue = targetValue
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedMetricSpecification = "PredefinedMetricSpecification"
            case customizedMetricSpecification = "CustomizedMetricSpecification"
            case disableScaleIn = "DisableScaleIn"
            case targetValue = "TargetValue"
        }
    }

    public struct TerminateInstanceInAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
        public let shouldDecrementDesiredCapacity: Bool
        /// The ID of the instance.
        public let instanceId: String

        public init(shouldDecrementDesiredCapacity: Bool, instanceId: String) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case instanceId = "InstanceId"
        }
    }

    public struct SetInstanceHealthQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthStatus", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ShouldRespectGracePeriod", required: false, type: .boolean)
        ]
        /// The health status of the instance. Set to Healthy to have the instance remain in service. Set to Unhealthy to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
        public let healthStatus: String
        /// The ID of the instance.
        public let instanceId: String
        /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call respects the grace period. Set this to False, to have the call not respect the grace period associated with the group. For more information about the health check grace period, see CreateAutoScalingGroup.
        public let shouldRespectGracePeriod: Bool?

        public init(healthStatus: String, instanceId: String, shouldRespectGracePeriod: Bool? = nil) {
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.shouldRespectGracePeriod = shouldRespectGracePeriod
        }

        private enum CodingKeys: String, CodingKey {
            case healthStatus = "HealthStatus"
            case instanceId = "InstanceId"
            case shouldRespectGracePeriod = "ShouldRespectGracePeriod"
        }
    }

    public struct MixedInstancesPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "InstancesDistribution", required: false, type: .structure)
        ]
        /// The launch template and overrides. This parameter is required when creating an Auto Scaling group with a mixed instances policy, but is not required when updating the group.
        public let launchTemplate: LaunchTemplate?
        /// The instances distribution to use.  If you leave this parameter unspecified when creating the group, the default values are used.
        public let instancesDistribution: InstancesDistribution?

        public init(launchTemplate: LaunchTemplate? = nil, instancesDistribution: InstancesDistribution? = nil) {
            self.launchTemplate = launchTemplate
            self.instancesDistribution = instancesDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "LaunchTemplate"
            case instancesDistribution = "InstancesDistribution"
        }
    }

    public struct ScheduledUpdateGroupActionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "Recurrence", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MinSize", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "MaxSize", required: false, type: .integer)
        ]
        /// The time for the action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error message.
        public let startTime: TimeStamp?
        /// The name of the scaling action.
        public let scheduledActionName: String
        /// The recurring schedule for the action, in Unix cron syntax format. For more information about this format, see Crontab.
        public let recurrence: String?
        /// The time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
        public let endTime: TimeStamp?
        /// The minimum size of the group.
        public let minSize: Int32?
        /// The number of EC2 instances that should be running in the group.
        public let desiredCapacity: Int32?
        /// The maximum size of the group.
        public let maxSize: Int32?

        public init(startTime: TimeStamp? = nil, scheduledActionName: String, recurrence: String? = nil, endTime: TimeStamp? = nil, minSize: Int32? = nil, desiredCapacity: Int32? = nil, maxSize: Int32? = nil) {
            self.startTime = startTime
            self.scheduledActionName = scheduledActionName
            self.recurrence = recurrence
            self.endTime = endTime
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.maxSize = maxSize
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case scheduledActionName = "ScheduledActionName"
            case recurrence = "Recurrence"
            case endTime = "EndTime"
            case minSize = "MinSize"
            case desiredCapacity = "DesiredCapacity"
            case maxSize = "MaxSize"
        }
    }

    public struct MetricCollectionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metric", required: false, type: .string)
        ]
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(metric: String? = nil) {
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "Metric"
        }
    }

    public struct PolicyARNType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyARN", required: false, type: .string), 
            AWSShapeMember(label: "Alarms", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?
        /// The CloudWatch alarms created for the target tracking policy.
        public let alarms: [Alarm]?

        public init(policyARN: String? = nil, alarms: [Alarm]? = nil) {
            self.policyARN = policyARN
            self.alarms = alarms
        }

        private enum CodingKeys: String, CodingKey {
            case policyARN = "PolicyARN"
            case alarms = "Alarms"
        }
    }

    public struct RecordLifecycleActionHeartbeatType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleActionToken", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(instanceId: String? = nil, lifecycleActionToken: String? = nil, autoScalingGroupName: String, lifecycleHookName: String) {
            self.instanceId = instanceId
            self.lifecycleActionToken = lifecycleActionToken
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case lifecycleActionToken = "LifecycleActionToken"
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct AutoScalingGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroups", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The groups.
        public let autoScalingGroups: [AutoScalingGroup]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(autoScalingGroups: [AutoScalingGroup], nextToken: String? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups = "AutoScalingGroups"
            case nextToken = "NextToken"
        }
    }

    public struct AttachLoadBalancersResultType: AWSShape {

    }

    public struct ScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledUpdateGroupActions", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scheduled actions.
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?

        public init(nextToken: String? = nil, scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]? = nil) {
            self.nextToken = nextToken
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
        }
    }

    public struct AutoScalingGroupNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupNames", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The names of the Auto Scaling groups. You can specify up to MaxRecords names. If you omit this parameter, all Auto Scaling groups are described.
        public let autoScalingGroupNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupNames = autoScalingGroupNames
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case autoScalingGroupNames = "AutoScalingGroupNames"
        }
    }

    public struct EnabledMetric: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularity", required: false, type: .string), 
            AWSShapeMember(label: "Metric", required: false, type: .string)
        ]
        /// The granularity of the metric. The only valid value is 1Minute.
        public let granularity: String?
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(granularity: String? = nil, metric: String? = nil) {
            self.granularity = granularity
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
            case metric = "Metric"
        }
    }

    public struct DescribeMetricCollectionTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularities", required: false, type: .list), 
            AWSShapeMember(label: "Metrics", required: false, type: .list)
        ]
        /// The granularities for the metrics.
        public let granularities: [MetricGranularityType]?
        /// One or more metrics.
        public let metrics: [MetricCollectionType]?

        public init(granularities: [MetricGranularityType]? = nil, metrics: [MetricCollectionType]? = nil) {
            self.granularities = granularities
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case granularities = "Granularities"
            case metrics = "Metrics"
        }
    }

    public struct LoadBalancerState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .string)
        ]
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// One of the following load balancer states:    Adding - The instances in the group are being registered with the load balancer.    Added - All instances in the group are registered with the load balancer.    InService - At least one instance in the group passed an ELB health check.    Removing - The instances in the group are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All instances in the group are deregistered from the load balancer.  
        public let state: String?

        public init(loadBalancerName: String? = nil, state: String? = nil) {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "LoadBalancerName"
            case state = "State"
        }
    }

    public struct DetachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", required: true, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupARNs = "TargetGroupARNs"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ebs", required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", required: false, type: .boolean), 
            AWSShapeMember(label: "VirtualName", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: true, type: .string)
        ]
        /// The information about the Amazon EBS volume.
        public let ebs: Ebs?
        /// Suppresses a device mapping. If this parameter is true for the root device, the instance might fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches a replacement instance.
        public let noDevice: Bool?
        /// The name of the virtual device (for example, ephemeral0).
        public let virtualName: String?
        /// The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh).
        public let deviceName: String

        public init(ebs: Ebs? = nil, noDevice: Bool? = nil, virtualName: String? = nil, deviceName: String) {
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
            case deviceName = "DeviceName"
        }
    }

    public struct EnterStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to moving instances into Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct AutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingInstances", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The instances.
        public let autoScalingInstances: [AutoScalingInstanceDetails]?

        public init(nextToken: String? = nil, autoScalingInstances: [AutoScalingInstanceDetails]? = nil) {
            self.nextToken = nextToken
            self.autoScalingInstances = autoScalingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case autoScalingInstances = "AutoScalingInstances"
        }
    }

    public struct AttachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", required: true, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupARNs = "TargetGroupARNs"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DeleteTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct PredefinedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string), 
            AWSShapeMember(label: "PredefinedMetricType", required: true, type: .enum)
        ]
        /// Identifies the resource associated with the metric type. The following predefined metrics are available:    ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling group.    ASGAverageNetworkIn - Average number of bytes received on all network interfaces by the Auto Scaling group.    ASGAverageNetworkOut - Average number of bytes sent out on all network interfaces by the Auto Scaling group.    ALBRequestCountPerTarget - Number of requests completed per target in an Application Load Balancer target group.   For predefined metric types ASGAverageCPUUtilization, ASGAverageNetworkIn, and ASGAverageNetworkOut, the parameter must not be specified as the resource associated with the metric type is the Auto Scaling group. For predefined metric type ALBRequestCountPerTarget, the parameter must be specified in the format: app/load-balancer-name/load-balancer-id/targetgroup/target-group-name/target-group-id , where app/load-balancer-name/load-balancer-id  is the final portion of the load balancer ARN, and targetgroup/target-group-name/target-group-id  is the final portion of the target group ARN. The target group must be attached to the Auto Scaling group.
        public let resourceLabel: String?
        /// The metric type.
        public let predefinedMetricType: MetricType

        public init(resourceLabel: String? = nil, predefinedMetricType: MetricType) {
            self.resourceLabel = resourceLabel
            self.predefinedMetricType = predefinedMetricType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLabel = "ResourceLabel"
            case predefinedMetricType = "PredefinedMetricType"
        }
    }

    public struct PutScalingPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cooldown", required: false, type: .integer), 
            AWSShapeMember(label: "MetricAggregationType", required: false, type: .string), 
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "StepAdjustments", required: false, type: .list), 
            AWSShapeMember(label: "PolicyType", required: false, type: .string), 
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "MinAdjustmentMagnitude", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer), 
            AWSShapeMember(label: "MinAdjustmentStep", required: false, type: .integer)
        ]
        /// The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies. This parameter is supported if the policy type is SimpleScaling. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let cooldown: Int32?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. This parameter is supported if the policy type is StepScaling.
        public let metricAggregationType: String?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group. This parameter is supported if the policy type is StepScaling or TargetTrackingScaling.
        public let estimatedInstanceWarmup: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// A set of adjustments that enable you to scale based on the size of the alarm breach. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let stepAdjustments: [StepAdjustment]?
        /// The policy type. The valid values are SimpleScaling, StepScaling, and TargetTrackingScaling. If the policy type is null, the value is treated as SimpleScaling.
        public let policyType: String?
        /// A target tracking policy. This parameter is required if the policy type is TargetTrackingScaling and not supported otherwise.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?
        /// The adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. This parameter is supported if the policy type is SimpleScaling or StepScaling. For more information, see Dynamic Scaling in the Amazon EC2 Auto Scaling User Guide.
        public let adjustmentType: String?
        /// The name of the policy.
        public let policyName: String
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError. This parameter is supported if the policy type is SimpleScaling or StepScaling.
        public let minAdjustmentMagnitude: Int32?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. This parameter is required if the policy type is SimpleScaling and not supported otherwise.
        public let scalingAdjustment: Int32?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?

        public init(cooldown: Int32? = nil, metricAggregationType: String? = nil, estimatedInstanceWarmup: Int32? = nil, autoScalingGroupName: String, stepAdjustments: [StepAdjustment]? = nil, policyType: String? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil, adjustmentType: String? = nil, policyName: String, minAdjustmentMagnitude: Int32? = nil, scalingAdjustment: Int32? = nil, minAdjustmentStep: Int32? = nil) {
            self.cooldown = cooldown
            self.metricAggregationType = metricAggregationType
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.autoScalingGroupName = autoScalingGroupName
            self.stepAdjustments = stepAdjustments
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
            self.adjustmentType = adjustmentType
            self.policyName = policyName
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.scalingAdjustment = scalingAdjustment
            self.minAdjustmentStep = minAdjustmentStep
        }

        private enum CodingKeys: String, CodingKey {
            case cooldown = "Cooldown"
            case metricAggregationType = "MetricAggregationType"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case autoScalingGroupName = "AutoScalingGroupName"
            case stepAdjustments = "StepAdjustments"
            case policyType = "PolicyType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
            case adjustmentType = "AdjustmentType"
            case policyName = "PolicyName"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case scalingAdjustment = "ScalingAdjustment"
            case minAdjustmentStep = "MinAdjustmentStep"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the filter. The valid values are: "auto-scaling-group", "key", "value", and "propagate-at-launch".
        public let name: String?
        /// The value of the filter.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct CreateOrUpdateTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct EnableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metrics", required: false, type: .list), 
            AWSShapeMember(label: "Granularity", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more of the following metrics. If you omit this parameter, all metrics are enabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?
        /// The granularity to associate with the metrics to collect. The only valid value is 1Minute.
        public let granularity: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(metrics: [String]? = nil, granularity: String, autoScalingGroupName: String) {
            self.metrics = metrics
            self.granularity = granularity
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case metrics = "Metrics"
            case granularity = "Granularity"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DescribeTerminationPolicyTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminationPolicyTypes", required: false, type: .list)
        ]
        /// The termination policies supported by Amazon EC2 Auto Scaling: OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, Default, OldestLaunchTemplate, and AllocationStrategy. Currently, the OldestLaunchTemplate and AllocationStrategy policies are only supported for Auto Scaling groups with MixedInstancesPolicy.
        public let terminationPolicyTypes: [String]?

        public init(terminationPolicyTypes: [String]? = nil) {
            self.terminationPolicyTypes = terminationPolicyTypes
        }

        private enum CodingKeys: String, CodingKey {
            case terminationPolicyTypes = "TerminationPolicyTypes"
        }
    }

    public struct LaunchConfigurationNameType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string)
        ]
        /// The name of the launch configuration.
        public let launchConfigurationName: String

        public init(launchConfigurationName: String) {
            self.launchConfigurationName = launchConfigurationName
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
        }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyARN", required: false, type: .string), 
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyName", required: false, type: .string), 
            AWSShapeMember(label: "MetricAggregationType", required: false, type: .string), 
            AWSShapeMember(label: "StepAdjustments", required: false, type: .list), 
            AWSShapeMember(label: "MinAdjustmentStep", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyType", required: false, type: .string), 
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MinAdjustmentMagnitude", required: false, type: .integer), 
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string), 
            AWSShapeMember(label: "Alarms", required: false, type: .list), 
            AWSShapeMember(label: "Cooldown", required: false, type: .integer), 
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32?
        /// The name of the scaling policy.
        public let policyName: String?
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average.
        public let metricAggregationType: String?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public let stepAdjustments: [StepAdjustment]?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?
        /// The policy type. Valid values are SimpleScaling and StepScaling.
        public let policyType: String?
        /// A target tracking policy.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError.
        public let minAdjustmentMagnitude: Int32?
        /// The adjustment type, which specifies how ScalingAdjustment is interpreted. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?
        /// The CloudWatch alarms related to the policy.
        public let alarms: [Alarm]?
        /// The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start.
        public let cooldown: Int32?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public let estimatedInstanceWarmup: Int32?

        public init(policyARN: String? = nil, scalingAdjustment: Int32? = nil, policyName: String? = nil, metricAggregationType: String? = nil, stepAdjustments: [StepAdjustment]? = nil, minAdjustmentStep: Int32? = nil, policyType: String? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil, autoScalingGroupName: String? = nil, minAdjustmentMagnitude: Int32? = nil, adjustmentType: String? = nil, alarms: [Alarm]? = nil, cooldown: Int32? = nil, estimatedInstanceWarmup: Int32? = nil) {
            self.policyARN = policyARN
            self.scalingAdjustment = scalingAdjustment
            self.policyName = policyName
            self.metricAggregationType = metricAggregationType
            self.stepAdjustments = stepAdjustments
            self.minAdjustmentStep = minAdjustmentStep
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
            self.autoScalingGroupName = autoScalingGroupName
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.adjustmentType = adjustmentType
            self.alarms = alarms
            self.cooldown = cooldown
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
        }

        private enum CodingKeys: String, CodingKey {
            case policyARN = "PolicyARN"
            case scalingAdjustment = "ScalingAdjustment"
            case policyName = "PolicyName"
            case metricAggregationType = "MetricAggregationType"
            case stepAdjustments = "StepAdjustments"
            case minAdjustmentStep = "MinAdjustmentStep"
            case policyType = "PolicyType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
            case autoScalingGroupName = "AutoScalingGroupName"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case adjustmentType = "AdjustmentType"
            case alarms = "Alarms"
            case cooldown = "Cooldown"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        }
    }

    public struct ExitStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to moving instances out of Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct AttachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerNames", required: true, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The names of the load balancers. You can specify up to 10 load balancers.
        public let loadBalancerNames: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(loadBalancerNames: [String], autoScalingGroupName: String) {
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerNames = "LoadBalancerNames"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct StepAdjustment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer), 
            AWSShapeMember(label: "MetricIntervalUpperBound", required: false, type: .double), 
            AWSShapeMember(label: "MetricIntervalLowerBound", required: false, type: .double)
        ]
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?

        public init(scalingAdjustment: Int32, metricIntervalUpperBound: Double? = nil, metricIntervalLowerBound: Double? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.metricIntervalLowerBound = metricIntervalLowerBound
        }

        private enum CodingKeys: String, CodingKey {
            case scalingAdjustment = "ScalingAdjustment"
            case metricIntervalUpperBound = "MetricIntervalUpperBound"
            case metricIntervalLowerBound = "MetricIntervalLowerBound"
        }
    }

    public struct Activity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Details", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "Cause", required: true, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "ActivityId", required: true, type: .string), 
            AWSShapeMember(label: "Progress", required: false, type: .integer)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The start time of the activity.
        public let startTime: TimeStamp
        /// The end time of the activity.
        public let endTime: TimeStamp?
        /// The details about the activity.
        public let details: String?
        /// A friendly, more verbose description of the activity.
        public let description: String?
        /// The current status of the activity.
        public let statusCode: ScalingActivityStatusCode
        /// The reason the activity began.
        public let cause: String
        /// A friendly, more verbose description of the activity status.
        public let statusMessage: String?
        /// The ID of the activity.
        public let activityId: String
        /// A value between 0 and 100 that indicates the progress of the activity.
        public let progress: Int32?

        public init(autoScalingGroupName: String, startTime: TimeStamp, endTime: TimeStamp? = nil, details: String? = nil, description: String? = nil, statusCode: ScalingActivityStatusCode, cause: String, statusMessage: String? = nil, activityId: String, progress: Int32? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.startTime = startTime
            self.endTime = endTime
            self.details = details
            self.description = description
            self.statusCode = statusCode
            self.cause = cause
            self.statusMessage = statusMessage
            self.activityId = activityId
            self.progress = progress
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case details = "Details"
            case description = "Description"
            case statusCode = "StatusCode"
            case cause = "Cause"
            case statusMessage = "StatusMessage"
            case activityId = "ActivityId"
            case progress = "Progress"
        }
    }

    public struct EnterStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to Standby mode.
        public let shouldDecrementDesiredCapacity: Bool
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(shouldDecrementDesiredCapacity: Bool, instanceIds: [String]? = nil, autoScalingGroupName: String) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.instanceIds = instanceIds
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case instanceIds = "InstanceIds"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct LaunchTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Overrides", required: false, type: .list), 
            AWSShapeMember(label: "LaunchTemplateSpecification", required: false, type: .structure)
        ]
        /// Any parameters that you specify override the same parameters in the launch template. Currently, the only supported override is instance type.  You must specify between 2 and 20 overrides.
        public let overrides: [LaunchTemplateOverrides]?
        /// The launch template to use. You must specify either the launch template ID or launch template name in the request. 
        public let launchTemplateSpecification: LaunchTemplateSpecification?

        public init(overrides: [LaunchTemplateOverrides]? = nil, launchTemplateSpecification: LaunchTemplateSpecification? = nil) {
            self.overrides = overrides
            self.launchTemplateSpecification = launchTemplateSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case overrides = "Overrides"
            case launchTemplateSpecification = "LaunchTemplateSpecification"
        }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "PropagateAtLaunch", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The tag value.
        public let value: String?
        /// The name of the group.
        public let resourceId: String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The tag key.
        public let key: String?

        public init(resourceType: String? = nil, value: String? = nil, resourceId: String? = nil, propagateAtLaunch: Bool? = nil, key: String? = nil) {
            self.resourceType = resourceType
            self.value = value
            self.resourceId = resourceId
            self.propagateAtLaunch = propagateAtLaunch
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case value = "Value"
            case resourceId = "ResourceId"
            case propagateAtLaunch = "PropagateAtLaunch"
            case key = "Key"
        }
    }

    public struct CreateLaunchConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "InstanceMonitoring", required: false, type: .structure), 
            AWSShapeMember(label: "SpotPrice", required: false, type: .string), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", required: false, type: .list), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string), 
            AWSShapeMember(label: "PlacementTenancy", required: false, type: .string), 
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string), 
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ClassicLinkVPCId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean)
        ]
        /// Used for groups that launch instances into a virtual private cloud (VPC). Specifies whether to assign a public IP address to each instance. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide. If you specify this parameter, be sure to specify at least one subnet when you create your group. Default: If the instance is launched into a default subnet, the default is to assign a public IP address. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address.
        public let associatePublicIpAddress: Bool?
        /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping. If you do not specify InstanceId, you must specify both ImageId and InstanceType. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see Create a Launch Configuration Using an EC2 Instance in the Amazon EC2 Auto Scaling User Guide.
        public let instanceId: String?
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?
        /// One or more security groups with which to associate the instances. If your instances are launched in EC2-Classic, you can either specify security group names or the security group IDs. For more information, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide. If your instances are launched into a VPC, specify security group IDs. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let securityGroups: [String]?
        /// The user data to make available to the launched EC2 instances. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let userData: String?
        /// Enables detailed monitoring (true) or basic monitoring (false) for the Auto Scaling instances. The default is true.
        public let instanceMonitoring: InstanceMonitoring?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see Launching Spot Instances in Your Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.
        public let spotPrice: String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. If you do not specify InstanceId, you must specify ImageId. For more information, see Finding an AMI in the Amazon Elastic Compute Cloud User Guide.
        public let imageId: String?
        /// The name of the key pair. For more information, see Amazon EC2 Key Pairs in the Amazon Elastic Compute Cloud User Guide.
        public let keyName: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// One or more mappings that specify how block devices are exposed to the instance. For more information, see Block Device Mapping in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. EC2 instances launched with an IAM role automatically have AWS security credentials available. You can use IAM roles with Amazon EC2 Auto Scaling to automatically enable applications running on your EC2 instances to securely access other AWS resources. For more information, see Launch Auto Scaling Instances with an IAM Role in the Amazon EC2 Auto Scaling User Guide.
        public let iamInstanceProfile: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched into a VPC. To launch Dedicated Instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to default), you must set the value of this parameter to dedicated. If you specify this parameter, be sure to specify at least one subnet when you create your group. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide. Valid values: default | dedicated 
        public let placementTenancy: String?
        /// The name of the launch configuration. This name must be unique within the scope of your AWS account.
        public let launchConfigurationName: String
        /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. This parameter is required if you specify a ClassicLink-enabled VPC, and is not supported otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter is supported only if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The instance type of the EC2 instance. If you do not specify InstanceId, you must specify InstanceType. For information about available instance types, see Available Instance Types in the Amazon Elastic Compute Cloud User Guide. 
        public let instanceType: String?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. By default, the instance is not optimized for EBS I/O. The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional usage charges apply. For more information, see Amazon EBS-Optimized Instances in the Amazon Elastic Compute Cloud User Guide.
        public let ebsOptimized: Bool?

        public init(associatePublicIpAddress: Bool? = nil, instanceId: String? = nil, ramdiskId: String? = nil, securityGroups: [String]? = nil, userData: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, spotPrice: String? = nil, imageId: String? = nil, keyName: String? = nil, kernelId: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, iamInstanceProfile: String? = nil, placementTenancy: String? = nil, launchConfigurationName: String, classicLinkVPCSecurityGroups: [String]? = nil, classicLinkVPCId: String? = nil, instanceType: String? = nil, ebsOptimized: Bool? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.instanceId = instanceId
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.userData = userData
            self.instanceMonitoring = instanceMonitoring
            self.spotPrice = spotPrice
            self.imageId = imageId
            self.keyName = keyName
            self.kernelId = kernelId
            self.blockDeviceMappings = blockDeviceMappings
            self.iamInstanceProfile = iamInstanceProfile
            self.placementTenancy = placementTenancy
            self.launchConfigurationName = launchConfigurationName
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.classicLinkVPCId = classicLinkVPCId
            self.instanceType = instanceType
            self.ebsOptimized = ebsOptimized
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case instanceId = "InstanceId"
            case ramdiskId = "RamdiskId"
            case securityGroups = "SecurityGroups"
            case userData = "UserData"
            case instanceMonitoring = "InstanceMonitoring"
            case spotPrice = "SpotPrice"
            case imageId = "ImageId"
            case keyName = "KeyName"
            case kernelId = "KernelId"
            case blockDeviceMappings = "BlockDeviceMappings"
            case iamInstanceProfile = "IamInstanceProfile"
            case placementTenancy = "PlacementTenancy"
            case launchConfigurationName = "LaunchConfigurationName"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case instanceType = "InstanceType"
            case ebsOptimized = "EbsOptimized"
        }
    }

    public struct DescribeLifecycleHookTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookTypes", required: false, type: .list)
        ]
        /// The lifecycle hook types.
        public let lifecycleHookTypes: [String]?

        public init(lifecycleHookTypes: [String]? = nil) {
            self.lifecycleHookTypes = lifecycleHookTypes
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookTypes = "LifecycleHookTypes"
        }
    }

    public struct SuspendedProcess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuspensionReason", required: false, type: .string), 
            AWSShapeMember(label: "ProcessName", required: false, type: .string)
        ]
        /// The reason that the process was suspended.
        public let suspensionReason: String?
        /// The name of the suspended process.
        public let processName: String?

        public init(suspensionReason: String? = nil, processName: String? = nil) {
            self.suspensionReason = suspensionReason
            self.processName = processName
        }

        private enum CodingKeys: String, CodingKey {
            case suspensionReason = "SuspensionReason"
            case processName = "ProcessName"
        }
    }

    public struct BatchDeleteScheduledActionAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedScheduledActions", required: false, type: .list)
        ]
        /// The names of the scheduled actions that could not be deleted, including an error message. 
        public let failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]?

        public init(failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]? = nil) {
            self.failedScheduledActions = failedScheduledActions
        }

        private enum CodingKeys: String, CodingKey {
            case failedScheduledActions = "FailedScheduledActions"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationType", required: false, type: .string), 
            AWSShapeMember(label: "TopicARN", required: false, type: .string)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// One of the following event notification types:    autoscaling:EC2_INSTANCE_LAUNCH     autoscaling:EC2_INSTANCE_LAUNCH_ERROR     autoscaling:EC2_INSTANCE_TERMINATE     autoscaling:EC2_INSTANCE_TERMINATE_ERROR     autoscaling:TEST_NOTIFICATION   
        public let notificationType: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String?

        public init(autoScalingGroupName: String? = nil, notificationType: String? = nil, topicARN: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
            self.topicARN = topicARN
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case notificationType = "NotificationType"
            case topicARN = "TopicARN"
        }
    }

    public struct CompleteLifecycleActionAnswer: AWSShape {

    }

    public struct DescribeAdjustmentTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentTypes", required: false, type: .list)
        ]
        /// The policy adjustment types.
        public let adjustmentTypes: [AdjustmentType]?

        public init(adjustmentTypes: [AdjustmentType]? = nil) {
            self.adjustmentTypes = adjustmentTypes
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentTypes = "AdjustmentTypes"
        }
    }

    public struct PutScheduledUpdateGroupActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxSize", required: false, type: .integer), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "Time", required: false, type: .timestamp), 
            AWSShapeMember(label: "MinSize", required: false, type: .integer), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Recurrence", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]
        /// The maximum size for the Auto Scaling group.
        public let maxSize: Int32?
        /// The name of this scaling action.
        public let scheduledActionName: String
        /// This parameter is deprecated.
        public let time: TimeStamp?
        /// The minimum size for the Auto Scaling group.
        public let minSize: Int32?
        /// The time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
        public let endTime: TimeStamp?
        /// The number of EC2 instances that should be running in the group.
        public let desiredCapacity: Int32?
        /// The recurring schedule for this action, in Unix cron syntax format. For more information about this format, see Crontab.
        public let recurrence: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.
        public let startTime: TimeStamp?

        public init(maxSize: Int32? = nil, scheduledActionName: String, time: TimeStamp? = nil, minSize: Int32? = nil, endTime: TimeStamp? = nil, desiredCapacity: Int32? = nil, recurrence: String? = nil, autoScalingGroupName: String, startTime: TimeStamp? = nil) {
            self.maxSize = maxSize
            self.scheduledActionName = scheduledActionName
            self.time = time
            self.minSize = minSize
            self.endTime = endTime
            self.desiredCapacity = desiredCapacity
            self.recurrence = recurrence
            self.autoScalingGroupName = autoScalingGroupName
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case maxSize = "MaxSize"
            case scheduledActionName = "ScheduledActionName"
            case time = "Time"
            case minSize = "MinSize"
            case endTime = "EndTime"
            case desiredCapacity = "DesiredCapacity"
            case recurrence = "Recurrence"
            case autoScalingGroupName = "AutoScalingGroupName"
            case startTime = "StartTime"
        }
    }

    public enum LifecycleState: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case pendingWait = "Pending:Wait"
        case pendingProceed = "Pending:Proceed"
        case quarantined = "Quarantined"
        case inservice = "InService"
        case terminating = "Terminating"
        case terminatingWait = "Terminating:Wait"
        case terminatingProceed = "Terminating:Proceed"
        case terminated = "Terminated"
        case detaching = "Detaching"
        case detached = "Detached"
        case enteringstandby = "EnteringStandby"
        case standby = "Standby"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, auto-scaling-group) is 1000.
        public let filters: [Filter]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?

        public init(filters: [Filter]? = nil, nextToken: String? = nil, maxRecords: Int32? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
        }
    }

    public struct MetricGranularityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularity", required: false, type: .string)
        ]
        /// The granularity. The only valid value is 1Minute.
        public let granularity: String?

        public init(granularity: String? = nil) {
            self.granularity = granularity
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
        }
    }

    public struct ProcessesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Processes", required: false, type: .list)
        ]
        /// The names of the process types.
        public let processes: [ProcessType]?

        public init(processes: [ProcessType]? = nil) {
            self.processes = processes
        }

        private enum CodingKeys: String, CodingKey {
            case processes = "Processes"
        }
    }

    public struct UpdateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceLinkedRoleARN", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckType", required: false, type: .string), 
            AWSShapeMember(label: "MaxSize", required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "DefaultCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer), 
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list), 
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MinSize", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "MixedInstancesPolicy", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
        public let serviceLinkedRoleARN: String?
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String?
        /// The maximum size of the Auto Scaling group.
        public let maxSize: Int32?
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]?
        /// The name of the launch configuration. If you specify this parameter, you can't specify a launch template or a mixed instances policy.
        public let launchConfigurationName: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default is 0. For more information, see Health Checks in the Amazon EC2 Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// The ID of the subnet, if you are launching into a VPC. You can specify several subnets in a comma-separated list. When you specify VPCZoneIdentifier with AvailabilityZones, ensure that the subnets' Availability Zones match the values you specify for AvailabilityZones. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// The minimum size of the Auto Scaling group.
        public let minSize: Int32?
        /// The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
        public let desiredCapacity: Int32?
        /// The name of the placement group into which to launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The launch template and version to use to specify the updates. If you specify this parameter, you can't specify a launch configuration or a mixed instances policy.
        public let launchTemplate: LaunchTemplateSpecification?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The mixed instances policy to use to specify the updates. If you specify this parameter, you can't specify a launch configuration or a launch template. 
        public let mixedInstancesPolicy: MixedInstancesPolicy?

        public init(serviceLinkedRoleARN: String? = nil, healthCheckType: String? = nil, maxSize: Int32? = nil, availabilityZones: [String]? = nil, launchConfigurationName: String? = nil, defaultCooldown: Int32? = nil, autoScalingGroupName: String, healthCheckGracePeriod: Int32? = nil, terminationPolicies: [String]? = nil, vPCZoneIdentifier: String? = nil, minSize: Int32? = nil, desiredCapacity: Int32? = nil, placementGroup: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, mixedInstancesPolicy: MixedInstancesPolicy? = nil) {
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.healthCheckType = healthCheckType
            self.maxSize = maxSize
            self.availabilityZones = availabilityZones
            self.launchConfigurationName = launchConfigurationName
            self.defaultCooldown = defaultCooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.placementGroup = placementGroup
            self.launchTemplate = launchTemplate
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.mixedInstancesPolicy = mixedInstancesPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case healthCheckType = "HealthCheckType"
            case maxSize = "MaxSize"
            case availabilityZones = "AvailabilityZones"
            case launchConfigurationName = "LaunchConfigurationName"
            case defaultCooldown = "DefaultCooldown"
            case autoScalingGroupName = "AutoScalingGroupName"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case terminationPolicies = "TerminationPolicies"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case minSize = "MinSize"
            case desiredCapacity = "DesiredCapacity"
            case placementGroup = "PlacementGroup"
            case launchTemplate = "LaunchTemplate"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
        }
    }

    public struct ProcessType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessName", required: true, type: .string)
        ]
        /// One of the following processes:    Launch     Terminate     AddToLoadBalancer     AlarmNotification     AZRebalance     HealthCheck     ReplaceUnhealthy     ScheduledActions   
        public let processName: String

        public init(processName: String) {
            self.processName = processName
        }

        private enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
        }
    }

    public struct InstanceMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "LaunchConfigurationARN", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "SpotPrice", required: false, type: .string), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceMonitoring", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "PlacementTenancy", required: false, type: .string), 
            AWSShapeMember(label: "ClassicLinkVPCId", required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string)
        ]
        /// A block device mapping, which specifies the block devices for the instance.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The security groups to associate with the instances.
        public let securityGroups: [String]?
        /// The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId. This parameter is required if you specify a ClassicLink-enabled VPC, and cannot be used otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public let launchConfigurationARN: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The name of the launch configuration.
        public let launchConfigurationName: String
        /// The creation date and time for the launch configuration.
        public let createdTime: TimeStamp
        /// The price to bid when launching Spot Instances.
        public let spotPrice: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// The user data available to the instances.
        public let userData: String?
        /// The instance type for the instances.
        public let instanceType: String
        /// The name or Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance.
        public let iamInstanceProfile: String?
        /// Controls whether the instance is optimized for EBS I/O (true) or not (false).
        public let ebsOptimized: Bool?
        /// [EC2-VPC] Indicates whether to assign a public IP address to each instance.
        public let associatePublicIpAddress: Bool?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        public let instanceMonitoring: InstanceMonitoring?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs in an isolated, single-tenant hardware and can only be launched into a VPC.
        public let placementTenancy: String?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter can only be used if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, securityGroups: [String]? = nil, classicLinkVPCSecurityGroups: [String]? = nil, launchConfigurationARN: String? = nil, keyName: String? = nil, launchConfigurationName: String, createdTime: TimeStamp, spotPrice: String? = nil, kernelId: String? = nil, userData: String? = nil, instanceType: String, iamInstanceProfile: String? = nil, ebsOptimized: Bool? = nil, associatePublicIpAddress: Bool? = nil, instanceMonitoring: InstanceMonitoring? = nil, imageId: String, placementTenancy: String? = nil, classicLinkVPCId: String? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.securityGroups = securityGroups
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.launchConfigurationARN = launchConfigurationARN
            self.keyName = keyName
            self.launchConfigurationName = launchConfigurationName
            self.createdTime = createdTime
            self.spotPrice = spotPrice
            self.kernelId = kernelId
            self.userData = userData
            self.instanceType = instanceType
            self.iamInstanceProfile = iamInstanceProfile
            self.ebsOptimized = ebsOptimized
            self.associatePublicIpAddress = associatePublicIpAddress
            self.instanceMonitoring = instanceMonitoring
            self.imageId = imageId
            self.placementTenancy = placementTenancy
            self.classicLinkVPCId = classicLinkVPCId
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMappings"
            case securityGroups = "SecurityGroups"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case launchConfigurationARN = "LaunchConfigurationARN"
            case keyName = "KeyName"
            case launchConfigurationName = "LaunchConfigurationName"
            case createdTime = "CreatedTime"
            case spotPrice = "SpotPrice"
            case kernelId = "KernelId"
            case userData = "UserData"
            case instanceType = "InstanceType"
            case iamInstanceProfile = "IamInstanceProfile"
            case ebsOptimized = "EbsOptimized"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case instanceMonitoring = "InstanceMonitoring"
            case imageId = "ImageId"
            case placementTenancy = "PlacementTenancy"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case ramdiskId = "RamdiskId"
        }
    }

    public struct LaunchConfigurationNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LaunchConfigurationNames", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The launch configuration names. If you omit this parameter, all launch configurations are described.
        public let launchConfigurationNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, launchConfigurationNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.launchConfigurationNames = launchConfigurationNames
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case launchConfigurationNames = "LaunchConfigurationNames"
        }
    }

    public struct AttachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int32?

        public init(nextToken: String? = nil, autoScalingGroupName: String, maxRecords: Int32? = nil) {
            self.nextToken = nextToken
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
        }
    }

    public struct InstancesDistribution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotAllocationStrategy", required: false, type: .string), 
            AWSShapeMember(label: "SpotMaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "SpotInstancePools", required: false, type: .integer), 
            AWSShapeMember(label: "OnDemandAllocationStrategy", required: false, type: .string), 
            AWSShapeMember(label: "OnDemandPercentageAboveBaseCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "OnDemandBaseCapacity", required: false, type: .integer)
        ]
        /// Indicates how to allocate Spot capacity across Spot pools. The only valid value is lowest-price, which is also the default value. The Auto Scaling group selects the cheapest Spot pools and evenly allocates your Spot capacity across the number of Spot pools that you specify. 
        public let spotAllocationStrategy: String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If you leave this value blank (which is the default), the maximum Spot price is set at the On-Demand price. 
        public let spotMaxPrice: String?
        /// The number of Spot pools to use to allocate your Spot capacity. The Spot pools are determined from the different instance types in the Overrides array of LaunchTemplate.  The range is 1–20 and the default is 2. 
        public let spotInstancePools: Int32?
        /// Indicates how to allocate instance types to fulfill On-Demand capacity.  The only valid value is prioritized, which is also the default value. This strategy uses the order of instance types in the Overrides array of LaunchTemplate to define the launch priority of each instance type. The first instance type in the array is prioritized higher than the last. If all your On-Demand capacity cannot be fulfilled using your highest priority instance, then the Auto Scaling groups launches the remaining capacity using the second priority instance type, and so on. 
        public let onDemandAllocationStrategy: String?
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity.  The range is 0–100. The default value is 100. If you leave this parameter set to 100, the percentages are 100% for On-Demand Instances and 0% for Spot Instances. 
        public let onDemandPercentageAboveBaseCapacity: Int32?
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales. The default value is 0. If you leave this parameter set to 0, On-Demand Instances are launched as a percentage of the Auto Scaling group's desired capacity, per the OnDemandPercentageAboveBaseCapacity setting.
        public let onDemandBaseCapacity: Int32?

        public init(spotAllocationStrategy: String? = nil, spotMaxPrice: String? = nil, spotInstancePools: Int32? = nil, onDemandAllocationStrategy: String? = nil, onDemandPercentageAboveBaseCapacity: Int32? = nil, onDemandBaseCapacity: Int32? = nil) {
            self.spotAllocationStrategy = spotAllocationStrategy
            self.spotMaxPrice = spotMaxPrice
            self.spotInstancePools = spotInstancePools
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
            self.onDemandBaseCapacity = onDemandBaseCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case spotAllocationStrategy = "SpotAllocationStrategy"
            case spotMaxPrice = "SpotMaxPrice"
            case spotInstancePools = "SpotInstancePools"
            case onDemandAllocationStrategy = "OnDemandAllocationStrategy"
            case onDemandPercentageAboveBaseCapacity = "OnDemandPercentageAboveBaseCapacity"
            case onDemandBaseCapacity = "OnDemandBaseCapacity"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerTargetGroups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the target groups.
        public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(loadBalancerTargetGroups: [LoadBalancerTargetGroupState]? = nil, nextToken: String? = nil) {
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
            case nextToken = "NextToken"
        }
    }

    public struct SetInstanceProtectionAnswer: AWSShape {

    }

    public struct BatchPutScheduledUpdateGroupActionAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedScheduledUpdateGroupActions", required: false, type: .list)
        ]
        /// The names of the scheduled actions that could not be created or updated, including an error message.
        public let failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]?

        public init(failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]? = nil) {
            self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case failedScheduledUpdateGroupActions = "FailedScheduledUpdateGroupActions"
        }
    }

    public struct PutNotificationConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicARN", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "NotificationTypes", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see DescribeAutoScalingNotificationTypes.
        public let notificationTypes: [String]

        public init(topicARN: String, autoScalingGroupName: String, notificationTypes: [String]) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationTypes = notificationTypes
        }

        private enum CodingKeys: String, CodingKey {
            case topicARN = "TopicARN"
            case autoScalingGroupName = "AutoScalingGroupName"
            case notificationTypes = "NotificationTypes"
        }
    }

    public struct RecordLifecycleActionHeartbeatAnswer: AWSShape {

    }

    public struct DescribeLoadBalancersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The load balancers.
        public let loadBalancers: [LoadBalancerState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(loadBalancers: [LoadBalancerState]? = nil, nextToken: String? = nil) {
            self.loadBalancers = loadBalancers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
            case nextToken = "NextToken"
        }
    }

    public struct AutoScalingInstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "HealthStatus", required: true, type: .string), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "LifecycleState", required: true, type: .string), 
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// The Availability Zone for the instance.
        public let availabilityZone: String
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The last reported health status of this instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Amazon EC2 Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The name of the Auto Scaling group for the instance.
        public let autoScalingGroupName: String
        /// The launch configuration used to launch the instance. This value is not available if you attached the instance to the Auto Scaling group.
        public let launchConfigurationName: String?
        /// The lifecycle state for the instance. For more information, see Auto Scaling Lifecycle in the Amazon EC2 Auto Scaling User Guide.
        public let lifecycleState: String
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The ID of the instance.
        public let instanceId: String

        public init(availabilityZone: String, launchTemplate: LaunchTemplateSpecification? = nil, healthStatus: String, autoScalingGroupName: String, launchConfigurationName: String? = nil, lifecycleState: String, protectedFromScaleIn: Bool, instanceId: String) {
            self.availabilityZone = availabilityZone
            self.launchTemplate = launchTemplate
            self.healthStatus = healthStatus
            self.autoScalingGroupName = autoScalingGroupName
            self.launchConfigurationName = launchConfigurationName
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case launchTemplate = "LaunchTemplate"
            case healthStatus = "HealthStatus"
            case autoScalingGroupName = "AutoScalingGroupName"
            case launchConfigurationName = "LaunchConfigurationName"
            case lifecycleState = "LifecycleState"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case instanceId = "InstanceId"
        }
    }

    public struct FailedScheduledUpdateGroupActionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string)
        ]
        /// The error code.
        public let errorCode: String?
        /// The error message accompanying the error code.
        public let errorMessage: String?
        /// The name of the scheduled action.
        public let scheduledActionName: String

        public init(errorCode: String? = nil, errorMessage: String? = nil, scheduledActionName: String) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.scheduledActionName = scheduledActionName
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case scheduledActionName = "ScheduledActionName"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public struct LaunchTemplateOverrides: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: false, type: .string)
        ]
        /// The instance type.  For information about available instance types, see Available Instance Types in the Amazon Elastic Compute Cloud User Guide. 
        public let instanceType: String?

        public init(instanceType: String? = nil) {
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
        }
    }

    public struct SetInstanceProtectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceIds", required: true, type: .list), 
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool

        public init(autoScalingGroupName: String, instanceIds: [String], protectedFromScaleIn: Bool) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
            self.protectedFromScaleIn = protectedFromScaleIn
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
        }
    }

    public struct Ebs: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// The volume type. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Valid values: standard | io1 | gp2 
        public let volumeType: String?
        /// The volume size, in GiB. For standard volumes, specify a value from 1 to 1,024. For io1 volumes, specify a value from 4 to 16,384. For gp2 volumes, specify a value from 1 to 16,384. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you create a volume from a snapshot and you don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the volume is deleted on instance termination. The default is true.
        public let deleteOnTermination: Bool?
        /// The number of I/O operations per second (IOPS) to provision for the volume. Constraint: Required when the volume type is io1.
        public let iops: Int32?
        /// Indicates whether the volume should be encrypted. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or an unencrypted volume from an encrypted snapshot. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(volumeType: String? = nil, volumeSize: Int32? = nil, snapshotId: String? = nil, deleteOnTermination: Bool? = nil, iops: Int32? = nil, encrypted: Bool? = nil) {
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.iops = iops
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case volumeType = "VolumeType"
            case volumeSize = "VolumeSize"
            case snapshotId = "SnapshotId"
            case deleteOnTermination = "DeleteOnTermination"
            case iops = "Iops"
            case encrypted = "Encrypted"
        }
    }

    public struct LifecycleHookSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string), 
            AWSShapeMember(label: "LifecycleTransition", required: true, type: .string), 
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultResult", required: false, type: .string), 
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string)
        ]
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. The possible values are:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING  
        public let lifecycleTransition: String
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON.
        public let defaultResult: String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?

        public init(lifecycleHookName: String, lifecycleTransition: String, heartbeatTimeout: Int32? = nil, defaultResult: String? = nil, notificationTargetARN: String? = nil, roleARN: String? = nil, notificationMetadata: String? = nil) {
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.heartbeatTimeout = heartbeatTimeout
            self.defaultResult = defaultResult
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
            self.notificationMetadata = notificationMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleTransition = "LifecycleTransition"
            case heartbeatTimeout = "HeartbeatTimeout"
            case defaultResult = "DefaultResult"
            case notificationTargetARN = "NotificationTargetARN"
            case roleARN = "RoleARN"
            case notificationMetadata = "NotificationMetadata"
        }
    }

    public struct DisableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following metrics. If you omit this parameter, all metrics are disabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?

        public init(autoScalingGroupName: String, metrics: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case metrics = "Metrics"
        }
    }

    public struct AdjustmentType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string)
        ]
        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?

        public init(adjustmentType: String? = nil) {
            self.adjustmentType = adjustmentType
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaxSize", required: true, type: .integer), 
            AWSShapeMember(label: "MinSize", required: true, type: .integer), 
            AWSShapeMember(label: "LoadBalancerNames", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckType", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultCooldown", required: true, type: .integer), 
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "EnabledMetrics", required: false, type: .list), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "SuspendedProcesses", required: false, type: .list), 
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "AutoScalingGroupARN", required: false, type: .string), 
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string), 
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ServiceLinkedRoleARN", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupARNs", required: false, type: .list), 
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "DesiredCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MixedInstancesPolicy", required: false, type: .structure)
        ]
        /// One or more subnet IDs, if applicable, separated by commas. If you specify VPCZoneIdentifier and AvailabilityZones, ensure that the Availability Zones of the subnets match the values for AvailabilityZones.
        public let vPCZoneIdentifier: String?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// The minimum size of the group.
        public let minSize: Int32
        /// One or more load balancers associated with the group.
        public let loadBalancerNames: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
        public let healthCheckGracePeriod: Int32?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
        public let defaultCooldown: Int32
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The metrics enabled for the group.
        public let enabledMetrics: [EnabledMetric]?
        /// The launch template for the group.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The suspended processes associated with the group.
        public let suspendedProcesses: [SuspendedProcess]?
        /// The date and time the group was created.
        public let createdTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupARN: String?
        /// The name of the associated launch configuration.
        public let launchConfigurationName: String?
        /// The name of the placement group into which to launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The termination policies for the group.
        public let terminationPolicies: [String]?
        /// The current state of the group when DeleteAutoScalingGroup is in progress.
        public let status: String?
        /// The tags for the group.
        public let tags: [TagDescription]?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
        public let serviceLinkedRoleARN: String?
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public let targetGroupARNs: [String]?
        /// The EC2 instances associated with the group.
        public let instances: [Instance]?
        /// The desired size of the group.
        public let desiredCapacity: Int32
        /// The mixed instances policy for the group. 
        public let mixedInstancesPolicy: MixedInstancesPolicy?

        public init(vPCZoneIdentifier: String? = nil, maxSize: Int32, minSize: Int32, loadBalancerNames: [String]? = nil, autoScalingGroupName: String, healthCheckType: String, healthCheckGracePeriod: Int32? = nil, defaultCooldown: Int32, newInstancesProtectedFromScaleIn: Bool? = nil, enabledMetrics: [EnabledMetric]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, suspendedProcesses: [SuspendedProcess]? = nil, createdTime: TimeStamp, autoScalingGroupARN: String? = nil, launchConfigurationName: String? = nil, placementGroup: String? = nil, terminationPolicies: [String]? = nil, status: String? = nil, tags: [TagDescription]? = nil, serviceLinkedRoleARN: String? = nil, availabilityZones: [String], targetGroupARNs: [String]? = nil, instances: [Instance]? = nil, desiredCapacity: Int32, mixedInstancesPolicy: MixedInstancesPolicy? = nil) {
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.maxSize = maxSize
            self.minSize = minSize
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckType = healthCheckType
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.defaultCooldown = defaultCooldown
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.enabledMetrics = enabledMetrics
            self.launchTemplate = launchTemplate
            self.suspendedProcesses = suspendedProcesses
            self.createdTime = createdTime
            self.autoScalingGroupARN = autoScalingGroupARN
            self.launchConfigurationName = launchConfigurationName
            self.placementGroup = placementGroup
            self.terminationPolicies = terminationPolicies
            self.status = status
            self.tags = tags
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.availabilityZones = availabilityZones
            self.targetGroupARNs = targetGroupARNs
            self.instances = instances
            self.desiredCapacity = desiredCapacity
            self.mixedInstancesPolicy = mixedInstancesPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case loadBalancerNames = "LoadBalancerNames"
            case autoScalingGroupName = "AutoScalingGroupName"
            case healthCheckType = "HealthCheckType"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case defaultCooldown = "DefaultCooldown"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case enabledMetrics = "EnabledMetrics"
            case launchTemplate = "LaunchTemplate"
            case suspendedProcesses = "SuspendedProcesses"
            case createdTime = "CreatedTime"
            case autoScalingGroupARN = "AutoScalingGroupARN"
            case launchConfigurationName = "LaunchConfigurationName"
            case placementGroup = "PlacementGroup"
            case terminationPolicies = "TerminationPolicies"
            case status = "Status"
            case tags = "Tags"
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case availabilityZones = "AvailabilityZones"
            case targetGroupARNs = "TargetGroupARNs"
            case instances = "Instances"
            case desiredCapacity = "DesiredCapacity"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
        }
    }

    public struct TagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// One or more tags.
        public let tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct DescribeNotificationConfigurationsAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfigurations", required: true, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The notification configurations.
        public let notificationConfigurations: [NotificationConfiguration]

        public init(nextToken: String? = nil, notificationConfigurations: [NotificationConfiguration]) {
            self.nextToken = nextToken
            self.notificationConfigurations = notificationConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case notificationConfigurations = "NotificationConfigurations"
        }
    }

    public struct LaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string)
        ]
        /// The version number, $Latest, or $Default. If the value is $Latest, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is $Default, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is $Default.
        public let version: String?
        /// The name of the launch template. You must specify either a template name or a template ID.
        public let launchTemplateName: String?
        /// The ID of the launch template. You must specify either a template ID or a template name.
        public let launchTemplateId: String?

        public init(version: String? = nil, launchTemplateName: String? = nil, launchTemplateId: String? = nil) {
            self.version = version
            self.launchTemplateName = launchTemplateName
            self.launchTemplateId = launchTemplateId
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case launchTemplateName = "LaunchTemplateName"
            case launchTemplateId = "LaunchTemplateId"
        }
    }

    public struct SetDesiredCapacityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "HonorCooldown", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The number of EC2 instances that should be running in the Auto Scaling group.
        public let desiredCapacity: Int32
        /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
        public let honorCooldown: Bool?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(desiredCapacity: Int32, honorCooldown: Bool? = nil, autoScalingGroupName: String) {
            self.desiredCapacity = desiredCapacity
            self.honorCooldown = honorCooldown
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case desiredCapacity = "DesiredCapacity"
            case honorCooldown = "HonorCooldown"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct ScalingProcessQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingProcesses", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more of the following processes. If you omit this parameter, all processes are specified.    Launch     Terminate     HealthCheck     ReplaceUnhealthy     AZRebalance     AlarmNotification     ScheduledActions     AddToLoadBalancer   
        public let scalingProcesses: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(scalingProcesses: [String]? = nil, autoScalingGroupName: String) {
            self.scalingProcesses = scalingProcesses
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case scalingProcesses = "ScalingProcesses"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

}