// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTJobsDataPlane {

    public struct DescribeJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeJobDocument", location: .querystring(locationName: "includeJobDocument"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "executionNumber", location: .querystring(locationName: "executionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String
        /// Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.
        public let executionNumber: Int64?
        /// The thing name associated with the device the job execution is running on.
        public let thingName: String

        public init(includeJobDocument: Bool? = nil, jobId: String, executionNumber: Int64? = nil, thingName: String) {
            self.includeJobDocument = includeJobDocument
            self.jobId = jobId
            self.executionNumber = executionNumber
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case includeJobDocument = "includeJobDocument"
            case jobId = "jobId"
            case executionNumber = "executionNumber"
            case thingName = "thingName"
        }
    }

    public enum JobExecutionStatus: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case rejected = "REJECTED"
        case removed = "REMOVED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct JobExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "approximateSecondsBeforeTimedOut", required: false, type: .long), 
            AWSShapeMember(label: "jobDocument", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.
        public let executionNumber: Int64?
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// The time, in milliseconds since the epoch, when the job execution was last updated. 
        public let lastUpdatedAt: Int64?
        /// The estimated number of seconds that remain before the job execution status will be changed to TIMED_OUT.
        public let approximateSecondsBeforeTimedOut: Int64?
        /// The content of the job document.
        public let jobDocument: String?
        /// The name of the thing that is executing the job.
        public let thingName: String?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was started.
        public let startedAt: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?

        public init(executionNumber: Int64? = nil, status: JobExecutionStatus? = nil, lastUpdatedAt: Int64? = nil, approximateSecondsBeforeTimedOut: Int64? = nil, jobDocument: String? = nil, thingName: String? = nil, versionNumber: Int64? = nil, statusDetails: [String: String]? = nil, queuedAt: Int64? = nil, startedAt: Int64? = nil, jobId: String? = nil) {
            self.executionNumber = executionNumber
            self.status = status
            self.lastUpdatedAt = lastUpdatedAt
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.jobDocument = jobDocument
            self.thingName = thingName
            self.versionNumber = versionNumber
            self.statusDetails = statusDetails
            self.queuedAt = queuedAt
            self.startedAt = startedAt
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case executionNumber = "executionNumber"
            case status = "status"
            case lastUpdatedAt = "lastUpdatedAt"
            case approximateSecondsBeforeTimedOut = "approximateSecondsBeforeTimedOut"
            case jobDocument = "jobDocument"
            case thingName = "thingName"
            case versionNumber = "versionNumber"
            case statusDetails = "statusDetails"
            case queuedAt = "queuedAt"
            case startedAt = "startedAt"
            case jobId = "jobId"
        }
    }

    public struct GetPendingJobExecutionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queuedJobs", required: false, type: .list), 
            AWSShapeMember(label: "inProgressJobs", required: false, type: .list)
        ]
        /// A list of JobExecutionSummary objects with status QUEUED.
        public let queuedJobs: [JobExecutionSummary]?
        /// A list of JobExecutionSummary objects with status IN_PROGRESS.
        public let inProgressJobs: [JobExecutionSummary]?

        public init(queuedJobs: [JobExecutionSummary]? = nil, inProgressJobs: [JobExecutionSummary]? = nil) {
            self.queuedJobs = queuedJobs
            self.inProgressJobs = inProgressJobs
        }

        private enum CodingKeys: String, CodingKey {
            case queuedJobs = "queuedJobs"
            case inProgressJobs = "inProgressJobs"
        }
    }

    public struct UpdateJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobDocument", required: false, type: .string), 
            AWSShapeMember(label: "executionState", required: false, type: .structure)
        ]
        /// The contents of the Job Documents.
        public let jobDocument: String?
        /// A JobExecutionState object.
        public let executionState: JobExecutionState?

        public init(jobDocument: String? = nil, executionState: JobExecutionState? = nil) {
            self.jobDocument = jobDocument
            self.executionState = executionState
        }

        private enum CodingKeys: String, CodingKey {
            case jobDocument = "jobDocument"
            case executionState = "executionState"
        }
    }

    public struct JobExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: Int64?
        /// A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.
        public let versionNumber: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?

        public init(jobId: String? = nil, startedAt: Int64? = nil, executionNumber: Int64? = nil, versionNumber: Int64? = nil, lastUpdatedAt: Int64? = nil, queuedAt: Int64? = nil) {
            self.jobId = jobId
            self.startedAt = startedAt
            self.executionNumber = executionNumber
            self.versionNumber = versionNumber
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case startedAt = "startedAt"
            case executionNumber = "executionNumber"
            case versionNumber = "versionNumber"
            case lastUpdatedAt = "lastUpdatedAt"
            case queuedAt = "queuedAt"
        }
    }

    public struct StartNextPendingJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// A JobExecution object.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct UpdateJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeJobExecutionState", required: false, type: .boolean), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "stepTimeoutInMinutes", required: false, type: .long), 
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "includeJobDocument", required: false, type: .boolean), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long)
        ]
        /// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
        public let includeJobExecutionState: Bool?
        ///  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?
        /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in this field) the job execution status will be automatically set to TIMED_OUT. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
        public let stepTimeoutInMinutes: Int64?
        /// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
        public let status: JobExecutionStatus
        /// The name of the thing associated with the device.
        public let thingName: String
        /// Optional. A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
        public let expectedVersion: Int64?

        public init(includeJobExecutionState: Bool? = nil, statusDetails: [String: String]? = nil, stepTimeoutInMinutes: Int64? = nil, status: JobExecutionStatus, thingName: String, executionNumber: Int64? = nil, jobId: String, includeJobDocument: Bool? = nil, expectedVersion: Int64? = nil) {
            self.includeJobExecutionState = includeJobExecutionState
            self.statusDetails = statusDetails
            self.stepTimeoutInMinutes = stepTimeoutInMinutes
            self.status = status
            self.thingName = thingName
            self.executionNumber = executionNumber
            self.jobId = jobId
            self.includeJobDocument = includeJobDocument
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case includeJobExecutionState = "includeJobExecutionState"
            case statusDetails = "statusDetails"
            case stepTimeoutInMinutes = "stepTimeoutInMinutes"
            case status = "status"
            case thingName = "thingName"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
            case includeJobDocument = "includeJobDocument"
            case expectedVersion = "expectedVersion"
        }
    }

    public struct DescribeJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// Contains data about a job execution.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct StartNextPendingJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stepTimeoutInMinutes", required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map)
        ]
        /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in field stepTimeoutInMinutes) the job execution status will be automatically set to TIMED_OUT. Note that setting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
        public let stepTimeoutInMinutes: Int64?
        /// The name of the thing associated with the device.
        public let thingName: String
        /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?

        public init(stepTimeoutInMinutes: Int64? = nil, thingName: String, statusDetails: [String: String]? = nil) {
            self.stepTimeoutInMinutes = stepTimeoutInMinutes
            self.thingName = thingName
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case stepTimeoutInMinutes = "stepTimeoutInMinutes"
            case thingName = "thingName"
            case statusDetails = "statusDetails"
        }
    }

    public struct GetPendingJobExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing that is executing the job.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct JobExecutionState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map)
        ]
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?

        public init(versionNumber: Int64? = nil, status: JobExecutionStatus? = nil, statusDetails: [String: String]? = nil) {
            self.versionNumber = versionNumber
            self.status = status
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case versionNumber = "versionNumber"
            case status = "status"
            case statusDetails = "statusDetails"
        }
    }

}