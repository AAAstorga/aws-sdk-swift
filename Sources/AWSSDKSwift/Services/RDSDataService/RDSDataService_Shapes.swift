// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RDSDataService {

    public struct ExecuteSqlRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "awsSecretStoreArn", required: true, type: .string), 
            AWSShapeMember(label: "database", required: false, type: .string), 
            AWSShapeMember(label: "sqlStatements", required: true, type: .string), 
            AWSShapeMember(label: "dbClusterOrInstanceArn", required: true, type: .string)
        ]
        /// Target Schema name
        public let schema: String?
        /// ARN of the db credentials in AWS Secret Store or the friendly secret name
        public let awsSecretStoreArn: String
        /// Target DB name
        public let database: String?
        /// SQL statement(s) to be executed. Statements can be chained by using semicolons
        public let sqlStatements: String
        /// ARN of the target db cluster or instance
        public let dbClusterOrInstanceArn: String

        public init(schema: String? = nil, awsSecretStoreArn: String, database: String? = nil, sqlStatements: String, dbClusterOrInstanceArn: String) {
            self.schema = schema
            self.awsSecretStoreArn = awsSecretStoreArn
            self.database = database
            self.sqlStatements = sqlStatements
            self.dbClusterOrInstanceArn = dbClusterOrInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case schema = "schema"
            case awsSecretStoreArn = "awsSecretStoreArn"
            case database = "database"
            case sqlStatements = "sqlStatements"
            case dbClusterOrInstanceArn = "dbClusterOrInstanceArn"
        }
    }

    public struct ExecuteSqlResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sqlStatementResults", required: true, type: .list)
        ]
        /// Results returned by executing the sql statement(s)
        public let sqlStatementResults: [SqlStatementResult]

        public init(sqlStatementResults: [SqlStatementResult]) {
            self.sqlStatementResults = sqlStatementResults
        }

        private enum CodingKeys: String, CodingKey {
            case sqlStatementResults = "sqlStatementResults"
        }
    }

    public class Value: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arrayValues", required: false, type: .list), 
            AWSShapeMember(label: "blobValue", required: false, type: .blob), 
            AWSShapeMember(label: "bigIntValue", required: false, type: .long), 
            AWSShapeMember(label: "realValue", required: false, type: .float), 
            AWSShapeMember(label: "bitValue", required: false, type: .boolean), 
            AWSShapeMember(label: "structValue", required: false, type: .structure), 
            AWSShapeMember(label: "intValue", required: false, type: .integer), 
            AWSShapeMember(label: "isNull", required: false, type: .boolean), 
            AWSShapeMember(label: "stringValue", required: false, type: .string), 
            AWSShapeMember(label: "doubleValue", required: false, type: .double)
        ]
        /// Arbitrarily nested arrays
        public let arrayValues: [Value]?
        /// Blob value
        public let blobValue: Data?
        /// Long value
        public let bigIntValue: Int64?
        /// Float value
        public let realValue: Float?
        /// Bit value
        public let bitValue: Bool?
        /// Struct or UDT
        public let structValue: StructValue?
        /// Integer value
        public let intValue: Int32?
        /// Is column null
        public let isNull: Bool?
        /// String value
        public let stringValue: String?
        /// Double value
        public let doubleValue: Double?

        public init(arrayValues: [Value]? = nil, blobValue: Data? = nil, bigIntValue: Int64? = nil, realValue: Float? = nil, bitValue: Bool? = nil, structValue: StructValue? = nil, intValue: Int32? = nil, isNull: Bool? = nil, stringValue: String? = nil, doubleValue: Double? = nil) {
            self.arrayValues = arrayValues
            self.blobValue = blobValue
            self.bigIntValue = bigIntValue
            self.realValue = realValue
            self.bitValue = bitValue
            self.structValue = structValue
            self.intValue = intValue
            self.isNull = isNull
            self.stringValue = stringValue
            self.doubleValue = doubleValue
        }

        private enum CodingKeys: String, CodingKey {
            case arrayValues = "arrayValues"
            case blobValue = "blobValue"
            case bigIntValue = "bigIntValue"
            case realValue = "realValue"
            case bitValue = "bitValue"
            case structValue = "structValue"
            case intValue = "intValue"
            case isNull = "isNull"
            case stringValue = "stringValue"
            case doubleValue = "doubleValue"
        }
    }

    public struct ResultSetMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "columnCount", required: false, type: .long), 
            AWSShapeMember(label: "columnMetadata", required: false, type: .list)
        ]
        /// Number of columns
        public let columnCount: Int64?
        /// List of columns and their types
        public let columnMetadata: [ColumnMetadata]?

        public init(columnCount: Int64? = nil, columnMetadata: [ColumnMetadata]? = nil) {
            self.columnCount = columnCount
            self.columnMetadata = columnMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case columnCount = "columnCount"
            case columnMetadata = "columnMetadata"
        }
    }

    public struct ColumnMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tableName", required: false, type: .string), 
            AWSShapeMember(label: "schemaName", required: false, type: .string), 
            AWSShapeMember(label: "nullable", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "isCurrency", required: false, type: .boolean), 
            AWSShapeMember(label: "isAutoIncrement", required: false, type: .boolean), 
            AWSShapeMember(label: "precision", required: false, type: .integer), 
            AWSShapeMember(label: "arrayBaseColumnType", required: false, type: .integer), 
            AWSShapeMember(label: "scale", required: false, type: .integer), 
            AWSShapeMember(label: "type", required: false, type: .integer), 
            AWSShapeMember(label: "isCaseSensitive", required: false, type: .boolean), 
            AWSShapeMember(label: "isSigned", required: false, type: .boolean), 
            AWSShapeMember(label: "typeName", required: false, type: .string), 
            AWSShapeMember(label: "label", required: false, type: .string)
        ]
        /// Designated column's table name
        public let tableName: String?
        /// Designated column's table's schema
        public let schemaName: String?
        /// Indicates the nullability of values in the designated column. One of columnNoNulls (0), columnNullable (1), columnNullableUnknown (2)
        public let nullable: Int32?
        /// Name of the column.
        public let name: String?
        /// Whether values in the designated column is a cash value
        public let isCurrency: Bool?
        /// Whether the designated column is automatically numbered
        public let isAutoIncrement: Bool?
        /// Get the designated column's specified column size.For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. 0 is returned for data types where the column size is not applicable.
        public let precision: Int32?
        /// Homogenous array base SQL type from java.sql.Types.
        public let arrayBaseColumnType: Int32?
        /// Designated column's number of digits to right of the decimal point. 0 is returned for data types where the scale is not applicable.
        public let scale: Int32?
        /// SQL type from java.sql.Types.
        public let `type`: Int32?
        /// Whether values in the designated column's case matters
        public let isCaseSensitive: Bool?
        /// Whether values in the designated column are signed numbers
        public let isSigned: Bool?
        /// Database-specific type name.
        public let typeName: String?
        /// Usually specified by the SQL AS. If not specified, return column name.
        public let label: String?

        public init(tableName: String? = nil, schemaName: String? = nil, nullable: Int32? = nil, name: String? = nil, isCurrency: Bool? = nil, isAutoIncrement: Bool? = nil, precision: Int32? = nil, arrayBaseColumnType: Int32? = nil, scale: Int32? = nil, type: Int32? = nil, isCaseSensitive: Bool? = nil, isSigned: Bool? = nil, typeName: String? = nil, label: String? = nil) {
            self.tableName = tableName
            self.schemaName = schemaName
            self.nullable = nullable
            self.name = name
            self.isCurrency = isCurrency
            self.isAutoIncrement = isAutoIncrement
            self.precision = precision
            self.arrayBaseColumnType = arrayBaseColumnType
            self.scale = scale
            self.`type` = `type`
            self.isCaseSensitive = isCaseSensitive
            self.isSigned = isSigned
            self.typeName = typeName
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "tableName"
            case schemaName = "schemaName"
            case nullable = "nullable"
            case name = "name"
            case isCurrency = "isCurrency"
            case isAutoIncrement = "isAutoIncrement"
            case precision = "precision"
            case arrayBaseColumnType = "arrayBaseColumnType"
            case scale = "scale"
            case `type` = "type"
            case isCaseSensitive = "isCaseSensitive"
            case isSigned = "isSigned"
            case typeName = "typeName"
            case label = "label"
        }
    }

    public struct Record: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "values", required: false, type: .list)
        ]
        /// Record
        public let values: [Value]?

        public init(values: [Value]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "values"
        }
    }

    public struct StructValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list)
        ]
        /// Struct or UDT
        public let attributes: [Value]?

        public init(attributes: [Value]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct ResultFrame: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resultSetMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "records", required: false, type: .list)
        ]
        /// ResultSet Metadata.
        public let resultSetMetadata: ResultSetMetadata?
        /// ResultSet Metadata.
        public let records: [Record]?

        public init(resultSetMetadata: ResultSetMetadata? = nil, records: [Record]? = nil) {
            self.resultSetMetadata = resultSetMetadata
            self.records = records
        }

        private enum CodingKeys: String, CodingKey {
            case resultSetMetadata = "resultSetMetadata"
            case records = "records"
        }
    }

    public struct SqlStatementResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfRecordsUpdated", required: false, type: .long), 
            AWSShapeMember(label: "resultFrame", required: false, type: .structure)
        ]
        /// Number of rows updated.
        public let numberOfRecordsUpdated: Int64?
        /// ResultFrame returned by executing the sql statement
        public let resultFrame: ResultFrame?

        public init(numberOfRecordsUpdated: Int64? = nil, resultFrame: ResultFrame? = nil) {
            self.numberOfRecordsUpdated = numberOfRecordsUpdated
            self.resultFrame = resultFrame
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRecordsUpdated = "numberOfRecordsUpdated"
            case resultFrame = "resultFrame"
        }
    }

}