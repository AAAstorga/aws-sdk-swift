// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Kinesis {

    public struct CreateStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A name to identify the stream. The stream name is scoped to the AWS account used by the application that creates the stream. It is also scoped by region. That is, two streams in two different AWS accounts can have the same name, and two streams in the same AWS account but in two different regions can have the same name.
        public let streamName: String
        /// The number of shards that the stream will use. The throughput of the stream is a function of the number of shards; more shards are required for greater provisioned throughput. DefaultShardLimit;
        public let shardCount: Int32

        public init(streamName: String, shardCount: Int32) {
            self.streamName = streamName
            self.shardCount = shardCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let shardCount = dictionary["ShardCount"] as? Int32 else { throw InitializableError.missingRequiredParam("ShardCount") }
            self.shardCount = shardCount
        }
    }

    public struct AddTagsToStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The set of key-value pairs to use to create the tags.
        public let tags: [String: String]
        /// The name of the stream.
        public let streamName: String

        public init(tags: [String: String], streamName: String) {
            self.tags = tags
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [String: String] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = tags
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct DescribeLimitsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum ShardIteratorType: String, CustomStringConvertible {
        case at_sequence_number = "AT_SEQUENCE_NUMBER"
        case after_sequence_number = "AFTER_SEQUENCE_NUMBER"
        case trim_horizon = "TRIM_HORIZON"
        case latest = "LATEST"
        case at_timestamp = "AT_TIMESTAMP"
        public var description: String { return self.rawValue }
    }

    public struct DescribeStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the stream to describe.
        public let streamName: String
        /// The shard ID of the shard to start with.
        public let exclusiveStartShardId: String?
        /// The maximum number of shards to return in a single call. The default value is 100. If you specify a value greater than 100, at most 100 shards are returned.
        public let limit: Int32?

        public init(streamName: String, exclusiveStartShardId: String? = nil, limit: Int32? = nil) {
            self.streamName = streamName
            self.exclusiveStartShardId = exclusiveStartShardId
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            self.exclusiveStartShardId = dictionary["ExclusiveStartShardId"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct UpdateShardCountOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The updated number of shards.
        public let targetShardCount: Int32?
        /// The current number of shards.
        public let currentShardCount: Int32?
        /// The name of the stream.
        public let streamName: String?

        public init(targetShardCount: Int32? = nil, currentShardCount: Int32? = nil, streamName: String? = nil) {
            self.targetShardCount = targetShardCount
            self.currentShardCount = currentShardCount
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            self.targetShardCount = dictionary["TargetShardCount"] as? Int32
            self.currentShardCount = dictionary["CurrentShardCount"] as? Int32
            self.streamName = dictionary["StreamName"] as? String
        }
    }

    public struct DecreaseStreamRetentionPeriodInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new retention period of the stream, in hours. Must be less than the current retention period.
        public let retentionPeriodHours: Int32
        /// The name of the stream to modify.
        public let streamName: String

        public init(retentionPeriodHours: Int32, streamName: String) {
            self.retentionPeriodHours = retentionPeriodHours
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let retentionPeriodHours = dictionary["RetentionPeriodHours"] as? Int32 else { throw InitializableError.missingRequiredParam("RetentionPeriodHours") }
            self.retentionPeriodHours = retentionPeriodHours
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct IncreaseStreamRetentionPeriodInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new retention period of the stream, in hours. Must be more than the current retention period.
        public let retentionPeriodHours: Int32
        /// The name of the stream to modify.
        public let streamName: String

        public init(retentionPeriodHours: Int32, streamName: String) {
            self.retentionPeriodHours = retentionPeriodHours
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let retentionPeriodHours = dictionary["RetentionPeriodHours"] as? Int32 else { throw InitializableError.missingRequiredParam("RetentionPeriodHours") }
            self.retentionPeriodHours = retentionPeriodHours
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct Shard: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the shard within the stream.
        public let shardId: String
        /// The range of possible sequence numbers for the shard.
        public let sequenceNumberRange: SequenceNumberRange
        /// The shard ID of the shard adjacent to the shard's parent.
        public let adjacentParentShardId: String?
        /// The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.
        public let hashKeyRange: HashKeyRange
        /// The shard ID of the shard's parent.
        public let parentShardId: String?

        public init(shardId: String, sequenceNumberRange: SequenceNumberRange, adjacentParentShardId: String? = nil, hashKeyRange: HashKeyRange, parentShardId: String? = nil) {
            self.shardId = shardId
            self.sequenceNumberRange = sequenceNumberRange
            self.adjacentParentShardId = adjacentParentShardId
            self.hashKeyRange = hashKeyRange
            self.parentShardId = parentShardId
        }

        public init(dictionary: [String: Any]) throws {
            guard let shardId = dictionary["ShardId"] as? String else { throw InitializableError.missingRequiredParam("ShardId") }
            self.shardId = shardId
            guard let sequenceNumberRange = dictionary["SequenceNumberRange"] as? [String: Any] else { throw InitializableError.missingRequiredParam("SequenceNumberRange") }
            self.sequenceNumberRange = try Kinesis.SequenceNumberRange(dictionary: sequenceNumberRange)
            self.adjacentParentShardId = dictionary["AdjacentParentShardId"] as? String
            guard let hashKeyRange = dictionary["HashKeyRange"] as? [String: Any] else { throw InitializableError.missingRequiredParam("HashKeyRange") }
            self.hashKeyRange = try Kinesis.HashKeyRange(dictionary: hashKeyRange)
            self.parentShardId = dictionary["ParentShardId"] as? String
        }
    }

    public struct PutRecordsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of unsuccessfully processed records in a PutRecords request.
        public let failedRecordCount: Int32?
        /// An array of successfully and unsuccessfully processed record results, correlated with the request by natural ordering. A record that is successfully added to a stream includes SequenceNumber and ShardId in the result. A record that fails to be added to a stream includes ErrorCode and ErrorMessage in the result.
        public let records: [PutRecordsResultEntry]

        public init(failedRecordCount: Int32? = nil, records: [PutRecordsResultEntry]) {
            self.failedRecordCount = failedRecordCount
            self.records = records
        }

        public init(dictionary: [String: Any]) throws {
            self.failedRecordCount = dictionary["FailedRecordCount"] as? Int32
            guard let records = dictionary["Records"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Records") }
            self.records = try records.map({ try PutRecordsResultEntry(dictionary: $0) })
        }
    }

    public struct DescribeStreamOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current status of the stream, the stream ARN, an array of shard objects that comprise the stream, and whether there are more shards available.
        public let streamDescription: StreamDescription

        public init(streamDescription: StreamDescription) {
            self.streamDescription = streamDescription
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamDescription = dictionary["StreamDescription"] as? [String: Any] else { throw InitializableError.missingRequiredParam("StreamDescription") }
            self.streamDescription = try Kinesis.StreamDescription(dictionary: streamDescription)
        }
    }

    public struct EnhancedMonitoringOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Represents the list of all the metrics that would be in the enhanced state after the operation.
        public let desiredShardLevelMetrics: [MetricsName]?
        /// The name of the Amazon Kinesis stream.
        public let streamName: String?
        /// Represents the current state of the metrics that are in the enhanced state before the operation.
        public let currentShardLevelMetrics: [MetricsName]?

        public init(desiredShardLevelMetrics: [MetricsName]? = nil, streamName: String? = nil, currentShardLevelMetrics: [MetricsName]? = nil) {
            self.desiredShardLevelMetrics = desiredShardLevelMetrics
            self.streamName = streamName
            self.currentShardLevelMetrics = currentShardLevelMetrics
        }

        public init(dictionary: [String: Any]) throws {
            if let desiredShardLevelMetrics = dictionary["DesiredShardLevelMetrics"] as? [String] { self.desiredShardLevelMetrics = desiredShardLevelMetrics.flatMap({ MetricsName(rawValue: $0)}) } else { self.desiredShardLevelMetrics = nil }
            self.streamName = dictionary["StreamName"] as? String
            if let currentShardLevelMetrics = dictionary["CurrentShardLevelMetrics"] as? [String] { self.currentShardLevelMetrics = currentShardLevelMetrics.flatMap({ MetricsName(rawValue: $0)}) } else { self.currentShardLevelMetrics = nil }
        }
    }

    public struct PutRecordOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.
        public let sequenceNumber: String
        /// The shard ID of the shard where the data record was placed.
        public let shardId: String

        public init(sequenceNumber: String, shardId: String) {
            self.sequenceNumber = sequenceNumber
            self.shardId = shardId
        }

        public init(dictionary: [String: Any]) throws {
            guard let sequenceNumber = dictionary["SequenceNumber"] as? String else { throw InitializableError.missingRequiredParam("SequenceNumber") }
            self.sequenceNumber = sequenceNumber
            guard let shardId = dictionary["ShardId"] as? String else { throw InitializableError.missingRequiredParam("ShardId") }
            self.shardId = shardId
        }
    }

    public struct Record: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The approximate time that the record was inserted into the stream.
        public let approximateArrivalTimestamp: Date?
        /// The unique identifier of the record in the stream.
        public let sequenceNumber: String
        /// Identifies which shard in the stream the data record is assigned to.
        public let partitionKey: String
        /// The data blob. The data in the blob is both opaque and immutable to the Amazon Kinesis service, which does not inspect, interpret, or change the data in the blob in any way. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MB).
        public let data: Data

        public init(approximateArrivalTimestamp: Date? = nil, sequenceNumber: String, partitionKey: String, data: Data) {
            self.approximateArrivalTimestamp = approximateArrivalTimestamp
            self.sequenceNumber = sequenceNumber
            self.partitionKey = partitionKey
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            self.approximateArrivalTimestamp = dictionary["ApproximateArrivalTimestamp"] as? Date
            guard let sequenceNumber = dictionary["SequenceNumber"] as? String else { throw InitializableError.missingRequiredParam("SequenceNumber") }
            self.sequenceNumber = sequenceNumber
            guard let partitionKey = dictionary["PartitionKey"] as? String else { throw InitializableError.missingRequiredParam("PartitionKey") }
            self.partitionKey = partitionKey
            guard let data = dictionary["Data"] as? Data else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
        }
    }

    public enum MetricsName: String, CustomStringConvertible {
        case incomingbytes = "IncomingBytes"
        case incomingrecords = "IncomingRecords"
        case outgoingbytes = "OutgoingBytes"
        case outgoingrecords = "OutgoingRecords"
        case writeprovisionedthroughputexceeded = "WriteProvisionedThroughputExceeded"
        case readprovisionedthroughputexceeded = "ReadProvisionedThroughputExceeded"
        case iteratoragemilliseconds = "IteratorAgeMilliseconds"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct DisableEnhancedMonitoringInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of shard-level metrics to disable. The following are the valid shard-level metrics. The value "ALL" disables every metric.    IncomingBytes     IncomingRecords     OutgoingBytes     OutgoingRecords     WriteProvisionedThroughputExceeded     ReadProvisionedThroughputExceeded     IteratorAgeMilliseconds     ALL    For more information, see Monitoring the Amazon Kinesis Streams Service with Amazon CloudWatch in the Amazon Kinesis Streams Developer Guide.
        public let shardLevelMetrics: [MetricsName]
        /// The name of the Amazon Kinesis stream for which to disable enhanced monitoring.
        public let streamName: String

        public init(shardLevelMetrics: [MetricsName], streamName: String) {
            self.shardLevelMetrics = shardLevelMetrics
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let shardLevelMetrics = dictionary["ShardLevelMetrics"] as? [String] else { throw InitializableError.missingRequiredParam("ShardLevelMetrics") }
            self.shardLevelMetrics = shardLevelMetrics.flatMap({ MetricsName(rawValue: $0)})
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct HashKeyRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting hash key of the hash key range.
        public let startingHashKey: String
        /// The ending hash key of the hash key range.
        public let endingHashKey: String

        public init(startingHashKey: String, endingHashKey: String) {
            self.startingHashKey = startingHashKey
            self.endingHashKey = endingHashKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let startingHashKey = dictionary["StartingHashKey"] as? String else { throw InitializableError.missingRequiredParam("StartingHashKey") }
            self.startingHashKey = startingHashKey
            guard let endingHashKey = dictionary["EndingHashKey"] as? String else { throw InitializableError.missingRequiredParam("EndingHashKey") }
            self.endingHashKey = endingHashKey
        }
    }

    public struct SequenceNumberRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ending sequence number for the range. Shards that are in the OPEN state have an ending sequence number of null.
        public let endingSequenceNumber: String?
        /// The starting sequence number for the range.
        public let startingSequenceNumber: String

        public init(endingSequenceNumber: String? = nil, startingSequenceNumber: String) {
            self.endingSequenceNumber = endingSequenceNumber
            self.startingSequenceNumber = startingSequenceNumber
        }

        public init(dictionary: [String: Any]) throws {
            self.endingSequenceNumber = dictionary["EndingSequenceNumber"] as? String
            guard let startingSequenceNumber = dictionary["StartingSequenceNumber"] as? String else { throw InitializableError.missingRequiredParam("StartingSequenceNumber") }
            self.startingSequenceNumber = startingSequenceNumber
        }
    }

    public struct DescribeLimitsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of shards.
        public let shardLimit: Int32
        /// The number of open shards.
        public let openShardCount: Int32

        public init(shardLimit: Int32, openShardCount: Int32) {
            self.shardLimit = shardLimit
            self.openShardCount = openShardCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let shardLimit = dictionary["ShardLimit"] as? Int32 else { throw InitializableError.missingRequiredParam("ShardLimit") }
            self.shardLimit = shardLimit
            guard let openShardCount = dictionary["OpenShardCount"] as? Int32 else { throw InitializableError.missingRequiredParam("OpenShardCount") }
            self.openShardCount = openShardCount
        }
    }

    public struct PutRecordsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The records associated with the request.
        public let records: [PutRecordsRequestEntry]
        /// The stream name associated with the request.
        public let streamName: String

        public init(records: [PutRecordsRequestEntry], streamName: String) {
            self.records = records
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let records = dictionary["Records"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Records") }
            self.records = try records.map({ try PutRecordsRequestEntry(dictionary: $0) })
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct GetShardIteratorInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The sequence number of the data record in the shard from which to start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
        public let startingSequenceNumber: String?
        /// The timestamp of the data record from which to start reading. Used with shard iterator type AT_TIMESTAMP. A timestamp is the Unix epoch date with precision in milliseconds. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480. If a record with this exact timestamp does not exist, the iterator returned is for the next (later) record. If the timestamp is older than the current trim horizon, the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON).
        public let timestamp: Date?
        /// Determines how the shard iterator is used to start reading data records from the shard. The following are the valid Amazon Kinesis shard iterator types:  AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.  AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number, provided in the value StartingSequenceNumber.  AT_TIMESTAMP - Start reading from the position denoted by a specific timestamp, provided in the value Timestamp.  TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.  LATEST - Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard.  
        public let shardIteratorType: ShardIteratorType
        /// The name of the Amazon Kinesis stream.
        public let streamName: String
        /// The shard ID of the Amazon Kinesis shard to get the iterator for.
        public let shardId: String

        public init(startingSequenceNumber: String? = nil, timestamp: Date? = nil, shardIteratorType: ShardIteratorType, streamName: String, shardId: String) {
            self.startingSequenceNumber = startingSequenceNumber
            self.timestamp = timestamp
            self.shardIteratorType = shardIteratorType
            self.streamName = streamName
            self.shardId = shardId
        }

        public init(dictionary: [String: Any]) throws {
            self.startingSequenceNumber = dictionary["StartingSequenceNumber"] as? String
            self.timestamp = dictionary["Timestamp"] as? Date
            guard let rawShardIteratorType = dictionary["ShardIteratorType"] as? String, let shardIteratorType = ShardIteratorType(rawValue: rawShardIteratorType) else { throw InitializableError.missingRequiredParam("ShardIteratorType") }
            self.shardIteratorType = shardIteratorType
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let shardId = dictionary["ShardId"] as? String else { throw InitializableError.missingRequiredParam("ShardId") }
            self.shardId = shardId
        }
    }

    public struct ListTagsForStreamOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set to true, more tags are available. To request additional tags, set ExclusiveStartTagKey to the key of the last tag returned.
        public let hasMoreTags: Bool
        /// A list of tags associated with StreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit. 
        public let tags: [Tag]

        public init(hasMoreTags: Bool, tags: [Tag]) {
            self.hasMoreTags = hasMoreTags
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let hasMoreTags = dictionary["HasMoreTags"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreTags") }
            self.hasMoreTags = hasMoreTags
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct PutRecordsRequestEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MB).
        public let data: Data
        /// The hash value used to determine explicitly the shard that the data record is assigned to by overriding the partition key hash.
        public let explicitHashKey: String?
        /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
        public let partitionKey: String

        public init(data: Data, explicitHashKey: String? = nil, partitionKey: String) {
            self.data = data
            self.explicitHashKey = explicitHashKey
            self.partitionKey = partitionKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let data = dictionary["Data"] as? Data else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
            self.explicitHashKey = dictionary["ExplicitHashKey"] as? String
            guard let partitionKey = dictionary["PartitionKey"] as? String else { throw InitializableError.missingRequiredParam("PartitionKey") }
            self.partitionKey = partitionKey
        }
    }

    public struct GetRecordsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of records to return. Specify a value of up to 10,000. If you specify a value that is greater than 10,000, GetRecords throws InvalidArgumentException.
        public let limit: Int32?
        /// The position in the shard from which you want to start sequentially reading data records. A shard iterator specifies this position using the sequence number of a data record in the shard.
        public let shardIterator: String

        public init(limit: Int32? = nil, shardIterator: String) {
            self.limit = limit
            self.shardIterator = shardIterator
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            guard let shardIterator = dictionary["ShardIterator"] as? String else { throw InitializableError.missingRequiredParam("ShardIterator") }
            self.shardIterator = shardIterator
        }
    }

    public struct UpdateShardCountInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new number of shards.
        public let targetShardCount: Int32
        /// The name of the stream.
        public let streamName: String
        /// The scaling type. Uniform scaling creates shards of equal size.
        public let scalingType: ScalingType

        public init(targetShardCount: Int32, streamName: String, scalingType: ScalingType) {
            self.targetShardCount = targetShardCount
            self.streamName = streamName
            self.scalingType = scalingType
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetShardCount = dictionary["TargetShardCount"] as? Int32 else { throw InitializableError.missingRequiredParam("TargetShardCount") }
            self.targetShardCount = targetShardCount
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let rawScalingType = dictionary["ScalingType"] as? String, let scalingType = ScalingType(rawValue: rawScalingType) else { throw InitializableError.missingRequiredParam("ScalingType") }
            self.scalingType = scalingType
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional string, typically used to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public let value: String?
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct DeleteStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the stream to delete.
        public let streamName: String

        public init(streamName: String) {
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct GetShardIteratorOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard.
        public let shardIterator: String?

        public init(shardIterator: String? = nil) {
            self.shardIterator = shardIterator
        }

        public init(dictionary: [String: Any]) throws {
            self.shardIterator = dictionary["ShardIterator"] as? String
        }
    }

    public struct PutRecordInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
        public let partitionKey: String
        /// The hash value used to explicitly determine the shard the data record is assigned to by overriding the partition key hash.
        public let explicitHashKey: String?
        /// The name of the stream to put the data record into.
        public let streamName: String
        /// Guarantees strictly increasing sequence numbers, for puts from the same client and to the same partition key. Usage: set the SequenceNumberForOrdering of record n to the sequence number of record n-1 (as returned in the result when putting record n-1). If this parameter is not set, records will be coarsely ordered based on arrival time.
        public let sequenceNumberForOrdering: String?
        /// The data blob to put into the record, which is base64-encoded when the blob is serialized. When the data blob (the payload before base64-encoding) is added to the partition key size, the total size must not exceed the maximum record size (1 MB).
        public let data: Data

        public init(partitionKey: String, explicitHashKey: String? = nil, streamName: String, sequenceNumberForOrdering: String? = nil, data: Data) {
            self.partitionKey = partitionKey
            self.explicitHashKey = explicitHashKey
            self.streamName = streamName
            self.sequenceNumberForOrdering = sequenceNumberForOrdering
            self.data = data
        }

        public init(dictionary: [String: Any]) throws {
            guard let partitionKey = dictionary["PartitionKey"] as? String else { throw InitializableError.missingRequiredParam("PartitionKey") }
            self.partitionKey = partitionKey
            self.explicitHashKey = dictionary["ExplicitHashKey"] as? String
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            self.sequenceNumberForOrdering = dictionary["SequenceNumberForOrdering"] as? String
            guard let data = dictionary["Data"] as? Data else { throw InitializableError.missingRequiredParam("Data") }
            self.data = data
        }
    }

    public struct PutRecordsResultEntry: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The sequence number for an individual record result.
        public let sequenceNumber: String?
        /// The error message for an individual record result. An ErrorCode value of ProvisionedThroughputExceededException has an error message that includes the account ID, stream name, and shard ID. An ErrorCode value of InternalFailure has the error message "Internal Service Failure".
        public let errorMessage: String?
        /// The error code for an individual record result. ErrorCodes can be either ProvisionedThroughputExceededException or InternalFailure.
        public let errorCode: String?
        /// The shard ID for an individual record result.
        public let shardId: String?

        public init(sequenceNumber: String? = nil, errorMessage: String? = nil, errorCode: String? = nil, shardId: String? = nil) {
            self.sequenceNumber = sequenceNumber
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.shardId = shardId
        }

        public init(dictionary: [String: Any]) throws {
            self.sequenceNumber = dictionary["SequenceNumber"] as? String
            self.errorMessage = dictionary["ErrorMessage"] as? String
            self.errorCode = dictionary["ErrorCode"] as? String
            self.shardId = dictionary["ShardId"] as? String
        }
    }

    public struct ListTagsForStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The key to use as the starting point for the list of tags. If this parameter is set, ListTagsForStream gets all tags that occur after ExclusiveStartTagKey. 
        public let exclusiveStartTagKey: String?
        /// The name of the stream.
        public let streamName: String
        /// The number of tags to return. If this number is less than the total number of tags associated with the stream, HasMoreTags is set to true. To list additional tags, set ExclusiveStartTagKey to the last key in the response.
        public let limit: Int32?

        public init(exclusiveStartTagKey: String? = nil, streamName: String, limit: Int32? = nil) {
            self.exclusiveStartTagKey = exclusiveStartTagKey
            self.streamName = streamName
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.exclusiveStartTagKey = dictionary["ExclusiveStartTagKey"] as? String
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct ListStreamsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The names of the streams that are associated with the AWS account making the ListStreams request.
        public let streamNames: [String]
        /// If set to true, there are more streams available to list.
        public let hasMoreStreams: Bool

        public init(streamNames: [String], hasMoreStreams: Bool) {
            self.streamNames = streamNames
            self.hasMoreStreams = hasMoreStreams
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamNames = dictionary["StreamNames"] as? [String] else { throw InitializableError.missingRequiredParam("StreamNames") }
            self.streamNames = streamNames
            guard let hasMoreStreams = dictionary["HasMoreStreams"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreStreams") }
            self.hasMoreStreams = hasMoreStreams
        }
    }

    public struct EnableEnhancedMonitoringInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of shard-level metrics to enable. The following are the valid shard-level metrics. The value "ALL" enables every metric.    IncomingBytes     IncomingRecords     OutgoingBytes     OutgoingRecords     WriteProvisionedThroughputExceeded     ReadProvisionedThroughputExceeded     IteratorAgeMilliseconds     ALL    For more information, see Monitoring the Amazon Kinesis Streams Service with Amazon CloudWatch in the Amazon Kinesis Streams Developer Guide.
        public let shardLevelMetrics: [MetricsName]
        /// The name of the stream for which to enable enhanced monitoring.
        public let streamName: String

        public init(shardLevelMetrics: [MetricsName], streamName: String) {
            self.shardLevelMetrics = shardLevelMetrics
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let shardLevelMetrics = dictionary["ShardLevelMetrics"] as? [String] else { throw InitializableError.missingRequiredParam("ShardLevelMetrics") }
            self.shardLevelMetrics = shardLevelMetrics.flatMap({ MetricsName(rawValue: $0)})
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public enum ScalingType: String, CustomStringConvertible {
        case uniform_scaling = "UNIFORM_SCALING"
        public var description: String { return self.rawValue }
    }

    public struct MergeShardsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The shard ID of the adjacent shard for the merge.
        public let adjacentShardToMerge: String
        /// The shard ID of the shard to combine with the adjacent shard for the merge.
        public let shardToMerge: String
        /// The name of the stream for the merge.
        public let streamName: String

        public init(adjacentShardToMerge: String, shardToMerge: String, streamName: String) {
            self.adjacentShardToMerge = adjacentShardToMerge
            self.shardToMerge = shardToMerge
            self.streamName = streamName
        }

        public init(dictionary: [String: Any]) throws {
            guard let adjacentShardToMerge = dictionary["AdjacentShardToMerge"] as? String else { throw InitializableError.missingRequiredParam("AdjacentShardToMerge") }
            self.adjacentShardToMerge = adjacentShardToMerge
            guard let shardToMerge = dictionary["ShardToMerge"] as? String else { throw InitializableError.missingRequiredParam("ShardToMerge") }
            self.shardToMerge = shardToMerge
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
        }
    }

    public struct RemoveTagsFromStreamInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the stream.
        public let streamName: String
        /// A list of tag keys. Each corresponding tag is removed from the stream.
        public let tagKeys: [String]

        public init(streamName: String, tagKeys: [String]) {
            self.streamName = streamName
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct ListStreamsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the stream to start the list with.
        public let exclusiveStartStreamName: String?
        /// The maximum number of streams to list.
        public let limit: Int32?

        public init(exclusiveStartStreamName: String? = nil, limit: Int32? = nil) {
            self.exclusiveStartStreamName = exclusiveStartStreamName
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.exclusiveStartStreamName = dictionary["ExclusiveStartStreamName"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct GetRecordsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The next position in the shard from which to start sequentially reading data records. If set to null, the shard has been closed and the requested iterator will not return any more data. 
        public let nextShardIterator: String?
        /// The number of milliseconds the GetRecords response is from the tip of the stream, indicating how far behind current time the consumer is. A value of zero indicates record processing is caught up, and there are no new records to process at this moment.
        public let millisBehindLatest: Int64?
        /// The data records retrieved from the shard.
        public let records: [Record]

        public init(nextShardIterator: String? = nil, millisBehindLatest: Int64? = nil, records: [Record]) {
            self.nextShardIterator = nextShardIterator
            self.millisBehindLatest = millisBehindLatest
            self.records = records
        }

        public init(dictionary: [String: Any]) throws {
            self.nextShardIterator = dictionary["NextShardIterator"] as? String
            self.millisBehindLatest = dictionary["MillisBehindLatest"] as? Int64
            guard let records = dictionary["Records"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Records") }
            self.records = try records.map({ try Record(dictionary: $0) })
        }
    }

    public struct SplitShardInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the stream for the shard split.
        public let streamName: String
        /// The shard ID of the shard to split.
        public let shardToSplit: String
        /// A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for NewStartingHashKey must be in the range of hash keys being mapped into the shard. The NewStartingHashKey hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.
        public let newStartingHashKey: String

        public init(streamName: String, shardToSplit: String, newStartingHashKey: String) {
            self.streamName = streamName
            self.shardToSplit = shardToSplit
            self.newStartingHashKey = newStartingHashKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let shardToSplit = dictionary["ShardToSplit"] as? String else { throw InitializableError.missingRequiredParam("ShardToSplit") }
            self.shardToSplit = shardToSplit
            guard let newStartingHashKey = dictionary["NewStartingHashKey"] as? String else { throw InitializableError.missingRequiredParam("NewStartingHashKey") }
            self.newStartingHashKey = newStartingHashKey
        }
    }

    public struct EnhancedMetrics: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of shard-level metrics. The following are the valid shard-level metrics. The value "ALL" enhances every metric.    IncomingBytes     IncomingRecords     OutgoingBytes     OutgoingRecords     WriteProvisionedThroughputExceeded     ReadProvisionedThroughputExceeded     IteratorAgeMilliseconds     ALL    For more information, see Monitoring the Amazon Kinesis Streams Service with Amazon CloudWatch in the Amazon Kinesis Streams Developer Guide.
        public let shardLevelMetrics: [MetricsName]?

        public init(shardLevelMetrics: [MetricsName]? = nil) {
            self.shardLevelMetrics = shardLevelMetrics
        }

        public init(dictionary: [String: Any]) throws {
            if let shardLevelMetrics = dictionary["ShardLevelMetrics"] as? [String] { self.shardLevelMetrics = shardLevelMetrics.flatMap({ MetricsName(rawValue: $0)}) } else { self.shardLevelMetrics = nil }
        }
    }

    public struct StreamDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) for the stream being described.
        public let streamARN: String
        /// The current retention period, in hours.
        public let retentionPeriodHours: Int32
        /// Represents the current enhanced monitoring settings of the stream.
        public let enhancedMonitoring: [EnhancedMetrics]
        /// If set to true, more shards in the stream are available to describe.
        public let hasMoreShards: Bool
        /// The shards that comprise the stream.
        public let shards: [Shard]
        /// The approximate time that the stream was created.
        public let streamCreationTimestamp: Date
        /// The name of the stream being described.
        public let streamName: String
        /// The current status of the stream being described. The stream status is one of the following states:    CREATING - The stream is being created. Amazon Kinesis immediately returns and sets StreamStatus to CREATING.    DELETING - The stream is being deleted. The specified stream is in the DELETING state until Amazon Kinesis completes the deletion.    ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.    UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.  
        public let streamStatus: StreamStatus

        public init(streamARN: String, retentionPeriodHours: Int32, enhancedMonitoring: [EnhancedMetrics], hasMoreShards: Bool, shards: [Shard], streamCreationTimestamp: Date, streamName: String, streamStatus: StreamStatus) {
            self.streamARN = streamARN
            self.retentionPeriodHours = retentionPeriodHours
            self.enhancedMonitoring = enhancedMonitoring
            self.hasMoreShards = hasMoreShards
            self.shards = shards
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamName = streamName
            self.streamStatus = streamStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let streamARN = dictionary["StreamARN"] as? String else { throw InitializableError.missingRequiredParam("StreamARN") }
            self.streamARN = streamARN
            guard let retentionPeriodHours = dictionary["RetentionPeriodHours"] as? Int32 else { throw InitializableError.missingRequiredParam("RetentionPeriodHours") }
            self.retentionPeriodHours = retentionPeriodHours
            guard let enhancedMonitoring = dictionary["EnhancedMonitoring"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("EnhancedMonitoring") }
            self.enhancedMonitoring = try enhancedMonitoring.map({ try EnhancedMetrics(dictionary: $0) })
            guard let hasMoreShards = dictionary["HasMoreShards"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreShards") }
            self.hasMoreShards = hasMoreShards
            guard let shards = dictionary["Shards"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Shards") }
            self.shards = try shards.map({ try Shard(dictionary: $0) })
            guard let streamCreationTimestamp = dictionary["StreamCreationTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("StreamCreationTimestamp") }
            self.streamCreationTimestamp = streamCreationTimestamp
            guard let streamName = dictionary["StreamName"] as? String else { throw InitializableError.missingRequiredParam("StreamName") }
            self.streamName = streamName
            guard let rawStreamStatus = dictionary["StreamStatus"] as? String, let streamStatus = StreamStatus(rawValue: rawStreamStatus) else { throw InitializableError.missingRequiredParam("StreamStatus") }
            self.streamStatus = streamStatus
        }
    }

    public enum StreamStatus: String, CustomStringConvertible {
        case creating = "CREATING"
        case deleting = "DELETING"
        case active = "ACTIVE"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

}