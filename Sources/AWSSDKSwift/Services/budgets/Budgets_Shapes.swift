// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Budgets {

    public struct DeleteBudgetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct DescribeBudgetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let budgets: [Budget]?
        public let nextToken: String?

        public init(budgets: [Budget]? = nil, nextToken: String? = nil) {
            self.budgets = budgets
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let budgets = dictionary["Budgets"] as? [[String: Any]] {
                self.budgets = try budgets.map({ try Budget(dictionary: $0) })
            } else { 
                self.budgets = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeBudgetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct DescribeBudgetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let budget: Budget?

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

        public init(dictionary: [String: Any]) throws {
            if let budget = dictionary["Budget"] as? [String: Any] { self.budget = try Budgets.Budget(dictionary: budget) } else { self.budget = nil }
        }
    }

    public struct DeleteNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct NotificationWithSubscribers: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subscribers: [Subscriber]
        public let notification: Notification

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscribers = dictionary["Subscribers"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Subscribers") }
            self.subscribers = try subscribers.map({ try Subscriber(dictionary: $0) })
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
        }
    }

    public struct UpdateSubscriberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let notification: Notification
        public let oldSubscriber: Subscriber
        public let budgetName: String
        public let newSubscriber: Subscriber

        public init(accountId: String, notification: Notification, oldSubscriber: Subscriber, budgetName: String, newSubscriber: Subscriber) {
            self.accountId = accountId
            self.notification = notification
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.newSubscriber = newSubscriber
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            guard let oldSubscriber = dictionary["OldSubscriber"] as? [String: Any] else { throw InitializableError.missingRequiredParam("OldSubscriber") }
            self.oldSubscriber = try Budgets.Subscriber(dictionary: oldSubscriber)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
            guard let newSubscriber = dictionary["NewSubscriber"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NewSubscriber") }
            self.newSubscriber = try Budgets.Subscriber(dictionary: newSubscriber)
        }
    }

    public struct DeleteNotificationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible {
        case sns = "SNS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct CreateNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let notification: Notification
        public let subscribers: [Subscriber]
        public let budgetName: String

        public init(accountId: String, notification: Notification, subscribers: [Subscriber], budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscribers = subscribers
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            guard let subscribers = dictionary["Subscribers"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Subscribers") }
            self.subscribers = try subscribers.map({ try Subscriber(dictionary: $0) })
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct UpdateSubscriberResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeNotificationsForBudgetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let notifications: [Notification]?
        public let nextToken: String?

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let notifications = dictionary["Notifications"] as? [[String: Any]] {
                self.notifications = try notifications.map({ try Notification(dictionary: $0) })
            } else { 
                self.notifications = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DeleteSubscriberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let subscriber: Subscriber
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let subscriber = dictionary["Subscriber"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Subscriber") }
            self.subscriber = try Budgets.Subscriber(dictionary: subscriber)
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct CreateBudgetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CostTypes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let includeSubscription: Bool
        public let useBlended: Bool
        public let includeTax: Bool

        public init(includeSubscription: Bool, useBlended: Bool, includeTax: Bool) {
            self.includeSubscription = includeSubscription
            self.useBlended = useBlended
            self.includeTax = includeTax
        }

        public init(dictionary: [String: Any]) throws {
            guard let includeSubscription = dictionary["IncludeSubscription"] as? Bool else { throw InitializableError.missingRequiredParam("IncludeSubscription") }
            self.includeSubscription = includeSubscription
            guard let useBlended = dictionary["UseBlended"] as? Bool else { throw InitializableError.missingRequiredParam("UseBlended") }
            self.useBlended = useBlended
            guard let includeTax = dictionary["IncludeTax"] as? Bool else { throw InitializableError.missingRequiredParam("IncludeTax") }
            self.includeTax = includeTax
        }
    }

    public struct CreateNotificationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeBudgetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let nextToken: String?
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DeleteBudgetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateBudgetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let budget: Budget
        public let notificationsWithSubscribers: [NotificationWithSubscribers]?

        public init(accountId: String, budget: Budget, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.accountId = accountId
            self.budget = budget
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let budget = dictionary["Budget"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Budget") }
            self.budget = try Budgets.Budget(dictionary: budget)
            if let notificationsWithSubscribers = dictionary["NotificationsWithSubscribers"] as? [[String: Any]] {
                self.notificationsWithSubscribers = try notificationsWithSubscribers.map({ try NotificationWithSubscribers(dictionary: $0) })
            } else { 
                self.notificationsWithSubscribers = nil
            }
        }
    }

    public struct DeleteSubscriberResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let oldNotification: Notification
        public let newNotification: Notification
        public let budgetName: String

        public init(accountId: String, oldNotification: Notification, newNotification: Notification, budgetName: String) {
            self.accountId = accountId
            self.oldNotification = oldNotification
            self.newNotification = newNotification
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let oldNotification = dictionary["OldNotification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("OldNotification") }
            self.oldNotification = try Budgets.Notification(dictionary: oldNotification)
            guard let newNotification = dictionary["NewNotification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NewNotification") }
            self.newNotification = try Budgets.Notification(dictionary: newNotification)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct UpdateBudgetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateNotificationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public enum BudgetType: String, CustomStringConvertible {
        case usage = "USAGE"
        case cost = "COST"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSubscribersForNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let notification: Notification
        public let nextToken: String?
        public let budgetName: String
        public let maxResults: Int32?

        public init(accountId: String, notification: Notification, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.notification = notification
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            self.nextToken = dictionary["NextToken"] as? String
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct CreateSubscriberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let subscriber: Subscriber
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let subscriber = dictionary["Subscriber"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Subscriber") }
            self.subscriber = try Budgets.Subscriber(dictionary: subscriber)
            guard let notification = dictionary["Notification"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Notification") }
            self.notification = try Budgets.Notification(dictionary: notification)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
        }
    }

    public struct CreateSubscriberResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct Notification: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let comparisonOperator: ComparisonOperator
        public let threshold: Double
        public let notificationType: NotificationType

        public init(comparisonOperator: ComparisonOperator, threshold: Double, notificationType: NotificationType) {
            self.comparisonOperator = comparisonOperator
            self.threshold = threshold
            self.notificationType = notificationType
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawComparisonOperator = dictionary["ComparisonOperator"] as? String, let comparisonOperator = ComparisonOperator(rawValue: rawComparisonOperator) else { throw InitializableError.missingRequiredParam("ComparisonOperator") }
            self.comparisonOperator = comparisonOperator
            guard let threshold = dictionary["Threshold"] as? Double else { throw InitializableError.missingRequiredParam("Threshold") }
            self.threshold = threshold
            guard let rawNotificationType = dictionary["NotificationType"] as? String, let notificationType = NotificationType(rawValue: rawNotificationType) else { throw InitializableError.missingRequiredParam("NotificationType") }
            self.notificationType = notificationType
        }
    }

    public struct Subscriber: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let address: String
        public let subscriptionType: SubscriptionType

        public init(address: String, subscriptionType: SubscriptionType) {
            self.address = address
            self.subscriptionType = subscriptionType
        }

        public init(dictionary: [String: Any]) throws {
            guard let address = dictionary["Address"] as? String else { throw InitializableError.missingRequiredParam("Address") }
            self.address = address
            guard let rawSubscriptionType = dictionary["SubscriptionType"] as? String, let subscriptionType = SubscriptionType(rawValue: rawSubscriptionType) else { throw InitializableError.missingRequiredParam("SubscriptionType") }
            self.subscriptionType = subscriptionType
        }
    }

    public struct DescribeNotificationsForBudgetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let nextToken: String?
        public let budgetName: String
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            self.nextToken = dictionary["NextToken"] as? String
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct UpdateBudgetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountId: String
        public let newBudget: Budget

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let newBudget = dictionary["NewBudget"] as? [String: Any] else { throw InitializableError.missingRequiredParam("NewBudget") }
            self.newBudget = try Budgets.Budget(dictionary: newBudget)
        }
    }

    public enum TimeUnit: String, CustomStringConvertible {
        case monthly = "MONTHLY"
        case quarterly = "QUARTERLY"
        case annually = "ANNUALLY"
        public var description: String { return self.rawValue }
    }

    public struct Budget: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let timeUnit: TimeUnit
        public let budgetLimit: Spend
        public let budgetName: String
        public let timePeriod: TimePeriod
        public let budgetType: BudgetType
        public let costFilters: [String: [String]]?
        public let calculatedSpend: CalculatedSpend?
        public let costTypes: CostTypes

        public init(timeUnit: TimeUnit, budgetLimit: Spend, budgetName: String, timePeriod: TimePeriod, budgetType: BudgetType, costFilters: [String: [String]]? = nil, calculatedSpend: CalculatedSpend? = nil, costTypes: CostTypes) {
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.budgetName = budgetName
            self.timePeriod = timePeriod
            self.budgetType = budgetType
            self.costFilters = costFilters
            self.calculatedSpend = calculatedSpend
            self.costTypes = costTypes
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawTimeUnit = dictionary["TimeUnit"] as? String, let timeUnit = TimeUnit(rawValue: rawTimeUnit) else { throw InitializableError.missingRequiredParam("TimeUnit") }
            self.timeUnit = timeUnit
            guard let budgetLimit = dictionary["BudgetLimit"] as? [String: Any] else { throw InitializableError.missingRequiredParam("BudgetLimit") }
            self.budgetLimit = try Budgets.Spend(dictionary: budgetLimit)
            guard let budgetName = dictionary["BudgetName"] as? String else { throw InitializableError.missingRequiredParam("BudgetName") }
            self.budgetName = budgetName
            guard let timePeriod = dictionary["TimePeriod"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TimePeriod") }
            self.timePeriod = try Budgets.TimePeriod(dictionary: timePeriod)
            guard let rawBudgetType = dictionary["BudgetType"] as? String, let budgetType = BudgetType(rawValue: rawBudgetType) else { throw InitializableError.missingRequiredParam("BudgetType") }
            self.budgetType = budgetType
            if let costFilters = dictionary["CostFilters"] as? [String: Any] {
                var costFiltersDict: [String: [String]] = [:]
                for (key, value) in costFilters {
                    guard let dimensionValues = value as? [String] else { throw InitializableError.convertingError }
                    costFiltersDict[key] = dimensionValues
                }
                self.costFilters = costFiltersDict
            } else { 
                self.costFilters = nil
            }
            if let calculatedSpend = dictionary["CalculatedSpend"] as? [String: Any] { self.calculatedSpend = try Budgets.CalculatedSpend(dictionary: calculatedSpend) } else { self.calculatedSpend = nil }
            guard let costTypes = dictionary["CostTypes"] as? [String: Any] else { throw InitializableError.missingRequiredParam("CostTypes") }
            self.costTypes = try Budgets.CostTypes(dictionary: costTypes)
        }
    }

    public struct TimePeriod: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let start: Date
        public let end: Date

        public init(start: Date, end: Date) {
            self.start = start
            self.end = end
        }

        public init(dictionary: [String: Any]) throws {
            guard let start = dictionary["Start"] as? Date else { throw InitializableError.missingRequiredParam("Start") }
            self.start = start
            guard let end = dictionary["End"] as? Date else { throw InitializableError.missingRequiredParam("End") }
            self.end = end
        }
    }

    public struct CalculatedSpend: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let forecastedSpend: Spend?
        public let actualSpend: Spend

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

        public init(dictionary: [String: Any]) throws {
            if let forecastedSpend = dictionary["ForecastedSpend"] as? [String: Any] { self.forecastedSpend = try Budgets.Spend(dictionary: forecastedSpend) } else { self.forecastedSpend = nil }
            guard let actualSpend = dictionary["ActualSpend"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ActualSpend") }
            self.actualSpend = try Budgets.Spend(dictionary: actualSpend)
        }
    }

    public struct Spend: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let unit: String
        public let amount: String

        public init(unit: String, amount: String) {
            self.unit = unit
            self.amount = amount
        }

        public init(dictionary: [String: Any]) throws {
            guard let unit = dictionary["Unit"] as? String else { throw InitializableError.missingRequiredParam("Unit") }
            self.unit = unit
            guard let amount = dictionary["Amount"] as? String else { throw InitializableError.missingRequiredParam("Amount") }
            self.amount = amount
        }
    }

    public struct DescribeSubscribersForNotificationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subscribers: [Subscriber]?
        public let nextToken: String?

        public init(subscribers: [Subscriber]? = nil, nextToken: String? = nil) {
            self.subscribers = subscribers
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let subscribers = dictionary["Subscribers"] as? [[String: Any]] {
                self.subscribers = try subscribers.map({ try Subscriber(dictionary: $0) })
            } else { 
                self.subscribers = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible {
        case greater_than = "GREATER_THAN"
        case less_than = "LESS_THAN"
        case equal_to = "EQUAL_TO"
        public var description: String { return self.rawValue }
    }

    public enum NotificationType: String, CustomStringConvertible {
        case actual = "ACTUAL"
        case forecasted = "FORECASTED"
        public var description: String { return self.rawValue }
    }

}