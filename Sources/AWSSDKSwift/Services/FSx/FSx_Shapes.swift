// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension FSx {

    public struct TagResourceResponse: AWSShape {

    }

    public enum FileSystemType: String, CustomStringConvertible, Codable {
        case windows = "WINDOWS"
        case lustre = "LUSTRE"
        public var description: String { return self.rawValue }
    }

    public struct Backup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "BackupId", required: true, type: .string), 
            AWSShapeMember(label: "ProgressPercent", required: false, type: .integer), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", required: true, type: .enum), 
            AWSShapeMember(label: "FileSystem", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// Tags associated with a particular file system.
        public let tags: [Tag]?
        /// The ID of the backup.
        public let backupId: String
        public let progressPercent: Int32?
        /// The time when a particular backup was created.
        public let creationTime: TimeStamp
        /// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt this backup's data.
        public let kmsKeyId: String?
        /// The type of the backup.
        public let `type`: BackupType
        /// Details explaining any failures that occur when creating a backup.
        public let failureDetails: BackupFailureDetails?
        /// The lifecycle status of the backup.
        public let lifecycle: BackupLifecycle
        /// Metadata of the file system associated with the backup. This metadata is persisted even if the file system is deleted.
        public let fileSystem: FileSystem
        /// The Amazon Resource Name (ARN) for the backup resource.
        public let resourceARN: String?

        public init(tags: [Tag]? = nil, backupId: String, progressPercent: Int32? = nil, creationTime: TimeStamp, kmsKeyId: String? = nil, type: BackupType, failureDetails: BackupFailureDetails? = nil, lifecycle: BackupLifecycle, fileSystem: FileSystem, resourceARN: String? = nil) {
            self.tags = tags
            self.backupId = backupId
            self.progressPercent = progressPercent
            self.creationTime = creationTime
            self.kmsKeyId = kmsKeyId
            self.`type` = `type`
            self.failureDetails = failureDetails
            self.lifecycle = lifecycle
            self.fileSystem = fileSystem
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case backupId = "BackupId"
            case progressPercent = "ProgressPercent"
            case creationTime = "CreationTime"
            case kmsKeyId = "KmsKeyId"
            case `type` = "Type"
            case failureDetails = "FailureDetails"
            case lifecycle = "Lifecycle"
            case fileSystem = "FileSystem"
            case resourceARN = "ResourceARN"
        }
    }

    public enum BackupLifecycle: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case deleted = "DELETED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct CreateFileSystemFromBackupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystem", required: false, type: .structure)
        ]
        /// A description of the file system.
        public let fileSystem: FileSystem?

        public init(fileSystem: FileSystem? = nil) {
            self.fileSystem = fileSystem
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystem = "FileSystem"
        }
    }

    public struct BackupFailureDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// A message describing the backup creation failure.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
        }
    }

    public struct CreateFileSystemWindowsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string), 
            AWSShapeMember(label: "DailyAutomaticBackupStartTime", required: false, type: .string), 
            AWSShapeMember(label: "ActiveDirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToBackups", required: false, type: .boolean), 
            AWSShapeMember(label: "AutomaticBackupRetentionDays", required: false, type: .integer), 
            AWSShapeMember(label: "ThroughputCapacity", required: true, type: .integer)
        ]
        /// The preferred start time to perform weekly maintenance, in the UTC time zone.
        public let weeklyMaintenanceStartTime: String?
        /// The preferred time to take daily automatic backups, in the UTC time zone.
        public let dailyAutomaticBackupStartTime: String?
        /// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created.
        public let activeDirectoryId: String?
        /// A boolean flag indicating whether tags on the file system should be copied to backups. This value defaults to false. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups.
        public let copyTagsToBackups: Bool?
        /// The number of days to retain automatic backups. The default is to retain backups for 7 days. Setting this value to 0 disables the creation of automatic backups. The maximum retention period for backups is 35 days.
        public let automaticBackupRetentionDays: Int32?
        /// The throughput of an Amazon FSx file system, measured in megabytes per second.
        public let throughputCapacity: Int32

        public init(weeklyMaintenanceStartTime: String? = nil, dailyAutomaticBackupStartTime: String? = nil, activeDirectoryId: String? = nil, copyTagsToBackups: Bool? = nil, automaticBackupRetentionDays: Int32? = nil, throughputCapacity: Int32) {
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.activeDirectoryId = activeDirectoryId
            self.copyTagsToBackups = copyTagsToBackups
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.throughputCapacity = throughputCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
            case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
            case activeDirectoryId = "ActiveDirectoryId"
            case copyTagsToBackups = "CopyTagsToBackups"
            case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
            case throughputCapacity = "ThroughputCapacity"
        }
    }

    public enum FileSystemMaintenanceOperation: String, CustomStringConvertible, Codable {
        case patching = "PATCHING"
        case backingUp = "BACKING_UP"
        public var description: String { return self.rawValue }
    }

    public struct CreateBackupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Backup", required: false, type: .structure)
        ]
        /// A description of the backup.
        public let backup: Backup?

        public init(backup: Backup? = nil) {
            self.backup = backup
        }

        private enum CodingKeys: String, CodingKey {
            case backup = "Backup"
        }
    }

    public struct DeleteFileSystemWindowsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FinalBackupTags", required: false, type: .list), 
            AWSShapeMember(label: "FinalBackupId", required: false, type: .string)
        ]
        /// The set of tags applied to the final backup.
        public let finalBackupTags: [Tag]?
        /// The ID of the final backup for this file system.
        public let finalBackupId: String?

        public init(finalBackupTags: [Tag]? = nil, finalBackupId: String? = nil) {
            self.finalBackupTags = finalBackupTags
            self.finalBackupId = finalBackupId
        }

        private enum CodingKeys: String, CodingKey {
            case finalBackupTags = "FinalBackupTags"
            case finalBackupId = "FinalBackupId"
        }
    }

    public struct UpdateFileSystemResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystem", required: false, type: .structure)
        ]
        /// A description of the file system.
        public let fileSystem: FileSystem?

        public init(fileSystem: FileSystem? = nil) {
            self.fileSystem = fileSystem
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystem = "FileSystem"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon FSx resource that you want to tag.
        public let resourceARN: String
        /// A list of tags for the resource. If a tag with a given key already exists, the value is replaced by the one specified in this parameter.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct CreateBackupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The ID of the file system to back up.
        public let fileSystemId: String
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the AWS Command Line Interface (AWS CLI) or an AWS SDK.
        public let clientRequestToken: String?
        /// The tags to apply to the backup at backup creation. The key value of the Name tag appears in the console as the backup name.
        public let tags: [Tag]?

        public init(fileSystemId: String, clientRequestToken: String? = nil, tags: [Tag]? = nil) {
            self.fileSystemId = fileSystemId
            self.clientRequestToken = clientRequestToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemId = "FileSystemId"
            case clientRequestToken = "ClientRequestToken"
            case tags = "Tags"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct DescribeBackupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "BackupIds", required: false, type: .list)
        ]
        /// (Optional) Opaque pagination token returned from a previous DescribeBackups operation (String). If a token present, the action continues the list from where the returning call left off.
        public let nextToken: String?
        /// (Optional) Maximum number of backups to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
        public let maxResults: Int32?
        /// (Optional) Filters structure. Supported names are file-system-id and backup-type.
        public let filters: [Filter]?
        /// (Optional) IDs of the backups you want to retrieve (String). This overrides any filters. If any IDs are not found, BackupNotFound will be thrown.
        public let backupIds: [String]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filters: [Filter]? = nil, backupIds: [String]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filters = filters
            self.backupIds = backupIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case filters = "Filters"
            case backupIds = "BackupIds"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .enum)
        ]
        /// The values of the filter. These are all the values for any of the applied filters.
        public let values: [String]?
        /// The name for this filter.
        public let name: FilterName?

        public init(values: [String]? = nil, name: FilterName? = nil) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public struct CreateFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "StorageCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "FileSystemType", required: true, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "WindowsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "LustreConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list)
        ]
        public let kmsKeyId: String?
        /// The storage capacity of the file system. For Windows file systems, the storage capacity has a minimum of 300 GiB, and a maximum of 65,536 GiB. For Lustre file systems, the storage capacity has a minimum of 3,600 GiB. Storage capacity is provisioned in increments of 3,600 GiB.
        public let storageCapacity: Int32
        /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces. This list isn't returned in later describe requests.
        public let securityGroupIds: [String]?
        /// The type of file system.
        public let fileSystemType: FileSystemType
        /// The tags to be applied to the file system at file system creation. The key value of the Name tag appears in the console as the file system name.
        public let tags: [Tag]?
        /// The configuration for this Microsoft Windows file system.
        public let windowsConfiguration: CreateFileSystemWindowsConfiguration?
        public let lustreConfiguration: CreateFileSystemLustreConfiguration?
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the AWS Command Line Interface (AWS CLI) or an AWS SDK.
        public let clientRequestToken: String?
        /// A list of IDs for the subnets that the file system will be accessible from. File systems support only one subnet. The file server is also launched in that subnet's Availability Zone.
        public let subnetIds: [String]

        public init(kmsKeyId: String? = nil, storageCapacity: Int32, securityGroupIds: [String]? = nil, fileSystemType: FileSystemType, tags: [Tag]? = nil, windowsConfiguration: CreateFileSystemWindowsConfiguration? = nil, lustreConfiguration: CreateFileSystemLustreConfiguration? = nil, clientRequestToken: String? = nil, subnetIds: [String]) {
            self.kmsKeyId = kmsKeyId
            self.storageCapacity = storageCapacity
            self.securityGroupIds = securityGroupIds
            self.fileSystemType = fileSystemType
            self.tags = tags
            self.windowsConfiguration = windowsConfiguration
            self.lustreConfiguration = lustreConfiguration
            self.clientRequestToken = clientRequestToken
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case storageCapacity = "StorageCapacity"
            case securityGroupIds = "SecurityGroupIds"
            case fileSystemType = "FileSystemType"
            case tags = "Tags"
            case windowsConfiguration = "WindowsConfiguration"
            case lustreConfiguration = "LustreConfiguration"
            case clientRequestToken = "ClientRequestToken"
            case subnetIds = "SubnetIds"
        }
    }

    public struct UpdateFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "LustreConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "WindowsConfiguration", required: false, type: .structure)
        ]
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent updates. This string is automatically filled on your behalf when you use the AWS Command Line Interface (AWS CLI) or an AWS SDK.
        public let clientRequestToken: String?
        public let lustreConfiguration: UpdateFileSystemLustreConfiguration?
        public let fileSystemId: String
        /// The configuration for this Microsoft Windows file system. The only supported options are for backup and maintenance.
        public let windowsConfiguration: UpdateFileSystemWindowsConfiguration?

        public init(clientRequestToken: String? = nil, lustreConfiguration: UpdateFileSystemLustreConfiguration? = nil, fileSystemId: String, windowsConfiguration: UpdateFileSystemWindowsConfiguration? = nil) {
            self.clientRequestToken = clientRequestToken
            self.lustreConfiguration = lustreConfiguration
            self.fileSystemId = fileSystemId
            self.windowsConfiguration = windowsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case lustreConfiguration = "LustreConfiguration"
            case fileSystemId = "FileSystemId"
            case windowsConfiguration = "WindowsConfiguration"
        }
    }

    public struct DescribeFileSystemsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FileSystemIds", required: false, type: .list)
        ]
        /// (Optional) Opaque pagination token returned from a previous DescribeFileSystems operation (String). If a token present, the action continues the list from where the returning call left off.
        public let nextToken: String?
        /// (Optional) Maximum number of file systems to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
        public let maxResults: Int32?
        /// (Optional) IDs of the file systems whose descriptions you want to retrieve (String).
        public let fileSystemIds: [String]?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, fileSystemIds: [String]? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.fileSystemIds = fileSystemIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case fileSystemIds = "FileSystemIds"
        }
    }

    public struct DescribeBackupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Backups", required: false, type: .list)
        ]
        /// This is present if there are more backups than returned in the response (String). You can use the NextToken value in the later request to fetch the backups. 
        public let nextToken: String?
        /// Any array of backups.
        public let backups: [Backup]?

        public init(nextToken: String? = nil, backups: [Backup]? = nil) {
            self.nextToken = nextToken
            self.backups = backups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case backups = "Backups"
        }
    }

    public struct FileSystemFailureDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// Message describing the failures that occurred during file system creation.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
        }
    }

    public struct DataRepositoryConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportPath", required: false, type: .string), 
            AWSShapeMember(label: "ImportPath", required: false, type: .string), 
            AWSShapeMember(label: "ImportedFileChunkSize", required: false, type: .integer)
        ]
        /// The Amazon S3 commit path to use for storing new and changed Lustre file system files as part of the archive operation from the file system to Amazon S3. The value is s3://import-bucket/FSxLustre[creationtimestamp]. The timestamp is presented in UTC format, for example s3://import-bucket/FSxLustre20181105T222312Z. Files are archived to a different prefix in the Amazon S3 bucket, preventing input data from being overwritten.
        public let exportPath: String?
        /// The import path to the Amazon S3 bucket (and optional prefix) that you're using as the data repository for your FSx for Lustre file system, for example s3://import-bucket/optional-prefix. If a prefix is specified after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system.
        public let importPath: String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public let importedFileChunkSize: Int32?

        public init(exportPath: String? = nil, importPath: String? = nil, importedFileChunkSize: Int32? = nil) {
            self.exportPath = exportPath
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
        }

        private enum CodingKeys: String, CodingKey {
            case exportPath = "ExportPath"
            case importPath = "ImportPath"
            case importedFileChunkSize = "ImportedFileChunkSize"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ARN of the Amazon FSx resource that will have its tags listed.
        public let resourceARN: String
        /// (Optional) Opaque pagination token returned from a previous ListTagsForResource operation (String). If a token present, the action continues the list from where the returning call left off.
        public let nextToken: String?
        /// (Optional) Maximum number of tags to return in the response (integer). This parameter value must be greater than 0. The number of items that Amazon FSx returns is the minimum of the MaxResults parameter specified in the request and the service's internal maximum number of items per page.
        public let maxResults: Int32?

        public init(resourceARN: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceARN = resourceARN
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of tags on the resource.
        public let tags: [Tag]?
        /// This is present if there are more tags than returned in the response (String). You can use the NextToken value in the later request to fetch the tags. 
        public let nextToken: String?

        public init(tags: [Tag]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateFileSystemWindowsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomaticBackupRetentionDays", required: false, type: .integer), 
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string), 
            AWSShapeMember(label: "DailyAutomaticBackupStartTime", required: false, type: .string)
        ]
        /// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 35 days.
        public let automaticBackupRetentionDays: Int32?
        /// The preferred time to perform weekly maintenance, in the UTC time zone.
        public let weeklyMaintenanceStartTime: String?
        /// The preferred time to take daily automatic backups, in the UTC time zone.
        public let dailyAutomaticBackupStartTime: String?

        public init(automaticBackupRetentionDays: Int32? = nil, weeklyMaintenanceStartTime: String? = nil, dailyAutomaticBackupStartTime: String? = nil) {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
            case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        }
    }

    public enum ActiveDirectoryErrorType: String, CustomStringConvertible, Codable {
        case domainNotFound = "DOMAIN_NOT_FOUND"
        case incompatibleDomainMode = "INCOMPATIBLE_DOMAIN_MODE"
        case wrongVpc = "WRONG_VPC"
        case invalidDomainStage = "INVALID_DOMAIN_STAGE"
        public var description: String { return self.rawValue }
    }

    public enum BackupType: String, CustomStringConvertible, Codable {
        case automatic = "AUTOMATIC"
        case userInitiated = "USER_INITIATED"
        public var description: String { return self.rawValue }
    }

    public struct CreateFileSystemResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystem", required: false, type: .structure)
        ]
        /// A description of the file system.
        public let fileSystem: FileSystem?

        public init(fileSystem: FileSystem? = nil) {
            self.fileSystem = fileSystem
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystem = "FileSystem"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// A list of keys of tags on the resource to untag. In case the tag key doesn't exist, the call will still succeed to be idempotent.
        public let tagKeys: [String]
        /// The ARN of the Amazon FSx resource to untag.
        public let resourceARN: String

        public init(tagKeys: [String], resourceARN: String) {
            self.tagKeys = tagKeys
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceARN = "ResourceARN"
        }
    }

    public struct UpdateFileSystemLustreConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string)
        ]
        /// The preferred time to perform weekly maintenance, in the UTC time zone.
        public let weeklyMaintenanceStartTime: String?

        public init(weeklyMaintenanceStartTime: String? = nil) {
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
        }
    }

    public struct WindowsFileSystemConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomaticBackupRetentionDays", required: false, type: .integer), 
            AWSShapeMember(label: "ActiveDirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "DailyAutomaticBackupStartTime", required: false, type: .string), 
            AWSShapeMember(label: "ThroughputCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "CopyTagsToBackups", required: false, type: .boolean), 
            AWSShapeMember(label: "MaintenanceOperationsInProgress", required: false, type: .list), 
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string)
        ]
        /// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 35 days.
        public let automaticBackupRetentionDays: Int32?
        /// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created.
        public let activeDirectoryId: String?
        /// The preferred time to take daily automatic backups, in the UTC time zone.
        public let dailyAutomaticBackupStartTime: String?
        /// The throughput of an Amazon FSx file system, measured in megabytes per second.
        public let throughputCapacity: Int32?
        /// A boolean flag indicating whether tags on the file system should be copied to backups. This value defaults to false. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups.
        public let copyTagsToBackups: Bool?
        /// The list of maintenance operations in progress for this file system.
        public let maintenanceOperationsInProgress: [FileSystemMaintenanceOperation]?
        /// The preferred time to perform weekly maintenance, in the UTC time zone.
        public let weeklyMaintenanceStartTime: String?

        public init(automaticBackupRetentionDays: Int32? = nil, activeDirectoryId: String? = nil, dailyAutomaticBackupStartTime: String? = nil, throughputCapacity: Int32? = nil, copyTagsToBackups: Bool? = nil, maintenanceOperationsInProgress: [FileSystemMaintenanceOperation]? = nil, weeklyMaintenanceStartTime: String? = nil) {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.activeDirectoryId = activeDirectoryId
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.throughputCapacity = throughputCapacity
            self.copyTagsToBackups = copyTagsToBackups
            self.maintenanceOperationsInProgress = maintenanceOperationsInProgress
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
            case activeDirectoryId = "ActiveDirectoryId"
            case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
            case throughputCapacity = "ThroughputCapacity"
            case copyTagsToBackups = "CopyTagsToBackups"
            case maintenanceOperationsInProgress = "MaintenanceOperationsInProgress"
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
        }
    }

    public struct DeleteBackupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lifecycle", required: false, type: .enum), 
            AWSShapeMember(label: "BackupId", required: false, type: .string)
        ]
        /// The lifecycle of the backup. Should be DELETED.
        public let lifecycle: BackupLifecycle?
        /// The ID of the backup deleted.
        public let backupId: String?

        public init(lifecycle: BackupLifecycle? = nil, backupId: String? = nil) {
            self.lifecycle = lifecycle
            self.backupId = backupId
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycle = "Lifecycle"
            case backupId = "BackupId"
        }
    }

    public struct LustreFileSystemConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataRepositoryConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string)
        ]
        public let dataRepositoryConfiguration: DataRepositoryConfiguration?
        /// The UTC time that you want to begin your weekly maintenance window.
        public let weeklyMaintenanceStartTime: String?

        public init(dataRepositoryConfiguration: DataRepositoryConfiguration? = nil, weeklyMaintenanceStartTime: String? = nil) {
            self.dataRepositoryConfiguration = dataRepositoryConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case dataRepositoryConfiguration = "DataRepositoryConfiguration"
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
        }
    }

    public struct DeleteBackupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "BackupId", required: true, type: .string)
        ]
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This is automatically filled on your behalf when using the AWS CLI or SDK.
        public let clientRequestToken: String?
        /// The ID of the backup you want to delete.
        public let backupId: String

        public init(clientRequestToken: String? = nil, backupId: String) {
            self.clientRequestToken = clientRequestToken
            self.backupId = backupId
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case backupId = "BackupId"
        }
    }

    public struct DeleteFileSystemWindowsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkipFinalBackup", required: false, type: .boolean), 
            AWSShapeMember(label: "FinalBackupTags", required: false, type: .list)
        ]
        /// By default, Amazon FSx for Windows takes a final backup on your behalf when the DeleteFileSystem operation is invoked. Doing this helps protect you from data loss, and we highly recommend taking the final backup. If you want to skip this backup, use this flag to do so.
        public let skipFinalBackup: Bool?
        /// A set of tags for your final backup.
        public let finalBackupTags: [Tag]?

        public init(skipFinalBackup: Bool? = nil, finalBackupTags: [Tag]? = nil) {
            self.skipFinalBackup = skipFinalBackup
            self.finalBackupTags = finalBackupTags
        }

        private enum CodingKeys: String, CodingKey {
            case skipFinalBackup = "SkipFinalBackup"
            case finalBackupTags = "FinalBackupTags"
        }
    }

    public struct FileSystem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "LustreConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "StorageCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "FileSystemType", required: false, type: .enum), 
            AWSShapeMember(label: "Lifecycle", required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaceIds", required: false, type: .list), 
            AWSShapeMember(label: "WindowsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "FileSystemId", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "DNSName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The ID of the primary VPC for the file system.
        public let vpcId: String?
        public let lustreConfiguration: LustreFileSystemConfiguration?
        /// The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public let creationTime: TimeStamp?
        public let failureDetails: FileSystemFailureDetails?
        /// The IDs of the subnets to contain the endpoint for the file system. One and only one is supported. The file system is launched in the Availability Zone associated with this subnet.
        public let subnetIds: [String]?
        /// The tags to associate with the file system. For more information, see Tagging Your Amazon EC2 Resources in the Amazon EC2 User Guide.
        public let tags: [Tag]?
        /// The storage capacity of the file system in gigabytes.
        public let storageCapacity: Int32?
        /// Type of file system. Currently the only supported type is WINDOWS.
        public let fileSystemType: FileSystemType?
        /// The lifecycle status of the file system.
        public let lifecycle: FileSystemLifecycle?
        /// The IDs of the elastic network interface from which a specific file system is accessible. The elastic network interface is automatically created in the same VPC that the Amazon FSx file system was created in. For more information, see Elastic Network Interfaces in the Amazon EC2 User Guide.  For an Amazon FSx for Windows File Server file system, you can have one network interface Id. For an Amazon FSx for Lustre file system, you can have more than one.
        public let networkInterfaceIds: [String]?
        /// The configuration for this Microsoft Windows file system.
        public let windowsConfiguration: WindowsFileSystemConfiguration?
        /// The eight-digit ID of the file system that was automatically assigned by Amazon FSx.
        public let fileSystemId: String?
        /// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the file system's data for an Amazon FSx for Windows File Server file system.
        public let kmsKeyId: String?
        /// The AWS account that created the file system. If the file system was created by an IAM user, the AWS account to which the IAM user belongs is the owner.
        public let ownerId: String?
        /// The DNS name for the file system.
        public let dNSName: String?
        /// The resource ARN of the file system.
        public let resourceARN: String?

        public init(vpcId: String? = nil, lustreConfiguration: LustreFileSystemConfiguration? = nil, creationTime: TimeStamp? = nil, failureDetails: FileSystemFailureDetails? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, storageCapacity: Int32? = nil, fileSystemType: FileSystemType? = nil, lifecycle: FileSystemLifecycle? = nil, networkInterfaceIds: [String]? = nil, windowsConfiguration: WindowsFileSystemConfiguration? = nil, fileSystemId: String? = nil, kmsKeyId: String? = nil, ownerId: String? = nil, dNSName: String? = nil, resourceARN: String? = nil) {
            self.vpcId = vpcId
            self.lustreConfiguration = lustreConfiguration
            self.creationTime = creationTime
            self.failureDetails = failureDetails
            self.subnetIds = subnetIds
            self.tags = tags
            self.storageCapacity = storageCapacity
            self.fileSystemType = fileSystemType
            self.lifecycle = lifecycle
            self.networkInterfaceIds = networkInterfaceIds
            self.windowsConfiguration = windowsConfiguration
            self.fileSystemId = fileSystemId
            self.kmsKeyId = kmsKeyId
            self.ownerId = ownerId
            self.dNSName = dNSName
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case lustreConfiguration = "LustreConfiguration"
            case creationTime = "CreationTime"
            case failureDetails = "FailureDetails"
            case subnetIds = "SubnetIds"
            case tags = "Tags"
            case storageCapacity = "StorageCapacity"
            case fileSystemType = "FileSystemType"
            case lifecycle = "Lifecycle"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case windowsConfiguration = "WindowsConfiguration"
            case fileSystemId = "FileSystemId"
            case kmsKeyId = "KmsKeyId"
            case ownerId = "OwnerId"
            case dNSName = "DNSName"
            case resourceARN = "ResourceARN"
        }
    }

    public enum ServiceLimit: String, CustomStringConvertible, Codable {
        case fileSystemCount = "FILE_SYSTEM_COUNT"
        case totalThroughputCapacity = "TOTAL_THROUGHPUT_CAPACITY"
        case totalStorage = "TOTAL_STORAGE"
        case totalUserInitiatedBackups = "TOTAL_USER_INITIATED_BACKUPS"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// A value that specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of finances : April and also of payroll : April.
        public let value: String?
        /// A value that specifies the TagKey, the name of the tag. Tag keys must be unique for the resource to which they are attached.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct CreateFileSystemFromBackupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "WindowsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "BackupId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the AWS Command Line Interface (AWS CLI) or an AWS SDK.
        public let clientRequestToken: String?
        /// The configuration for this Microsoft Windows file system.
        public let windowsConfiguration: CreateFileSystemWindowsConfiguration?
        /// A list of IDs for the subnets that the file system will be accessible from. Currently, you can specify only one subnet. The file server is also launched in that subnet's Availability Zone.
        public let subnetIds: [String]
        /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups apply to all network interfaces. This value isn't returned in later describe requests.
        public let securityGroupIds: [String]?
        public let backupId: String
        /// The tags to be applied to the file system at file system creation. The key value of the Name tag appears in the console as the file system name.
        public let tags: [Tag]?

        public init(clientRequestToken: String? = nil, windowsConfiguration: CreateFileSystemWindowsConfiguration? = nil, subnetIds: [String], securityGroupIds: [String]? = nil, backupId: String, tags: [Tag]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.windowsConfiguration = windowsConfiguration
            self.subnetIds = subnetIds
            self.securityGroupIds = securityGroupIds
            self.backupId = backupId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case windowsConfiguration = "WindowsConfiguration"
            case subnetIds = "SubnetIds"
            case securityGroupIds = "SecurityGroupIds"
            case backupId = "BackupId"
            case tags = "Tags"
        }
    }

    public enum FileSystemLifecycle: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct CreateFileSystemLustreConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WeeklyMaintenanceStartTime", required: false, type: .string), 
            AWSShapeMember(label: "ImportPath", required: false, type: .string), 
            AWSShapeMember(label: "ImportedFileChunkSize", required: false, type: .integer)
        ]
        /// The preferred time to perform weekly maintenance, in the UTC time zone.
        public let weeklyMaintenanceStartTime: String?
        /// (Optional) The path to the Amazon S3 bucket (and optional prefix) that you're using as the data repository for your FSx for Lustre file system, for example s3://import-bucket/optional-prefix. If you specify a prefix after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system.
        public let importPath: String?
        /// (Optional) For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The chunk size default is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public let importedFileChunkSize: Int32?

        public init(weeklyMaintenanceStartTime: String? = nil, importPath: String? = nil, importedFileChunkSize: Int32? = nil) {
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
        }

        private enum CodingKeys: String, CodingKey {
            case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
            case importPath = "ImportPath"
            case importedFileChunkSize = "ImportedFileChunkSize"
        }
    }

    public struct DeleteFileSystemResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WindowsResponse", required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", required: false, type: .enum), 
            AWSShapeMember(label: "FileSystemId", required: false, type: .string)
        ]
        public let windowsResponse: DeleteFileSystemWindowsResponse?
        /// The file system lifecycle for the deletion request. Should be DELETING.
        public let lifecycle: FileSystemLifecycle?
        /// The ID of the file system being deleted.
        public let fileSystemId: String?

        public init(windowsResponse: DeleteFileSystemWindowsResponse? = nil, lifecycle: FileSystemLifecycle? = nil, fileSystemId: String? = nil) {
            self.windowsResponse = windowsResponse
            self.lifecycle = lifecycle
            self.fileSystemId = fileSystemId
        }

        private enum CodingKeys: String, CodingKey {
            case windowsResponse = "WindowsResponse"
            case lifecycle = "Lifecycle"
            case fileSystemId = "FileSystemId"
        }
    }

    public enum FilterName: String, CustomStringConvertible, Codable {
        case fileSystemId = "file-system-id"
        case backupType = "backup-type"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFileSystemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "FileSystemId", required: true, type: .string), 
            AWSShapeMember(label: "WindowsConfiguration", required: false, type: .structure)
        ]
        /// (Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent deletion. This is automatically filled on your behalf when using the AWS CLI or SDK.
        public let clientRequestToken: String?
        /// The ID of the file system you want to delete.
        public let fileSystemId: String
        public let windowsConfiguration: DeleteFileSystemWindowsConfiguration?

        public init(clientRequestToken: String? = nil, fileSystemId: String, windowsConfiguration: DeleteFileSystemWindowsConfiguration? = nil) {
            self.clientRequestToken = clientRequestToken
            self.fileSystemId = fileSystemId
            self.windowsConfiguration = windowsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case fileSystemId = "FileSystemId"
            case windowsConfiguration = "WindowsConfiguration"
        }
    }

    public struct DescribeFileSystemsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSystems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of file system descriptions.
        public let fileSystems: [FileSystem]?
        /// Present if there are more file systems than returned in the response (String). You can use the NextToken value in the later request to fetch the descriptions. 
        public let nextToken: String?

        public init(fileSystems: [FileSystem]? = nil, nextToken: String? = nil) {
            self.fileSystems = fileSystems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystems = "FileSystems"
            case nextToken = "NextToken"
        }
    }

}