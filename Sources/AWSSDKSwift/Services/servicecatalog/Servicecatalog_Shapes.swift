// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Servicecatalog {

    public struct DeletePortfolioShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The account ID associated with the share to delete.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct DisassociatePrincipalFromPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(principalARN: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.principalARN = principalARN
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let principalARN = dictionary["PrincipalARN"] as? String else { throw InitializableError.missingRequiredParam("PrincipalARN") }
            self.principalARN = principalARN
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public enum ProductViewFilterBy: String, CustomStringConvertible {
        case fulltextsearch = "FullTextSearch"
        case owner = "Owner"
        case producttype = "ProductType"
        public var description: String { return self.rawValue }
    }

    public struct DeletePortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the portfolio for the delete request.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DescribeProvisioningParametersOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        public let usageInstructions: [UsageInstruction]?
        /// The list of parameters used to successfully provision the product. Each parameter includes a list of allowable values and additional metadata about each parameter.
        public let provisioningArtifactParameters: [ProvisioningArtifactParameter]?
        /// The list of constraint summaries that apply to provisioning this product.
        public let constraintSummaries: [ConstraintSummary]?

        public init(usageInstructions: [UsageInstruction]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil, constraintSummaries: [ConstraintSummary]? = nil) {
            self.usageInstructions = usageInstructions
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.constraintSummaries = constraintSummaries
        }

        public init(dictionary: [String: Any]) throws {
            if let usageInstructions = dictionary["UsageInstructions"] as? [[String: Any]] {
                self.usageInstructions = try usageInstructions.map({ try UsageInstruction(dictionary: $0) })
            } else { 
                self.usageInstructions = nil
            }
            if let provisioningArtifactParameters = dictionary["ProvisioningArtifactParameters"] as? [[String: Any]] {
                self.provisioningArtifactParameters = try provisioningArtifactParameters.map({ try ProvisioningArtifactParameter(dictionary: $0) })
            } else { 
                self.provisioningArtifactParameters = nil
            }
            if let constraintSummaries = dictionary["ConstraintSummaries"] as? [[String: Any]] {
                self.constraintSummaries = try constraintSummaries.map({ try ConstraintSummary(dictionary: $0) })
            } else { 
                self.constraintSummaries = nil
            }
        }
    }

    public struct ProvisioningArtifactProperties: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The text description of the provisioning artifact properties.
        public let description: String?
        /// The type of the provisioning artifact properties.
        public let `type`: ProvisioningArtifactType?
        /// The name assigned to the provisioning artifact properties.
        public let name: String?
        /// Additional information about the provisioning artifact properties.
        public let info: [String: String]

        public init(description: String? = nil, type: ProvisioningArtifactType? = nil, name: String? = nil, info: [String: String]) {
            self.description = description
            self.`type` = `type`
            self.name = name
            self.info = info
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            if let `type` = dictionary["Type"] as? String { self.`type` = ProvisioningArtifactType(rawValue: `type`) } else { self.`type` = nil }
            self.name = dictionary["Name"] as? String
            guard let info = dictionary["Info"] as? [String: String] else { throw InitializableError.missingRequiredParam("Info") }
            self.info = info
        }
    }

    public struct DescribeProductAsAdminOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Tags associated with the product.
        public let tags: [Tag]?
        /// Detailed product view information.
        public let productViewDetail: ProductViewDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            if let productViewDetail = dictionary["ProductViewDetail"] as? [String: Any] { self.productViewDetail = try Servicecatalog.ProductViewDetail(dictionary: productViewDetail) } else { self.productViewDetail = nil }
        }
    }

    public struct ListPortfolioAccessOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?
        /// List of account IDs associated with access to the portfolio.
        public let accountIds: [String]?

        public init(nextPageToken: String? = nil, accountIds: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.accountIds = accountIds
        }

        public init(dictionary: [String: Any]) throws {
            self.nextPageToken = dictionary["NextPageToken"] as? String
            self.accountIds = dictionary["AccountIds"] as? [String]
        }
    }

    public struct CreateProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Tags successfully associated with the new product.
        public let tags: [Tag]?
        /// The resulting detailed product view information.
        public let productViewDetail: ProductViewDetail?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            if let productViewDetail = dictionary["ProductViewDetail"] as? [String: Any] { self.productViewDetail = try Servicecatalog.ProductViewDetail(dictionary: productViewDetail) } else { self.productViewDetail = nil }
            if let provisioningArtifactDetail = dictionary["ProvisioningArtifactDetail"] as? [String: Any] { self.provisioningArtifactDetail = try Servicecatalog.ProvisioningArtifactDetail(dictionary: provisioningArtifactDetail) } else { self.provisioningArtifactDetail = nil }
        }
    }

    public enum PrincipalType: String, CustomStringConvertible {
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public struct UsageInstruction: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The usage instruction type for the value.
        public let `type`: String?
        /// The usage instruction value for this type.
        public let value: String?

        public init(type: String? = nil, value: String? = nil) {
            self.`type` = `type`
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            self.`type` = dictionary["Type"] as? String
            self.value = dictionary["Value"] as? String
        }
    }

    public struct CreatePortfolioShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The account ID with which to share the portfolio.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let accountId = dictionary["AccountId"] as? String else { throw InitializableError.missingRequiredParam("AccountId") }
            self.accountId = accountId
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct DescribeProductViewOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The summary metadata about the specified product.
        public let productViewSummary: ProductViewSummary?
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts represent the ways in which the specified product can be provisioned.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        public init(dictionary: [String: Any]) throws {
            if let productViewSummary = dictionary["ProductViewSummary"] as? [String: Any] { self.productViewSummary = try Servicecatalog.ProductViewSummary(dictionary: productViewSummary) } else { self.productViewSummary = nil }
            if let provisioningArtifacts = dictionary["ProvisioningArtifacts"] as? [[String: Any]] {
                self.provisioningArtifacts = try provisioningArtifacts.map({ try ProvisioningArtifact(dictionary: $0) })
            } else { 
                self.provisioningArtifacts = nil
            }
        }
    }

    public struct ScanProvisionedProductsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of ProvisionedProduct detail objects.
        public let provisionedProducts: [ProvisionedProductDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(provisionedProducts: [ProvisionedProductDetail]? = nil, nextPageToken: String? = nil) {
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let provisionedProducts = dictionary["ProvisionedProducts"] as? [[String: Any]] {
                self.provisionedProducts = try provisionedProducts.map({ try ProvisionedProductDetail(dictionary: $0) })
            } else { 
                self.provisionedProducts = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct DescribeConstraintInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ConstraintDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the constraint.
        public let constraintId: String?
        /// The type of the constraint.
        public let `type`: String?
        /// The owner of the constraint.
        public let owner: String?
        /// The text description of the constraint.
        public let description: String?

        public init(constraintId: String? = nil, type: String? = nil, owner: String? = nil, description: String? = nil) {
            self.constraintId = constraintId
            self.`type` = `type`
            self.owner = owner
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.constraintId = dictionary["ConstraintId"] as? String
            self.`type` = dictionary["Type"] as? String
            self.owner = dictionary["Owner"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct UpdatePortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resulting detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetail = dictionary["PortfolioDetail"] as? [String: Any] { self.portfolioDetail = try Servicecatalog.PortfolioDetail(dictionary: portfolioDetail) } else { self.portfolioDetail = nil }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The esired value for this key.
        public let value: String
        /// The ProvisioningArtifactParameter.TagKey parameter from DescribeProvisioningParameters.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct DescribeProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The ProductId of the product to describe.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ListRecordHistoryOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of record detail objects, listed in reverse chronological order.
        public let recordDetails: [RecordDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(recordDetails: [RecordDetail]? = nil, nextPageToken: String? = nil) {
            self.recordDetails = recordDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let recordDetails = dictionary["RecordDetails"] as? [[String: Any]] {
                self.recordDetails = try recordDetails.map({ try RecordDetail(dictionary: $0) })
            } else { 
                self.recordDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct ScanProvisionedProductsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The access level for obtaining results. If left unspecified, User level access is used.
        public let accessLevelFilter: AccessLevelFilter?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            if let accessLevelFilter = dictionary["AccessLevelFilter"] as? [String: Any] { self.accessLevelFilter = try Servicecatalog.AccessLevelFilter(dictionary: accessLevelFilter) } else { self.accessLevelFilter = nil }
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct CreatePortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The text description of the portfolio.
        public let description: String?
        /// The name of the portfolio provider.
        public let providerName: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Tags to associate with the new portfolio.
        public let tags: [Tag]?
        /// The name to use for display purposes.
        public let displayName: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String

        public init(description: String? = nil, providerName: String, acceptLanguage: String? = nil, tags: [Tag]? = nil, displayName: String, idempotencyToken: String) {
            self.description = description
            self.providerName = providerName
            self.acceptLanguage = acceptLanguage
            self.tags = tags
            self.displayName = displayName
            self.idempotencyToken = idempotencyToken
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            guard let providerName = dictionary["ProviderName"] as? String else { throw InitializableError.missingRequiredParam("ProviderName") }
            self.providerName = providerName
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let displayName = dictionary["DisplayName"] as? String else { throw InitializableError.missingRequiredParam("DisplayName") }
            self.displayName = displayName
            guard let idempotencyToken = dictionary["IdempotencyToken"] as? String else { throw InitializableError.missingRequiredParam("IdempotencyToken") }
            self.idempotencyToken = idempotencyToken
        }
    }

    public struct ListRecordHistorySearchFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The filter value for Key.
        public let value: String?
        /// The filter key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct ListPortfoliosInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct AcceptPortfolioShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListLaunchPathsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of launch path information summaries for the specified PageToken.
        public let launchPathSummaries: [LaunchPathSummary]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let launchPathSummaries = dictionary["LaunchPathSummaries"] as? [[String: Any]] {
                self.launchPathSummaries = try launchPathSummaries.map({ try LaunchPathSummary(dictionary: $0) })
            } else { 
                self.launchPathSummaries = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct ListConstraintsForPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed constraint information objects.
        public let constraintDetails: [ConstraintDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(constraintDetails: [ConstraintDetail]? = nil, nextPageToken: String? = nil) {
            self.constraintDetails = constraintDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let constraintDetails = dictionary["ConstraintDetails"] as? [[String: Any]] {
                self.constraintDetails = try constraintDetails.map({ try ConstraintDetail(dictionary: $0) })
            } else { 
                self.constraintDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct UpdateProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Tags associated with the product.
        public let tags: [Tag]?
        /// The resulting detailed product view information.
        public let productViewDetail: ProductViewDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            if let productViewDetail = dictionary["ProductViewDetail"] as? [String: Any] { self.productViewDetail = try Servicecatalog.ProductViewDetail(dictionary: productViewDetail) } else { self.productViewDetail = nil }
        }
    }

    public struct SearchProductsAsAdminInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The sort field specifier. If no value is specified, results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Access level of the source of the product.
        public let productSource: ProductSource?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?
        /// The sort order specifier. If no value is specified, results are not sorted.
        public let sortOrder: SortOrder?
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the administrator has access.
        public let filters: [ProductViewFilterBy: [String]]?

        public init(sortBy: ProductViewSortBy? = nil, pageSize: Int32? = nil, acceptLanguage: String? = nil, productSource: ProductSource? = nil, portfolioId: String? = nil, pageToken: String? = nil, sortOrder: SortOrder? = nil, filters: [ProductViewFilterBy: [String]]? = nil) {
            self.sortBy = sortBy
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productSource = productSource
            self.portfolioId = portfolioId
            self.pageToken = pageToken
            self.sortOrder = sortOrder
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            if let sortBy = dictionary["SortBy"] as? String { self.sortBy = ProductViewSortBy(rawValue: sortBy) } else { self.sortBy = nil }
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            if let productSource = dictionary["ProductSource"] as? String { self.productSource = ProductSource(rawValue: productSource) } else { self.productSource = nil }
            self.portfolioId = dictionary["PortfolioId"] as? String
            self.pageToken = dictionary["PageToken"] as? String
            if let sortOrder = dictionary["SortOrder"] as? String { self.sortOrder = SortOrder(rawValue: sortOrder) } else { self.sortOrder = nil }
            if let filters = dictionary["Filters"] as? [String: Any] {
                var filtersDict: [ProductViewFilterBy: [String]] = [:]
                for (key, value) in filters {
                    guard let productViewFilterValues = value as? [String] else { throw InitializableError.convertingError }
                    filtersDict[ProductViewFilterBy(rawValue: key)!] = productViewFilterValues
                }
                self.filters = filtersDict
            } else { 
                self.filters = nil
            }
        }
    }

    public struct ProvisionProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The provisioning artifact identifier for this product.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// A list of tags to use as provisioning options.
        public let tags: [Tag]?
        /// An idempotency token that uniquely identifies the provisioning request. 
        public let provisionToken: String
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [ProvisioningParameter]?
        /// The product identifier.
        public let productId: String
        /// A user-friendly name to identify the ProvisionedProduct object. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, notificationArns: [String]? = nil, tags: [Tag]? = nil, provisionToken: String, pathId: String? = nil, provisioningParameters: [ProvisioningParameter]? = nil, productId: String, provisionedProductName: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.notificationArns = notificationArns
            self.tags = tags
            self.provisionToken = provisionToken
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        public init(dictionary: [String: Any]) throws {
            guard let provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String else { throw InitializableError.missingRequiredParam("ProvisioningArtifactId") }
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.notificationArns = dictionary["NotificationArns"] as? [String]
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let provisionToken = dictionary["ProvisionToken"] as? String else { throw InitializableError.missingRequiredParam("ProvisionToken") }
            self.provisionToken = provisionToken
            self.pathId = dictionary["PathId"] as? String
            if let provisioningParameters = dictionary["ProvisioningParameters"] as? [[String: Any]] {
                self.provisioningParameters = try provisioningParameters.map({ try ProvisioningParameter(dictionary: $0) })
            } else { 
                self.provisioningParameters = nil
            }
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            guard let provisionedProductName = dictionary["ProvisionedProductName"] as? String else { throw InitializableError.missingRequiredParam("ProvisionedProductName") }
            self.provisionedProductName = provisionedProductName
        }
    }

    public struct UpdateProvisioningParameter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value to use for updating the product provisioning. Any constraints on this value can be found in the ProvisioningArtifactParameter parameter for Key.
        public let value: String?
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        public let key: String?
        /// If true, uses the currently set value for Key, ignoring UpdateProvisioningParameter.Value.
        public let usePreviousValue: Bool?

        public init(value: String? = nil, key: String? = nil, usePreviousValue: Bool? = nil) {
            self.value = value
            self.key = key
            self.usePreviousValue = usePreviousValue
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
            self.usePreviousValue = dictionary["UsePreviousValue"] as? Bool
        }
    }

    public struct CreateConstraintInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The constraint parameters.
        public let parameters: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String
        /// The type of the constraint.
        public let `type`: String
        /// The product identifier.
        public let productId: String
        /// The text description of the constraint.
        public let description: String?

        public init(acceptLanguage: String? = nil, portfolioId: String, parameters: String, idempotencyToken: String, type: String, productId: String, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.parameters = parameters
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.productId = productId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            guard let parameters = dictionary["Parameters"] as? String else { throw InitializableError.missingRequiredParam("Parameters") }
            self.parameters = parameters
            guard let idempotencyToken = dictionary["IdempotencyToken"] as? String else { throw InitializableError.missingRequiredParam("IdempotencyToken") }
            self.idempotencyToken = idempotencyToken
            guard let `type` = dictionary["Type"] as? String else { throw InitializableError.missingRequiredParam("Type") }
            self.`type` = `type`
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.description = dictionary["Description"] as? String
        }
    }

    public enum ProductType: String, CustomStringConvertible {
        case cloud_formation_template = "CLOUD_FORMATION_TEMPLATE"
        public var description: String { return self.rawValue }
    }

    public struct LaunchPathSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of constraints on the portfolio-product relationship.
        public let constraintSummaries: [ConstraintSummary]?
        /// List of tags used by this launch path.
        public let tags: [Tag]?
        /// Corresponds to the name of the portfolio to which the user was assigned.
        public let name: String?
        /// The unique identifier of the product path.
        public let id: String?

        public init(constraintSummaries: [ConstraintSummary]? = nil, tags: [Tag]? = nil, name: String? = nil, id: String? = nil) {
            self.constraintSummaries = constraintSummaries
            self.tags = tags
            self.name = name
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let constraintSummaries = dictionary["ConstraintSummaries"] as? [[String: Any]] {
                self.constraintSummaries = try constraintSummaries.map({ try ConstraintSummary(dictionary: $0) })
            } else { 
                self.constraintSummaries = nil
            }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.name = dictionary["Name"] as? String
            self.id = dictionary["Id"] as? String
        }
    }

    public struct AssociatePrincipalWithPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateProvisionedProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The provisioning artifact identifier for this product.
        public let provisioningArtifactId: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The idempotency token that uniquely identifies the provisioning update request.
        public let updateToken: String
        /// The identifier of the ProvisionedProduct object to update. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductId: String?
        /// The identifier of the path to use in the updated ProvisionedProduct object. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?
        /// A list of ProvisioningParameter objects used to update the ProvisionedProduct object.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The identifier of the ProvisionedProduct object.
        public let productId: String?
        /// The updated name of the ProvisionedProduct object . You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductName: String?

        public init(provisioningArtifactId: String? = nil, acceptLanguage: String? = nil, updateToken: String, provisionedProductId: String? = nil, pathId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, productId: String? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.updateToken = updateToken
            self.provisionedProductId = provisionedProductId
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        public init(dictionary: [String: Any]) throws {
            self.provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let updateToken = dictionary["UpdateToken"] as? String else { throw InitializableError.missingRequiredParam("UpdateToken") }
            self.updateToken = updateToken
            self.provisionedProductId = dictionary["ProvisionedProductId"] as? String
            self.pathId = dictionary["PathId"] as? String
            if let provisioningParameters = dictionary["ProvisioningParameters"] as? [[String: Any]] {
                self.provisioningParameters = try provisioningParameters.map({ try UpdateProvisioningParameter(dictionary: $0) })
            } else { 
                self.provisioningParameters = nil
            }
            self.productId = dictionary["ProductId"] as? String
            self.provisionedProductName = dictionary["ProvisionedProductName"] as? String
        }
    }

    public struct CreatePortfolioShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DisassociateProductFromPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ProvisioningArtifactParameter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The parameter type.
        public let parameterType: String?
        /// The text description of the parameter.
        public let description: String?
        /// The list of constraints that the administrator has put on the parameter.
        public let parameterConstraints: ParameterConstraints?
        /// The default value for this parameter.
        public let defaultValue: String?
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        public let isNoEcho: Bool?
        /// The parameter key. 
        public let parameterKey: String?

        public init(parameterType: String? = nil, description: String? = nil, parameterConstraints: ParameterConstraints? = nil, defaultValue: String? = nil, isNoEcho: Bool? = nil, parameterKey: String? = nil) {
            self.parameterType = parameterType
            self.description = description
            self.parameterConstraints = parameterConstraints
            self.defaultValue = defaultValue
            self.isNoEcho = isNoEcho
            self.parameterKey = parameterKey
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterType = dictionary["ParameterType"] as? String
            self.description = dictionary["Description"] as? String
            if let parameterConstraints = dictionary["ParameterConstraints"] as? [String: Any] { self.parameterConstraints = try Servicecatalog.ParameterConstraints(dictionary: parameterConstraints) } else { self.parameterConstraints = nil }
            self.defaultValue = dictionary["DefaultValue"] as? String
            self.isNoEcho = dictionary["IsNoEcho"] as? Bool
            self.parameterKey = dictionary["ParameterKey"] as? String
        }
    }

    public struct ListPrincipalsForPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IAM principals (users or roles) associated with the portfolio.
        public let principals: [Principal]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let principals = dictionary["Principals"] as? [[String: Any]] {
                self.principals = try principals.map({ try Principal(dictionary: $0) })
            } else { 
                self.principals = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct DescribeRecordInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The record identifier of the ProvisionedProduct object for which to retrieve output information. This is the RecordDetail.RecordId obtained from the request operation's response.
        public let id: String

        public init(pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.pageToken = dictionary["PageToken"] as? String
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ListPortfoliosForProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetails = dictionary["PortfolioDetails"] as? [[String: Any]] {
                self.portfolioDetails = try portfolioDetails.map({ try PortfolioDetail(dictionary: $0) })
            } else { 
                self.portfolioDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct CreateConstraintOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resulting detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The resulting constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let constraintDetail = dictionary["ConstraintDetail"] as? [String: Any] { self.constraintDetail = try Servicecatalog.ConstraintDetail(dictionary: constraintDetail) } else { self.constraintDetail = nil }
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            self.constraintParameters = dictionary["ConstraintParameters"] as? String
        }
    }

    public struct ProductViewDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current status of the product.
        public let status: Status?
        /// The ARN associated with the product.
        public let productARN: String?
        /// The summary metadata about the specified product view.
        public let productViewSummary: ProductViewSummary?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?

        public init(status: Status? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil, createdTime: Date? = nil) {
            self.status = status
            self.productARN = productARN
            self.productViewSummary = productViewSummary
            self.createdTime = createdTime
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            self.productARN = dictionary["ProductARN"] as? String
            if let productViewSummary = dictionary["ProductViewSummary"] as? [String: Any] { self.productViewSummary = try Servicecatalog.ProductViewSummary(dictionary: productViewSummary) } else { self.productViewSummary = nil }
            self.createdTime = dictionary["CreatedTime"] as? Date
        }
    }

    public struct CreateProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The parameters to use when creating the new provisioning artifact.
        public let parameters: ProvisioningArtifactProperties
        /// The product identifier.
        public let productId: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String

        public init(acceptLanguage: String? = nil, parameters: ProvisioningArtifactProperties, productId: String, idempotencyToken: String) {
            self.acceptLanguage = acceptLanguage
            self.parameters = parameters
            self.productId = productId
            self.idempotencyToken = idempotencyToken
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let parameters = dictionary["Parameters"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Parameters") }
            self.parameters = try Servicecatalog.ProvisioningArtifactProperties(dictionary: parameters)
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            guard let idempotencyToken = dictionary["IdempotencyToken"] as? String else { throw InitializableError.missingRequiredParam("IdempotencyToken") }
            self.idempotencyToken = idempotencyToken
        }
    }

    public struct DescribeProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String else { throw InitializableError.missingRequiredParam("ProvisioningArtifactId") }
            self.provisioningArtifactId = provisioningArtifactId
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct UpdateConstraintOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resulting detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The resulting updated constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let constraintDetail = dictionary["ConstraintDetail"] as? [String: Any] { self.constraintDetail = try Servicecatalog.ConstraintDetail(dictionary: constraintDetail) } else { self.constraintDetail = nil }
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            self.constraintParameters = dictionary["ConstraintParameters"] as? String
        }
    }

    public enum ProvisioningArtifactType: String, CustomStringConvertible {
        case cloud_formation_template = "CLOUD_FORMATION_TEMPLATE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRecordOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Detailed record information for the specified product. 
        public let recordDetail: RecordDetail?
        /// A list of outputs for the specified Product object created as the result of a request. For example, a CloudFormation-backed product that creates an S3 bucket would have an output for the S3 bucket URL.
        public let recordOutputs: [RecordOutput]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(recordDetail: RecordDetail? = nil, recordOutputs: [RecordOutput]? = nil, nextPageToken: String? = nil) {
            self.recordDetail = recordDetail
            self.recordOutputs = recordOutputs
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let recordDetail = dictionary["RecordDetail"] as? [String: Any] { self.recordDetail = try Servicecatalog.RecordDetail(dictionary: recordDetail) } else { self.recordDetail = nil }
            if let recordOutputs = dictionary["RecordOutputs"] as? [[String: Any]] {
                self.recordOutputs = try recordOutputs.map({ try RecordOutput(dictionary: $0) })
            } else { 
                self.recordOutputs = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct UpdateProvisionedProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The detailed result of the UpdateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let recordDetail = dictionary["RecordDetail"] as? [String: Any] { self.recordDetail = try Servicecatalog.RecordDetail(dictionary: recordDetail) } else { self.recordDetail = nil }
        }
    }

    public struct ListProvisioningArtifactsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed provisioning artifact information objects.
        public let provisioningArtifactDetails: [ProvisioningArtifactDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil, nextPageToken: String? = nil) {
            self.provisioningArtifactDetails = provisioningArtifactDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let provisioningArtifactDetails = dictionary["ProvisioningArtifactDetails"] as? [[String: Any]] {
                self.provisioningArtifactDetails = try provisioningArtifactDetails.map({ try ProvisioningArtifactDetail(dictionary: $0) })
            } else { 
                self.provisioningArtifactDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct TerminateProvisionedProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The detailed result of the TerminateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let recordDetail = dictionary["RecordDetail"] as? [String: Any] { self.recordDetail = try Servicecatalog.RecordDetail(dictionary: recordDetail) } else { self.recordDetail = nil }
        }
    }

    public struct ProvisioningParameter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value to use for provisioning. Any constraints on this value can be found in ProvisioningArtifactParameter for Key.
        public let value: String?
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct RecordOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The output value.
        public let outputValue: String?
        /// The output key.
        public let outputKey: String?
        /// The text description of the output.
        public let description: String?

        public init(outputValue: String? = nil, outputKey: String? = nil, description: String? = nil) {
            self.outputValue = outputValue
            self.outputKey = outputKey
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.outputValue = dictionary["OutputValue"] as? String
            self.outputKey = dictionary["OutputKey"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ProvisioningArtifact: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The text description of the artifact.
        public let description: String?
        /// The name of the artifact.
        public let name: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?
        /// The identifier for the artifact.
        public let id: String?

        public init(description: String? = nil, name: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.name = dictionary["Name"] as? String
            self.createdTime = dictionary["CreatedTime"] as? Date
            self.id = dictionary["Id"] as? String
        }
    }

    public struct AssociateProductWithPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListLaunchPathsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.. Identifies the product for which to retrieve LaunchPathSummaries information.
        public let productId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct DeleteConstraintOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SearchProductsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of the product view aggregation value objects.
        public let productViewAggregations: [String: [ProductViewAggregationValue]]?
        /// A list of the product view summary objects.
        public let productViewSummaries: [ProductViewSummary]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(productViewAggregations: [String: [ProductViewAggregationValue]]? = nil, productViewSummaries: [ProductViewSummary]? = nil, nextPageToken: String? = nil) {
            self.productViewAggregations = productViewAggregations
            self.productViewSummaries = productViewSummaries
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let productViewAggregations = dictionary["ProductViewAggregations"] as? [String: Any] {
                var productViewAggregationsDict: [String: [ProductViewAggregationValue]] = [:]
                for (key, value) in productViewAggregations {
                    guard let productViewAggregationValue = value as? [[String: Any]] else { throw InitializableError.convertingError }
                    let productViewAggregationValueList: [ProductViewAggregationValue] = try productViewAggregationValue.map { try ProductViewAggregationValue(dictionary: $0) }
                    productViewAggregationsDict[key] = productViewAggregationValueList
                }
                self.productViewAggregations = productViewAggregationsDict
            } else { 
                self.productViewAggregations = nil
            }
            if let productViewSummaries = dictionary["ProductViewSummaries"] as? [[String: Any]] {
                self.productViewSummaries = try productViewSummaries.map({ try ProductViewSummary(dictionary: $0) })
            } else { 
                self.productViewSummaries = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct DisassociatePrincipalFromPortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteConstraintInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint to delete.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DescribeProductViewInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The ProductViewId of the product to describe.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DeleteProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the provisioning artifact for the delete request.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String else { throw InitializableError.missingRequiredParam("ProvisioningArtifactId") }
            self.provisioningArtifactId = provisioningArtifactId
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct ParameterConstraints: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The values that the administrator has allowed for the parameter.
        public let allowedValues: [String]?

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        public init(dictionary: [String: Any]) throws {
            self.allowedValues = dictionary["AllowedValues"] as? [String]
        }
    }

    public enum ProductSource: String, CustomStringConvertible {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct ListPortfoliosForProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct PortfolioDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name to use for display purposes.
        public let displayName: String?
        /// The name of the portfolio provider.
        public let providerName: String?
        /// The ARN assigned to the portfolio.
        public let aRN: String?
        /// The text description of the portfolio.
        public let description: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?
        /// The identifier for the portfolio.
        public let id: String?

        public init(displayName: String? = nil, providerName: String? = nil, aRN: String? = nil, description: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.displayName = displayName
            self.providerName = providerName
            self.aRN = aRN
            self.description = description
            self.createdTime = createdTime
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.displayName = dictionary["DisplayName"] as? String
            self.providerName = dictionary["ProviderName"] as? String
            self.aRN = dictionary["ARN"] as? String
            self.description = dictionary["Description"] as? String
            self.createdTime = dictionary["CreatedTime"] as? Date
            self.id = dictionary["Id"] as? String
        }
    }

    public struct DescribeProvisioningParametersInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The provisioning artifact identifier for this product.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, pathId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pathId = pathId
        }

        public init(dictionary: [String: Any]) throws {
            guard let provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String else { throw InitializableError.missingRequiredParam("ProvisioningArtifactId") }
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.pathId = dictionary["PathId"] as? String
        }
    }

    public struct SearchProductsAsAdminOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed product view information objects.
        public let productViewDetails: [ProductViewDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(productViewDetails: [ProductViewDetail]? = nil, nextPageToken: String? = nil) {
            self.productViewDetails = productViewDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let productViewDetails = dictionary["ProductViewDetails"] as? [[String: Any]] {
                self.productViewDetails = try productViewDetails.map({ try ProductViewDetail(dictionary: $0) })
            } else { 
                self.productViewDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct ProductViewAggregationValue: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the product view aggregation.
        public let value: String?
        /// An approximate count of the products that match the value.
        public let approximateCount: Int32?

        public init(value: String? = nil, approximateCount: Int32? = nil) {
            self.value = value
            self.approximateCount = approximateCount
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.approximateCount = dictionary["ApproximateCount"] as? Int32
        }
    }

    public struct ListAcceptedPortfolioSharesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct SearchProductsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The sort field specifier. If no value is specified, results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the calling user has access. 
        public let filters: [ProductViewFilterBy: [String]]?
        /// The sort order specifier. If no value is specified, results are not sorted.
        public let sortOrder: SortOrder?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, sortBy: ProductViewSortBy? = nil, acceptLanguage: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil, sortOrder: SortOrder? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.acceptLanguage = acceptLanguage
            self.filters = filters
            self.sortOrder = sortOrder
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            if let sortBy = dictionary["SortBy"] as? String { self.sortBy = ProductViewSortBy(rawValue: sortBy) } else { self.sortBy = nil }
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] {
                var filtersDict: [ProductViewFilterBy: [String]] = [:]
                for (key, value) in filters {
                    guard let productViewFilterValues = value as? [String] else { throw InitializableError.convertingError }
                    filtersDict[ProductViewFilterBy(rawValue: key)!] = productViewFilterValues
                }
                self.filters = filtersDict
            } else { 
                self.filters = nil
            }
            if let sortOrder = dictionary["SortOrder"] as? String { self.sortOrder = SortOrder(rawValue: sortOrder) } else { self.sortOrder = nil }
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct RecordError: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The numeric value of the error.
        public let code: String?
        /// The text description of the error.
        public let description: String?

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.code = dictionary["Code"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct UpdateConstraintInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The updated text description of the constraint.
        public let description: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint to update.
        public let id: String

        public init(description: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ProvisionedProductDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current status of the ProvisionedProduct.
        public let status: RecordStatus?
        /// The ARN associated with the ProvisionedProduct object.
        public let arn: String?
        /// The record identifier of the last request performed on this ProvisionedProduct object.
        public let lastRecordId: String?
        /// The user-friendly name of the ProvisionedProduct object.
        public let name: String?
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String?
        /// The type of the ProvisionedProduct object.
        public let `type`: String?
        /// The current status message of the ProvisionedProduct.
        public let statusMessage: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?
        /// The identifier of the ProvisionedProduct object.
        public let id: String?

        public init(status: RecordStatus? = nil, arn: String? = nil, lastRecordId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, type: String? = nil, statusMessage: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.status = status
            self.arn = arn
            self.lastRecordId = lastRecordId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.statusMessage = statusMessage
            self.createdTime = createdTime
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = RecordStatus(rawValue: status) } else { self.status = nil }
            self.arn = dictionary["Arn"] as? String
            self.lastRecordId = dictionary["LastRecordId"] as? String
            self.name = dictionary["Name"] as? String
            self.idempotencyToken = dictionary["IdempotencyToken"] as? String
            self.`type` = dictionary["Type"] as? String
            self.statusMessage = dictionary["StatusMessage"] as? String
            self.createdTime = dictionary["CreatedTime"] as? Date
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ProvisionProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The detailed result of the ProvisionProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object of the request, and a list of any errors that the request encountered. 
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        public init(dictionary: [String: Any]) throws {
            if let recordDetail = dictionary["RecordDetail"] as? [String: Any] { self.recordDetail = try Servicecatalog.RecordDetail(dictionary: recordDetail) } else { self.recordDetail = nil }
        }
    }

    public struct DeleteProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the product for the delete request.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct ListProvisioningArtifactsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(productId: String, acceptLanguage: String? = nil) {
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct ListRecordHistoryInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The access level for obtaining results. If left unspecified, User level access is used.
        public let accessLevelFilter: AccessLevelFilter?
        /// The filter to limit search results. 
        public let searchFilter: ListRecordHistorySearchFilter?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.searchFilter = searchFilter
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            if let accessLevelFilter = dictionary["AccessLevelFilter"] as? [String: Any] { self.accessLevelFilter = try Servicecatalog.AccessLevelFilter(dictionary: accessLevelFilter) } else { self.accessLevelFilter = nil }
            if let searchFilter = dictionary["SearchFilter"] as? [String: Any] { self.searchFilter = try Servicecatalog.ListRecordHistorySearchFilter(dictionary: searchFilter) } else { self.searchFilter = nil }
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct AssociateProductWithPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the source portfolio to use with this association.
        public let sourcePortfolioId: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, sourcePortfolioId: String? = nil, portfolioId: String, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.sourcePortfolioId = sourcePortfolioId
            self.portfolioId = portfolioId
            self.productId = productId
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.sourcePortfolioId = dictionary["SourcePortfolioId"] as? String
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
        }
    }

    public struct UpdateProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the product for the update request.
        public let id: String
        /// Tags to remove from the existing list of tags associated with the product.
        public let removeTags: [String]?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The updated support email for the product.
        public let supportEmail: String?
        /// The updated product name.
        public let name: String?
        /// The updated distributor of the product.
        public let distributor: String?
        /// Tags to add to the existing list of tags associated with the product.
        public let addTags: [Tag]?
        /// The updated support URL for the product.
        public let supportUrl: String?
        /// The updated owner of the product.
        public let owner: String?
        /// The updated support description for the product.
        public let supportDescription: String?
        /// The updated text description of the product.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, addTags: [Tag]? = nil, supportUrl: String? = nil, owner: String? = nil, supportDescription: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.addTags = addTags
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            self.removeTags = dictionary["RemoveTags"] as? [String]
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.supportEmail = dictionary["SupportEmail"] as? String
            self.name = dictionary["Name"] as? String
            self.distributor = dictionary["Distributor"] as? String
            if let addTags = dictionary["AddTags"] as? [[String: Any]] {
                self.addTags = try addTags.map({ try Tag(dictionary: $0) })
            } else { 
                self.addTags = nil
            }
            self.supportUrl = dictionary["SupportUrl"] as? String
            self.owner = dictionary["Owner"] as? String
            self.supportDescription = dictionary["SupportDescription"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public enum ProductViewSortBy: String, CustomStringConvertible {
        case title = "Title"
        case versioncount = "VersionCount"
        case creationdate = "CreationDate"
        public var description: String { return self.rawValue }
    }

    public struct TerminateProvisionedProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If set to true, AWS Service Catalog stops managing the specified ProvisionedProduct object even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the ProvisionedProduct object is terminated, further requests to terminate the same ProvisionedProduct object always return ResourceNotFound regardless of the value of TerminateToken.
        public let terminateToken: String
        /// The identifier of the ProvisionedProduct object to terminate. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductId: String?
        /// The name of the ProvisionedProduct object to terminate. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductName: String?

        public init(ignoreErrors: Bool? = nil, acceptLanguage: String? = nil, terminateToken: String, provisionedProductId: String? = nil, provisionedProductName: String? = nil) {
            self.ignoreErrors = ignoreErrors
            self.acceptLanguage = acceptLanguage
            self.terminateToken = terminateToken
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
        }

        public init(dictionary: [String: Any]) throws {
            self.ignoreErrors = dictionary["IgnoreErrors"] as? Bool
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let terminateToken = dictionary["TerminateToken"] as? String else { throw InitializableError.missingRequiredParam("TerminateToken") }
            self.terminateToken = terminateToken
            self.provisionedProductId = dictionary["ProvisionedProductId"] as? String
            self.provisionedProductName = dictionary["ProvisionedProductName"] as? String
        }
    }

    public enum SortOrder: String, CustomStringConvertible {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct RejectPortfolioShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the provisioning artifact for the update request.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The updated name of the provisioning artifact.
        public let name: String?
        /// The updated text description of the provisioning artifact.
        public let description: String?

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, name: String? = nil, description: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.name = name
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String else { throw InitializableError.missingRequiredParam("ProvisioningArtifactId") }
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.name = dictionary["Name"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public enum AccessLevelFilterKey: String, CustomStringConvertible {
        case account = "Account"
        case role = "Role"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public struct DescribePortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetail = dictionary["PortfolioDetail"] as? [String: Any] { self.portfolioDetail = try Servicecatalog.PortfolioDetail(dictionary: portfolioDetail) } else { self.portfolioDetail = nil }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct CreatePortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The resulting detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags successfully associated with the new portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetail = dictionary["PortfolioDetail"] as? [String: Any] { self.portfolioDetail = try Servicecatalog.PortfolioDetail(dictionary: portfolioDetail) } else { self.portfolioDetail = nil }
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
        }
    }

    public struct AccessLevelFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the user to which the access level applies. A value of Self is currently supported.
        public let value: String?
        /// Specifies the access level.  Account allows results at the account level.   Role allows results based on the federated role of the specified user.  User allows results limited to the specified user. 
        public let key: AccessLevelFilterKey?

        public init(value: String? = nil, key: AccessLevelFilterKey? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            if let key = dictionary["Key"] as? String { self.key = AccessLevelFilterKey(rawValue: key) } else { self.key = nil }
        }
    }

    public struct ConstraintSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of the constraint. 
        public let `type`: String?
        /// The text description of the constraint.
        public let description: String?

        public init(type: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.`type` = dictionary["Type"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ProductViewSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value of false indicates that the product does not have a default path, while a value of true indicates that it does. If it's false, call ListLaunchPaths to disambiguate between paths. If true, ListLaunchPaths is not required, and the output of the ProductViewSummary operation can be used directly with DescribeProvisioningParameters.
        public let hasDefaultPath: Bool?
        /// Short description of the product.
        public let shortDescription: String?
        /// The product view identifier.
        public let id: String?
        /// The email contact information to obtain support for this Product.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String?
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        public let distributor: String?
        /// The URL information to obtain support for this Product.
        public let supportUrl: String?
        /// The owner of the product. Contact the product administrator for the significance of this value.
        public let owner: String?
        /// The product identifier.
        public let productId: String?
        /// The description of the support for this Product.
        public let supportDescription: String?
        /// The product type. Contact the product administrator for the significance of this value.
        public let `type`: ProductType?

        public init(hasDefaultPath: Bool? = nil, shortDescription: String? = nil, id: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, supportUrl: String? = nil, owner: String? = nil, productId: String? = nil, supportDescription: String? = nil, type: ProductType? = nil) {
            self.hasDefaultPath = hasDefaultPath
            self.shortDescription = shortDescription
            self.id = id
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.supportUrl = supportUrl
            self.owner = owner
            self.productId = productId
            self.supportDescription = supportDescription
            self.`type` = `type`
        }

        public init(dictionary: [String: Any]) throws {
            self.hasDefaultPath = dictionary["HasDefaultPath"] as? Bool
            self.shortDescription = dictionary["ShortDescription"] as? String
            self.id = dictionary["Id"] as? String
            self.supportEmail = dictionary["SupportEmail"] as? String
            self.name = dictionary["Name"] as? String
            self.distributor = dictionary["Distributor"] as? String
            self.supportUrl = dictionary["SupportUrl"] as? String
            self.owner = dictionary["Owner"] as? String
            self.productId = dictionary["ProductId"] as? String
            self.supportDescription = dictionary["SupportDescription"] as? String
            if let `type` = dictionary["Type"] as? String { self.`type` = ProductType(rawValue: `type`) } else { self.`type` = nil }
        }
    }

    public enum RecordStatus: String, CustomStringConvertible {
        case in_progress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct RejectPortfolioShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct UpdateProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the current request.
        public let status: Status?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the provisioning artifact update request.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            if let provisioningArtifactDetail = dictionary["ProvisioningArtifactDetail"] as? [String: Any] { self.provisioningArtifactDetail = try Servicecatalog.ProvisioningArtifactDetail(dictionary: provisioningArtifactDetail) } else { self.provisioningArtifactDetail = nil }
            if let info = dictionary["Info"] as? [String: String] {
                self.info = info
            } else { 
                self.info = nil
            }
        }
    }

    public struct DescribeConstraintOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The current parameters associated with the specified constraint.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let constraintDetail = dictionary["ConstraintDetail"] as? [String: Any] { self.constraintDetail = try Servicecatalog.ConstraintDetail(dictionary: constraintDetail) } else { self.constraintDetail = nil }
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            self.constraintParameters = dictionary["ConstraintParameters"] as? String
        }
    }

    public enum Status: String, CustomStringConvertible {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Principal: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String?
        /// The principal type. Must be IAM 
        public let principalType: PrincipalType?

        public init(principalARN: String? = nil, principalType: PrincipalType? = nil) {
            self.principalARN = principalARN
            self.principalType = principalType
        }

        public init(dictionary: [String: Any]) throws {
            self.principalARN = dictionary["PrincipalARN"] as? String
            if let principalType = dictionary["PrincipalType"] as? String { self.principalType = PrincipalType(rawValue: principalType) } else { self.principalType = nil }
        }
    }

    public struct ProvisioningArtifactDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The text description of the provisioning artifact.
        public let description: String?
        /// The type of the provisioning artifact.
        public let `type`: ProvisioningArtifactType?
        /// The name assigned to the provisioning artifact.
        public let name: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(description: String? = nil, type: ProvisioningArtifactType? = nil, name: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.description = description
            self.`type` = `type`
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            if let `type` = dictionary["Type"] as? String { self.`type` = ProvisioningArtifactType(rawValue: `type`) } else { self.`type` = nil }
            self.name = dictionary["Name"] as? String
            self.createdTime = dictionary["CreatedTime"] as? Date
            self.id = dictionary["Id"] as? String
        }
    }

    public struct ListConstraintsForPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, productId: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.productId = productId
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.productId = dictionary["ProductId"] as? String
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct DisassociateProductFromPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, productId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            guard let productId = dictionary["ProductId"] as? String else { throw InitializableError.missingRequiredParam("ProductId") }
            self.productId = productId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct ListPortfoliosOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetails = dictionary["PortfolioDetails"] as? [[String: Any]] {
                self.portfolioDetails = try portfolioDetails.map({ try PortfolioDetail(dictionary: $0) })
            } else { 
                self.portfolioDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct DeleteProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListPrincipalsForPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.pageToken = pageToken
        }

        public init(dictionary: [String: Any]) throws {
            self.pageSize = dictionary["PageSize"] as? Int32
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.pageToken = dictionary["PageToken"] as? String
        }
    }

    public struct DeleteProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeletePortfolioShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeProductOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The summary metadata about the specified product.
        public let productViewSummary: ProductViewSummary?
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts parameter represent the ways the specified product can be provisioned.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        public init(dictionary: [String: Any]) throws {
            if let productViewSummary = dictionary["ProductViewSummary"] as? [String: Any] { self.productViewSummary = try Servicecatalog.ProductViewSummary(dictionary: productViewSummary) } else { self.productViewSummary = nil }
            if let provisioningArtifacts = dictionary["ProvisioningArtifacts"] as? [[String: Any]] {
                self.provisioningArtifacts = try provisioningArtifacts.map({ try ProvisioningArtifact(dictionary: $0) })
            } else { 
                self.provisioningArtifacts = nil
            }
        }
    }

    public struct RecordDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The provisioning artifact identifier for this product.
        public let provisioningArtifactId: String?
        /// The time when the record for the ProvisionedProduct object was last updated.
        public let updatedTime: Date?
        /// The user-friendly name of the ProvisionedProduct object.
        public let provisionedProductName: String?
        /// The identifier of the path for this product's provisioning.
        public let pathId: String?
        /// The product identifier.
        public let productId: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: Date?
        /// A list of errors that occurred while processing the request.
        public let recordErrors: [RecordError]?
        /// The status of the ProvisionedProduct object.
        public let status: RecordStatus?
        /// The identifier of the ProvisionedProduct object.
        public let provisionedProductId: String?
        /// The record type for this record.
        public let recordType: String?
        /// The identifier of the ProvisionedProduct object record.
        public let recordId: String?
        /// The type of the ProvisionedProduct object.
        public let provisionedProductType: String?
        /// List of tags associated with this record.
        public let recordTags: [RecordTag]?

        public init(provisioningArtifactId: String? = nil, updatedTime: Date? = nil, provisionedProductName: String? = nil, pathId: String? = nil, productId: String? = nil, createdTime: Date? = nil, recordErrors: [RecordError]? = nil, status: RecordStatus? = nil, provisionedProductId: String? = nil, recordType: String? = nil, recordId: String? = nil, provisionedProductType: String? = nil, recordTags: [RecordTag]? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.updatedTime = updatedTime
            self.provisionedProductName = provisionedProductName
            self.pathId = pathId
            self.productId = productId
            self.createdTime = createdTime
            self.recordErrors = recordErrors
            self.status = status
            self.provisionedProductId = provisionedProductId
            self.recordType = recordType
            self.recordId = recordId
            self.provisionedProductType = provisionedProductType
            self.recordTags = recordTags
        }

        public init(dictionary: [String: Any]) throws {
            self.provisioningArtifactId = dictionary["ProvisioningArtifactId"] as? String
            self.updatedTime = dictionary["UpdatedTime"] as? Date
            self.provisionedProductName = dictionary["ProvisionedProductName"] as? String
            self.pathId = dictionary["PathId"] as? String
            self.productId = dictionary["ProductId"] as? String
            self.createdTime = dictionary["CreatedTime"] as? Date
            if let recordErrors = dictionary["RecordErrors"] as? [[String: Any]] {
                self.recordErrors = try recordErrors.map({ try RecordError(dictionary: $0) })
            } else { 
                self.recordErrors = nil
            }
            if let status = dictionary["Status"] as? String { self.status = RecordStatus(rawValue: status) } else { self.status = nil }
            self.provisionedProductId = dictionary["ProvisionedProductId"] as? String
            self.recordType = dictionary["RecordType"] as? String
            self.recordId = dictionary["RecordId"] as? String
            self.provisionedProductType = dictionary["ProvisionedProductType"] as? String
            if let recordTags = dictionary["RecordTags"] as? [[String: Any]] {
                self.recordTags = try recordTags.map({ try RecordTag(dictionary: $0) })
            } else { 
                self.recordTags = nil
            }
        }
    }

    public struct DescribeProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the current request.
        public let status: Status?
        /// Detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the provisioning artifact.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            if let provisioningArtifactDetail = dictionary["ProvisioningArtifactDetail"] as? [String: Any] { self.provisioningArtifactDetail = try Servicecatalog.ProvisioningArtifactDetail(dictionary: provisioningArtifactDetail) } else { self.provisioningArtifactDetail = nil }
            if let info = dictionary["Info"] as? [String: String] {
                self.info = info
            } else { 
                self.info = nil
            }
        }
    }

    public struct AcceptPortfolioShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

    public struct RecordTag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value for this tag.
        public let value: String?
        /// The key for this tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct ListAcceptedPortfolioSharesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        public init(dictionary: [String: Any]) throws {
            if let portfolioDetails = dictionary["PortfolioDetails"] as? [[String: Any]] {
                self.portfolioDetails = try portfolioDetails.map({ try PortfolioDetail(dictionary: $0) })
            } else { 
                self.portfolioDetails = nil
            }
            self.nextPageToken = dictionary["NextPageToken"] as? String
        }
    }

    public struct UpdatePortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the portfolio for the update request.
        public let id: String
        /// Tags to remove from the existing list of tags associated with the portfolio.
        public let removeTags: [String]?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The name to use for display purposes.
        public let displayName: String?
        /// Tags to add to the existing list of tags associated with the portfolio.
        public let addTags: [Tag]?
        /// The updated name of the portfolio provider.
        public let providerName: String?
        /// The updated text description of the portfolio.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, displayName: String? = nil, addTags: [Tag]? = nil, providerName: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.displayName = displayName
            self.addTags = addTags
            self.providerName = providerName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            self.removeTags = dictionary["RemoveTags"] as? [String]
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.displayName = dictionary["DisplayName"] as? String
            if let addTags = dictionary["AddTags"] as? [[String: Any]] {
                self.addTags = try addTags.map({ try Tag(dictionary: $0) })
            } else { 
                self.addTags = nil
            }
            self.providerName = dictionary["ProviderName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DeletePortfolioOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AssociatePrincipalWithPortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The principal type. Must be IAM 
        public let principalType: PrincipalType
        /// The portfolio identifier.
        public let portfolioId: String

        public init(principalARN: String, acceptLanguage: String? = nil, principalType: PrincipalType, portfolioId: String) {
            self.principalARN = principalARN
            self.acceptLanguage = acceptLanguage
            self.principalType = principalType
            self.portfolioId = portfolioId
        }

        public init(dictionary: [String: Any]) throws {
            guard let principalARN = dictionary["PrincipalARN"] as? String else { throw InitializableError.missingRequiredParam("PrincipalARN") }
            self.principalARN = principalARN
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let rawPrincipalType = dictionary["PrincipalType"] as? String, let principalType = PrincipalType(rawValue: rawPrincipalType) else { throw InitializableError.missingRequiredParam("PrincipalType") }
            self.principalType = principalType
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
        }
    }

    public struct DescribeProductAsAdminInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the product for which to retrieve information.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct DescribePortfolioInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the portfolio for which to retrieve information.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
        }
    }

    public struct CreateProductInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Contact email for product support.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String
        /// The distributor of the product.
        public let distributor: String?
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String
        /// The type of the product to create.
        public let productType: ProductType
        /// Tags to associate with the new product.
        public let tags: [Tag]?
        /// Parameters for the provisioning artifact.
        public let provisioningArtifactParameters: ProvisioningArtifactProperties
        /// Contact URL for product support.
        public let supportUrl: String?
        /// The owner of the product.
        public let owner: String
        /// Support information about the product.
        public let supportDescription: String?
        /// The text description of the product.
        public let description: String?

        public init(acceptLanguage: String? = nil, supportEmail: String? = nil, name: String, distributor: String? = nil, idempotencyToken: String, productType: ProductType, tags: [Tag]? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, supportUrl: String? = nil, owner: String, supportDescription: String? = nil, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.idempotencyToken = idempotencyToken
            self.productType = productType
            self.tags = tags
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
            self.supportEmail = dictionary["SupportEmail"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.distributor = dictionary["Distributor"] as? String
            guard let idempotencyToken = dictionary["IdempotencyToken"] as? String else { throw InitializableError.missingRequiredParam("IdempotencyToken") }
            self.idempotencyToken = idempotencyToken
            guard let rawProductType = dictionary["ProductType"] as? String, let productType = ProductType(rawValue: rawProductType) else { throw InitializableError.missingRequiredParam("ProductType") }
            self.productType = productType
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            guard let provisioningArtifactParameters = dictionary["ProvisioningArtifactParameters"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ProvisioningArtifactParameters") }
            self.provisioningArtifactParameters = try Servicecatalog.ProvisioningArtifactProperties(dictionary: provisioningArtifactParameters)
            self.supportUrl = dictionary["SupportUrl"] as? String
            guard let owner = dictionary["Owner"] as? String else { throw InitializableError.missingRequiredParam("Owner") }
            self.owner = owner
            self.supportDescription = dictionary["SupportDescription"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreateProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the current request.
        public let status: Status?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the provisioning artifact create request.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = Status(rawValue: status) } else { self.status = nil }
            if let provisioningArtifactDetail = dictionary["ProvisioningArtifactDetail"] as? [String: Any] { self.provisioningArtifactDetail = try Servicecatalog.ProvisioningArtifactDetail(dictionary: provisioningArtifactDetail) } else { self.provisioningArtifactDetail = nil }
            if let info = dictionary["Info"] as? [String: String] {
                self.info = info
            } else { 
                self.info = nil
            }
        }
    }

    public struct ListPortfolioAccessInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        public init(dictionary: [String: Any]) throws {
            guard let portfolioId = dictionary["PortfolioId"] as? String else { throw InitializableError.missingRequiredParam("PortfolioId") }
            self.portfolioId = portfolioId
            self.acceptLanguage = dictionary["AcceptLanguage"] as? String
        }
    }

}