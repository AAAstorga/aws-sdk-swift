// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension APIGateway {

    public struct DeleteUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// [Required] The Id of the to-be-deleted usage plan.
        public let usagePlanId: String

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
        }
    }

    public struct CreateRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "validateRequestBody", required: false, type: .boolean), 
            AWSShapeMember(label: "validateRequestParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (true) or not (false).
        public let validateRequestBody: Bool?
        /// A Boolean flag to indicate whether to validate request parameters, true, or not false.
        public let validateRequestParameters: Bool?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The name of the to-be-created RequestValidator.
        public let name: String?

        public init(validateRequestBody: Bool? = nil, validateRequestParameters: Bool? = nil, restApiId: String, name: String? = nil) {
            self.validateRequestBody = validateRequestBody
            self.validateRequestParameters = validateRequestParameters
            self.restApiId = restApiId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case validateRequestBody = "validateRequestBody"
            case validateRequestParameters = "validateRequestParameters"
            case restApiId = "restapi_id"
            case name = "name"
        }
    }

    public struct DeleteIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string)
        ]
        /// [Required] Specifies a delete integration response request's resource identifier.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies a delete integration response request's HTTP method.
        public let httpMethod: String
        /// [Required] Specifies a delete integration response request's status code.
        public let statusCode: String

        public init(resourceId: String, restApiId: String, httpMethod: String, statusCode: String) {
            self.resourceId = resourceId
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case statusCode = "status_code"
        }
    }

    public struct GetDomainNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct GetRestApisRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct CreateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "contentType", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the model. Must be alphanumeric.
        public let name: String
        /// The schema for the model. For application/json models, this should be JSON schema draft 4 model.
        public let schema: String?
        /// [Required] The content-type for the model.
        public let contentType: String
        /// The description of the model.
        public let description: String?
        /// [Required] The RestApi identifier under which the Model will be created.
        public let restApiId: String

        public init(name: String, schema: String? = nil, contentType: String, description: String? = nil, restApiId: String) {
            self.name = name
            self.schema = schema
            self.contentType = contentType
            self.description = description
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case schema = "schema"
            case contentType = "contentType"
            case description = "description"
            case restApiId = "restapi_id"
        }
    }

    public struct GetBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify any base path name after the domain name.
        public let basePath: String
        /// [Required] The domain name of the BasePathMapping resource to be described.
        public let domainName: String

        public init(basePath: String, domainName: String) {
            self.basePath = basePath
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case basePath = "base_path"
            case domainName = "domain_name"
        }
    }

    public struct VpcLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [VpcLink]?
        public let position: String?

        public init(items: [VpcLink]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct BasePathMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", required: false, type: .string), 
            AWSShapeMember(label: "basePath", required: false, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// The string identifier of the associated RestApi.
        public let restApiId: String?
        /// The base path name that callers of the API must provide as part of the URL after the domain name.
        public let basePath: String?
        /// The name of the associated stage.
        public let stage: String?

        public init(restApiId: String? = nil, basePath: String? = nil, stage: String? = nil) {
            self.restApiId = restApiId
            self.basePath = basePath
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restApiId"
            case basePath = "basePath"
            case stage = "stage"
        }
    }

    public struct RequestValidator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "validateRequestParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "validateRequestBody", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The identifier of this RequestValidator.
        public let id: String?
        /// A Boolean flag to indicate whether to validate request parameters (true) or not (false).
        public let validateRequestParameters: Bool?
        /// A Boolean flag to indicate whether to validate a request body according to the configured Model schema.
        public let validateRequestBody: Bool?
        /// The name of this RequestValidator
        public let name: String?

        public init(id: String? = nil, validateRequestParameters: Bool? = nil, validateRequestBody: Bool? = nil, name: String? = nil) {
            self.id = id
            self.validateRequestParameters = validateRequestParameters
            self.validateRequestBody = validateRequestBody
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case validateRequestParameters = "validateRequestParameters"
            case validateRequestBody = "validateRequestBody"
            case name = "name"
        }
    }

    public struct CanarySettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "useStageCache", required: false, type: .boolean), 
            AWSShapeMember(label: "percentTraffic", required: false, type: .double), 
            AWSShapeMember(label: "stageVariableOverrides", required: false, type: .map)
        ]
        /// The ID of the canary deployment.
        public let deploymentId: String?
        /// A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
        public let useStageCache: Bool?
        /// The percent (0-100) of traffic diverted to a canary deployment.
        public let percentTraffic: Double?
        /// Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
        public let stageVariableOverrides: [String: String]?

        public init(deploymentId: String? = nil, useStageCache: Bool? = nil, percentTraffic: Double? = nil, stageVariableOverrides: [String: String]? = nil) {
            self.deploymentId = deploymentId
            self.useStageCache = useStageCache
            self.percentTraffic = percentTraffic
            self.stageVariableOverrides = stageVariableOverrides
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deploymentId"
            case useStageCache = "useStageCache"
            case percentTraffic = "percentTraffic"
            case stageVariableOverrides = "stageVariableOverrides"
        }
    }

    public struct Integration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "integrationResponses", required: false, type: .map), 
            AWSShapeMember(label: "connectionType", required: false, type: .enum), 
            AWSShapeMember(label: "requestTemplates", required: false, type: .map), 
            AWSShapeMember(label: "cacheNamespace", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "cacheKeyParameters", required: false, type: .list), 
            AWSShapeMember(label: "httpMethod", required: false, type: .string), 
            AWSShapeMember(label: "uri", required: false, type: .string), 
            AWSShapeMember(label: "passthroughBehavior", required: false, type: .string), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "credentials", required: false, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "timeoutInMillis", required: false, type: .integer)
        ]
        /// Specifies the integration's responses.   Example: Get integration responses of a method Request  GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160607T191449Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160607/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}  Response The successful response returns 200 OK status and a payload as follows: { "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" }    Creating an API 
        public let integrationResponses: [String: IntegrationResponse]?
        /// The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
        public let connectionType: ConnectionType?
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public let requestTemplates: [String: String]?
        /// Specifies the integration's cache namespace.
        public let cacheNamespace: String?
        /// Specifies an API method integration type. The valid value is one of the following:  AWS: for integrating the API method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. AWS_PROXY: for integrating the API method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as the Lambda proxy integration. HTTP: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration. HTTP_PROXY: for integrating the API method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as the HTTP proxy integration. MOCK: for integrating the API method request with API Gateway as a "loop-back" endpoint without invoking any backend.  For the HTTP and HTTP proxy integrations, each integration can specify a protocol (http/https), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a connectionType of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
        public let `type`: IntegrationType?
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public let contentHandling: ContentHandlingStrategy?
        /// Specifies the integration's cache key parameters.
        public let cacheKeyParameters: [String]?
        /// Specifies the integration's HTTP method type.
        public let httpMethod: String?
        /// Specifies Uniform Resource Identifier (URI) of the integration endpoint.   For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.    For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key} 
        public let uri: String?
        ///   Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in requestTemplates. The valid value is one of the following:    WHEN_NO_MATCH: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request.   WHEN_NO_TEMPLATES: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response.   NEVER: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.   
        public let passthroughBehavior: String?
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public let requestParameters: [String: String]?
        /// Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*. To use resource-based permissions on supported AWS services, specify null.
        public let credentials: String?
        /// The (id) of the VpcLink used for the integration when connectionType=VPC_LINK and undefined, otherwise.
        public let connectionId: String?
        /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        public let timeoutInMillis: Int32?

        public init(integrationResponses: [String: IntegrationResponse]? = nil, connectionType: ConnectionType? = nil, requestTemplates: [String: String]? = nil, cacheNamespace: String? = nil, type: IntegrationType? = nil, contentHandling: ContentHandlingStrategy? = nil, cacheKeyParameters: [String]? = nil, httpMethod: String? = nil, uri: String? = nil, passthroughBehavior: String? = nil, requestParameters: [String: String]? = nil, credentials: String? = nil, connectionId: String? = nil, timeoutInMillis: Int32? = nil) {
            self.integrationResponses = integrationResponses
            self.connectionType = connectionType
            self.requestTemplates = requestTemplates
            self.cacheNamespace = cacheNamespace
            self.`type` = `type`
            self.contentHandling = contentHandling
            self.cacheKeyParameters = cacheKeyParameters
            self.httpMethod = httpMethod
            self.uri = uri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.credentials = credentials
            self.connectionId = connectionId
            self.timeoutInMillis = timeoutInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case integrationResponses = "integrationResponses"
            case connectionType = "connectionType"
            case requestTemplates = "requestTemplates"
            case cacheNamespace = "cacheNamespace"
            case `type` = "type"
            case contentHandling = "contentHandling"
            case cacheKeyParameters = "cacheKeyParameters"
            case httpMethod = "httpMethod"
            case uri = "uri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case credentials = "credentials"
            case connectionId = "connectionId"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public enum ConnectionType: String, CustomStringConvertible, Codable {
        case internet = "INTERNET"
        case vpcLink = "VPC_LINK"
        public var description: String { return self.rawValue }
    }

    public enum PutMode: String, CustomStringConvertible, Codable {
        case merge = "merge"
        case overwrite = "overwrite"
        public var description: String { return self.rawValue }
    }

    public enum UnauthorizedCacheControlHeaderStrategy: String, CustomStringConvertible, Codable {
        case failWith403 = "FAIL_WITH_403"
        case succeedWithResponseHeader = "SUCCEED_WITH_RESPONSE_HEADER"
        case succeedWithoutResponseHeader = "SUCCEED_WITHOUT_RESPONSE_HEADER"
        public var description: String { return self.rawValue }
    }

    public struct GatewayResponses: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// Returns the entire collection, because of no pagination support.
        public let items: [GatewayResponse]?
        public let position: String?

        public init(items: [GatewayResponse]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct ImportRestApiRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean)
        ]
        /// A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.  To exclude DocumentationParts from the import, set parameters as ignore=documentation.  To configure the endpoint type, set parameters as endpointConfigurationTypes=EDGE, endpointConfigurationTypes=REGIONAL, or endpointConfigurationTypes=PRIVATE. The default endpoint type is EDGE.  To handle imported basePath, set parameters as basePath=ignore, basePath=prepend or basePath=split. For example, the AWS CLI command to exclude documentation from the imported API is: aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json' The AWS CLI command to set the regional endpoint on the imported API is: aws apigateway import-rest-api --parameters endpointConfigurationTypes=REGIONAL --body 'file:///path/to/imported-api-body.json'
        public let parameters: [String: String]?
        /// [Required] The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
        public let body: Data
        /// A query parameter to indicate whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?

        public init(parameters: [String: String]? = nil, body: Data, failOnWarnings: Bool? = nil) {
            self.parameters = parameters
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "parameters"
            case body = "body"
            case failOnWarnings = "failonwarnings"
        }
    }

    public struct UpdateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The name of the DomainName resource to be changed.
        public let domainName: String

        public init(patchOperations: [PatchOperation]? = nil, domainName: String) {
            self.patchOperations = patchOperations
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case domainName = "domain_name"
        }
    }

    public struct UpdateMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The status code for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil, statusCode: String, httpMethod: String, resourceId: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
        }
    }

    public struct GetAccountRequest: AWSShape {

    }

    public struct DeleteMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(httpMethod: String, resourceId: String, restApiId: String) {
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
        }
    }

    public struct TestInvokeMethodResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "log", required: false, type: .string), 
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map), 
            AWSShapeMember(label: "status", required: false, type: .integer), 
            AWSShapeMember(label: "latency", required: false, type: .long), 
            AWSShapeMember(label: "body", required: false, type: .string)
        ]
        /// The API Gateway execution log for the test invoke request.
        public let log: String?
        /// The headers of the HTTP response.
        public let headers: [String: String]?
        /// The headers of the HTTP response as a map from string to list of values.
        public let multiValueHeaders: [String: [String]]?
        /// The HTTP status code.
        public let status: Int32?
        /// The execution latency of the test invoke request.
        public let latency: Int64?
        /// The body of the HTTP response.
        public let body: String?

        public init(log: String? = nil, headers: [String: String]? = nil, multiValueHeaders: [String: [String]]? = nil, status: Int32? = nil, latency: Int64? = nil, body: String? = nil) {
            self.log = log
            self.headers = headers
            self.multiValueHeaders = multiValueHeaders
            self.status = status
            self.latency = latency
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case log = "log"
            case headers = "headers"
            case multiValueHeaders = "multiValueHeaders"
            case status = "status"
            case latency = "latency"
            case body = "body"
        }
    }

    public struct GetVpcLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct DeleteModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the model to delete.
        public let modelName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(modelName: String, restApiId: String) {
            self.modelName = modelName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "model_name"
            case restApiId = "restapi_id"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(restApiId: String, authorizerId: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.authorizerId = authorizerId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case authorizerId = "authorizer_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct CreateRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "minimumCompressionSize", required: false, type: .integer), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "binaryMediaTypes", required: false, type: .list), 
            AWSShapeMember(label: "apiKeySource", required: false, type: .enum), 
            AWSShapeMember(label: "cloneFrom", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        public let minimumCompressionSize: Int32?
        /// The description of the RestApi.
        public let description: String?
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public let binaryMediaTypes: [String]?
        /// The source of the API key for metering requests according to a usage plan. Valid values are: HEADER to read the API key from the X-API-Key header of a request. AUTHORIZER to read the API key from the UsageIdentifierKey from a custom authorizer. 
        public let apiKeySource: ApiKeySourceType?
        /// The ID of the RestApi that you want to clone from.
        public let cloneFrom: String?
        /// A version identifier for the API.
        public let version: String?
        /// A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        public let policy: String?
        /// The endpoint configuration of this RestApi showing the endpoint types of the API. 
        public let endpointConfiguration: EndpointConfiguration?
        /// [Required] The name of the RestApi.
        public let name: String

        public init(minimumCompressionSize: Int32? = nil, description: String? = nil, binaryMediaTypes: [String]? = nil, apiKeySource: ApiKeySourceType? = nil, cloneFrom: String? = nil, version: String? = nil, policy: String? = nil, endpointConfiguration: EndpointConfiguration? = nil, name: String) {
            self.minimumCompressionSize = minimumCompressionSize
            self.description = description
            self.binaryMediaTypes = binaryMediaTypes
            self.apiKeySource = apiKeySource
            self.cloneFrom = cloneFrom
            self.version = version
            self.policy = policy
            self.endpointConfiguration = endpointConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case minimumCompressionSize = "minimumCompressionSize"
            case description = "description"
            case binaryMediaTypes = "binaryMediaTypes"
            case apiKeySource = "apiKeySource"
            case cloneFrom = "cloneFrom"
            case version = "version"
            case policy = "policy"
            case endpointConfiguration = "endpointConfiguration"
            case name = "name"
        }
    }

    public struct UpdateUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The Id of the to-be-updated usage plan.
        public let usagePlanId: String

        public init(patchOperations: [PatchOperation]? = nil, usagePlanId: String) {
            self.patchOperations = patchOperations
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case usagePlanId = "usageplanId"
        }
    }

    public struct GetSdkTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
        }
    }

    public struct UpdateMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String

        public init(restApiId: String, resourceId: String, patchOperations: [PatchOperation]? = nil, httpMethod: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
            self.patchOperations = patchOperations
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
            case patchOperations = "patchOperations"
            case httpMethod = "http_method"
        }
    }

    public struct GetModelTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the model for which to generate a template.
        public let modelName: String

        public init(restApiId: String, modelName: String) {
            self.restApiId = restApiId
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case modelName = "model_name"
        }
    }

    public struct SdkConfigurationProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "friendlyName", required: false, type: .string), 
            AWSShapeMember(label: "required", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "defaultValue", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The user-friendly name of an SdkType configuration property.
        public let friendlyName: String?
        /// A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (true) or not (false).
        public let required: Bool?
        /// The description of an SdkType configuration property.
        public let description: String?
        /// The default value of an SdkType configuration property.
        public let defaultValue: String?
        /// The name of a an SdkType configuration property.
        public let name: String?

        public init(friendlyName: String? = nil, required: Bool? = nil, description: String? = nil, defaultValue: String? = nil, name: String? = nil) {
            self.friendlyName = friendlyName
            self.required = required
            self.description = description
            self.defaultValue = defaultValue
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case friendlyName = "friendlyName"
            case required = "required"
            case description = "description"
            case defaultValue = "defaultValue"
            case name = "name"
        }
    }

    public struct Authorizer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authType", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "authorizerCredentials", required: false, type: .string), 
            AWSShapeMember(label: "authorizerUri", required: false, type: .string), 
            AWSShapeMember(label: "identityValidationExpression", required: false, type: .string), 
            AWSShapeMember(label: "identitySource", required: false, type: .string), 
            AWSShapeMember(label: "providerARNs", required: false, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "authorizerResultTtlInSeconds", required: false, type: .integer)
        ]
        /// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        public let authType: String?
        /// [Required] The name of the authorizer.
        public let name: String?
        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        public let authorizerCredentials: String?
        /// Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
        public let authorizerUri: String?
        /// A validation expression for the incoming identity token. For TOKEN authorizers, this value is a regular expression. API Gateway will match the aud field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// The identity source for which authorization is requested. For a TOKEN or COGNITO_USER_POOLS authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is Auth, the header mapping expression is method.request.header.Auth.For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
        public let identitySource: String?
        /// A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. For a TOKEN or REQUEST authorizer, this is not defined. 
        public let providerARNs: [String]?
        /// The identifier for the authorizer resource.
        public let id: String?
        /// The authorizer type. Valid values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, and COGNITO_USER_POOLS for using an Amazon Cognito user pool.
        public let `type`: AuthorizerType?
        /// The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
        public let authorizerResultTtlInSeconds: Int32?

        public init(authType: String? = nil, name: String? = nil, authorizerCredentials: String? = nil, authorizerUri: String? = nil, identityValidationExpression: String? = nil, identitySource: String? = nil, providerARNs: [String]? = nil, id: String? = nil, type: AuthorizerType? = nil, authorizerResultTtlInSeconds: Int32? = nil) {
            self.authType = authType
            self.name = name
            self.authorizerCredentials = authorizerCredentials
            self.authorizerUri = authorizerUri
            self.identityValidationExpression = identityValidationExpression
            self.identitySource = identitySource
            self.providerARNs = providerARNs
            self.id = id
            self.`type` = `type`
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case authType = "authType"
            case name = "name"
            case authorizerCredentials = "authorizerCredentials"
            case authorizerUri = "authorizerUri"
            case identityValidationExpression = "identityValidationExpression"
            case identitySource = "identitySource"
            case providerARNs = "providerARNs"
            case id = "id"
            case `type` = "type"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
        }
    }

    public enum EndpointType: String, CustomStringConvertible, Codable {
        case regional = "REGIONAL"
        case edge = "EDGE"
        case `private` = "PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The status code identifier for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String

        public init(statusCode: String, httpMethod: String, restApiId: String, resourceId: String) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct CreateBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", required: true, type: .string), 
            AWSShapeMember(label: "stage", required: false, type: .string), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "basePath", required: false, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The name of the API's stage that you want to use for this mapping. Leave this blank if you do not want callers to explicitly specify the stage name after any base path name.
        public let stage: String?
        /// [Required] The domain name of the BasePathMapping resource to create.
        public let domainName: String
        /// The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify a base path name after the domain name.
        public let basePath: String?

        public init(restApiId: String, stage: String? = nil, domainName: String, basePath: String? = nil) {
            self.restApiId = restApiId
            self.stage = stage
            self.domainName = domainName
            self.basePath = basePath
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restApiId"
            case stage = "stage"
            case domainName = "domain_name"
            case basePath = "basePath"
        }
    }

    public struct MethodSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataTraceEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "throttlingBurstLimit", required: false, type: .integer), 
            AWSShapeMember(label: "metricsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "requireAuthorizationForCacheControl", required: false, type: .boolean), 
            AWSShapeMember(label: "throttlingRateLimit", required: false, type: .double), 
            AWSShapeMember(label: "cacheDataEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "unauthorizedCacheControlHeaderStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "cacheTtlInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "loggingLevel", required: false, type: .string), 
            AWSShapeMember(label: "cachingEnabled", required: false, type: .boolean)
        ]
        /// Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/dataTrace, and the value is a Boolean.
        public let dataTraceEnabled: Bool?
        /// Specifies the throttling burst limit. The PATCH path for this setting is /{method_setting_key}/throttling/burstLimit, and the value is an integer.
        public let throttlingBurstLimit: Int32?
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is /{method_setting_key}/metrics/enabled, and the value is a Boolean.
        public let metricsEnabled: Bool?
        /// Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is /{method_setting_key}/caching/requireAuthorizationForCacheControl, and the value is a Boolean.
        public let requireAuthorizationForCacheControl: Bool?
        /// Specifies the throttling rate limit. The PATCH path for this setting is /{method_setting_key}/throttling/rateLimit, and the value is a double.
        public let throttlingRateLimit: Double?
        /// Specifies whether the cached responses are encrypted. The PATCH path for this setting is /{method_setting_key}/caching/dataEncrypted, and the value is a Boolean.
        public let cacheDataEncrypted: Bool?
        /// Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is /{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy, and the available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
        public let unauthorizedCacheControlHeaderStrategy: UnauthorizedCacheControlHeaderStrategy?
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is /{method_setting_key}/caching/ttlInSeconds, and the value is an integer.
        public let cacheTtlInSeconds: Int32?
        /// Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/loglevel, and the available levels are OFF, ERROR, and INFO.
        public let loggingLevel: String?
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is /{method_setting_key}/caching/enabled, and the value is a Boolean.
        public let cachingEnabled: Bool?

        public init(dataTraceEnabled: Bool? = nil, throttlingBurstLimit: Int32? = nil, metricsEnabled: Bool? = nil, requireAuthorizationForCacheControl: Bool? = nil, throttlingRateLimit: Double? = nil, cacheDataEncrypted: Bool? = nil, unauthorizedCacheControlHeaderStrategy: UnauthorizedCacheControlHeaderStrategy? = nil, cacheTtlInSeconds: Int32? = nil, loggingLevel: String? = nil, cachingEnabled: Bool? = nil) {
            self.dataTraceEnabled = dataTraceEnabled
            self.throttlingBurstLimit = throttlingBurstLimit
            self.metricsEnabled = metricsEnabled
            self.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl
            self.throttlingRateLimit = throttlingRateLimit
            self.cacheDataEncrypted = cacheDataEncrypted
            self.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy
            self.cacheTtlInSeconds = cacheTtlInSeconds
            self.loggingLevel = loggingLevel
            self.cachingEnabled = cachingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case dataTraceEnabled = "dataTraceEnabled"
            case throttlingBurstLimit = "throttlingBurstLimit"
            case metricsEnabled = "metricsEnabled"
            case requireAuthorizationForCacheControl = "requireAuthorizationForCacheControl"
            case throttlingRateLimit = "throttlingRateLimit"
            case cacheDataEncrypted = "cacheDataEncrypted"
            case unauthorizedCacheControlHeaderStrategy = "unauthorizedCacheControlHeaderStrategy"
            case cacheTtlInSeconds = "cacheTtlInSeconds"
            case loggingLevel = "loggingLevel"
            case cachingEnabled = "cachingEnabled"
        }
    }

    public struct DocumentationPartLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "method", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]
        /// The HTTP verb of a method. It is a valid field for the API entity types of METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's method attribute must match that of the parent entity exactly.
        public let method: String?
        /// The URL path of the target. It is a valid field for the API entity types of RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is / for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other location attributes, the child entity's path attribute must match that of the parent entity as a prefix.
        public let path: String?
        /// The HTTP status code of a response. It is a valid field for the API entity types of RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's statusCode attribute must match that of the parent entity exactly.
        public let statusCode: String?
        /// The name of the targeted API entity. It is a valid and required field for the API entity types of AUTHORIZER, MODEL, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY and RESPONSE_HEADER. It is an invalid field for any other entity type.
        public let name: String?
        /// [Required] The type of API entity to which the documentation content applies. Valid values are API, AUTHORIZER, MODEL, RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. Content inheritance does not apply to any entity of the API, AUTHORIZER, METHOD, MODEL, REQUEST_BODY, or RESOURCE type.
        public let `type`: DocumentationPartType

        public init(method: String? = nil, path: String? = nil, statusCode: String? = nil, name: String? = nil, type: DocumentationPartType) {
            self.method = method
            self.path = path
            self.statusCode = statusCode
            self.name = name
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case method = "method"
            case path = "path"
            case statusCode = "statusCode"
            case name = "name"
            case `type` = "type"
        }
    }

    public struct GetDocumentationVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(restApiId: String, position: String? = nil, limit: Int32? = nil) {
            self.restApiId = restApiId
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case position = "position"
            case limit = "limit"
        }
    }

    public struct DeleteDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the to-be-deleted documentation part.
        public let documentationPartId: String

        public init(restApiId: String, documentationPartId: String) {
            self.restApiId = restApiId
            self.documentationPartId = documentationPartId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case documentationPartId = "part_id"
        }
    }

    public struct CreateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "pathPart", required: true, type: .string), 
            AWSShapeMember(label: "parentId", location: .uri(locationName: "parent_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The last path segment for this resource.
        public let pathPart: String
        /// [Required] The parent resource's identifier.
        public let parentId: String

        public init(restApiId: String, pathPart: String, parentId: String) {
            self.restApiId = restApiId
            self.pathPart = pathPart
            self.parentId = parentId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case pathPart = "pathPart"
            case parentId = "parent_id"
        }
    }

    public struct GetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(limit: Int32? = nil, position: String? = nil, restApiId: String) {
            self.limit = limit
            self.position = position
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
            case restApiId = "restapi_id"
        }
    }

    public struct SdkTypes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [SdkType]?

        public init(position: String? = nil, items: [SdkType]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiSummary", required: false, type: .map), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string)
        ]
        /// A summary of the RestApi at the date and time that the deployment resource was created.
        public let apiSummary: [String: [String: MethodSnapshot]]?
        /// The date and time that the deployment resource was created.
        public let createdDate: TimeStamp?
        /// The description for the deployment resource.
        public let description: String?
        /// The identifier for the deployment resource.
        public let id: String?

        public init(apiSummary: [String: [String: MethodSnapshot]]? = nil, createdDate: TimeStamp? = nil, description: String? = nil, id: String? = nil) {
            self.apiSummary = apiSummary
            self.createdDate = createdDate
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case apiSummary = "apiSummary"
            case createdDate = "createdDate"
            case description = "description"
            case id = "id"
        }
    }

    public struct SdkResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "body", required: false, type: .blob)
        ]
        /// The content-disposition header value in the HTTP response.
        public let contentDisposition: String?
        /// The content-type header value in the HTTP response.
        public let contentType: String?
        /// The binary blob response to GetSdk, which contains the generated SDK.
        public let body: Data?

        public init(contentDisposition: String? = nil, contentType: String? = nil, body: Data? = nil) {
            self.contentDisposition = contentDisposition
            self.contentType = contentType
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case contentDisposition = "Content-Disposition"
            case contentType = "Content-Type"
            case body = "body"
        }
    }

    public struct ApiKeyIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ids", required: false, type: .list), 
            AWSShapeMember(label: "warnings", required: false, type: .list)
        ]
        /// A list of all the ApiKey identifiers.
        public let ids: [String]?
        /// A list of warning messages.
        public let warnings: [String]?

        public init(ids: [String]? = nil, warnings: [String]? = nil) {
            self.ids = ids
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
            case warnings = "warnings"
        }
    }

    public struct SdkType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "friendlyName", required: false, type: .string), 
            AWSShapeMember(label: "configurationProperties", required: false, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The user-friendly name of an SdkType instance.
        public let friendlyName: String?
        /// A list of configuration properties of an SdkType.
        public let configurationProperties: [SdkConfigurationProperty]?
        /// The identifier of an SdkType instance.
        public let id: String?
        /// The description of an SdkType.
        public let description: String?

        public init(friendlyName: String? = nil, configurationProperties: [SdkConfigurationProperty]? = nil, id: String? = nil, description: String? = nil) {
            self.friendlyName = friendlyName
            self.configurationProperties = configurationProperties
            self.id = id
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case friendlyName = "friendlyName"
            case configurationProperties = "configurationProperties"
            case id = "id"
            case description = "description"
        }
    }

    public struct GetDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The version identifier of the to-be-retrieved documentation snapshot.
        public let documentationVersion: String

        public init(restApiId: String, documentationVersion: String) {
            self.restApiId = restApiId
            self.documentationVersion = documentationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case documentationVersion = "doc_version"
        }
    }

    public struct UpdateRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The identifier of RequestValidator to be updated.
        public let requestValidatorId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(patchOperations: [PatchOperation]? = nil, requestValidatorId: String, restApiId: String) {
            self.patchOperations = patchOperations
            self.requestValidatorId = requestValidatorId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case requestValidatorId = "requestvalidator_id"
            case restApiId = "restapi_id"
        }
    }

    public struct GetStagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", location: .querystring(locationName: "deploymentId"), required: false, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The stages' deployment identifiers.
        public let deploymentId: String?

        public init(restApiId: String, deploymentId: String? = nil) {
            self.restApiId = restApiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case deploymentId = "deploymentId"
        }
    }

    public struct DeploymentCanarySettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "percentTraffic", required: false, type: .double), 
            AWSShapeMember(label: "useStageCache", required: false, type: .boolean), 
            AWSShapeMember(label: "stageVariableOverrides", required: false, type: .map)
        ]
        /// The percentage (0.0-100.0) of traffic routed to the canary deployment.
        public let percentTraffic: Double?
        /// A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
        public let useStageCache: Bool?
        /// A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
        public let stageVariableOverrides: [String: String]?

        public init(percentTraffic: Double? = nil, useStageCache: Bool? = nil, stageVariableOverrides: [String: String]? = nil) {
            self.percentTraffic = percentTraffic
            self.useStageCache = useStageCache
            self.stageVariableOverrides = stageVariableOverrides
        }

        private enum CodingKeys: String, CodingKey {
            case percentTraffic = "percentTraffic"
            case useStageCache = "useStageCache"
            case stageVariableOverrides = "stageVariableOverrides"
        }
    }

    public struct DocumentationParts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [DocumentationPart]?

        public init(position: String? = nil, items: [DocumentationPart]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct Authorizers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Authorizer]?
        public let position: String?

        public init(items: [Authorizer]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct ApiStage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiId", required: false, type: .string), 
            AWSShapeMember(label: "throttle", required: false, type: .map), 
            AWSShapeMember(label: "stage", required: false, type: .string)
        ]
        /// API Id of the associated API stage in a usage plan.
        public let apiId: String?
        /// Map containing method level throttling information for API stage in a usage plan.
        public let throttle: [String: ThrottleSettings]?
        /// API stage name of the associated API stage in a usage plan.
        public let stage: String?

        public init(apiId: String? = nil, throttle: [String: ThrottleSettings]? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.throttle = throttle
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case throttle = "throttle"
            case stage = "stage"
        }
    }

    public struct UpdateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] Specifies an update integration response request's status code.
        public let statusCode: String
        /// [Required] Specifies an update integration response request's resource identifier.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies an update integration response request's HTTP method.
        public let httpMethod: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(statusCode: String, resourceId: String, restApiId: String, httpMethod: String, patchOperations: [PatchOperation]? = nil) {
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case patchOperations = "patchOperations"
        }
    }

    public struct UpdateResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The identifier of the Resource resource.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(resourceId: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.resourceId = resourceId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct GetDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The name of the DomainName resource.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
        }
    }

    public struct FlushStageCacheRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the stage to flush its cache.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(stageName: String, restApiId: String) {
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stage_name"
            case restApiId = "restapi_id"
        }
    }

    public struct Account: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "throttleSettings", required: false, type: .structure), 
            AWSShapeMember(label: "cloudwatchRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "features", required: false, type: .list), 
            AWSShapeMember(label: "apiKeyVersion", required: false, type: .string)
        ]
        /// Specifies the API request limits configured for the current Account.
        public let throttleSettings: ThrottleSettings?
        /// The ARN of an Amazon CloudWatch role for the current Account. 
        public let cloudwatchRoleArn: String?
        /// A list of features supported for the account. When usage plans are enabled, the features list will include an entry of "UsagePlans".
        public let features: [String]?
        /// The version of the API keys used for the account.
        public let apiKeyVersion: String?

        public init(throttleSettings: ThrottleSettings? = nil, cloudwatchRoleArn: String? = nil, features: [String]? = nil, apiKeyVersion: String? = nil) {
            self.throttleSettings = throttleSettings
            self.cloudwatchRoleArn = cloudwatchRoleArn
            self.features = features
            self.apiKeyVersion = apiKeyVersion
        }

        private enum CodingKeys: String, CodingKey {
            case throttleSettings = "throttleSettings"
            case cloudwatchRoleArn = "cloudwatchRoleArn"
            case features = "features"
            case apiKeyVersion = "apiKeyVersion"
        }
    }

    public struct GetGatewayResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.
        public let limit: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.
        public let position: String?

        public init(limit: Int32? = nil, restApiId: String, position: String? = nil) {
            self.limit = limit
            self.restApiId = restApiId
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case restApiId = "restapi_id"
            case position = "position"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "stageDescription", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "stageName", required: false, type: .string)
        ]
        /// The input configuration for the canary deployment when the deployment is a canary release deployment. 
        public let canarySettings: DeploymentCanarySettings?
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// Specifies the cache cluster size for the Stage resource specified in the input, if a cache cluster is enabled.
        public let cacheClusterSize: CacheClusterSize?
        /// The description for the Deployment resource to create.
        public let description: String?
        /// The description of the Stage resource for the Deployment resource to create.
        public let stageDescription: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// Enables a cache cluster for the Stage resource specified in the input.
        public let cacheClusterEnabled: Bool?
        /// The name of the Stage resource for the Deployment resource to create.
        public let stageName: String?

        public init(canarySettings: DeploymentCanarySettings? = nil, tracingEnabled: Bool? = nil, variables: [String: String]? = nil, cacheClusterSize: CacheClusterSize? = nil, description: String? = nil, stageDescription: String? = nil, restApiId: String, cacheClusterEnabled: Bool? = nil, stageName: String? = nil) {
            self.canarySettings = canarySettings
            self.tracingEnabled = tracingEnabled
            self.variables = variables
            self.cacheClusterSize = cacheClusterSize
            self.description = description
            self.stageDescription = stageDescription
            self.restApiId = restApiId
            self.cacheClusterEnabled = cacheClusterEnabled
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case canarySettings = "canarySettings"
            case tracingEnabled = "tracingEnabled"
            case variables = "variables"
            case cacheClusterSize = "cacheClusterSize"
            case description = "description"
            case stageDescription = "stageDescription"
            case restApiId = "restapi_id"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case stageName = "stageName"
        }
    }

    public struct GetIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a get integration response request's status code.
        public let statusCode: String
        /// [Required] Specifies a get integration response request's HTTP method.
        public let httpMethod: String
        /// [Required] Specifies a get integration response request's resource identifier.
        public let resourceId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(statusCode: String, httpMethod: String, resourceId: String, restApiId: String) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case restApiId = "restapi_id"
        }
    }

    public struct Tags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// The collection of tags. Each tag element is associated with a given resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct CreateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "certificatePrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "certificateBody", required: false, type: .string), 
            AWSShapeMember(label: "regionalCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateChain", required: false, type: .string), 
            AWSShapeMember(label: "regionalCertificateName", required: false, type: .string), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure)
        ]
        /// [Required] The name of the DomainName resource.
        public let domainName: String
        /// The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
        public let certificateName: String?
        /// [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.
        public let certificatePrivateKey: String?
        /// [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.
        public let certificateBody: String?
        /// The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let regionalCertificateArn: String?
        /// [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
        public let certificateChain: String?
        /// The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
        public let regionalCertificateName: String?
        /// The endpoint configuration of this DomainName showing the endpoint types of the domain name. 
        public let endpointConfiguration: EndpointConfiguration?

        public init(domainName: String, certificateArn: String? = nil, certificateName: String? = nil, certificatePrivateKey: String? = nil, certificateBody: String? = nil, regionalCertificateArn: String? = nil, certificateChain: String? = nil, regionalCertificateName: String? = nil, endpointConfiguration: EndpointConfiguration? = nil) {
            self.domainName = domainName
            self.certificateArn = certificateArn
            self.certificateName = certificateName
            self.certificatePrivateKey = certificatePrivateKey
            self.certificateBody = certificateBody
            self.regionalCertificateArn = regionalCertificateArn
            self.certificateChain = certificateChain
            self.regionalCertificateName = regionalCertificateName
            self.endpointConfiguration = endpointConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case certificateArn = "certificateArn"
            case certificateName = "certificateName"
            case certificatePrivateKey = "certificatePrivateKey"
            case certificateBody = "certificateBody"
            case regionalCertificateArn = "regionalCertificateArn"
            case certificateChain = "certificateChain"
            case regionalCertificateName = "regionalCertificateName"
            case endpointConfiguration = "endpointConfiguration"
        }
    }

    public struct UpdateRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct StageKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", required: false, type: .string)
        ]
        /// The stage name associated with the stage key.
        public let stageName: String?
        /// The string identifier of the associated RestApi.
        public let restApiId: String?

        public init(stageName: String? = nil, restApiId: String? = nil) {
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stageName"
            case restApiId = "restApiId"
        }
    }

    public struct RestApi: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "warnings", required: false, type: .list), 
            AWSShapeMember(label: "apiKeySource", required: false, type: .enum), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "binaryMediaTypes", required: false, type: .list), 
            AWSShapeMember(label: "minimumCompressionSize", required: false, type: .integer)
        ]
        /// The endpoint configuration of this RestApi showing the endpoint types of the API. 
        public let endpointConfiguration: EndpointConfiguration?
        /// The warning messages reported when failonwarnings is turned on during API import.
        public let warnings: [String]?
        /// The source of the API key for metering requests according to a usage plan. Valid values are: HEADER to read the API key from the X-API-Key header of a request. AUTHORIZER to read the API key from the UsageIdentifierKey from a custom authorizer. 
        public let apiKeySource: ApiKeySourceType?
        /// The timestamp when the API was created.
        public let createdDate: TimeStamp?
        /// The API's name.
        public let name: String?
        /// A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
        public let policy: String?
        /// The API's identifier. This identifier is unique across all of your APIs in API Gateway.
        public let id: String?
        /// The API's description.
        public let description: String?
        /// A version identifier for the API.
        public let version: String?
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public let binaryMediaTypes: [String]?
        /// A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        public let minimumCompressionSize: Int32?

        public init(endpointConfiguration: EndpointConfiguration? = nil, warnings: [String]? = nil, apiKeySource: ApiKeySourceType? = nil, createdDate: TimeStamp? = nil, name: String? = nil, policy: String? = nil, id: String? = nil, description: String? = nil, version: String? = nil, binaryMediaTypes: [String]? = nil, minimumCompressionSize: Int32? = nil) {
            self.endpointConfiguration = endpointConfiguration
            self.warnings = warnings
            self.apiKeySource = apiKeySource
            self.createdDate = createdDate
            self.name = name
            self.policy = policy
            self.id = id
            self.description = description
            self.version = version
            self.binaryMediaTypes = binaryMediaTypes
            self.minimumCompressionSize = minimumCompressionSize
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfiguration = "endpointConfiguration"
            case warnings = "warnings"
            case apiKeySource = "apiKeySource"
            case createdDate = "createdDate"
            case name = "name"
            case policy = "policy"
            case id = "id"
            case description = "description"
            case version = "version"
            case binaryMediaTypes = "binaryMediaTypes"
            case minimumCompressionSize = "minimumCompressionSize"
        }
    }

    public struct UsagePlan: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiStages", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "throttle", required: false, type: .structure), 
            AWSShapeMember(label: "quota", required: false, type: .structure), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "productCode", required: false, type: .string)
        ]
        /// The associated API stages of a usage plan.
        public let apiStages: [ApiStage]?
        /// The name of a usage plan.
        public let name: String?
        /// The request throttle limits of a usage plan.
        public let throttle: ThrottleSettings?
        /// The maximum number of permitted requests per a given unit time interval.
        public let quota: QuotaSettings?
        /// The identifier of a UsagePlan resource.
        public let id: String?
        /// The description of a usage plan.
        public let description: String?
        /// The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
        public let productCode: String?

        public init(apiStages: [ApiStage]? = nil, name: String? = nil, throttle: ThrottleSettings? = nil, quota: QuotaSettings? = nil, id: String? = nil, description: String? = nil, productCode: String? = nil) {
            self.apiStages = apiStages
            self.name = name
            self.throttle = throttle
            self.quota = quota
            self.id = id
            self.description = description
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case apiStages = "apiStages"
            case name = "name"
            case throttle = "throttle"
            case quota = "quota"
            case id = "id"
            case description = "description"
            case productCode = "productCode"
        }
    }

    public struct Resources: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [Resource]?

        public init(position: String? = nil, items: [Resource]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct GetSdkTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "sdktype_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the queried SdkType instance.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "sdktype_id"
        }
    }

    public struct GenerateClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The description of the ClientCertificate.
        public let description: String?

        public init(description: String? = nil) {
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
        }
    }

    public struct Stages: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        /// The current page of elements from this collection.
        public let item: [Stage]?

        public init(item: [Stage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UpdateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The replacement identifier for the Deployment resource to change information about.
        public let deploymentId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(restApiId: String, deploymentId: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.deploymentId = deploymentId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case deploymentId = "deployment_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct UpdateDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the to-be-updated documentation part.
        public let documentationPartId: String

        public init(patchOperations: [PatchOperation]? = nil, restApiId: String, documentationPartId: String) {
            self.patchOperations = patchOperations
            self.restApiId = restApiId
            self.documentationPartId = documentationPartId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
            case documentationPartId = "part_id"
        }
    }

    public struct GetModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, restApiId: String, position: String? = nil) {
            self.limit = limit
            self.restApiId = restApiId
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case restApiId = "restapi_id"
            case position = "position"
        }
    }

    public struct Stage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "documentationVersion", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "accessLogSettings", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "webAclArn", required: false, type: .string), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "deploymentId", required: false, type: .string), 
            AWSShapeMember(label: "methodSettings", required: false, type: .map), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "cacheClusterStatus", required: false, type: .enum)
        ]
        /// Settings for the canary deployment in this stage.
        public let canarySettings: CanarySettings?
        /// The version of the associated API documentation.
        public let documentationVersion: String?
        /// The size of the cache cluster for the stage, if enabled.
        public let cacheClusterSize: CacheClusterSize?
        /// Settings for logging access in this stage.
        public let accessLogSettings: AccessLogSettings?
        /// The stage's description.
        public let description: String?
        /// The identifier of a client certificate for an API stage.
        public let clientCertificateId: String?
        /// The ARN of the WebAcl associated with the Stage.
        public let webAclArn: String?
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// The timestamp when the stage last updated.
        public let lastUpdatedDate: TimeStamp?
        /// A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway.
        public let stageName: String?
        /// Specifies whether a cache cluster is enabled for the stage.
        public let cacheClusterEnabled: Bool?
        /// The timestamp when the stage was created.
        public let createdDate: TimeStamp?
        /// The identifier of the Deployment that the stage points to.
        public let deploymentId: String?
        /// A map that defines the method settings for a Stage resource. Keys (designated as /{method_setting_key below) are method paths defined as {resource_path}/{http_method} for an individual method override, or /\*/\* for overriding all methods in the stage. 
        public let methodSettings: [String: MethodSetting]?
        /// The collection of tags. Each tag element is associated with a given resource.
        public let tags: [String: String]?
        /// The status of the cache cluster for the stage, if enabled.
        public let cacheClusterStatus: CacheClusterStatus?

        public init(canarySettings: CanarySettings? = nil, documentationVersion: String? = nil, cacheClusterSize: CacheClusterSize? = nil, accessLogSettings: AccessLogSettings? = nil, description: String? = nil, clientCertificateId: String? = nil, webAclArn: String? = nil, tracingEnabled: Bool? = nil, lastUpdatedDate: TimeStamp? = nil, variables: [String: String]? = nil, stageName: String? = nil, cacheClusterEnabled: Bool? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, methodSettings: [String: MethodSetting]? = nil, tags: [String: String]? = nil, cacheClusterStatus: CacheClusterStatus? = nil) {
            self.canarySettings = canarySettings
            self.documentationVersion = documentationVersion
            self.cacheClusterSize = cacheClusterSize
            self.accessLogSettings = accessLogSettings
            self.description = description
            self.clientCertificateId = clientCertificateId
            self.webAclArn = webAclArn
            self.tracingEnabled = tracingEnabled
            self.lastUpdatedDate = lastUpdatedDate
            self.variables = variables
            self.stageName = stageName
            self.cacheClusterEnabled = cacheClusterEnabled
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.methodSettings = methodSettings
            self.tags = tags
            self.cacheClusterStatus = cacheClusterStatus
        }

        private enum CodingKeys: String, CodingKey {
            case canarySettings = "canarySettings"
            case documentationVersion = "documentationVersion"
            case cacheClusterSize = "cacheClusterSize"
            case accessLogSettings = "accessLogSettings"
            case description = "description"
            case clientCertificateId = "clientCertificateId"
            case webAclArn = "webAclArn"
            case tracingEnabled = "tracingEnabled"
            case lastUpdatedDate = "lastUpdatedDate"
            case variables = "variables"
            case stageName = "stageName"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case methodSettings = "methodSettings"
            case tags = "tags"
            case cacheClusterStatus = "cacheClusterStatus"
        }
    }

    public struct GetVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpclink_id"
        }
    }

    public enum DocumentationPartType: String, CustomStringConvertible, Codable {
        case api = "API"
        case authorizer = "AUTHORIZER"
        case model = "MODEL"
        case resource = "RESOURCE"
        case method = "METHOD"
        case pathParameter = "PATH_PARAMETER"
        case queryParameter = "QUERY_PARAMETER"
        case requestHeader = "REQUEST_HEADER"
        case requestBody = "REQUEST_BODY"
        case response = "RESPONSE"
        case responseHeader = "RESPONSE_HEADER"
        case responseBody = "RESPONSE_BODY"
        public var description: String { return self.rawValue }
    }

    public struct EndpointConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "types", required: false, type: .list)
        ]
        /// A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is "EDGE". For a regional API and its custom domain name, the endpoint type is REGIONAL. For a private API, the endpoint type is PRIVATE.
        public let types: [EndpointType]?

        public init(types: [EndpointType]? = nil) {
            self.types = types
        }

        private enum CodingKeys: String, CodingKey {
            case types = "types"
        }
    }

    public struct DeleteStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the Stage resource to delete.
        public let stageName: String

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case stageName = "stage_name"
        }
    }

    public struct GetUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string)
        ]
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String
        /// [Required] The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let keyId: String

        public init(usagePlanId: String, keyId: String) {
            self.usagePlanId = usagePlanId
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
            case keyId = "keyId"
        }
    }

    public struct GetMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// [Required] Specifies the method request's HTTP method type.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(resourceId: String, httpMethod: String, restApiId: String) {
            self.resourceId = resourceId
            self.httpMethod = httpMethod
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
        }
    }

    public struct CreateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "targetArns", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The description of the VPC link.
        public let description: String?
        /// [Required] The ARNs of network load balancers of the VPC targeted by the VPC link. The network load balancers must be owned by the same AWS account of the API owner.
        public let targetArns: [String]
        /// [Required] The name used to label and identify the VPC link.
        public let name: String

        public init(description: String? = nil, targetArns: [String], name: String) {
            self.description = description
            self.targetArns = targetArns
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case targetArns = "targetArns"
            case name = "name"
        }
    }

    public struct DeleteRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the RequestValidator to be deleted.
        public let requestValidatorId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(requestValidatorId: String, restApiId: String) {
            self.requestValidatorId = requestValidatorId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case requestValidatorId = "requestvalidator_id"
            case restApiId = "restapi_id"
        }
    }

    public struct DeleteDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The version identifier of a to-be-deleted documentation snapshot.
        public let documentationVersion: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(documentationVersion: String, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationVersion = "doc_version"
            case restApiId = "restapi_id"
        }
    }

    public struct IntegrationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "selectionPattern", required: false, type: .string), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum)
        ]
        /// Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public let statusCode: String?
        /// Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
        public let responseTemplates: [String: String]?
        /// Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the .+ regex to match error response. However, make sure that the error response does not contain any newline (\n) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
        public let selectionPattern: String?
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.
        public let responseParameters: [String: String]?
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public let contentHandling: ContentHandlingStrategy?

        public init(statusCode: String? = nil, responseTemplates: [String: String]? = nil, selectionPattern: String? = nil, responseParameters: [String: String]? = nil, contentHandling: ContentHandlingStrategy? = nil) {
            self.statusCode = statusCode
            self.responseTemplates = responseTemplates
            self.selectionPattern = selectionPattern
            self.responseParameters = responseParameters
            self.contentHandling = contentHandling
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case responseTemplates = "responseTemplates"
            case selectionPattern = "selectionPattern"
            case responseParameters = "responseParameters"
            case contentHandling = "contentHandling"
        }
    }

    public struct UpdateClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be updated.
        public let clientCertificateId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(clientCertificateId: String, patchOperations: [PatchOperation]? = nil) {
            self.clientCertificateId = clientCertificateId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct GetRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
        }
    }

    public struct ApiKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "warnings", required: false, type: .list)
        ]
        /// The current page of elements from this collection.
        public let items: [ApiKey]?
        public let position: String?
        /// A list of warning messages logged during the import of API keys when the failOnWarnings option is set to true.
        public let warnings: [String]?

        public init(items: [ApiKey]? = nil, position: String? = nil, warnings: [String]? = nil) {
            self.items = items
            self.position = position
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
            case warnings = "warnings"
        }
    }

    public struct CreateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "generateDistinctId", required: false, type: .boolean), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "stageKeys", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "customerId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// Specifies whether (true) or not (false) the key identifier is distinct from the created API key value.
        public let generateDistinctId: Bool?
        /// Specifies a value of the API key.
        public let value: String?
        /// DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
        public let stageKeys: [StageKey]?
        /// Specifies whether the ApiKey can be used by callers.
        public let enabled: Bool?
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public let customerId: String?
        /// The name of the ApiKey.
        public let name: String?
        /// The description of the ApiKey.
        public let description: String?

        public init(generateDistinctId: Bool? = nil, value: String? = nil, stageKeys: [StageKey]? = nil, enabled: Bool? = nil, customerId: String? = nil, name: String? = nil, description: String? = nil) {
            self.generateDistinctId = generateDistinctId
            self.value = value
            self.stageKeys = stageKeys
            self.enabled = enabled
            self.customerId = customerId
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case generateDistinctId = "generateDistinctId"
            case value = "value"
            case stageKeys = "stageKeys"
            case enabled = "enabled"
            case customerId = "customerId"
            case name = "name"
            case description = "description"
        }
    }

    public struct GetTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String
        /// (Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// (Not currently supported) The current pagination position in the paged result set.
        public let position: String?

        public init(resourceArn: String, limit: Int32? = nil, position: String? = nil) {
            self.resourceArn = resourceArn
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource_arn"
            case limit = "limit"
            case position = "position"
        }
    }

    public struct TestInvokeMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "pathWithQueryString", required: false, type: .string), 
            AWSShapeMember(label: "stageVariables", required: false, type: .map), 
            AWSShapeMember(label: "body", required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// A key-value map of headers to simulate an incoming invocation request.
        public let headers: [String: String]?
        /// The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public let pathWithQueryString: String?
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public let stageVariables: [String: String]?
        /// The simulated request body of an incoming invocation request.
        public let body: String?
        /// [Required] Specifies a test invoke method request's HTTP method.
        public let httpMethod: String
        /// [Required] Specifies a test invoke method request's resource ID.
        public let resourceId: String
        /// The headers as a map from string to list of values to simulate an incoming invocation request.
        public let multiValueHeaders: [String: [String]]?
        /// A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
        public let clientCertificateId: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(headers: [String: String]? = nil, pathWithQueryString: String? = nil, stageVariables: [String: String]? = nil, body: String? = nil, httpMethod: String, resourceId: String, multiValueHeaders: [String: [String]]? = nil, clientCertificateId: String? = nil, restApiId: String) {
            self.headers = headers
            self.pathWithQueryString = pathWithQueryString
            self.stageVariables = stageVariables
            self.body = body
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.multiValueHeaders = multiValueHeaders
            self.clientCertificateId = clientCertificateId
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case headers = "headers"
            case pathWithQueryString = "pathWithQueryString"
            case stageVariables = "stageVariables"
            case body = "body"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case multiValueHeaders = "multiValueHeaders"
            case clientCertificateId = "clientCertificateId"
            case restApiId = "restapi_id"
        }
    }

    public struct PutIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "integrationHttpMethod", location: .body(locationName: "httpMethod"), required: false, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "cacheKeyParameters", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "passthroughBehavior", required: false, type: .string), 
            AWSShapeMember(label: "timeoutInMillis", required: false, type: .integer), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "uri", required: false, type: .string), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "connectionType", required: false, type: .enum), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "requestTemplates", required: false, type: .map), 
            AWSShapeMember(label: "credentials", required: false, type: .string), 
            AWSShapeMember(label: "cacheNamespace", required: false, type: .string)
        ]
        /// [Required] Specifies a put integration input's type.
        public let `type`: IntegrationType
        /// Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.
        public let integrationHttpMethod: String?
        /// [Required] Specifies a put integration request's HTTP method.
        public let httpMethod: String
        /// Specifies a put integration input's cache key parameters.
        public let cacheKeyParameters: [String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The (id) of the VpcLink used for the integration when connectionType=VPC_LINK and undefined, otherwise.
        public let connectionId: String?
        /// Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.   WHEN_NO_MATCH passes the request body for unmapped content types through to the integration back end without transformation. NEVER rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response. WHEN_NO_TEMPLATES allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response. 
        public let passthroughBehavior: String?
        /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
        public let timeoutInMillis: Int32?
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public let requestParameters: [String: String]?
        /// Specifies Uniform Resource Identifier (URI) of the integration endpoint.   For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.    For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key} 
        public let uri: String?
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public let contentHandling: ContentHandlingStrategy?
        /// The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
        public let connectionType: ConnectionType?
        /// [Required] Specifies a put integration request's resource ID.
        public let resourceId: String
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public let requestTemplates: [String: String]?
        /// Specifies whether credentials are required for a put integration.
        public let credentials: String?
        /// Specifies a put integration input's cache namespace.
        public let cacheNamespace: String?

        public init(type: IntegrationType, integrationHttpMethod: String? = nil, httpMethod: String, cacheKeyParameters: [String]? = nil, restApiId: String, connectionId: String? = nil, passthroughBehavior: String? = nil, timeoutInMillis: Int32? = nil, requestParameters: [String: String]? = nil, uri: String? = nil, contentHandling: ContentHandlingStrategy? = nil, connectionType: ConnectionType? = nil, resourceId: String, requestTemplates: [String: String]? = nil, credentials: String? = nil, cacheNamespace: String? = nil) {
            self.`type` = `type`
            self.integrationHttpMethod = integrationHttpMethod
            self.httpMethod = httpMethod
            self.cacheKeyParameters = cacheKeyParameters
            self.restApiId = restApiId
            self.connectionId = connectionId
            self.passthroughBehavior = passthroughBehavior
            self.timeoutInMillis = timeoutInMillis
            self.requestParameters = requestParameters
            self.uri = uri
            self.contentHandling = contentHandling
            self.connectionType = connectionType
            self.resourceId = resourceId
            self.requestTemplates = requestTemplates
            self.credentials = credentials
            self.cacheNamespace = cacheNamespace
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case integrationHttpMethod = "httpMethod"
            case httpMethod = "http_method"
            case cacheKeyParameters = "cacheKeyParameters"
            case restApiId = "restapi_id"
            case connectionId = "connectionId"
            case passthroughBehavior = "passthroughBehavior"
            case timeoutInMillis = "timeoutInMillis"
            case requestParameters = "requestParameters"
            case uri = "uri"
            case contentHandling = "contentHandling"
            case connectionType = "connectionType"
            case resourceId = "resource_id"
            case requestTemplates = "requestTemplates"
            case credentials = "credentials"
            case cacheNamespace = "cacheNamespace"
        }
    }

    public struct GetDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list)
        ]
        /// [Required] The identifier of the Deployment resource to get information about.
        public let deploymentId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this embed parameter value is a list of comma-separated strings, as in GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the "apisummary" string. For example, GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary.
        public let embed: [String]?

        public init(deploymentId: String, restApiId: String, embed: [String]? = nil) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
            self.embed = embed
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "deployment_id"
            case restApiId = "restapi_id"
            case embed = "embed"
        }
    }

    public struct QuotaSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "period", required: false, type: .enum), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "offset", required: false, type: .integer)
        ]
        /// The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
        public let period: QuotaPeriodType?
        /// The maximum number of requests that can be made in a given time period.
        public let limit: Int32?
        /// The number of requests subtracted from the given limit in the initial time period.
        public let offset: Int32?

        public init(period: QuotaPeriodType? = nil, limit: Int32? = nil, offset: Int32? = nil) {
            self.period = period
            self.limit = limit
            self.offset = offset
        }

        private enum CodingKeys: String, CodingKey {
            case period = "period"
            case limit = "limit"
            case offset = "offset"
        }
    }

    public struct CreateDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "location", required: true, type: .structure), 
            AWSShapeMember(label: "properties", required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The location of the targeted API entity of the to-be-created documentation part.
        public let location: DocumentationPartLocation
        /// [Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
        public let properties: String

        public init(restApiId: String, location: DocumentationPartLocation, properties: String) {
            self.restApiId = restApiId
            self.location = location
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case location = "location"
            case properties = "properties"
        }
    }

    public struct AccessLogSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationArn", required: false, type: .string), 
            AWSShapeMember(label: "format", required: false, type: .string)
        ]
        /// The ARN of the CloudWatch Logs log group to receive access logs.
        public let destinationArn: String?
        /// A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.
        public let format: String?

        public init(destinationArn: String? = nil, format: String? = nil) {
            self.destinationArn = destinationArn
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case format = "format"
        }
    }

    public enum AuthorizerType: String, CustomStringConvertible, Codable {
        case token = "TOKEN"
        case request = "REQUEST"
        case cognitoUserPools = "COGNITO_USER_POOLS"
        public var description: String { return self.rawValue }
    }

    public struct DeleteVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpclink_id"
        }
    }

    public struct RequestValidators: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [RequestValidator]?

        public init(position: String? = nil, items: [RequestValidator]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct UpdateAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(patchOperations: [PatchOperation]? = nil) {
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
        }
    }

    public struct ApiKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageKeys", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "customerId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// A list of Stage resources that are associated with the ApiKey resource.
        public let stageKeys: [String]?
        /// Specifies whether the API Key can be used by callers.
        public let enabled: Bool?
        /// The timestamp when the API Key was created.
        public let createdDate: TimeStamp?
        /// The name of the API Key.
        public let name: String?
        /// The value of the API Key.
        public let value: String?
        /// The timestamp when the API Key was last updated.
        public let lastUpdatedDate: TimeStamp?
        /// The identifier of the API Key.
        public let id: String?
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public let customerId: String?
        /// The description of the API Key.
        public let description: String?

        public init(stageKeys: [String]? = nil, enabled: Bool? = nil, createdDate: TimeStamp? = nil, name: String? = nil, value: String? = nil, lastUpdatedDate: TimeStamp? = nil, id: String? = nil, customerId: String? = nil, description: String? = nil) {
            self.stageKeys = stageKeys
            self.enabled = enabled
            self.createdDate = createdDate
            self.name = name
            self.value = value
            self.lastUpdatedDate = lastUpdatedDate
            self.id = id
            self.customerId = customerId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case stageKeys = "stageKeys"
            case enabled = "enabled"
            case createdDate = "createdDate"
            case name = "name"
            case value = "value"
            case lastUpdatedDate = "lastUpdatedDate"
            case id = "id"
            case customerId = "customerId"
            case description = "description"
        }
    }

    public struct GetGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType

        public init(restApiId: String, responseType: GatewayResponseType) {
            self.restApiId = restApiId
            self.responseType = responseType
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case responseType = "response_type"
        }
    }

    public struct RestApis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [RestApi]?
        public let position: String?

        public init(items: [RestApi]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct Template: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The Apache Velocity Template Language (VTL) template content used for the template resource.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct GetModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "flatten", location: .querystring(locationName: "flatten"), required: false, type: .boolean), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// A query parameter of a Boolean value to resolve (true) all external model references and returns a flattened model schema or not (false) The default is false.
        public let flatten: Bool?
        /// [Required] The name of the model as an identifier.
        public let modelName: String
        /// [Required] The RestApi identifier under which the Model exists.
        public let restApiId: String

        public init(flatten: Bool? = nil, modelName: String, restApiId: String) {
            self.flatten = flatten
            self.modelName = modelName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case flatten = "flatten"
            case modelName = "model_name"
            case restApiId = "restapi_id"
        }
    }

    public struct GetUsagePlansRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyId", location: .querystring(locationName: "keyId"), required: false, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The identifier of the API key associated with the usage plans.
        public let keyId: String?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(keyId: String? = nil, position: String? = nil, limit: Int32? = nil) {
            self.keyId = keyId
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "keyId"
            case position = "position"
            case limit = "limit"
        }
    }

    public struct DomainNames: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [DomainName]?
        public let position: String?

        public init(items: [DomainName]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String

        public init(restApiId: String, authorizerId: String) {
            self.restApiId = restApiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case authorizerId = "authorizer_id"
        }
    }

    public struct UpdateBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The base path of the BasePathMapping resource to change.
        public let basePath: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The domain name of the BasePathMapping resource to change.
        public let domainName: String

        public init(basePath: String, patchOperations: [PatchOperation]? = nil, domainName: String) {
            self.basePath = basePath
            self.patchOperations = patchOperations
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case basePath = "base_path"
            case patchOperations = "patchOperations"
            case domainName = "domain_name"
        }
    }

    public enum CacheClusterSize: String, CustomStringConvertible, Codable {
        case cacheClusterSize05 = "0.5"
        case cacheClusterSize16 = "1.6"
        case cacheClusterSize61 = "6.1"
        case cacheClusterSize135 = "13.5"
        case cacheClusterSize284 = "28.4"
        case cacheClusterSize582 = "58.2"
        case cacheClusterSize118 = "118"
        case cacheClusterSize237 = "237"
        public var description: String { return self.rawValue }
    }

    public struct CreateUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyId", required: true, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyType", required: true, type: .string)
        ]
        /// [Required] The identifier of a UsagePlanKey resource for a plan customer.
        public let keyId: String
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String
        /// [Required] The type of a UsagePlanKey resource for a plan customer.
        public let keyType: String

        public init(keyId: String, usagePlanId: String, keyType: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
            self.keyType = keyType
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "keyId"
            case usagePlanId = "usageplanId"
            case keyType = "keyType"
        }
    }

    public struct Method: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "requestModels", required: false, type: .map), 
            AWSShapeMember(label: "methodIntegration", required: false, type: .structure), 
            AWSShapeMember(label: "operationName", required: false, type: .string), 
            AWSShapeMember(label: "authorizationType", required: false, type: .string), 
            AWSShapeMember(label: "requestValidatorId", required: false, type: .string), 
            AWSShapeMember(label: "methodResponses", required: false, type: .map), 
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "httpMethod", required: false, type: .string), 
            AWSShapeMember(label: "authorizerId", required: false, type: .string), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "authorizationScopes", required: false, type: .list)
        ]
        /// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
        public let requestModels: [String: String]?
        /// Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.   Example:  Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T213210Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true } ], "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:responses": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "0cjtch", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestTemplates": { "application/json": "{\n \"a\": \"$input.params('operand1')\",\n \"b\": \"$input.params('operand2')\", \n \"op\": \"$input.params('operator')\" \n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invocations", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.operator": "integration.response.body.op", "method.response.header.operand_2": "integration.response.body.b", "method.response.header.operand_1": "integration.response.body.a" }, "responseTemplates": { "application/json": "#set($res = $input.path('$'))\n{\n \"result\": \"$res.a, $res.b, $res.op => $res.c\",\n \"a\" : \"$res.a\",\n \"b\" : \"$res.b\",\n \"op\" : \"$res.op\",\n \"c\" : \"$res.c\"\n}" }, "selectionPattern": "", "statusCode": "200" } } }    AWS CLI 
        public let methodIntegration: Integration?
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public let operationName: String?
        /// The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String?
        /// The identifier of a RequestValidator for request validation.
        public let requestValidatorId: String?
        /// Gets a method response associated with a given HTTP status code.   The collection of method responses are encapsulated in a key-value map, where the key is a response's HTTP status code and the value is a MethodResponse resource that specifies the response returned to the caller from the back end through the integration response. Example: Get a 200 OK response of a GET method Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T215008Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.operator": false, "method.response.header.operand_2": false, "method.response.header.operand_1": false }, "statusCode": "200" }    AWS CLI 
        public let methodResponses: [String: MethodResponse]?
        /// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
        public let apiKeyRequired: Bool?
        /// The method's HTTP verb.
        public let httpMethod: String?
        /// The identifier of an Authorizer to use on this method. The authorizationType must be CUSTOM.
        public let authorizerId: String?
        /// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
        public let requestParameters: [String: Bool]?
        /// A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public let authorizationScopes: [String]?

        public init(requestModels: [String: String]? = nil, methodIntegration: Integration? = nil, operationName: String? = nil, authorizationType: String? = nil, requestValidatorId: String? = nil, methodResponses: [String: MethodResponse]? = nil, apiKeyRequired: Bool? = nil, httpMethod: String? = nil, authorizerId: String? = nil, requestParameters: [String: Bool]? = nil, authorizationScopes: [String]? = nil) {
            self.requestModels = requestModels
            self.methodIntegration = methodIntegration
            self.operationName = operationName
            self.authorizationType = authorizationType
            self.requestValidatorId = requestValidatorId
            self.methodResponses = methodResponses
            self.apiKeyRequired = apiKeyRequired
            self.httpMethod = httpMethod
            self.authorizerId = authorizerId
            self.requestParameters = requestParameters
            self.authorizationScopes = authorizationScopes
        }

        private enum CodingKeys: String, CodingKey {
            case requestModels = "requestModels"
            case methodIntegration = "methodIntegration"
            case operationName = "operationName"
            case authorizationType = "authorizationType"
            case requestValidatorId = "requestValidatorId"
            case methodResponses = "methodResponses"
            case apiKeyRequired = "apiKeyRequired"
            case httpMethod = "httpMethod"
            case authorizerId = "authorizerId"
            case requestParameters = "requestParameters"
            case authorizationScopes = "authorizationScopes"
        }
    }

    public struct DomainName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "regionalCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateUploadDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "endpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "regionalHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "distributionDomainName", required: false, type: .string), 
            AWSShapeMember(label: "distributionHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "domainName", required: false, type: .string), 
            AWSShapeMember(label: "regionalDomainName", required: false, type: .string), 
            AWSShapeMember(label: "regionalCertificateName", required: false, type: .string)
        ]
        /// The reference to an AWS-managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        public let regionalCertificateArn: String?
        /// The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        public let certificateUploadDate: TimeStamp?
        /// The endpoint configuration of this DomainName showing the endpoint types of the domain name. 
        public let endpointConfiguration: EndpointConfiguration?
        /// The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. 
        public let regionalHostedZoneId: String?
        /// The domain name of the Amazon CloudFront distribution associated with this custom domain name for an edge-optimized endpoint. You set up this association when adding a DNS record pointing the custom domain name to this distribution name. For more information about CloudFront distributions, see the Amazon CloudFront documentation.
        public let distributionDomainName: String?
        /// The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The valid value is Z2FDTNDATAQYW2 for all the regions. For more information, see Set up a Regional Custom Domain Name and AWS Regions and Endpoints for API Gateway. 
        public let distributionHostedZoneId: String?
        /// The name of the certificate that will be used by edge-optimized endpoint for this domain name.
        public let certificateName: String?
        /// The custom domain name as an API host name, for example, my-api.example.com.
        public let domainName: String?
        /// The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name. The regional domain name is returned by API Gateway when you create a regional endpoint.
        public let regionalDomainName: String?
        /// The name of the certificate that will be used for validating the regional domain name.
        public let regionalCertificateName: String?

        public init(regionalCertificateArn: String? = nil, certificateUploadDate: TimeStamp? = nil, endpointConfiguration: EndpointConfiguration? = nil, certificateArn: String? = nil, regionalHostedZoneId: String? = nil, distributionDomainName: String? = nil, distributionHostedZoneId: String? = nil, certificateName: String? = nil, domainName: String? = nil, regionalDomainName: String? = nil, regionalCertificateName: String? = nil) {
            self.regionalCertificateArn = regionalCertificateArn
            self.certificateUploadDate = certificateUploadDate
            self.endpointConfiguration = endpointConfiguration
            self.certificateArn = certificateArn
            self.regionalHostedZoneId = regionalHostedZoneId
            self.distributionDomainName = distributionDomainName
            self.distributionHostedZoneId = distributionHostedZoneId
            self.certificateName = certificateName
            self.domainName = domainName
            self.regionalDomainName = regionalDomainName
            self.regionalCertificateName = regionalCertificateName
        }

        private enum CodingKeys: String, CodingKey {
            case regionalCertificateArn = "regionalCertificateArn"
            case certificateUploadDate = "certificateUploadDate"
            case endpointConfiguration = "endpointConfiguration"
            case certificateArn = "certificateArn"
            case regionalHostedZoneId = "regionalHostedZoneId"
            case distributionDomainName = "distributionDomainName"
            case distributionHostedZoneId = "distributionHostedZoneId"
            case certificateName = "certificateName"
            case domainName = "domainName"
            case regionalDomainName = "regionalDomainName"
            case regionalCertificateName = "regionalCertificateName"
        }
    }

    public struct DeleteUsagePlanKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string)
        ]
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String
        /// [Required] The Id of the UsagePlanKey resource to be deleted.
        public let keyId: String

        public init(usagePlanId: String, keyId: String) {
            self.usagePlanId = usagePlanId
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
            case keyId = "keyId"
        }
    }

    public enum GatewayResponseType: String, CustomStringConvertible, Codable {
        case default4Xx = "DEFAULT_4XX"
        case default5Xx = "DEFAULT_5XX"
        case resourceNotFound = "RESOURCE_NOT_FOUND"
        case unauthorized = "UNAUTHORIZED"
        case invalidApiKey = "INVALID_API_KEY"
        case accessDenied = "ACCESS_DENIED"
        case authorizerFailure = "AUTHORIZER_FAILURE"
        case authorizerConfigurationError = "AUTHORIZER_CONFIGURATION_ERROR"
        case invalidSignature = "INVALID_SIGNATURE"
        case expiredToken = "EXPIRED_TOKEN"
        case missingAuthenticationToken = "MISSING_AUTHENTICATION_TOKEN"
        case integrationFailure = "INTEGRATION_FAILURE"
        case integrationTimeout = "INTEGRATION_TIMEOUT"
        case apiConfigurationError = "API_CONFIGURATION_ERROR"
        case unsupportedMediaType = "UNSUPPORTED_MEDIA_TYPE"
        case badRequestParameters = "BAD_REQUEST_PARAMETERS"
        case badRequestBody = "BAD_REQUEST_BODY"
        case requestTooLarge = "REQUEST_TOO_LARGE"
        case throttled = "THROTTLED"
        case quotaExceeded = "QUOTA_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct GetDocumentationPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "locationStatus", location: .querystring(locationName: "locationStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "path", location: .querystring(locationName: "path"), required: false, type: .string), 
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "type", location: .querystring(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The status of the API documentation parts to retrieve. Valid values are DOCUMENTED for retrieving DocumentationPart resources with content and UNDOCUMENTED for DocumentationPart resources without content.
        public let locationStatus: LocationStatusType?
        /// The path of API entities of the to-be-retrieved documentation parts.
        public let path: String?
        /// The name of API entities of the to-be-retrieved documentation parts.
        public let nameQuery: String?
        /// The type of API entities of the to-be-retrieved documentation parts. 
        public let `type`: DocumentationPartType?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(position: String? = nil, limit: Int32? = nil, locationStatus: LocationStatusType? = nil, path: String? = nil, nameQuery: String? = nil, type: DocumentationPartType? = nil, restApiId: String) {
            self.position = position
            self.limit = limit
            self.locationStatus = locationStatus
            self.path = path
            self.nameQuery = nameQuery
            self.`type` = `type`
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
            case locationStatus = "locationStatus"
            case path = "path"
            case nameQuery = "name"
            case `type` = "type"
            case restApiId = "restapi_id"
        }
    }

    public struct GetResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The identifier for the Resource resource.
        public let resourceId: String
        /// A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This embed parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the "methods" string. For example, GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods.
        public let embed: [String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(resourceId: String, embed: [String]? = nil, restApiId: String) {
            self.resourceId = resourceId
            self.embed = embed
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case embed = "embed"
            case restApiId = "restapi_id"
        }
    }

    public struct GetUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "startDate", location: .querystring(locationName: "startDate"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "keyId", location: .querystring(locationName: "keyId"), required: false, type: .string), 
            AWSShapeMember(label: "endDate", location: .querystring(locationName: "endDate"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The Id of the usage plan associated with the usage data.
        public let usagePlanId: String
        /// [Required] The starting date (e.g., 2016-01-01) of the usage data.
        public let startDate: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The Id of the API key associated with the resultant usage data.
        public let keyId: String?
        /// [Required] The ending date (e.g., 2016-12-31) of the usage data.
        public let endDate: String

        public init(position: String? = nil, usagePlanId: String, startDate: String, limit: Int32? = nil, keyId: String? = nil, endDate: String) {
            self.position = position
            self.usagePlanId = usagePlanId
            self.startDate = startDate
            self.limit = limit
            self.keyId = keyId
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case usagePlanId = "usageplanId"
            case startDate = "startDate"
            case limit = "limit"
            case keyId = "keyId"
            case endDate = "endDate"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String
        /// [Required] The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource_arn"
            case tags = "tags"
        }
    }

    public struct CreateUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "quota", required: false, type: .structure), 
            AWSShapeMember(label: "throttle", required: false, type: .structure), 
            AWSShapeMember(label: "apiStages", required: false, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The description of the usage plan.
        public let description: String?
        /// The quota of the usage plan.
        public let quota: QuotaSettings?
        /// The throttling limits of the usage plan.
        public let throttle: ThrottleSettings?
        /// The associated API stages of the usage plan.
        public let apiStages: [ApiStage]?
        /// [Required] The name of the usage plan.
        public let name: String

        public init(description: String? = nil, quota: QuotaSettings? = nil, throttle: ThrottleSettings? = nil, apiStages: [ApiStage]? = nil, name: String) {
            self.description = description
            self.quota = quota
            self.throttle = throttle
            self.apiStages = apiStages
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case quota = "quota"
            case throttle = "throttle"
            case apiStages = "apiStages"
            case name = "name"
        }
    }

    public struct Model: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "contentType", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The description of the model.
        public let description: String?
        /// The schema for the model. For application/json models, this should be JSON schema draft 4 model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
        public let schema: String?
        /// The identifier for the model resource.
        public let id: String?
        /// The content-type for the model.
        public let contentType: String?
        /// The name of the model. Must be an alphanumeric string.
        public let name: String?

        public init(description: String? = nil, schema: String? = nil, id: String? = nil, contentType: String? = nil, name: String? = nil) {
            self.description = description
            self.schema = schema
            self.id = id
            self.contentType = contentType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case schema = "schema"
            case id = "id"
            case contentType = "contentType"
            case name = "name"
        }
    }

    public struct UpdateApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The identifier of the ApiKey resource to be updated.
        public let apiKey: String

        public init(patchOperations: [PatchOperation]? = nil, apiKey: String) {
            self.patchOperations = patchOperations
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case apiKey = "api_Key"
        }
    }

    public struct DeleteIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a delete integration request's HTTP method.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Specifies a delete integration request's resource identifier.
        public let resourceId: String

        public init(httpMethod: String, restApiId: String, resourceId: String) {
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct GatewayResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "defaultResponse", required: false, type: .boolean), 
            AWSShapeMember(label: "responseType", required: false, type: .enum)
        ]
        /// Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseParameters: [String: String]?
        /// Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseTemplates: [String: String]?
        /// The HTTP status code for this GatewayResponse.
        public let statusCode: String?
        /// A Boolean flag to indicate whether this GatewayResponse is the default gateway response (true) or not (false). A default gateway response is one generated by API Gateway without any customization by an API developer. 
        public let defaultResponse: Bool?
        /// The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType?

        public init(responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, statusCode: String? = nil, defaultResponse: Bool? = nil, responseType: GatewayResponseType? = nil) {
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.statusCode = statusCode
            self.defaultResponse = defaultResponse
            self.responseType = responseType
        }

        private enum CodingKeys: String, CodingKey {
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case statusCode = "statusCode"
            case defaultResponse = "defaultResponse"
            case responseType = "responseType"
        }
    }

    public struct GetAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Authorizer resource.
        public let authorizerId: String

        public init(restApiId: String, authorizerId: String) {
            self.restApiId = restApiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case authorizerId = "authorizer_id"
        }
    }

    public struct ImportDocumentationPartsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "mode", location: .querystring(locationName: "mode"), required: false, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean)
        ]
        /// A query parameter to indicate whether to overwrite (OVERWRITE) any existing DocumentationParts definition or to merge (MERGE) the new definition into the existing one. The default value is MERGE.
        public let mode: PutMode?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.
        public let body: Data
        /// A query parameter to specify whether to rollback the documentation importation (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?

        public init(mode: PutMode? = nil, restApiId: String, body: Data, failOnWarnings: Bool? = nil) {
            self.mode = mode
            self.restApiId = restApiId
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "mode"
            case restApiId = "restapi_id"
            case body = "body"
            case failOnWarnings = "failonwarnings"
        }
    }

    public enum QuotaPeriodType: String, CustomStringConvertible, Codable {
        case day = "DAY"
        case week = "WEEK"
        case month = "MONTH"
        public var description: String { return self.rawValue }
    }

    public struct PatchOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "op", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "from", required: false, type: .string)
        ]
        ///  An update operation to be performed with this PATCH request. The valid value can be add, remove, replace or copy. Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message.
        public let op: Op?
        /// The new target value of the update operation. It is applicable for the add or replace operation. When using AWS CLI to update a property of a JSON value, enclose the JSON object with a pair of single quotes in a Linux shell, e.g., '{"a": ...}'. In a Windows shell, see Using JSON for Parameters.
        public let value: String?
        /// The op operation's target, as identified by a JSON Pointer value that references a location within the targeted resource. For example, if the target resource has an updateable property of {"name":"value"}, the path for this property is /name. If the name property value is a JSON object (e.g., {"name": {"child/name": "child-value"}}), the path for the child/name property will be /name/child~1name. Any slash ("/") character appearing in path names must be escaped with "~1", as shown in the example above. Each op operation can have only one path associated with it.
        public let path: String?
        /// The copy update operation's source as identified by a JSON-Pointer value referencing the location within the targeted resource to copy the value from. For example, to promote a canary deployment, you copy the canary deployment ID to the affiliated deployment ID by calling a PATCH request on a Stage resource with "op":"copy", "from":"/canarySettings/deploymentId" and "path":"/deploymentId".
        public let from: String?

        public init(op: Op? = nil, value: String? = nil, path: String? = nil, from: String? = nil) {
            self.op = op
            self.value = value
            self.path = path
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case op = "op"
            case value = "value"
            case path = "path"
            case from = "from"
        }
    }

    public struct GetRequestValidatorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "requestValidatorId", location: .uri(locationName: "requestvalidator_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the RequestValidator to be retrieved.
        public let requestValidatorId: String

        public init(restApiId: String, requestValidatorId: String) {
            self.restApiId = restApiId
            self.requestValidatorId = requestValidatorId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case requestValidatorId = "requestvalidator_id"
        }
    }

    public struct ClientCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "expirationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "clientCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "pemEncodedCertificate", required: false, type: .string)
        ]
        /// The description of the client certificate.
        public let description: String?
        /// The timestamp when the client certificate was created.
        public let createdDate: TimeStamp?
        /// The timestamp when the client certificate will expire.
        public let expirationDate: TimeStamp?
        /// The identifier of the client certificate.
        public let clientCertificateId: String?
        /// The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .
        public let pemEncodedCertificate: String?

        public init(description: String? = nil, createdDate: TimeStamp? = nil, expirationDate: TimeStamp? = nil, clientCertificateId: String? = nil, pemEncodedCertificate: String? = nil) {
            self.description = description
            self.createdDate = createdDate
            self.expirationDate = expirationDate
            self.clientCertificateId = clientCertificateId
            self.pemEncodedCertificate = pemEncodedCertificate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case createdDate = "createdDate"
            case expirationDate = "expirationDate"
            case clientCertificateId = "clientCertificateId"
            case pemEncodedCertificate = "pemEncodedCertificate"
        }
    }

    public struct GetUsagePlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// [Required] The identifier of the UsagePlan resource to be retrieved.
        public let usagePlanId: String

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
        }
    }

    public enum ApiKeySourceType: String, CustomStringConvertible, Codable {
        case header = "HEADER"
        case authorizer = "AUTHORIZER"
        public var description: String { return self.rawValue }
    }

    public struct UpdateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "vpcLinkId", location: .uri(locationName: "vpclink_id"), required: true, type: .string)
        ]
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let vpcLinkId: String

        public init(patchOperations: [PatchOperation]? = nil, vpcLinkId: String) {
            self.patchOperations = patchOperations
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case patchOperations = "patchOperations"
            case vpcLinkId = "vpclink_id"
        }
    }

    public struct GetStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The name of the Stage resource to get information about.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(stageName: String, restApiId: String) {
            self.stageName = stageName
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stage_name"
            case restApiId = "restapi_id"
        }
    }

    public enum LocationStatusType: String, CustomStringConvertible, Codable {
        case documented = "DOCUMENTED"
        case undocumented = "UNDOCUMENTED"
        public var description: String { return self.rawValue }
    }

    public struct FlushStageAuthorizersCacheRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// The string identifier of the associated RestApi.
        public let restApiId: String
        /// The name of the stage to flush.
        public let stageName: String

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case stageName = "stage_name"
        }
    }

    public struct UpdateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] Represents an update integration request's resource identifier.
        public let resourceId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] Represents an update integration request's HTTP method.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(resourceId: String, patchOperations: [PatchOperation]? = nil, httpMethod: String, restApiId: String) {
            self.resourceId = resourceId
            self.patchOperations = patchOperations
            self.httpMethod = httpMethod
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case patchOperations = "patchOperations"
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
        }
    }

    public struct DeleteGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType

        public init(restApiId: String, responseType: GatewayResponseType) {
            self.restApiId = restApiId
            self.responseType = responseType
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case responseType = "response_type"
        }
    }

    public struct ImportApiKeysRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "format", location: .querystring(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean)
        ]
        /// A query parameter to specify the input format to imported API keys. Currently, only the csv format is supported.
        public let format: ApiKeysFormat
        /// The payload of the POST request to import API keys. For the payload format, see API Key File Format.
        public let body: Data
        /// A query parameter to indicate whether to rollback ApiKey importation (true) or not (false) when error is encountered.
        public let failOnWarnings: Bool?

        public init(format: ApiKeysFormat, body: Data, failOnWarnings: Bool? = nil) {
            self.format = format
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case format = "format"
            case body = "body"
            case failOnWarnings = "failonwarnings"
        }
    }

    public enum ContentHandlingStrategy: String, CustomStringConvertible, Codable {
        case convertToBinary = "CONVERT_TO_BINARY"
        case convertToText = "CONVERT_TO_TEXT"
        public var description: String { return self.rawValue }
    }

    public struct GetApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string), 
            AWSShapeMember(label: "includeValue", location: .querystring(locationName: "includeValue"), required: false, type: .boolean)
        ]
        /// [Required] The identifier of the ApiKey resource.
        public let apiKey: String
        /// A boolean flag to specify whether (true) or not (false) the result contains the key value.
        public let includeValue: Bool?

        public init(apiKey: String, includeValue: Bool? = nil) {
            self.apiKey = apiKey
            self.includeValue = includeValue
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "api_Key"
            case includeValue = "includeValue"
        }
    }

    public struct ClientCertificates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [ClientCertificate]?

        public init(position: String? = nil, items: [ClientCertificate]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct DeleteResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Resource resource.
        public let resourceId: String

        public init(restApiId: String, resourceId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case resourceId = "resource_id"
        }
    }

    public struct MethodResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "responseModels", required: false, type: .map), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map)
        ]
        /// The method response's status code.
        public let statusCode: String?
        /// Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
        public let responseModels: [String: String]?
        /// A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern method.response.header.{name}, where name is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public let responseParameters: [String: Bool]?

        public init(statusCode: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: Bool]? = nil) {
            self.statusCode = statusCode
            self.responseModels = responseModels
            self.responseParameters = responseParameters
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
        }
    }

    public struct GetClientCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// The current pagination position in the paged result set.
        public let position: String?

        public init(limit: Int32? = nil, position: String? = nil) {
            self.limit = limit
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case position = "position"
        }
    }

    public struct PutGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", required: false, type: .string), 
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The HTTP status code of the GatewayResponse.
        public let statusCode: String?
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseParameters: [String: String]?
        /// Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
        public let responseTemplates: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(statusCode: String? = nil, responseType: GatewayResponseType, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, restApiId: String) {
            self.statusCode = statusCode
            self.responseType = responseType
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case responseType = "response_type"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case restApiId = "restapi_id"
        }
    }

    public enum IntegrationType: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case aws = "AWS"
        case mock = "MOCK"
        case httpProxy = "HTTP_PROXY"
        case awsProxy = "AWS_PROXY"
        public var description: String { return self.rawValue }
    }

    public struct ThrottleSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rateLimit", required: false, type: .double), 
            AWSShapeMember(label: "burstLimit", required: false, type: .integer)
        ]
        /// The API request steady-state rate limit.
        public let rateLimit: Double?
        /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
        public let burstLimit: Int32?

        public init(rateLimit: Double? = nil, burstLimit: Int32? = nil) {
            self.rateLimit = rateLimit
            self.burstLimit = burstLimit
        }

        private enum CodingKeys: String, CodingKey {
            case rateLimit = "rateLimit"
            case burstLimit = "burstLimit"
        }
    }

    public struct DocumentationPartIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "warnings", required: false, type: .list), 
            AWSShapeMember(label: "ids", required: false, type: .list)
        ]
        /// A list of warning messages reported during import of documentation parts.
        public let warnings: [String]?
        /// A list of the returned documentation part identifiers.
        public let ids: [String]?

        public init(warnings: [String]? = nil, ids: [String]? = nil) {
            self.warnings = warnings
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case warnings = "warnings"
            case ids = "ids"
        }
    }

    public struct UpdateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The name of the Stage resource to change information about.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(stageName: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.stageName = stageName
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case stageName = "stage_name"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct PutIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "contentHandling", required: false, type: .enum), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "selectionPattern", required: false, type: .string), 
            AWSShapeMember(label: "responseTemplates", required: false, type: .map), 
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string)
        ]
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name must be a valid and unique response header name and JSON-expression a valid JSON expression without the $ prefix.
        public let responseParameters: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public let contentHandling: ContentHandlingStrategy?
        /// [Required] Specifies a put integration response request's resource identifier.
        public let resourceId: String
        /// Specifies the selection pattern of a put integration response.
        public let selectionPattern: String?
        /// Specifies a put integration response's templates.
        public let responseTemplates: [String: String]?
        /// [Required] Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public let statusCode: String
        /// [Required] Specifies a put integration response request's HTTP method.
        public let httpMethod: String

        public init(responseParameters: [String: String]? = nil, restApiId: String, contentHandling: ContentHandlingStrategy? = nil, resourceId: String, selectionPattern: String? = nil, responseTemplates: [String: String]? = nil, statusCode: String, httpMethod: String) {
            self.responseParameters = responseParameters
            self.restApiId = restApiId
            self.contentHandling = contentHandling
            self.resourceId = resourceId
            self.selectionPattern = selectionPattern
            self.responseTemplates = responseTemplates
            self.statusCode = statusCode
            self.httpMethod = httpMethod
        }

        private enum CodingKeys: String, CodingKey {
            case responseParameters = "responseParameters"
            case restApiId = "restapi_id"
            case contentHandling = "contentHandling"
            case resourceId = "resource_id"
            case selectionPattern = "selectionPattern"
            case responseTemplates = "responseTemplates"
            case statusCode = "status_code"
            case httpMethod = "http_method"
        }
    }

    public struct DocumentationPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "properties", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "id", required: false, type: .string)
        ]
        /// A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of x-amazon-apigateway-documentation.
        public let properties: String?
        /// The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
        public let location: DocumentationPartLocation?
        /// The DocumentationPart identifier, generated by API Gateway when the DocumentationPart is created.
        public let id: String?

        public init(properties: String? = nil, location: DocumentationPartLocation? = nil, id: String? = nil) {
            self.properties = properties
            self.location = location
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case properties = "properties"
            case location = "location"
            case id = "id"
        }
    }

    public struct DocumentationVersions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [DocumentationVersion]?
        public let position: String?

        public init(items: [DocumentationVersion]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public enum CacheClusterStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case available = "AVAILABLE"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case notAvailable = "NOT_AVAILABLE"
        case flushInProgress = "FLUSH_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct GetIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] Specifies a get integration request's resource identifier
        public let resourceId: String
        /// [Required] Specifies a get integration request's HTTP method.
        public let httpMethod: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(resourceId: String, httpMethod: String, restApiId: String) {
            self.resourceId = resourceId
            self.httpMethod = httpMethod
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resource_id"
            case httpMethod = "http_method"
            case restApiId = "restapi_id"
        }
    }

    public struct GetClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be described.
        public let clientCertificateId: String

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
        }
    }

    public struct GetMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// [Required] The status code for the MethodResponse resource.
        public let statusCode: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The Resource identifier for the MethodResponse resource.
        public let resourceId: String

        public init(statusCode: String, restApiId: String, httpMethod: String, resourceId: String) {
            self.statusCode = statusCode
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
        }
    }

    public enum Op: String, CustomStringConvertible, Codable {
        case add = "add"
        case remove = "remove"
        case replace = "replace"
        case move = "move"
        case copy = "copy"
        case test = "test"
        public var description: String { return self.rawValue }
    }

    public struct UsagePlans: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [UsagePlan]?
        public let position: String?

        public init(items: [UsagePlan]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public enum VpcLinkStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case pending = "PENDING"
        case deleting = "DELETING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Usage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", required: false, type: .string), 
            AWSShapeMember(label: "endDate", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "values"), required: false, type: .map), 
            AWSShapeMember(label: "startDate", required: false, type: .string), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The plan Id associated with this usage data.
        public let usagePlanId: String?
        /// The ending date of the usage data.
        public let endDate: String?
        /// The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, {..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}, where {api_key} stands for an API key value and the daily log entry is of the format [used quota, remaining quota].
        public let items: [String: [[Int64]]]?
        /// The starting date of the usage data.
        public let startDate: String?
        public let position: String?

        public init(usagePlanId: String? = nil, endDate: String? = nil, items: [String: [[Int64]]]? = nil, startDate: String? = nil, position: String? = nil) {
            self.usagePlanId = usagePlanId
            self.endDate = endDate
            self.items = items
            self.startDate = startDate
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usagePlanId"
            case endDate = "endDate"
            case items = "values"
            case startDate = "startDate"
            case position = "position"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resource_arn"), required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]
        /// [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded. At present, Stage is the only taggable resource.
        public let resourceArn: String
        /// [Required] The Tag keys to delete.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource_arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct CreateDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "stageName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "documentationVersion", required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The stage name to be associated with the new documentation snapshot.
        public let stageName: String?
        /// A description about the new documentation snapshot.
        public let description: String?
        /// [Required] The version identifier of the new snapshot.
        public let documentationVersion: String

        public init(restApiId: String, stageName: String? = nil, description: String? = nil, documentationVersion: String) {
            self.restApiId = restApiId
            self.stageName = stageName
            self.description = description
            self.documentationVersion = documentationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case stageName = "stageName"
            case description = "description"
            case documentationVersion = "documentationVersion"
        }
    }

    public struct DeleteDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "deploymentId", location: .uri(locationName: "deployment_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The identifier of the Deployment resource to delete.
        public let deploymentId: String

        public init(restApiId: String, deploymentId: String) {
            self.restApiId = restApiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case deploymentId = "deployment_id"
        }
    }

    public struct TestInvokeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policy", required: false, type: .string), 
            AWSShapeMember(label: "clientStatus", required: false, type: .integer), 
            AWSShapeMember(label: "claims", required: false, type: .map), 
            AWSShapeMember(label: "principalId", required: false, type: .string), 
            AWSShapeMember(label: "log", required: false, type: .string), 
            AWSShapeMember(label: "latency", required: false, type: .long), 
            AWSShapeMember(label: "authorization", required: false, type: .map)
        ]
        /// The JSON policy document returned by the Authorizer
        public let policy: String?
        /// The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.
        public let clientStatus: Int32?
        /// The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.
        public let claims: [String: String]?
        /// The principal identity returned by the Authorizer
        public let principalId: String?
        /// The API Gateway execution log for the test authorizer request.
        public let log: String?
        /// The execution latency of the test authorizer request.
        public let latency: Int64?
        public let authorization: [String: [String]]?

        public init(policy: String? = nil, clientStatus: Int32? = nil, claims: [String: String]? = nil, principalId: String? = nil, log: String? = nil, latency: Int64? = nil, authorization: [String: [String]]? = nil) {
            self.policy = policy
            self.clientStatus = clientStatus
            self.claims = claims
            self.principalId = principalId
            self.log = log
            self.latency = latency
            self.authorization = authorization
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "policy"
            case clientStatus = "clientStatus"
            case claims = "claims"
            case principalId = "principalId"
            case log = "log"
            case latency = "latency"
            case authorization = "authorization"
        }
    }

    public struct DeleteApiKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKey", location: .uri(locationName: "api_Key"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ApiKey resource to be deleted.
        public let apiKey: String

        public init(apiKey: String) {
            self.apiKey = apiKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "api_Key"
        }
    }

    public struct Deployments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Deployment]?
        public let position: String?

        public init(items: [Deployment]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct VpcLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "targetArns", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        /// The name used to label and identify the VPC link.
        public let name: String?
        /// The ARNs of network load balancers of the VPC targeted by the VPC link. The network load balancers must be owned by the same AWS account of the API owner.
        public let targetArns: [String]?
        /// The status of the VPC link. The valid values are AVAILABLE, PENDING, DELETING, or FAILED. Deploying an API will wait if the status is PENDING and will fail if the status is DELETING. 
        public let status: VpcLinkStatus?
        /// The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
        public let id: String?
        /// The description of the VPC link.
        public let description: String?
        /// A description about the VPC link status.
        public let statusMessage: String?

        public init(name: String? = nil, targetArns: [String]? = nil, status: VpcLinkStatus? = nil, id: String? = nil, description: String? = nil, statusMessage: String? = nil) {
            self.name = name
            self.targetArns = targetArns
            self.status = status
            self.id = id
            self.description = description
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case targetArns = "targetArns"
            case status = "status"
            case id = "id"
            case description = "description"
            case statusMessage = "statusMessage"
        }
    }

    public struct GetApiKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "includeValues", location: .querystring(locationName: "includeValues"), required: false, type: .boolean), 
            AWSShapeMember(label: "customerId", location: .querystring(locationName: "customerId"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The name of queried API keys.
        public let nameQuery: String?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// A boolean flag to specify whether (true) or not (false) the result contains key values.
        public let includeValues: Bool?
        /// The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.
        public let customerId: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(nameQuery: String? = nil, position: String? = nil, includeValues: Bool? = nil, customerId: String? = nil, limit: Int32? = nil) {
            self.nameQuery = nameQuery
            self.position = position
            self.includeValues = includeValues
            self.customerId = customerId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case nameQuery = "name"
            case position = "position"
            case includeValues = "includeValues"
            case customerId = "customerId"
            case limit = "limit"
        }
    }

    public struct UsagePlanKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [UsagePlanKey]?
        public let position: String?

        public init(items: [UsagePlanKey]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct MethodSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "authorizationType", required: false, type: .string)
        ]
        /// Specifies whether the method requires a valid ApiKey.
        public let apiKeyRequired: Bool?
        /// The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String?

        public init(apiKeyRequired: Bool? = nil, authorizationType: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationType = authorizationType
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case authorizationType = "authorizationType"
        }
    }

    public struct DeleteRestApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
        }
    }

    public struct UsagePlanKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The name of a usage plan key.
        public let name: String?
        /// The Id of a usage plan key.
        public let id: String?
        /// The type of a usage plan key. Currently, the valid key type is API_KEY.
        public let `type`: String?
        /// The value of a usage plan key.
        public let value: String?

        public init(name: String? = nil, id: String? = nil, type: String? = nil, value: String? = nil) {
            self.name = name
            self.id = id
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case id = "id"
            case `type` = "type"
            case value = "value"
        }
    }

    public struct DeleteClientCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientCertificateId", location: .uri(locationName: "clientcertificate_id"), required: true, type: .string)
        ]
        /// [Required] The identifier of the ClientCertificate resource to be deleted.
        public let clientCertificateId: String

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

        private enum CodingKeys: String, CodingKey {
            case clientCertificateId = "clientcertificate_id"
        }
    }

    public struct GetDocumentationPartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "documentationPartId", location: .uri(locationName: "part_id"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The string identifier of the associated RestApi.
        public let documentationPartId: String

        public init(restApiId: String, documentationPartId: String) {
            self.restApiId = restApiId
            self.documentationPartId = documentationPartId
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case documentationPartId = "part_id"
        }
    }

    public struct PutMethodResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusCode", location: .uri(locationName: "status_code"), required: true, type: .string), 
            AWSShapeMember(label: "responseParameters", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string), 
            AWSShapeMember(label: "responseModels", required: false, type: .map)
        ]
        /// [Required] The method response's status code.
        public let statusCode: String
        /// A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public let responseParameters: [String: Bool]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The HTTP verb of the Method resource.
        public let httpMethod: String
        /// [Required] The Resource identifier for the Method resource.
        public let resourceId: String
        /// Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public let responseModels: [String: String]?

        public init(statusCode: String, responseParameters: [String: Bool]? = nil, restApiId: String, httpMethod: String, resourceId: String, responseModels: [String: String]? = nil) {
            self.statusCode = statusCode
            self.responseParameters = responseParameters
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
            self.responseModels = responseModels
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "status_code"
            case responseParameters = "responseParameters"
            case restApiId = "restapi_id"
            case httpMethod = "http_method"
            case resourceId = "resource_id"
            case responseModels = "responseModels"
        }
    }

    public struct GetAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(position: String? = nil, limit: Int32? = nil, restApiId: String) {
            self.position = position
            self.limit = limit
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case limit = "limit"
            case restApiId = "restapi_id"
        }
    }

    public struct CreateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "cacheClusterSize", required: false, type: .enum), 
            AWSShapeMember(label: "deploymentId", required: true, type: .string), 
            AWSShapeMember(label: "tracingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "variables", required: false, type: .map), 
            AWSShapeMember(label: "stageName", required: true, type: .string), 
            AWSShapeMember(label: "cacheClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "canarySettings", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "documentationVersion", required: false, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The description of the Stage resource.
        public let description: String?
        /// The stage's cache cluster size.
        public let cacheClusterSize: CacheClusterSize?
        /// [Required] The identifier of the Deployment resource for the Stage resource.
        public let deploymentId: String
        /// Specifies whether active tracing with X-ray is enabled for the Stage.
        public let tracingEnabled: Bool?
        /// A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let variables: [String: String]?
        /// [Required] The name for the Stage resource.
        public let stageName: String
        /// Whether cache clustering is enabled for the stage.
        public let cacheClusterEnabled: Bool?
        /// The canary deployment settings of this stage.
        public let canarySettings: CanarySettings?
        /// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
        public let tags: [String: String]?
        /// The version of the associated API documentation.
        public let documentationVersion: String?

        public init(restApiId: String, description: String? = nil, cacheClusterSize: CacheClusterSize? = nil, deploymentId: String, tracingEnabled: Bool? = nil, variables: [String: String]? = nil, stageName: String, cacheClusterEnabled: Bool? = nil, canarySettings: CanarySettings? = nil, tags: [String: String]? = nil, documentationVersion: String? = nil) {
            self.restApiId = restApiId
            self.description = description
            self.cacheClusterSize = cacheClusterSize
            self.deploymentId = deploymentId
            self.tracingEnabled = tracingEnabled
            self.variables = variables
            self.stageName = stageName
            self.cacheClusterEnabled = cacheClusterEnabled
            self.canarySettings = canarySettings
            self.tags = tags
            self.documentationVersion = documentationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case description = "description"
            case cacheClusterSize = "cacheClusterSize"
            case deploymentId = "deploymentId"
            case tracingEnabled = "tracingEnabled"
            case variables = "variables"
            case stageName = "stageName"
            case cacheClusterEnabled = "cacheClusterEnabled"
            case canarySettings = "canarySettings"
            case tags = "tags"
            case documentationVersion = "documentationVersion"
        }
    }

    public struct GetResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "embed", location: .querystring(locationName: "embed"), required: false, type: .list), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response. This embed parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the "methods" string. For example, GET /restapis/{restapi_id}/resources?embed=methods.
        public let embed: [String]?
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String

        public init(limit: Int32? = nil, embed: [String]? = nil, position: String? = nil, restApiId: String) {
            self.limit = limit
            self.embed = embed
            self.position = position
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case embed = "embed"
            case position = "position"
            case restApiId = "restapi_id"
        }
    }

    public struct UpdateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "modelName", location: .uri(locationName: "model_name"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the model to update.
        public let modelName: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(restApiId: String, modelName: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.modelName = modelName
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case modelName = "model_name"
            case patchOperations = "patchOperations"
        }
    }

    public struct PutRestApiRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failOnWarnings", location: .querystring(locationName: "failonwarnings"), required: false, type: .boolean), 
            AWSShapeMember(label: "body", required: true, type: .blob), 
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "mode", location: .querystring(locationName: "mode"), required: false, type: .enum)
        ]
        /// A query parameter to indicate whether to rollback the API update (true) or not (false) when a warning is encountered. The default value is false.
        public let failOnWarnings: Bool?
        /// [Required] The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
        public let body: Data
        /// Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set ignore=documentation as a parameters value, as in the AWS CLI command of aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'.
        public let parameters: [String: String]?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The mode query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".
        public let mode: PutMode?

        public init(failOnWarnings: Bool? = nil, body: Data, parameters: [String: String]? = nil, restApiId: String, mode: PutMode? = nil) {
            self.failOnWarnings = failOnWarnings
            self.body = body
            self.parameters = parameters
            self.restApiId = restApiId
            self.mode = mode
        }

        private enum CodingKeys: String, CodingKey {
            case failOnWarnings = "failonwarnings"
            case body = "body"
            case parameters = "parameters"
            case restApiId = "restapi_id"
            case mode = "mode"
        }
    }

    public struct GetBasePathMappingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// [Required] The domain name of a BasePathMapping resource.
        public let domainName: String
        /// The current pagination position in the paged result set.
        public let position: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(domainName: String, position: String? = nil, limit: Int32? = nil) {
            self.domainName = domainName
            self.position = position
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
            case position = "position"
            case limit = "limit"
        }
    }

    public struct GetRequestValidatorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case restApiId = "restapi_id"
            case limit = "limit"
        }
    }

    public struct DeleteBasePathMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "basePath", location: .uri(locationName: "base_path"), required: true, type: .string), 
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The base path name of the BasePathMapping resource to delete.
        public let basePath: String
        /// [Required] The domain name of the BasePathMapping resource to delete.
        public let domainName: String

        public init(basePath: String, domainName: String) {
            self.basePath = basePath
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case basePath = "base_path"
            case domainName = "domain_name"
        }
    }

    public struct UpdateDocumentationVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "documentationVersion", location: .uri(locationName: "doc_version"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string)
        ]
        /// [Required] The version identifier of the to-be-updated documentation version.
        public let documentationVersion: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?
        /// [Required] The string identifier of the associated RestApi..
        public let restApiId: String

        public init(documentationVersion: String, patchOperations: [PatchOperation]? = nil, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.patchOperations = patchOperations
            self.restApiId = restApiId
        }

        private enum CodingKeys: String, CodingKey {
            case documentationVersion = "doc_version"
            case patchOperations = "patchOperations"
            case restApiId = "restapi_id"
        }
    }

    public struct GetUsagePlanKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", location: .querystring(locationName: "position"), required: false, type: .string), 
            AWSShapeMember(label: "nameQuery", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string)
        ]
        /// The current pagination position in the paged result set.
        public let position: String?
        /// A query parameter specifying the name of the to-be-returned usage plan keys.
        public let nameQuery: String?
        /// The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
        public let limit: Int32?
        /// [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public let usagePlanId: String

        public init(position: String? = nil, nameQuery: String? = nil, limit: Int32? = nil, usagePlanId: String) {
            self.position = position
            self.nameQuery = nameQuery
            self.limit = limit
            self.usagePlanId = usagePlanId
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case nameQuery = "name"
            case limit = "limit"
            case usagePlanId = "usageplanId"
        }
    }

    public struct DeleteDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .uri(locationName: "domain_name"), required: true, type: .string)
        ]
        /// [Required] The name of the DomainName resource to be deleted.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domain_name"
        }
    }

    public enum ApiKeysFormat: String, CustomStringConvertible, Codable {
        case csv = "csv"
        public var description: String { return self.rawValue }
    }

    public struct BasePathMappings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "position", required: false, type: .string), 
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list)
        ]
        public let position: String?
        /// The current page of elements from this collection.
        public let items: [BasePathMapping]?

        public init(position: String? = nil, items: [BasePathMapping]? = nil) {
            self.position = position
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case position = "position"
            case items = "item"
        }
    }

    public struct UpdateGatewayResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "responseType", location: .uri(locationName: "response_type"), required: true, type: .enum), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The response type of the associated GatewayResponse. Valid values are ACCESS_DENIEDAPI_CONFIGURATION_ERRORAUTHORIZER_FAILURE AUTHORIZER_CONFIGURATION_ERRORBAD_REQUEST_PARAMETERSBAD_REQUEST_BODYDEFAULT_4XXDEFAULT_5XXEXPIRED_TOKENINVALID_SIGNATUREINTEGRATION_FAILUREINTEGRATION_TIMEOUTINVALID_API_KEYMISSING_AUTHENTICATION_TOKEN QUOTA_EXCEEDEDREQUEST_TOO_LARGERESOURCE_NOT_FOUNDTHROTTLEDUNAUTHORIZEDUNSUPPORTED_MEDIA_TYPE 
        public let responseType: GatewayResponseType
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(responseType: GatewayResponseType, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.responseType = responseType
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case responseType = "response_type"
            case restApiId = "restapi_id"
            case patchOperations = "patchOperations"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceMethods", required: false, type: .map), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "pathPart", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "parentId", required: false, type: .string)
        ]
        /// Gets an API resource's method of a given HTTP verb.  The resource methods are a map of methods indexed by methods' HTTP verbs enabled on the resource. This method map is included in the 200 OK response of the GET /restapis/{restapi_id}/resources/{resource_id} or GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods request. Example: Get the GET method of an API resource Request GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20170223T031827Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20170223/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response { "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": false, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "'application/x-amz-json-1.1'" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } } If the OPTIONS is enabled on the resource, you can follow the example here to get that method. Just replace the GET of the last path segment in the request URL with OPTIONS.   
        public let resourceMethods: [String: Method]?
        /// The resource's identifier.
        public let id: String?
        /// The last path segment for this resource.
        public let pathPart: String?
        /// The full path for this resource.
        public let path: String?
        /// The parent resource's identifier.
        public let parentId: String?

        public init(resourceMethods: [String: Method]? = nil, id: String? = nil, pathPart: String? = nil, path: String? = nil, parentId: String? = nil) {
            self.resourceMethods = resourceMethods
            self.id = id
            self.pathPart = pathPart
            self.path = path
            self.parentId = parentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceMethods = "resourceMethods"
            case id = "id"
            case pathPart = "pathPart"
            case path = "path"
            case parentId = "parentId"
        }
    }

    public struct PutMethodRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "apiKeyRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "operationName", required: false, type: .string), 
            AWSShapeMember(label: "requestModels", required: false, type: .map), 
            AWSShapeMember(label: "httpMethod", location: .uri(locationName: "http_method"), required: true, type: .string), 
            AWSShapeMember(label: "authorizationType", required: true, type: .string), 
            AWSShapeMember(label: "authorizationScopes", required: false, type: .list), 
            AWSShapeMember(label: "requestParameters", required: false, type: .map), 
            AWSShapeMember(label: "requestValidatorId", required: false, type: .string), 
            AWSShapeMember(label: "authorizerId", required: false, type: .string), 
            AWSShapeMember(label: "resourceId", location: .uri(locationName: "resource_id"), required: true, type: .string)
        ]
        /// Specifies whether the method required a valid ApiKey.
        public let apiKeyRequired: Bool?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public let operationName: String?
        /// Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public let requestModels: [String: String]?
        /// [Required] Specifies the method request's HTTP method type.
        public let httpMethod: String
        /// [Required] The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public let authorizationType: String
        /// A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public let authorizationScopes: [String]?
        /// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
        public let requestParameters: [String: Bool]?
        /// The identifier of a RequestValidator for validating the method request.
        public let requestValidatorId: String?
        /// Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
        public let authorizerId: String?
        /// [Required] The Resource identifier for the new Method resource.
        public let resourceId: String

        public init(apiKeyRequired: Bool? = nil, restApiId: String, operationName: String? = nil, requestModels: [String: String]? = nil, httpMethod: String, authorizationType: String, authorizationScopes: [String]? = nil, requestParameters: [String: Bool]? = nil, requestValidatorId: String? = nil, authorizerId: String? = nil, resourceId: String) {
            self.apiKeyRequired = apiKeyRequired
            self.restApiId = restApiId
            self.operationName = operationName
            self.requestModels = requestModels
            self.httpMethod = httpMethod
            self.authorizationType = authorizationType
            self.authorizationScopes = authorizationScopes
            self.requestParameters = requestParameters
            self.requestValidatorId = requestValidatorId
            self.authorizerId = authorizerId
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case restApiId = "restapi_id"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case httpMethod = "http_method"
            case authorizationType = "authorizationType"
            case authorizationScopes = "authorizationScopes"
            case requestParameters = "requestParameters"
            case requestValidatorId = "requestValidatorId"
            case authorizerId = "authorizerId"
            case resourceId = "resource_id"
        }
    }

    public struct GetExportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "accepts", location: .header(locationName: "Accept"), required: false, type: .string), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "exportType", location: .uri(locationName: "export_type"), required: true, type: .string)
        ]
        /// A key-value map of query string parameters that specify properties of the export, depending on the requested exportType. For exportType oas30 and swagger, any combination of the following parameters are supported: extensions='integrations' or extensions='apigateway' will export the API with x-amazon-apigateway-integration extensions. extensions='authorizers' will export the API with x-amazon-apigateway-authorizer extensions. postman will export the API with Postman extensions, allowing for import to the Postman tool
        public let parameters: [String: String]?
        /// The content-type of the export, for example application/json. Currently application/json and application/yaml are supported for exportType ofoas30 and swagger. This should be specified in the Accept header for direct API requests.
        public let accepts: String?
        /// [Required] The name of the Stage that will be exported.
        public let stageName: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
        public let exportType: String

        public init(parameters: [String: String]? = nil, accepts: String? = nil, stageName: String, restApiId: String, exportType: String) {
            self.parameters = parameters
            self.accepts = accepts
            self.stageName = stageName
            self.restApiId = restApiId
            self.exportType = exportType
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "parameters"
            case accepts = "Accept"
            case stageName = "stage_name"
            case restApiId = "restapi_id"
            case exportType = "export_type"
        }
    }

    public struct UpdateUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usagePlanId", location: .uri(locationName: "usageplanId"), required: true, type: .string), 
            AWSShapeMember(label: "keyId", location: .uri(locationName: "keyId"), required: true, type: .string), 
            AWSShapeMember(label: "patchOperations", required: false, type: .list)
        ]
        /// [Required] The Id of the usage plan associated with the usage data.
        public let usagePlanId: String
        /// [Required] The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.
        public let keyId: String
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public let patchOperations: [PatchOperation]?

        public init(usagePlanId: String, keyId: String, patchOperations: [PatchOperation]? = nil) {
            self.usagePlanId = usagePlanId
            self.keyId = keyId
            self.patchOperations = patchOperations
        }

        private enum CodingKeys: String, CodingKey {
            case usagePlanId = "usageplanId"
            case keyId = "keyId"
            case patchOperations = "patchOperations"
        }
    }

    public struct GetSdkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "sdkType", location: .uri(locationName: "sdk_type"), required: true, type: .string), 
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "stageName", location: .uri(locationName: "stage_name"), required: true, type: .string)
        ]
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The language for the generated SDK. Currently java, javascript, android, objectivec (for iOS), swift (for iOS), and ruby are supported.
        public let sdkType: String
        /// A string-to-string key-value map of query parameters sdkType-dependent properties of the SDK. For sdkType of objectivec or swift, a parameter named classPrefix is required. For sdkType of android, parameters named groupId, artifactId, artifactVersion, and invokerPackage are required. For sdkType of java, parameters named serviceName and javaPackageName are required. 
        public let parameters: [String: String]?
        /// [Required] The name of the Stage that the SDK will use.
        public let stageName: String

        public init(restApiId: String, sdkType: String, parameters: [String: String]? = nil, stageName: String) {
            self.restApiId = restApiId
            self.sdkType = sdkType
            self.parameters = parameters
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case restApiId = "restapi_id"
            case sdkType = "sdk_type"
            case parameters = "parameters"
            case stageName = "stage_name"
        }
    }

    public struct DocumentationVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "createdDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The version identifier of the API documentation snapshot.
        public let version: String?
        /// The date when the API documentation snapshot is created.
        public let createdDate: TimeStamp?
        /// The description of the API documentation snapshot.
        public let description: String?

        public init(version: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil) {
            self.version = version
            self.createdDate = createdDate
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case createdDate = "createdDate"
            case description = "description"
        }
    }

    public struct Models: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "item"), required: false, type: .list), 
            AWSShapeMember(label: "position", required: false, type: .string)
        ]
        /// The current page of elements from this collection.
        public let items: [Model]?
        public let position: String?

        public init(items: [Model]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case items = "item"
            case position = "position"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "authorizerResultTtlInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "authorizerUri", required: false, type: .string), 
            AWSShapeMember(label: "providerARNs", required: false, type: .list), 
            AWSShapeMember(label: "identityValidationExpression", required: false, type: .string), 
            AWSShapeMember(label: "authorizerCredentials", required: false, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "authType", required: false, type: .string), 
            AWSShapeMember(label: "identitySource", required: false, type: .string)
        ]
        /// [Required] The authorizer type. Valid values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, and COGNITO_USER_POOLS for using an Amazon Cognito user pool.
        public let `type`: AuthorizerType
        /// The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
        public let authorizerResultTtlInSeconds: Int32?
        /// Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
        public let authorizerUri: String?
        /// A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. For a TOKEN or REQUEST authorizer, this is not defined. 
        public let providerARNs: [String]?
        /// A validation expression for the incoming identity token. For TOKEN authorizers, this value is a regular expression. API Gateway will match the aud field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        public let authorizerCredentials: String?
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Required] The name of the authorizer.
        public let name: String
        /// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        public let authType: String?
        /// The identity source for which authorization is requested. For a TOKEN or COGNITO_USER_POOLS authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is Auth, the header mapping expression is method.request.header.Auth.For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
        public let identitySource: String?

        public init(type: AuthorizerType, authorizerResultTtlInSeconds: Int32? = nil, authorizerUri: String? = nil, providerARNs: [String]? = nil, identityValidationExpression: String? = nil, authorizerCredentials: String? = nil, restApiId: String, name: String, authType: String? = nil, identitySource: String? = nil) {
            self.`type` = `type`
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerUri = authorizerUri
            self.providerARNs = providerARNs
            self.identityValidationExpression = identityValidationExpression
            self.authorizerCredentials = authorizerCredentials
            self.restApiId = restApiId
            self.name = name
            self.authType = authType
            self.identitySource = identitySource
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerUri = "authorizerUri"
            case providerARNs = "providerARNs"
            case identityValidationExpression = "identityValidationExpression"
            case authorizerCredentials = "authorizerCredentials"
            case restApiId = "restapi_id"
            case name = "name"
            case authType = "authType"
            case identitySource = "identitySource"
        }
    }

    public struct ExportResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "contentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "body", required: false, type: .blob)
        ]
        /// The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.
        public let contentType: String?
        /// The content-disposition header value in the HTTP response.
        public let contentDisposition: String?
        /// The binary blob response to GetExport, which contains the export.
        public let body: Data?

        public init(contentType: String? = nil, contentDisposition: String? = nil, body: Data? = nil) {
            self.contentType = contentType
            self.contentDisposition = contentDisposition
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "Content-Type"
            case contentDisposition = "Content-Disposition"
            case body = "body"
        }
    }

    public struct TestInvokeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerId", location: .uri(locationName: "authorizer_id"), required: true, type: .string), 
            AWSShapeMember(label: "restApiId", location: .uri(locationName: "restapi_id"), required: true, type: .string), 
            AWSShapeMember(label: "pathWithQueryString", required: false, type: .string), 
            AWSShapeMember(label: "stageVariables", required: false, type: .map), 
            AWSShapeMember(label: "headers", required: false, type: .map), 
            AWSShapeMember(label: "multiValueHeaders", required: false, type: .map), 
            AWSShapeMember(label: "additionalContext", required: false, type: .map), 
            AWSShapeMember(label: "body", required: false, type: .string)
        ]
        /// [Required] Specifies a test invoke authorizer request's Authorizer ID.
        public let authorizerId: String
        /// [Required] The string identifier of the associated RestApi.
        public let restApiId: String
        /// [Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public let pathWithQueryString: String?
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public let stageVariables: [String: String]?
        /// [Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
        public let headers: [String: String]?
        /// [Optional] The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
        public let multiValueHeaders: [String: [String]]?
        /// [Optional] A key-value map of additional context variables.
        public let additionalContext: [String: String]?
        /// [Optional] The simulated request body of an incoming invocation request.
        public let body: String?

        public init(authorizerId: String, restApiId: String, pathWithQueryString: String? = nil, stageVariables: [String: String]? = nil, headers: [String: String]? = nil, multiValueHeaders: [String: [String]]? = nil, additionalContext: [String: String]? = nil, body: String? = nil) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
            self.pathWithQueryString = pathWithQueryString
            self.stageVariables = stageVariables
            self.headers = headers
            self.multiValueHeaders = multiValueHeaders
            self.additionalContext = additionalContext
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerId = "authorizer_id"
            case restApiId = "restapi_id"
            case pathWithQueryString = "pathWithQueryString"
            case stageVariables = "stageVariables"
            case headers = "headers"
            case multiValueHeaders = "multiValueHeaders"
            case additionalContext = "additionalContext"
            case body = "body"
        }
    }

}