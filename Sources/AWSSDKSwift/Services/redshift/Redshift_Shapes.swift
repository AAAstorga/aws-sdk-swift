// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Redshift {

    public struct ClusterSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ClusterSubnetGroup instances. 
        public let clusterSubnetGroups: ClusterSubnetGroups?

        public init(marker: String? = nil, clusterSubnetGroups: ClusterSubnetGroups? = nil) {
            self.marker = marker
            self.clusterSubnetGroups = clusterSubnetGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let clusterSubnetGroups = dictionary["ClusterSubnetGroups"] as? [String: Any] { self.clusterSubnetGroups = try Redshift.ClusterSubnetGroups(dictionary: clusterSubnetGroups) } else { self.clusterSubnetGroups = nil }
        }
    }

    public struct DeleteClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct EventsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Event instances. 
        public let events: EventList?

        public init(marker: String? = nil, events: EventList? = nil) {
            self.marker = marker
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let events = dictionary["Events"] as? [String: Any] { self.events = try Redshift.EventList(dictionary: events) } else { self.events = nil }
        }
    }

    public struct TaggedResourceListMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of tags with their associated resources.
        public let taggedResources: TaggedResourceList?

        public init(marker: String? = nil, taggedResources: TaggedResourceList? = nil) {
            self.marker = marker
            self.taggedResources = taggedResources
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let taggedResources = dictionary["TaggedResources"] as? [String: Any] { self.taggedResources = try Redshift.TaggedResourceList(dictionary: taggedResources) } else { self.taggedResources = nil }
        }
    }

    public struct RevokeClusterSecurityGroupIngressResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroup = dictionary["ClusterSecurityGroup"] as? [String: Any] { self.clusterSecurityGroup = try Redshift.ClusterSecurityGroup(dictionary: clusterSecurityGroup) } else { self.clusterSecurityGroup = nil }
        }
    }

    public struct AuthorizeClusterSecurityGroupIngressMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IP range to be added the Amazon Redshift security group.
        public let cIDRIP: String?
        /// The EC2 security group to be added the Amazon Redshift security group.
        public let eC2SecurityGroupName: String?
        /// The AWS account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value.  Example: 111122223333 
        public let eC2SecurityGroupOwnerId: String?
        /// The name of the security group to which the ingress rule is added.
        public let clusterSecurityGroupName: String

        public init(cIDRIP: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String) {
            self.cIDRIP = cIDRIP
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.cIDRIP = dictionary["CIDRIP"] as? String
            self.eC2SecurityGroupName = dictionary["EC2SecurityGroupName"] as? String
            self.eC2SecurityGroupOwnerId = dictionary["EC2SecurityGroupOwnerId"] as? String
            guard let clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSecurityGroupName") }
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }
    }

    public struct ClusterSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ClusterSecurityGroup instances. 
        public let clusterSecurityGroups: ClusterSecurityGroups?

        public init(marker: String? = nil, clusterSecurityGroups: ClusterSecurityGroups? = nil) {
            self.marker = marker
            self.clusterSecurityGroups = clusterSecurityGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let clusterSecurityGroups = dictionary["ClusterSecurityGroups"] as? [String: Any] { self.clusterSecurityGroups = try Redshift.ClusterSecurityGroups(dictionary: clusterSecurityGroups) } else { self.clusterSecurityGroups = nil }
        }
    }

    public struct DescribeTableRestoreStatusMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Redshift cluster that the table is being restored to.
        public let clusterIdentifier: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        public let maxRecords: Int32?
        /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
        public let tableRestoreRequestId: String?
        /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
        public let marker: String?

        public init(clusterIdentifier: String? = nil, maxRecords: Int32? = nil, tableRestoreRequestId: String? = nil, marker: String? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.maxRecords = maxRecords
            self.tableRestoreRequestId = tableRestoreRequestId
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.tableRestoreRequestId = dictionary["TableRestoreRequestId"] as? String
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct RebootClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct DeleteHsmClientCertificateMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the HSM client certificate to be deleted.
        public let hsmClientCertificateIdentifier: String

        public init(hsmClientCertificateIdentifier: String) {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String else { throw InitializableError.missingRequiredParam("HsmClientCertificateIdentifier") }
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }
    }

    public struct OrderableClusterOptionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// An OrderableClusterOption structure containing information about orderable options for the cluster.
        public let orderableClusterOptions: OrderableClusterOptionsList?

        public init(marker: String? = nil, orderableClusterOptions: OrderableClusterOptionsList? = nil) {
            self.marker = marker
            self.orderableClusterOptions = orderableClusterOptions
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let orderableClusterOptions = dictionary["OrderableClusterOptions"] as? [String: Any] { self.orderableClusterOptions = try Redshift.OrderableClusterOptionsList(dictionary: orderableClusterOptions) } else { self.orderableClusterOptions = nil }
        }
    }

    public struct AccountsWithRestoreAccessList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountWithRestoreAccess: [AccountWithRestoreAccess]?

        public init(accountWithRestoreAccess: [AccountWithRestoreAccess]? = nil) {
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

        public init(dictionary: [String: Any]) throws {
            if let accountWithRestoreAccess = dictionary["AccountWithRestoreAccess"] as? [[String: Any]] {
                self.accountWithRestoreAccess = try accountWithRestoreAccess.map({ try AccountWithRestoreAccess(dictionary: $0) })
            } else { 
                self.accountWithRestoreAccess = nil
            }
        }
    }

    public struct ClusterList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: [Cluster]?

        public init(cluster: [Cluster]? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [[String: Any]] {
                self.cluster = try cluster.map({ try Cluster(dictionary: $0) })
            } else { 
                self.cluster = nil
            }
        }
    }

    public struct AuthorizeSnapshotAccessMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// The identifier of the snapshot the account is authorized to restore.
        public let snapshotIdentifier: String
        /// The identifier of the AWS customer account authorized to restore the specified snapshot.
        public let accountWithRestoreAccess: String

        public init(snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String, accountWithRestoreAccess: String) {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotClusterIdentifier = dictionary["SnapshotClusterIdentifier"] as? String
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
            guard let accountWithRestoreAccess = dictionary["AccountWithRestoreAccess"] as? String else { throw InitializableError.missingRequiredParam("AccountWithRestoreAccess") }
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }
    }

    public enum TableRestoreStatusType: String, CustomStringConvertible {
        case pending = "PENDING"
        case in_progress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct Endpoint: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The DNS address of the Cluster.
        public let address: String?
        /// The port that the database engine is listening on.
        public let port: Int32?

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            self.address = dictionary["Address"] as? String
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct ReservedNodeList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let reservedNode: [ReservedNode]?

        public init(reservedNode: [ReservedNode]? = nil) {
            self.reservedNode = reservedNode
        }

        public init(dictionary: [String: Any]) throws {
            if let reservedNode = dictionary["ReservedNode"] as? [[String: Any]] {
                self.reservedNode = try reservedNode.map({ try ReservedNode(dictionary: $0) })
            } else { 
                self.reservedNode = nil
            }
        }
    }

    public struct ClusterVersionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterVersion: [ClusterVersion]?

        public init(clusterVersion: [ClusterVersion]? = nil) {
            self.clusterVersion = clusterVersion
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterVersion = dictionary["ClusterVersion"] as? [[String: Any]] {
                self.clusterVersion = try clusterVersion.map({ try ClusterVersion(dictionary: $0) })
            } else { 
                self.clusterVersion = nil
            }
        }
    }

    public struct ClusterParameterGroupStatusList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterParameterGroup: [ClusterParameterGroupStatus]?

        public init(clusterParameterGroup: [ClusterParameterGroupStatus]? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterParameterGroup = dictionary["ClusterParameterGroup"] as? [[String: Any]] {
                self.clusterParameterGroup = try clusterParameterGroup.map({ try ClusterParameterGroupStatus(dictionary: $0) })
            } else { 
                self.clusterParameterGroup = nil
            }
        }
    }

    public struct CreateClusterParameterGroupResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterParameterGroup: ClusterParameterGroup?

        public init(clusterParameterGroup: ClusterParameterGroup? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterParameterGroup = dictionary["ClusterParameterGroup"] as? [String: Any] { self.clusterParameterGroup = try Redshift.ClusterParameterGroup(dictionary: clusterParameterGroup) } else { self.clusterParameterGroup = nil }
        }
    }

    public struct HsmConfigurationMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of HsmConfiguration objects.
        public let hsmConfigurations: HsmConfigurationList?

        public init(marker: String? = nil, hsmConfigurations: HsmConfigurationList? = nil) {
            self.marker = marker
            self.hsmConfigurations = hsmConfigurations
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let hsmConfigurations = dictionary["HsmConfigurations"] as? [String: Any] { self.hsmConfigurations = try Redshift.HsmConfigurationList(dictionary: hsmConfigurations) } else { self.hsmConfigurations = nil }
        }
    }

    public struct PurchaseReservedNodeOfferingMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the reserved node offering you want to purchase.
        public let reservedNodeOfferingId: String
        /// The number of reserved nodes that you want to purchase. Default: 1 
        public let nodeCount: Int32?

        public init(reservedNodeOfferingId: String, nodeCount: Int32? = nil) {
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.nodeCount = nodeCount
        }

        public init(dictionary: [String: Any]) throws {
            guard let reservedNodeOfferingId = dictionary["ReservedNodeOfferingId"] as? String else { throw InitializableError.missingRequiredParam("ReservedNodeOfferingId") }
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.nodeCount = dictionary["NodeCount"] as? Int32
        }
    }

    public struct ModifySnapshotCopyRetentionPeriodResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct HsmStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        public let status: String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?

        public init(status: String? = nil, hsmConfigurationIdentifier: String? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.status = status
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
        }
    }

    public struct ModifyClusterSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        public let subnetIds: SubnetIdentifierList
        /// The name of the subnet group to be modified.
        public let clusterSubnetGroupName: String
        /// A text description of the subnet group to be modified.
        public let description: String?

        public init(subnetIds: SubnetIdentifierList, clusterSubnetGroupName: String, description: String? = nil) {
            self.subnetIds = subnetIds
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetIds = dictionary["SubnetIds"] as? [String: Any] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = try Redshift.SubnetIdentifierList(dictionary: subnetIds)
            guard let clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSubnetGroupName") }
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = dictionary["Description"] as? String
        }
    }

    public struct RestoreTableFromClusterSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tableRestoreStatus: TableRestoreStatus?

        public init(tableRestoreStatus: TableRestoreStatus? = nil) {
            self.tableRestoreStatus = tableRestoreStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let tableRestoreStatus = dictionary["TableRestoreStatus"] as? [String: Any] { self.tableRestoreStatus = try Redshift.TableRestoreStatus(dictionary: tableRestoreStatus) } else { self.tableRestoreStatus = nil }
        }
    }

    public struct TableRestoreStatusList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tableRestoreStatus: [TableRestoreStatus]?

        public init(tableRestoreStatus: [TableRestoreStatus]? = nil) {
            self.tableRestoreStatus = tableRestoreStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let tableRestoreStatus = dictionary["TableRestoreStatus"] as? [[String: Any]] {
                self.tableRestoreStatus = try tableRestoreStatus.map({ try TableRestoreStatus(dictionary: $0) })
            } else { 
                self.tableRestoreStatus = nil
            }
        }
    }

    public struct AuthorizeSnapshotAccessResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [String: Any] { self.snapshot = try Redshift.Snapshot(dictionary: snapshot) } else { self.snapshot = nil }
        }
    }

    public struct ClusterSubnetGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid. 
        public let subnetGroupStatus: String?
        /// A list of the VPC Subnet elements. 
        public let subnets: SubnetList?
        /// The VPC ID of the cluster subnet group.
        public let vpcId: String?
        /// The list of tags for the cluster subnet group.
        public let tags: TagList?
        /// The name of the cluster subnet group.
        public let clusterSubnetGroupName: String?
        /// The description of the cluster subnet group.
        public let description: String?

        public init(subnetGroupStatus: String? = nil, subnets: SubnetList? = nil, vpcId: String? = nil, tags: TagList? = nil, clusterSubnetGroupName: String? = nil, description: String? = nil) {
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
            self.tags = tags
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetGroupStatus = dictionary["SubnetGroupStatus"] as? String
            if let subnets = dictionary["Subnets"] as? [String: Any] { self.subnets = try Redshift.SubnetList(dictionary: subnets) } else { self.subnets = nil }
            self.vpcId = dictionary["VpcId"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreateHsmConfigurationMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public let hsmPartitionName: String
        /// The password required to access the HSM partition.
        public let hsmPartitionPassword: String
        /// A list of tag instances.
        public let tags: TagList?
        /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
        public let hsmServerPublicCertificate: String
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public let hsmIpAddress: String
        /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
        public let hsmConfigurationIdentifier: String
        /// A text description of the HSM configuration to be created.
        public let description: String

        public init(hsmPartitionName: String, hsmPartitionPassword: String, tags: TagList? = nil, hsmServerPublicCertificate: String, hsmIpAddress: String, hsmConfigurationIdentifier: String, description: String) {
            self.hsmPartitionName = hsmPartitionName
            self.hsmPartitionPassword = hsmPartitionPassword
            self.tags = tags
            self.hsmServerPublicCertificate = hsmServerPublicCertificate
            self.hsmIpAddress = hsmIpAddress
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let hsmPartitionName = dictionary["HsmPartitionName"] as? String else { throw InitializableError.missingRequiredParam("HsmPartitionName") }
            self.hsmPartitionName = hsmPartitionName
            guard let hsmPartitionPassword = dictionary["HsmPartitionPassword"] as? String else { throw InitializableError.missingRequiredParam("HsmPartitionPassword") }
            self.hsmPartitionPassword = hsmPartitionPassword
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let hsmServerPublicCertificate = dictionary["HsmServerPublicCertificate"] as? String else { throw InitializableError.missingRequiredParam("HsmServerPublicCertificate") }
            self.hsmServerPublicCertificate = hsmServerPublicCertificate
            guard let hsmIpAddress = dictionary["HsmIpAddress"] as? String else { throw InitializableError.missingRequiredParam("HsmIpAddress") }
            self.hsmIpAddress = hsmIpAddress
            guard let hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String else { throw InitializableError.missingRequiredParam("HsmConfigurationIdentifier") }
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct RestoreTableFromClusterSnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
        public let snapshotIdentifier: String
        /// The name of the source database that contains the table to restore from.
        public let sourceDatabaseName: String
        /// The name of the source table to restore from.
        public let sourceTableName: String
        /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
        public let sourceSchemaName: String?
        /// The identifier of the Amazon Redshift cluster to restore the table to.
        public let clusterIdentifier: String
        /// The name of the database to restore the table to.
        public let targetDatabaseName: String?
        /// The name of the table to create as a result of the current request.
        public let newTableName: String
        /// The name of the schema to restore the table to.
        public let targetSchemaName: String?

        public init(snapshotIdentifier: String, sourceDatabaseName: String, sourceTableName: String, sourceSchemaName: String? = nil, clusterIdentifier: String, targetDatabaseName: String? = nil, newTableName: String, targetSchemaName: String? = nil) {
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceTableName = sourceTableName
            self.sourceSchemaName = sourceSchemaName
            self.clusterIdentifier = clusterIdentifier
            self.targetDatabaseName = targetDatabaseName
            self.newTableName = newTableName
            self.targetSchemaName = targetSchemaName
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
            guard let sourceDatabaseName = dictionary["SourceDatabaseName"] as? String else { throw InitializableError.missingRequiredParam("SourceDatabaseName") }
            self.sourceDatabaseName = sourceDatabaseName
            guard let sourceTableName = dictionary["SourceTableName"] as? String else { throw InitializableError.missingRequiredParam("SourceTableName") }
            self.sourceTableName = sourceTableName
            self.sourceSchemaName = dictionary["SourceSchemaName"] as? String
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.targetDatabaseName = dictionary["TargetDatabaseName"] as? String
            guard let newTableName = dictionary["NewTableName"] as? String else { throw InitializableError.missingRequiredParam("NewTableName") }
            self.newTableName = newTableName
            self.targetSchemaName = dictionary["TargetSchemaName"] as? String
        }
    }

    public struct DisableSnapshotCopyResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value for the resource tag.
        public let value: String?
        /// The key, or name, for the resource tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct ResizeProgressMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED 
        public let status: String?
        /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
        public let estimatedTimeToCompletionInSeconds: Int64?
        /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node 
        public let targetClusterType: String?
        /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
        public let avgResizeRateInMegaBytesPerSecond: Double?
        /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
        public let progressInMegaBytes: Int64?
        /// The names of tables that are being currently imported. Valid Values: List of table names.
        public let importTablesInProgress: [String]?
        /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
        public let totalResizeDataInMegaBytes: Int64?
        /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
        public let elapsedTimeInSeconds: Int64?
        /// The names of tables that have not been yet imported. Valid Values: List of table names
        public let importTablesNotStarted: [String]?
        /// The number of nodes that the cluster will have after the resize operation is complete.
        public let targetNumberOfNodes: Int32?
        /// The node type that the cluster will have after the resize operation is complete.
        public let targetNodeType: String?
        /// The names of tables that have been completely imported . Valid Values: List of table names.
        public let importTablesCompleted: [String]?

        public init(status: String? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, targetClusterType: String? = nil, avgResizeRateInMegaBytesPerSecond: Double? = nil, progressInMegaBytes: Int64? = nil, importTablesInProgress: [String]? = nil, totalResizeDataInMegaBytes: Int64? = nil, elapsedTimeInSeconds: Int64? = nil, importTablesNotStarted: [String]? = nil, targetNumberOfNodes: Int32? = nil, targetNodeType: String? = nil, importTablesCompleted: [String]? = nil) {
            self.status = status
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.targetClusterType = targetClusterType
            self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
            self.progressInMegaBytes = progressInMegaBytes
            self.importTablesInProgress = importTablesInProgress
            self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.importTablesNotStarted = importTablesNotStarted
            self.targetNumberOfNodes = targetNumberOfNodes
            self.targetNodeType = targetNodeType
            self.importTablesCompleted = importTablesCompleted
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.estimatedTimeToCompletionInSeconds = dictionary["EstimatedTimeToCompletionInSeconds"] as? Int64
            self.targetClusterType = dictionary["TargetClusterType"] as? String
            self.avgResizeRateInMegaBytesPerSecond = dictionary["AvgResizeRateInMegaBytesPerSecond"] as? Double
            self.progressInMegaBytes = dictionary["ProgressInMegaBytes"] as? Int64
            self.importTablesInProgress = dictionary["ImportTablesInProgress"] as? [String]
            self.totalResizeDataInMegaBytes = dictionary["TotalResizeDataInMegaBytes"] as? Int64
            self.elapsedTimeInSeconds = dictionary["ElapsedTimeInSeconds"] as? Int64
            self.importTablesNotStarted = dictionary["ImportTablesNotStarted"] as? [String]
            self.targetNumberOfNodes = dictionary["TargetNumberOfNodes"] as? Int32
            self.targetNodeType = dictionary["TargetNodeType"] as? String
            self.importTablesCompleted = dictionary["ImportTablesCompleted"] as? [String]
        }
    }

    public struct OrderableClusterOption: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of availability zones for the orderable cluster.
        public let availabilityZones: AvailabilityZoneList?
        /// The cluster type, for example multi-node. 
        public let clusterType: String?
        /// The version of the orderable cluster.
        public let clusterVersion: String?
        /// The node type for the orderable cluster.
        public let nodeType: String?

        public init(availabilityZones: AvailabilityZoneList? = nil, clusterType: String? = nil, clusterVersion: String? = nil, nodeType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
        }

        public init(dictionary: [String: Any]) throws {
            if let availabilityZones = dictionary["AvailabilityZones"] as? [String: Any] { self.availabilityZones = try Redshift.AvailabilityZoneList(dictionary: availabilityZones) } else { self.availabilityZones = nil }
            self.clusterType = dictionary["ClusterType"] as? String
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.nodeType = dictionary["NodeType"] as? String
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        public let severity: String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String
        /// The name of the event subscription to be created. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let subscriptionName: String
        /// A list of tag instances.
        public let tags: TagList?
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it. 
        public let enabled: Bool?
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        public let sourceType: String?
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        public let sourceIds: SourceIdsList?

        public init(severity: String? = nil, snsTopicArn: String, subscriptionName: String, tags: TagList? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, sourceType: String? = nil, sourceIds: SourceIdsList? = nil) {
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.subscriptionName = subscriptionName
            self.tags = tags
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.sourceType = sourceType
            self.sourceIds = sourceIds
        }

        public init(dictionary: [String: Any]) throws {
            self.severity = dictionary["Severity"] as? String
            guard let snsTopicArn = dictionary["SnsTopicArn"] as? String else { throw InitializableError.missingRequiredParam("SnsTopicArn") }
            self.snsTopicArn = snsTopicArn
            guard let subscriptionName = dictionary["SubscriptionName"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionName") }
            self.subscriptionName = subscriptionName
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            if let eventCategories = dictionary["EventCategories"] as? [String: Any] { self.eventCategories = try Redshift.EventCategoriesList(dictionary: eventCategories) } else { self.eventCategories = nil }
            self.enabled = dictionary["Enabled"] as? Bool
            self.sourceType = dictionary["SourceType"] as? String
            if let sourceIds = dictionary["SourceIds"] as? [String: Any] { self.sourceIds = try Redshift.SourceIdsList(dictionary: sourceIds) } else { self.sourceIds = nil }
        }
    }

    public struct ClusterIamRoleList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterIamRole: [ClusterIamRole]?

        public init(clusterIamRole: [ClusterIamRole]? = nil) {
            self.clusterIamRole = clusterIamRole
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterIamRole = dictionary["ClusterIamRole"] as? [[String: Any]] {
                self.clusterIamRole = try clusterIamRole.map({ try ClusterIamRole(dictionary: $0) })
            } else { 
                self.clusterIamRole = nil
            }
        }
    }

    public struct EventCategoriesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event categories descriptions.
        public let eventCategoriesMapList: EventCategoriesMapList?

        public init(eventCategoriesMapList: EventCategoriesMapList? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        public init(dictionary: [String: Any]) throws {
            if let eventCategoriesMapList = dictionary["EventCategoriesMapList"] as? [String: Any] { self.eventCategoriesMapList = try Redshift.EventCategoriesMapList(dictionary: eventCategoriesMapList) } else { self.eventCategoriesMapList = nil }
        }
    }

    public struct RecurringCharge: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The amount charged per the period of time specified by the recurring charge frequency.
        public let recurringChargeAmount: Double?
        /// The frequency at which the recurring charge amount is applied.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        public init(dictionary: [String: Any]) throws {
            self.recurringChargeAmount = dictionary["RecurringChargeAmount"] as? Double
            self.recurringChargeFrequency = dictionary["RecurringChargeFrequency"] as? String
        }
    }

    public struct IPRangeList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let iPRange: [IPRange]?

        public init(iPRange: [IPRange]? = nil) {
            self.iPRange = iPRange
        }

        public init(dictionary: [String: Any]) throws {
            if let iPRange = dictionary["IPRange"] as? [[String: Any]] {
                self.iPRange = try iPRange.map({ try IPRange(dictionary: $0) })
            } else { 
                self.iPRange = nil
            }
        }
    }

    public struct HsmClientCertificateMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
        public let hsmClientCertificates: HsmClientCertificateList?

        public init(marker: String? = nil, hsmClientCertificates: HsmClientCertificateList? = nil) {
            self.marker = marker
            self.hsmClientCertificates = hsmClientCertificates
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let hsmClientCertificates = dictionary["HsmClientCertificates"] as? [String: Any] { self.hsmClientCertificates = try Redshift.HsmClientCertificateList(dictionary: hsmClientCertificates) } else { self.hsmClientCertificates = nil }
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        public let startTime: Date?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEvents request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.   Specify cluster when SourceIdentifier is a cluster identifier.   Specify cluster-security-group when SourceIdentifier is a cluster security group name.   Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.   Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.  
        public let sourceType: SourceType?
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        public let endTime: Date?
        /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.   Specify a cluster identifier when SourceType is cluster.   Specify a cluster security group name when SourceType is cluster-security-group.   Specify a cluster parameter group name when SourceType is cluster-parameter-group.   Specify a cluster snapshot identifier when SourceType is cluster-snapshot.  
        public let sourceIdentifier: String?
        /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60 
        public let duration: Int32?

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, marker: String? = nil, sourceType: SourceType? = nil, endTime: Date? = nil, sourceIdentifier: String? = nil, duration: Int32? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.duration = duration
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let sourceType = dictionary["SourceType"] as? String { self.sourceType = SourceType(rawValue: sourceType) } else { self.sourceType = nil }
            self.endTime = dictionary["EndTime"] as? Date
            self.sourceIdentifier = dictionary["SourceIdentifier"] as? String
            self.duration = dictionary["Duration"] as? Int32
        }
    }

    public struct EnableSnapshotCopyMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The destination region that you want to copy snapshots to. Constraints: Must be the name of a valid region. For more information, see Regions and Endpoints in the Amazon Web Services General Reference. 
        public let destinationRegion: String
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
        public let retentionPeriod: Int32?
        /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
        public let clusterIdentifier: String
        /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        public let snapshotCopyGrantName: String?

        public init(destinationRegion: String, retentionPeriod: Int32? = nil, clusterIdentifier: String, snapshotCopyGrantName: String? = nil) {
            self.destinationRegion = destinationRegion
            self.retentionPeriod = retentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        public init(dictionary: [String: Any]) throws {
            guard let destinationRegion = dictionary["DestinationRegion"] as? String else { throw InitializableError.missingRequiredParam("DestinationRegion") }
            self.destinationRegion = destinationRegion
            self.retentionPeriod = dictionary["RetentionPeriod"] as? Int32
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String
        }
    }

    public struct DescribeClusterSecurityGroupsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSecurityGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// The name of a cluster security group for which you are requesting details. You can specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both.   Example: securitygroup1 
        public let clusterSecurityGroupName: String?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, tagKeys: TagKeyList? = nil, marker: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
            self.marker = dictionary["Marker"] as? String
            self.clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String
        }
    }

    public struct CreateClusterSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all security groups that are created by your AWS account.   Example: examplesecuritygroup 
        public let clusterSecurityGroupName: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A description for the security group.
        public let description: String

        public init(clusterSecurityGroupName: String, tags: TagList? = nil, description: String) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.tags = tags
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSecurityGroupName") }
            self.clusterSecurityGroupName = clusterSecurityGroupName
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct VpcSecurityGroupIdList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vpcSecurityGroupId: [String]?

        public init(vpcSecurityGroupId: [String]? = nil) {
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        public init(dictionary: [String: Any]) throws {
            self.vpcSecurityGroupId = dictionary["VpcSecurityGroupId"] as? [String]
        }
    }

    public struct DescribeHsmConfigurationsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmConfigurations request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
        public let hsmConfigurationIdentifier: String?
        /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, marker: String? = nil, hsmConfigurationIdentifier: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.marker = marker
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.marker = dictionary["Marker"] as? String
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct EventList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let event: [Event]?

        public init(event: [Event]? = nil) {
            self.event = event
        }

        public init(dictionary: [String: Any]) throws {
            if let event = dictionary["Event"] as? [[String: Any]] {
                self.event = try event.map({ try Event(dictionary: $0) })
            } else { 
                self.event = nil
            }
        }
    }

    public struct DeleteClusterSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [String: Any] { self.snapshot = try Redshift.Snapshot(dictionary: snapshot) } else { self.snapshot = nil }
        }
    }

    public struct EventInfoMapList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventInfoMap: [EventInfoMap]?

        public init(eventInfoMap: [EventInfoMap]? = nil) {
            self.eventInfoMap = eventInfoMap
        }

        public init(dictionary: [String: Any]) throws {
            if let eventInfoMap = dictionary["EventInfoMap"] as? [[String: Any]] {
                self.eventInfoMap = try eventInfoMap.map({ try EventInfoMap(dictionary: $0) })
            } else { 
                self.eventInfoMap = nil
            }
        }
    }

    public struct ClusterParameterGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        public let parameterGroupFamily: String?
        /// The list of tags for the cluster parameter group.
        public let tags: TagList?
        /// The description of the parameter group.
        public let description: String?

        public init(parameterGroupName: String? = nil, parameterGroupFamily: String? = nil, tags: TagList? = nil, description: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.parameterGroupFamily = parameterGroupFamily
            self.tags = tags
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterGroupName = dictionary["ParameterGroupName"] as? String
            self.parameterGroupFamily = dictionary["ParameterGroupFamily"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ReservedNode: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        public let startTime: Date?
        /// The recurring charges for the reserved node.
        public let recurringCharges: RecurringChargeList?
        /// The number of reserved compute nodes.
        public let nodeCount: Int32?
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        public let usagePrice: Double?
        /// The state of the reserved compute node. Possible Values:   pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.   active-This reserved node is owned by the caller and is available for use.   payment-failed-Payment failed for the purchase attempt.  
        public let state: String?
        /// The node type of the reserved node.
        public let nodeType: String?
        /// The unique identifier for the reservation.
        public let reservedNodeId: String?
        /// The currency code for the reserved cluster.
        public let currencyCode: String?
        /// The identifier for the reserved node offering.
        public let reservedNodeOfferingId: String?
        /// The duration of the node reservation in seconds.
        public let duration: Int32?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public let offeringType: String?
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        public let fixedPrice: Double?

        public init(startTime: Date? = nil, recurringCharges: RecurringChargeList? = nil, nodeCount: Int32? = nil, usagePrice: Double? = nil, state: String? = nil, nodeType: String? = nil, reservedNodeId: String? = nil, currencyCode: String? = nil, reservedNodeOfferingId: String? = nil, duration: Int32? = nil, offeringType: String? = nil, fixedPrice: Double? = nil) {
            self.startTime = startTime
            self.recurringCharges = recurringCharges
            self.nodeCount = nodeCount
            self.usagePrice = usagePrice
            self.state = state
            self.nodeType = nodeType
            self.reservedNodeId = reservedNodeId
            self.currencyCode = currencyCode
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.duration = duration
            self.offeringType = offeringType
            self.fixedPrice = fixedPrice
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            if let recurringCharges = dictionary["RecurringCharges"] as? [String: Any] { self.recurringCharges = try Redshift.RecurringChargeList(dictionary: recurringCharges) } else { self.recurringCharges = nil }
            self.nodeCount = dictionary["NodeCount"] as? Int32
            self.usagePrice = dictionary["UsagePrice"] as? Double
            self.state = dictionary["State"] as? String
            self.nodeType = dictionary["NodeType"] as? String
            self.reservedNodeId = dictionary["ReservedNodeId"] as? String
            self.currencyCode = dictionary["CurrencyCode"] as? String
            self.reservedNodeOfferingId = dictionary["ReservedNodeOfferingId"] as? String
            self.duration = dictionary["Duration"] as? Int32
            self.offeringType = dictionary["OfferingType"] as? String
            self.fixedPrice = dictionary["FixedPrice"] as? Double
        }
    }

    public struct RestoreStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        public let status: String?
        /// The size of the set of snapshot data used to restore the cluster.
        public let snapshotSizeInMegaBytes: Int64?
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup.
        public let currentRestoreRateInMegaBytesPerSecond: Double?
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore.
        public let estimatedTimeToCompletionInSeconds: Int64?
        /// The number of megabytes that have been transferred from snapshot storage.
        public let progressInMegaBytes: Int64?
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish.
        public let elapsedTimeInSeconds: Int64?

        public init(status: String? = nil, snapshotSizeInMegaBytes: Int64? = nil, currentRestoreRateInMegaBytesPerSecond: Double? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, progressInMegaBytes: Int64? = nil, elapsedTimeInSeconds: Int64? = nil) {
            self.status = status
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.snapshotSizeInMegaBytes = dictionary["SnapshotSizeInMegaBytes"] as? Int64
            self.currentRestoreRateInMegaBytesPerSecond = dictionary["CurrentRestoreRateInMegaBytesPerSecond"] as? Double
            self.estimatedTimeToCompletionInSeconds = dictionary["EstimatedTimeToCompletionInSeconds"] as? Int64
            self.progressInMegaBytes = dictionary["ProgressInMegaBytes"] as? Int64
            self.elapsedTimeInSeconds = dictionary["ElapsedTimeInSeconds"] as? Int64
        }
    }

    public struct RestoreFromClusterSnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?
        /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
        public let ownerAccount: String?
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The node type that the restored cluster will be provisioned with. Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds2.xlarge into ds1.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type. For more information about node types, see  About Clusters and Nodes in the Amazon Redshift Cluster Management Guide 
        public let nodeType: String?
        /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        public let clusterIdentifier: String
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterParameterGroupName: String?
        /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-1a 
        public let availabilityZone: String?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// If true, the cluster can be accessed from a public network. 
        public let publiclyAccessible: Bool?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated at any time.
        public let iamRoles: IamRoleArnList?
        /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. Example: my-snapshot-id 
        public let snapshotIdentifier: String
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// The elastic IP (EIP) address for the cluster.
        public let elasticIp: String?
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide.  Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
        public let clusterSubnetGroupName: String?
        /// Reserved.
        public let additionalInfo: String?
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.  Default: true 
        public let allowVersionUpgrade: Bool?
        /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Constraints: Must be between 1115 and 65535.
        public let port: Int32?
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
        public let kmsKeyId: String?

        public init(clusterSecurityGroups: ClusterSecurityGroupNameList? = nil, snapshotClusterIdentifier: String? = nil, ownerAccount: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, enhancedVpcRouting: Bool? = nil, nodeType: String? = nil, clusterIdentifier: String, clusterParameterGroupName: String? = nil, availabilityZone: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, publiclyAccessible: Bool? = nil, hsmConfigurationIdentifier: String? = nil, iamRoles: IamRoleArnList? = nil, snapshotIdentifier: String, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, clusterSubnetGroupName: String? = nil, additionalInfo: String? = nil, allowVersionUpgrade: Bool? = nil, port: Int32? = nil, kmsKeyId: String? = nil) {
            self.clusterSecurityGroups = clusterSecurityGroups
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.ownerAccount = ownerAccount
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.enhancedVpcRouting = enhancedVpcRouting
            self.nodeType = nodeType
            self.clusterIdentifier = clusterIdentifier
            self.clusterParameterGroupName = clusterParameterGroupName
            self.availabilityZone = availabilityZone
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.publiclyAccessible = publiclyAccessible
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.iamRoles = iamRoles
            self.snapshotIdentifier = snapshotIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.additionalInfo = additionalInfo
            self.allowVersionUpgrade = allowVersionUpgrade
            self.port = port
            self.kmsKeyId = kmsKeyId
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroups = dictionary["ClusterSecurityGroups"] as? [String: Any] { self.clusterSecurityGroups = try Redshift.ClusterSecurityGroupNameList(dictionary: clusterSecurityGroups) } else { self.clusterSecurityGroups = nil }
            self.snapshotClusterIdentifier = dictionary["SnapshotClusterIdentifier"] as? String
            self.ownerAccount = dictionary["OwnerAccount"] as? String
            if let vpcSecurityGroupIds = dictionary["VpcSecurityGroupIds"] as? [String: Any] { self.vpcSecurityGroupIds = try Redshift.VpcSecurityGroupIdList(dictionary: vpcSecurityGroupIds) } else { self.vpcSecurityGroupIds = nil }
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            self.nodeType = dictionary["NodeType"] as? String
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.clusterParameterGroupName = dictionary["ClusterParameterGroupName"] as? String
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            self.automatedSnapshotRetentionPeriod = dictionary["AutomatedSnapshotRetentionPeriod"] as? Int32
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            if let iamRoles = dictionary["IamRoles"] as? [String: Any] { self.iamRoles = try Redshift.IamRoleArnList(dictionary: iamRoles) } else { self.iamRoles = nil }
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
            self.elasticIp = dictionary["ElasticIp"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String
            self.additionalInfo = dictionary["AdditionalInfo"] as? String
            self.allowVersionUpgrade = dictionary["AllowVersionUpgrade"] as? Bool
            self.port = dictionary["Port"] as? Int32
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
        }
    }

    public struct DeleteTagsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String
        /// The tag key that you want to delete.
        public let tagKeys: TagKeyList

        public init(resourceName: String, tagKeys: TagKeyList) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceName = dictionary["ResourceName"] as? String else { throw InitializableError.missingRequiredParam("ResourceName") }
            self.resourceName = resourceName
            guard let tagKeys = dictionary["TagKeys"] as? [String: Any] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys)
        }
    }

    public struct RebootClusterMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The cluster identifier.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct ReservedNodesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// The list of ReservedNode objects.
        public let reservedNodes: ReservedNodeList?

        public init(marker: String? = nil, reservedNodes: ReservedNodeList? = nil) {
            self.marker = marker
            self.reservedNodes = reservedNodes
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let reservedNodes = dictionary["ReservedNodes"] as? [String: Any] { self.reservedNodes = try Redshift.ReservedNodeList(dictionary: reservedNodes) } else { self.reservedNodes = nil }
        }
    }

    public struct DescribeLoggingStatusMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster from which to get the logging status. Example: examplecluster 
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct ResetClusterParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied.  Constraints: A maximum of 20 parameters can be reset in a single request.
        public let parameters: ParametersList?
        /// If true, all parameters in the specified parameter group will be reset to their default values.  Default: true 
        public let resetAllParameters: Bool?
        /// The name of the cluster parameter group to be reset.
        public let parameterGroupName: String

        public init(parameters: ParametersList? = nil, resetAllParameters: Bool? = nil, parameterGroupName: String) {
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
            self.parameterGroupName = parameterGroupName
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] { self.parameters = try Redshift.ParametersList(dictionary: parameters) } else { self.parameters = nil }
            self.resetAllParameters = dictionary["ResetAllParameters"] as? Bool
            guard let parameterGroupName = dictionary["ParameterGroupName"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupName") }
            self.parameterGroupName = parameterGroupName
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the Amazon Redshift event notification subscription to be deleted.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptionName = dictionary["SubscriptionName"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionName") }
            self.subscriptionName = subscriptionName
        }
    }

    public struct DescribeOrderableClusterOptionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from DescribeClusterVersions.
        public let clusterVersion: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeOrderableClusterOptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
        public let nodeType: String?

        public init(maxRecords: Int32? = nil, clusterVersion: String? = nil, marker: String? = nil, nodeType: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterVersion = clusterVersion
            self.marker = marker
            self.nodeType = nodeType
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.marker = dictionary["Marker"] as? String
            self.nodeType = dictionary["NodeType"] as? String
        }
    }

    public struct IamRoleArnList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let iamRoleArn: [String]?

        public init(iamRoleArn: [String]? = nil) {
            self.iamRoleArn = iamRoleArn
        }

        public init(dictionary: [String: Any]) throws {
            self.iamRoleArn = dictionary["IamRoleArn"] as? [String]
        }
    }

    public struct SourceIdsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let sourceId: [String]?

        public init(sourceId: [String]? = nil) {
            self.sourceId = sourceId
        }

        public init(dictionary: [String: Any]) throws {
            self.sourceId = dictionary["SourceId"] as? [String]
        }
    }

    public struct ClusterVersion: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version number used by the cluster.
        public let clusterVersion: String?
        /// The name of the cluster parameter group family for the cluster.
        public let clusterParameterGroupFamily: String?
        /// The description of the cluster version.
        public let description: String?

        public init(clusterVersion: String? = nil, clusterParameterGroupFamily: String? = nil, description: String? = nil) {
            self.clusterVersion = clusterVersion
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.clusterParameterGroupFamily = dictionary["ClusterParameterGroupFamily"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIdentifier = dictionary["SubnetIdentifier"] as? [String]
        }
    }

    public struct Subnet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the subnet.
        public let subnetIdentifier: String?
        public let subnetAvailabilityZone: AvailabilityZone?
        /// The status of the subnet.
        public let subnetStatus: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIdentifier = dictionary["SubnetIdentifier"] as? String
            if let subnetAvailabilityZone = dictionary["SubnetAvailabilityZone"] as? [String: Any] { self.subnetAvailabilityZone = try Redshift.AvailabilityZone(dictionary: subnetAvailabilityZone) } else { self.subnetAvailabilityZone = nil }
            self.subnetStatus = dictionary["SubnetStatus"] as? String
        }
    }

    public struct EC2SecurityGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the EC2 security group.
        public let status: String?
        /// The AWS ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field. 
        public let eC2SecurityGroupOwnerId: String?
        /// The list of tags for the EC2 security group.
        public let tags: TagList?
        /// The name of the EC2 Security Group.
        public let eC2SecurityGroupName: String?

        public init(status: String? = nil, eC2SecurityGroupOwnerId: String? = nil, tags: TagList? = nil, eC2SecurityGroupName: String? = nil) {
            self.status = status
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.tags = tags
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.eC2SecurityGroupOwnerId = dictionary["EC2SecurityGroupOwnerId"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.eC2SecurityGroupName = dictionary["EC2SecurityGroupName"] as? String
        }
    }

    public struct Parameter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the parameter.
        public let parameterValue: String?
        /// The valid range of values for the parameter.
        public let allowedValues: String?
        /// The data type of the parameter.
        public let dataType: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        public let applyType: ParameterApplyType?
        /// The source of the parameter value, such as "engine-default" or "user".
        public let source: String?
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        public let isModifiable: Bool?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// A description of the parameter.
        public let description: String?

        public init(parameterValue: String? = nil, allowedValues: String? = nil, dataType: String? = nil, parameterName: String? = nil, applyType: ParameterApplyType? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.parameterName = parameterName
            self.applyType = applyType
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterValue = dictionary["ParameterValue"] as? String
            self.allowedValues = dictionary["AllowedValues"] as? String
            self.dataType = dictionary["DataType"] as? String
            self.parameterName = dictionary["ParameterName"] as? String
            if let applyType = dictionary["ApplyType"] as? String { self.applyType = ParameterApplyType(rawValue: applyType) } else { self.applyType = nil }
            self.source = dictionary["Source"] as? String
            self.isModifiable = dictionary["IsModifiable"] as? Bool
            self.minimumEngineVersion = dictionary["MinimumEngineVersion"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreateClusterParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the cluster parameter group. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique withing your AWS account.    This value is stored as a lower-case string. 
        public let parameterGroupName: String
        /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call DescribeClusterParameterGroups. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". 
        public let parameterGroupFamily: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A description of the parameter group.
        public let description: String

        public init(parameterGroupName: String, parameterGroupFamily: String, tags: TagList? = nil, description: String) {
            self.parameterGroupName = parameterGroupName
            self.parameterGroupFamily = parameterGroupFamily
            self.tags = tags
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let parameterGroupName = dictionary["ParameterGroupName"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupName") }
            self.parameterGroupName = parameterGroupName
            guard let parameterGroupFamily = dictionary["ParameterGroupFamily"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupFamily") }
            self.parameterGroupFamily = parameterGroupFamily
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct DescribeHsmClientCertificatesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
        public let hsmClientCertificateIdentifier: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmClientCertificates request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, hsmClientCertificateIdentifier: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.marker = marker
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
            self.marker = dictionary["Marker"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct DescribeResizeMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an AWS account are returned.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct ClusterVersionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Version elements. 
        public let clusterVersions: ClusterVersionList?

        public init(marker: String? = nil, clusterVersions: ClusterVersionList? = nil) {
            self.marker = marker
            self.clusterVersions = clusterVersions
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let clusterVersions = dictionary["ClusterVersions"] as? [String: Any] { self.clusterVersions = try Redshift.ClusterVersionList(dictionary: clusterVersions) } else { self.clusterVersions = nil }
        }
    }

    public struct ClusterSecurityGroups: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroup: [ClusterSecurityGroup]?

        public init(clusterSecurityGroup: [ClusterSecurityGroup]? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroup = dictionary["ClusterSecurityGroup"] as? [[String: Any]] {
                self.clusterSecurityGroup = try clusterSecurityGroup.map({ try ClusterSecurityGroup(dictionary: $0) })
            } else { 
                self.clusterSecurityGroup = nil
            }
        }
    }

    public struct Event: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The severity of the event. Values: ERROR, INFO
        public let severity: String?
        /// The text of this event.
        public let message: String?
        /// The source type for this event.
        public let sourceType: SourceType?
        /// The identifier of the event.
        public let eventId: String?
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// The identifier for the source of the event.
        public let sourceIdentifier: String?
        /// The date and time of the event.
        public let date: Date?

        public init(severity: String? = nil, message: String? = nil, sourceType: SourceType? = nil, eventId: String? = nil, eventCategories: EventCategoriesList? = nil, sourceIdentifier: String? = nil, date: Date? = nil) {
            self.severity = severity
            self.message = message
            self.sourceType = sourceType
            self.eventId = eventId
            self.eventCategories = eventCategories
            self.sourceIdentifier = sourceIdentifier
            self.date = date
        }

        public init(dictionary: [String: Any]) throws {
            self.severity = dictionary["Severity"] as? String
            self.message = dictionary["Message"] as? String
            if let sourceType = dictionary["SourceType"] as? String { self.sourceType = SourceType(rawValue: sourceType) } else { self.sourceType = nil }
            self.eventId = dictionary["EventId"] as? String
            if let eventCategories = dictionary["EventCategories"] as? [String: Any] { self.eventCategories = try Redshift.EventCategoriesList(dictionary: eventCategories) } else { self.eventCategories = nil }
            self.sourceIdentifier = dictionary["SourceIdentifier"] as? String
            self.date = dictionary["Date"] as? Date
        }
    }

    public struct SnapshotList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: [Snapshot]?

        public init(snapshot: [Snapshot]? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [[String: Any]] {
                self.snapshot = try snapshot.map({ try Snapshot(dictionary: $0) })
            } else { 
                self.snapshot = nil
            }
        }
    }

    public struct ReservedNodeOffering: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        public let recurringCharges: RecurringChargeList?
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        public let usagePrice: Double?
        /// The node type offered by the reserved node offering.
        public let nodeType: String?
        /// The currency code for the compute nodes offering.
        public let currencyCode: String?
        /// The offering identifier.
        public let reservedNodeOfferingId: String?
        /// The duration, in seconds, for which the offering will reserve the node.
        public let duration: Int32?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public let offeringType: String?
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        public let fixedPrice: Double?

        public init(recurringCharges: RecurringChargeList? = nil, usagePrice: Double? = nil, nodeType: String? = nil, currencyCode: String? = nil, reservedNodeOfferingId: String? = nil, duration: Int32? = nil, offeringType: String? = nil, fixedPrice: Double? = nil) {
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.nodeType = nodeType
            self.currencyCode = currencyCode
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.duration = duration
            self.offeringType = offeringType
            self.fixedPrice = fixedPrice
        }

        public init(dictionary: [String: Any]) throws {
            if let recurringCharges = dictionary["RecurringCharges"] as? [String: Any] { self.recurringCharges = try Redshift.RecurringChargeList(dictionary: recurringCharges) } else { self.recurringCharges = nil }
            self.usagePrice = dictionary["UsagePrice"] as? Double
            self.nodeType = dictionary["NodeType"] as? String
            self.currencyCode = dictionary["CurrencyCode"] as? String
            self.reservedNodeOfferingId = dictionary["ReservedNodeOfferingId"] as? String
            self.duration = dictionary["Duration"] as? Int32
            self.offeringType = dictionary["OfferingType"] as? String
            self.fixedPrice = dictionary["FixedPrice"] as? Double
        }
    }

    public struct RevokeSnapshotAccessResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [String: Any] { self.snapshot = try Redshift.Snapshot(dictionary: snapshot) } else { self.snapshot = nil }
        }
    }

    public struct CreateClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct EventCategoriesMap: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        public let sourceType: String?
        /// The events in the event category.
        public let events: EventInfoMapList?

        public init(sourceType: String? = nil, events: EventInfoMapList? = nil) {
            self.sourceType = sourceType
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            self.sourceType = dictionary["SourceType"] as? String
            if let events = dictionary["Events"] as? [String: Any] { self.events = try Redshift.EventInfoMapList(dictionary: events) } else { self.events = nil }
        }
    }

    public struct TableRestoreStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        public let message: String?
        /// The amount of data restored to the new table so far, in megabytes (MB).
        public let progressInMegaBytes: Int64?
        /// The name of the source schema that contains the table being restored.
        public let sourceSchemaName: String?
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        public let clusterIdentifier: String?
        /// The name of the database to restore the table to.
        public let targetDatabaseName: String?
        /// The total amount of data to restore to the new table, in megabytes (MB).
        public let totalDataInMegaBytes: Int64?
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        public let requestTime: Date?
        /// The unique identifier for the table restore request.
        public let tableRestoreRequestId: String?
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS 
        public let status: TableRestoreStatusType?
        /// The identifier of the snapshot that the table is being restored from.
        public let snapshotIdentifier: String?
        /// The name of the source database that contains the table being restored.
        public let sourceDatabaseName: String?
        /// The name of the source table being restored.
        public let sourceTableName: String?
        /// The name of the table to create as a result of the table restore request.
        public let newTableName: String?
        /// The name of the schema to restore the table to.
        public let targetSchemaName: String?

        public init(message: String? = nil, progressInMegaBytes: Int64? = nil, sourceSchemaName: String? = nil, clusterIdentifier: String? = nil, targetDatabaseName: String? = nil, totalDataInMegaBytes: Int64? = nil, requestTime: Date? = nil, tableRestoreRequestId: String? = nil, status: TableRestoreStatusType? = nil, snapshotIdentifier: String? = nil, sourceDatabaseName: String? = nil, sourceTableName: String? = nil, newTableName: String? = nil, targetSchemaName: String? = nil) {
            self.message = message
            self.progressInMegaBytes = progressInMegaBytes
            self.sourceSchemaName = sourceSchemaName
            self.clusterIdentifier = clusterIdentifier
            self.targetDatabaseName = targetDatabaseName
            self.totalDataInMegaBytes = totalDataInMegaBytes
            self.requestTime = requestTime
            self.tableRestoreRequestId = tableRestoreRequestId
            self.status = status
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceTableName = sourceTableName
            self.newTableName = newTableName
            self.targetSchemaName = targetSchemaName
        }

        public init(dictionary: [String: Any]) throws {
            self.message = dictionary["Message"] as? String
            self.progressInMegaBytes = dictionary["ProgressInMegaBytes"] as? Int64
            self.sourceSchemaName = dictionary["SourceSchemaName"] as? String
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            self.targetDatabaseName = dictionary["TargetDatabaseName"] as? String
            self.totalDataInMegaBytes = dictionary["TotalDataInMegaBytes"] as? Int64
            self.requestTime = dictionary["RequestTime"] as? Date
            self.tableRestoreRequestId = dictionary["TableRestoreRequestId"] as? String
            if let status = dictionary["Status"] as? String { self.status = TableRestoreStatusType(rawValue: status) } else { self.status = nil }
            self.snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String
            self.sourceDatabaseName = dictionary["SourceDatabaseName"] as? String
            self.sourceTableName = dictionary["SourceTableName"] as? String
            self.newTableName = dictionary["NewTableName"] as? String
            self.targetSchemaName = dictionary["TargetSchemaName"] as? String
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of the Amazon Redshift event notification subscription to be described.
        public let subscriptionName: String?

        public init(marker: String? = nil, maxRecords: Int32? = nil, subscriptionName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.subscriptionName = subscriptionName
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.subscriptionName = dictionary["SubscriptionName"] as? String
        }
    }

    public struct DescribeDefaultClusterParametersResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let defaultClusterParameters: DefaultClusterParameters?

        public init(defaultClusterParameters: DefaultClusterParameters? = nil) {
            self.defaultClusterParameters = defaultClusterParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let defaultClusterParameters = dictionary["DefaultClusterParameters"] as? [String: Any] { self.defaultClusterParameters = try Redshift.DefaultClusterParameters(dictionary: defaultClusterParameters) } else { self.defaultClusterParameters = nil }
        }
    }

    public struct ModifyEventSubscriptionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        public init(dictionary: [String: Any]) throws {
            if let eventSubscription = dictionary["EventSubscription"] as? [String: Any] { self.eventSubscription = try Redshift.EventSubscription(dictionary: eventSubscription) } else { self.eventSubscription = nil }
        }
    }

    public struct ClusterParameterGroupStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of parameter statuses.  For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        public let clusterParameterStatusList: [ClusterParameterStatus]?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?

        public init(clusterParameterStatusList: [ClusterParameterStatus]? = nil, parameterApplyStatus: String? = nil, parameterGroupName: String? = nil) {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterParameterStatusList = dictionary["ClusterParameterStatusList"] as? [[String: Any]] {
                self.clusterParameterStatusList = try clusterParameterStatusList.map({ try ClusterParameterStatus(dictionary: $0) })
            } else { 
                self.clusterParameterStatusList = nil
            }
            self.parameterApplyStatus = dictionary["ParameterApplyStatus"] as? String
            self.parameterGroupName = dictionary["ParameterGroupName"] as? String
        }
    }

    public struct CreateClusterSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        public let subnetIds: SubnetIdentifierList
        /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all subnet groups that are created by your AWS account.   Example: examplesubnetgroup 
        public let clusterSubnetGroupName: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A description for the subnet group.
        public let description: String

        public init(subnetIds: SubnetIdentifierList, clusterSubnetGroupName: String, tags: TagList? = nil, description: String) {
            self.subnetIds = subnetIds
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.tags = tags
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetIds = dictionary["SubnetIds"] as? [String: Any] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = try Redshift.SubnetIdentifierList(dictionary: subnetIds)
            guard let clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSubnetGroupName") }
            self.clusterSubnetGroupName = clusterSubnetGroupName
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let description = dictionary["Description"] as? String else { throw InitializableError.missingRequiredParam("Description") }
            self.description = description
        }
    }

    public struct CopyClusterSnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier given to the new manual snapshot. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for the AWS account that is making the request.  
        public let targetSnapshotIdentifier: String
        /// The identifier for the source snapshot. Constraints:   Must be the identifier for a valid automated snapshot whose state is available.  
        public let sourceSnapshotIdentifier: String
        /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:   Must be the identifier for a valid cluster.  
        public let sourceSnapshotClusterIdentifier: String?

        public init(targetSnapshotIdentifier: String, sourceSnapshotIdentifier: String, sourceSnapshotClusterIdentifier: String? = nil) {
            self.targetSnapshotIdentifier = targetSnapshotIdentifier
            self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
            self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetSnapshotIdentifier = dictionary["TargetSnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("TargetSnapshotIdentifier") }
            self.targetSnapshotIdentifier = targetSnapshotIdentifier
            guard let sourceSnapshotIdentifier = dictionary["SourceSnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SourceSnapshotIdentifier") }
            self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
            self.sourceSnapshotClusterIdentifier = dictionary["SourceSnapshotClusterIdentifier"] as? String
        }
    }

    public struct DeleteHsmConfigurationMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the Amazon Redshift HSM configuration to be deleted.
        public let hsmConfigurationIdentifier: String

        public init(hsmConfigurationIdentifier: String) {
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String else { throw InitializableError.missingRequiredParam("HsmConfigurationIdentifier") }
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        }
    }

    public struct RestoreFromClusterSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct RestorableNodeTypeList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nodeType: [String]?

        public init(nodeType: [String]? = nil) {
            self.nodeType = nodeType
        }

        public init(dictionary: [String: Any]) throws {
            self.nodeType = dictionary["NodeType"] as? [String]
        }
    }

    public struct DescribeClusterVersionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The specific cluster version to return. Example: 1.0 
        public let clusterVersion: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterVersions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The name of a specific cluster parameter group family to return details for. Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let clusterParameterGroupFamily: String?

        public init(maxRecords: Int32? = nil, clusterVersion: String? = nil, marker: String? = nil, clusterParameterGroupFamily: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterVersion = clusterVersion
            self.marker = marker
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.marker = dictionary["Marker"] as? String
            self.clusterParameterGroupFamily = dictionary["ClusterParameterGroupFamily"] as? String
        }
    }

    public struct LoggingStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The message indicating that logs failed to be delivered.
        public let lastFailureMessage: String?
        /// The name of the S3 bucket where the log files are stored.
        public let bucketName: String?
        /// The prefix applied to the log file names.
        public let s3KeyPrefix: String?
        ///  true if logging is on, false if logging is off.
        public let loggingEnabled: Bool?
        /// The last time when logs failed to be delivered.
        public let lastFailureTime: Date?
        /// The last time that logs were delivered.
        public let lastSuccessfulDeliveryTime: Date?

        public init(lastFailureMessage: String? = nil, bucketName: String? = nil, s3KeyPrefix: String? = nil, loggingEnabled: Bool? = nil, lastFailureTime: Date? = nil, lastSuccessfulDeliveryTime: Date? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.bucketName = bucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.loggingEnabled = loggingEnabled
            self.lastFailureTime = lastFailureTime
            self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        }

        public init(dictionary: [String: Any]) throws {
            self.lastFailureMessage = dictionary["LastFailureMessage"] as? String
            self.bucketName = dictionary["BucketName"] as? String
            self.s3KeyPrefix = dictionary["S3KeyPrefix"] as? String
            self.loggingEnabled = dictionary["LoggingEnabled"] as? Bool
            self.lastFailureTime = dictionary["LastFailureTime"] as? Date
            self.lastSuccessfulDeliveryTime = dictionary["LastSuccessfulDeliveryTime"] as? Date
        }
    }

    public struct EnableSnapshotCopyResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct DeleteClusterMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster to be deleted. Constraints:   Must contain lowercase characters.   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterIdentifier: String
        /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false.  Constraints:   Must be 1 to 255 alphanumeric characters.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let finalClusterSnapshotIdentifier: String?
        /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted.   The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false.  Default: false 
        public let skipFinalClusterSnapshot: Bool?

        public init(clusterIdentifier: String, finalClusterSnapshotIdentifier: String? = nil, skipFinalClusterSnapshot: Bool? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
            self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.finalClusterSnapshotIdentifier = dictionary["FinalClusterSnapshotIdentifier"] as? String
            self.skipFinalClusterSnapshot = dictionary["SkipFinalClusterSnapshot"] as? Bool
        }
    }

    public struct DeleteClusterSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the cluster security group to be deleted.
        public let clusterSecurityGroupName: String

        public init(clusterSecurityGroupName: String) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSecurityGroupName") }
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }
    }

    public struct DescribeReservedNodeOfferingsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodeOfferings request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The unique identifier for the offering.
        public let reservedNodeOfferingId: String?

        public init(marker: String? = nil, maxRecords: Int32? = nil, reservedNodeOfferingId: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.reservedNodeOfferingId = reservedNodeOfferingId
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.reservedNodeOfferingId = dictionary["ReservedNodeOfferingId"] as? String
        }
    }

    public struct ModifyClusterResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct TagValueList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tagValue: [String]?

        public init(tagValue: [String]? = nil) {
            self.tagValue = tagValue
        }

        public init(dictionary: [String: Any]) throws {
            self.tagValue = dictionary["TagValue"] as? [String]
        }
    }

    public struct EventSubscriptionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of event subscriptions.
        public let eventSubscriptionsList: EventSubscriptionsList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(eventSubscriptionsList: EventSubscriptionsList? = nil, marker: String? = nil) {
            self.eventSubscriptionsList = eventSubscriptionsList
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            if let eventSubscriptionsList = dictionary["EventSubscriptionsList"] as? [String: Any] { self.eventSubscriptionsList = try Redshift.EventSubscriptionsList(dictionary: eventSubscriptionsList) } else { self.eventSubscriptionsList = nil }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct ClusterParameterGroupNameMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
        public let parameterGroupStatus: String?
        /// The name of the cluster parameter group.
        public let parameterGroupName: String?

        public init(parameterGroupStatus: String? = nil, parameterGroupName: String? = nil) {
            self.parameterGroupStatus = parameterGroupStatus
            self.parameterGroupName = parameterGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterGroupStatus = dictionary["ParameterGroupStatus"] as? String
            self.parameterGroupName = dictionary["ParameterGroupName"] as? String
        }
    }

    public struct EventSubscriptionsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventSubscription: [EventSubscription]?

        public init(eventSubscription: [EventSubscription]? = nil) {
            self.eventSubscription = eventSubscription
        }

        public init(dictionary: [String: Any]) throws {
            if let eventSubscription = dictionary["EventSubscription"] as? [[String: Any]] {
                self.eventSubscription = try eventSubscription.map({ try EventSubscription(dictionary: $0) })
            } else { 
                self.eventSubscription = nil
            }
        }
    }

    public struct TableRestoreStatusMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of status details for one or more table restore requests.
        public let tableRestoreStatusDetails: TableRestoreStatusList?
        /// A pagination token that can be used in a subsequent DescribeTableRestoreStatus request.
        public let marker: String?

        public init(tableRestoreStatusDetails: TableRestoreStatusList? = nil, marker: String? = nil) {
            self.tableRestoreStatusDetails = tableRestoreStatusDetails
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            if let tableRestoreStatusDetails = dictionary["TableRestoreStatusDetails"] as? [String: Any] { self.tableRestoreStatusDetails = try Redshift.TableRestoreStatusList(dictionary: tableRestoreStatusDetails) } else { self.tableRestoreStatusDetails = nil }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct CreateEventSubscriptionResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        public init(dictionary: [String: Any]) throws {
            if let eventSubscription = dictionary["EventSubscription"] as? [String: Any] { self.eventSubscription = try Redshift.EventSubscription(dictionary: eventSubscription) } else { self.eventSubscription = nil }
        }
    }

    public struct ReservedNodeOfferingList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let reservedNodeOffering: [ReservedNodeOffering]?

        public init(reservedNodeOffering: [ReservedNodeOffering]? = nil) {
            self.reservedNodeOffering = reservedNodeOffering
        }

        public init(dictionary: [String: Any]) throws {
            if let reservedNodeOffering = dictionary["ReservedNodeOffering"] as? [[String: Any]] {
                self.reservedNodeOffering = try reservedNodeOffering.map({ try ReservedNodeOffering(dictionary: $0) })
            } else { 
                self.reservedNodeOffering = nil
            }
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the VPC security group.
        public let status: String?
        /// The identifier of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.vpcSecurityGroupId = dictionary["VpcSecurityGroupId"] as? String
        }
    }

    public struct HsmClientCertificate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of tags for the HSM client certificate.
        public let tags: TagList?
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        public let hsmClientCertificatePublicKey: String?
        /// The identifier of the HSM client certificate.
        public let hsmClientCertificateIdentifier: String?

        public init(tags: TagList? = nil, hsmClientCertificatePublicKey: String? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.tags = tags
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.hsmClientCertificatePublicKey = dictionary["HsmClientCertificatePublicKey"] as? String
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
        }
    }

    public struct DescribeClusterSnapshotsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        public let startTime: Date?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The snapshot identifier of the snapshot about which to return information.
        public let snapshotIdentifier: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSnapshots request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?
        /// The identifier of the cluster for which information about snapshots is requested.
        public let clusterIdentifier: String?
        /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual 
        public let snapshotType: String?
        /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        public let endTime: Date?
        /// The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
        public let ownerAccount: String?

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, snapshotIdentifier: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil, clusterIdentifier: String? = nil, tagValues: TagValueList? = nil, snapshotType: String? = nil, endTime: Date? = nil, ownerAccount: String? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.snapshotIdentifier = snapshotIdentifier
            self.marker = marker
            self.tagKeys = tagKeys
            self.clusterIdentifier = clusterIdentifier
            self.tagValues = tagValues
            self.snapshotType = snapshotType
            self.endTime = endTime
            self.ownerAccount = ownerAccount
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String
            self.marker = dictionary["Marker"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.snapshotType = dictionary["SnapshotType"] as? String
            self.endTime = dictionary["EndTime"] as? Date
            self.ownerAccount = dictionary["OwnerAccount"] as? String
        }
    }

    public struct DeleteSnapshotCopyGrantMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the snapshot copy grant to delete.
        public let snapshotCopyGrantName: String

        public init(snapshotCopyGrantName: String) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String else { throw InitializableError.missingRequiredParam("SnapshotCopyGrantName") }
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }
    }

    public struct ClusterParameterGroupsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of ClusterParameterGroup instances. Each instance describes one cluster parameter group. 
        public let parameterGroups: ParameterGroupList?

        public init(marker: String? = nil, parameterGroups: ParameterGroupList? = nil) {
            self.marker = marker
            self.parameterGroups = parameterGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let parameterGroups = dictionary["ParameterGroups"] as? [String: Any] { self.parameterGroups = try Redshift.ParameterGroupList(dictionary: parameterGroups) } else { self.parameterGroups = nil }
        }
    }

    public struct EventCategoriesList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventCategory: [String]?

        public init(eventCategory: [String]? = nil) {
            self.eventCategory = eventCategory
        }

        public init(dictionary: [String: Any]) throws {
            self.eventCategory = dictionary["EventCategory"] as? [String]
        }
    }

    public struct DescribeDefaultClusterParametersMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeDefaultClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of the cluster parameter group family.
        public let parameterGroupFamily: String

        public init(marker: String? = nil, maxRecords: Int32? = nil, parameterGroupFamily: String) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.parameterGroupFamily = parameterGroupFamily
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            guard let parameterGroupFamily = dictionary["ParameterGroupFamily"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupFamily") }
            self.parameterGroupFamily = parameterGroupFamily
        }
    }

    public struct RecurringChargeList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let recurringCharge: [RecurringCharge]?

        public init(recurringCharge: [RecurringCharge]? = nil) {
            self.recurringCharge = recurringCharge
        }

        public init(dictionary: [String: Any]) throws {
            if let recurringCharge = dictionary["RecurringCharge"] as? [[String: Any]] {
                self.recurringCharge = try recurringCharge.map({ try RecurringCharge(dictionary: $0) })
            } else { 
                self.recurringCharge = nil
            }
        }
    }

    public struct CreateClusterSubnetGroupResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSubnetGroup: ClusterSubnetGroup?

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSubnetGroup = dictionary["ClusterSubnetGroup"] as? [String: Any] { self.clusterSubnetGroup = try Redshift.ClusterSubnetGroup(dictionary: clusterSubnetGroup) } else { self.clusterSubnetGroup = nil }
        }
    }

    public struct ModifyClusterIamRolesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct ClusterSecurityGroupMembership: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the cluster security group.
        public let status: String?
        /// The name of the cluster security group.
        public let clusterSecurityGroupName: String?

        public init(status: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.status = status
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String
        }
    }

    public enum ParameterApplyType: String, CustomStringConvertible {
        case `static` = "static"
        case dynamic = "dynamic"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedNodesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodes request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// Identifier for the node reservation.
        public let reservedNodeId: String?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(marker: String? = nil, reservedNodeId: String? = nil, maxRecords: Int32? = nil) {
            self.marker = marker
            self.reservedNodeId = reservedNodeId
            self.maxRecords = maxRecords
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.reservedNodeId = dictionary["ReservedNodeId"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
        }
    }

    public struct CopyClusterSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [String: Any] { self.snapshot = try Redshift.Snapshot(dictionary: snapshot) } else { self.snapshot = nil }
        }
    }

    public struct DescribeTagsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The type of resource with which you want to view tags. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   Snapshot copy grant   For more information about Amazon Redshift resource types and constructing ARNs, go to Constructing an Amazon Redshift Amazon Resource Name (ARN) in the Amazon Redshift Cluster Management Guide. 
        public let resourceType: String?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String?
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, resourceType: String? = nil, marker: String? = nil, resourceName: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.resourceType = resourceType
            self.marker = marker
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.resourceType = dictionary["ResourceType"] as? String
            self.marker = dictionary["Marker"] as? String
            self.resourceName = dictionary["ResourceName"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct ClusterSubnetGroups: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSubnetGroup: [ClusterSubnetGroup]?

        public init(clusterSubnetGroup: [ClusterSubnetGroup]? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSubnetGroup = dictionary["ClusterSubnetGroup"] as? [[String: Any]] {
                self.clusterSubnetGroup = try clusterSubnetGroup.map({ try ClusterSubnetGroup(dictionary: $0) })
            } else { 
                self.clusterSubnetGroup = nil
            }
        }
    }

    public struct Snapshot: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The size of the incremental backup.
        public let actualIncrementalBackupSizeInMegaBytes: Double?
        /// The name of the database that was created when the cluster was created.
        public let dBName: String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public let clusterVersion: String?
        /// If true, the data in the snapshot is encrypted at rest.
        public let encrypted: Bool?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup. 
        public let currentBackupRateInMegaBytesPerSecond: Double?
        /// For manual snapshots, the AWS customer account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public let ownerAccount: String?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public let backupProgressInMegaBytes: Double?
        /// The list of node types that this cluster snapshot is able to restore into.
        public let restorableNodeTypes: RestorableNodeTypeList?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public let encryptedWithHSM: Bool?
        /// The identifier of the cluster for which the snapshot was taken.
        public let clusterIdentifier: String?
        /// The Availability Zone in which the cluster was created.
        public let availabilityZone: String?
        /// The snapshot status. The value of the status depends on the API operation used.     CreateClusterSnapshot and CopyClusterSnapshot returns status as "creating".     DescribeClusterSnapshots returns status as "creating", "available", "final snapshot", or "failed".    DeleteClusterSnapshot returns status as "deleted".  
        public let status: String?
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup. 
        public let estimatedSecondsToCompletion: Int64?
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public let vpcId: String?
        /// The time (UTC) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public let snapshotCreateTime: Date?
        /// A list of the AWS customer accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner. 
        public let accountsWithRestoreAccess: AccountsWithRestoreAccessList?
        /// The number of nodes in the cluster.
        public let numberOfNodes: Int32?
        /// The AWS Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public let kmsKeyId: String?
        /// The source region from which the snapshot was copied.
        public let sourceRegion: String?
        /// The list of tags for the cluster snapshot.
        public let tags: TagList?
        /// The node type of the nodes in the cluster.
        public let nodeType: String?
        /// The snapshot type. Snapshots created using CreateClusterSnapshot and CopyClusterSnapshot will be of type "manual". 
        public let snapshotType: String?
        /// The time (UTC) when the cluster was originally created.
        public let clusterCreateTime: Date?
        /// The snapshot identifier that is provided in the request.
        public let snapshotIdentifier: String?
        /// The master user name for the cluster.
        public let masterUsername: String?
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public let totalBackupSizeInMegaBytes: Double?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public let elapsedTimeInSeconds: Int64?
        /// The port that the cluster is listening on.
        public let port: Int32?

        public init(actualIncrementalBackupSizeInMegaBytes: Double? = nil, dBName: String? = nil, clusterVersion: String? = nil, encrypted: Bool? = nil, currentBackupRateInMegaBytesPerSecond: Double? = nil, ownerAccount: String? = nil, backupProgressInMegaBytes: Double? = nil, restorableNodeTypes: RestorableNodeTypeList? = nil, enhancedVpcRouting: Bool? = nil, encryptedWithHSM: Bool? = nil, clusterIdentifier: String? = nil, availabilityZone: String? = nil, status: String? = nil, estimatedSecondsToCompletion: Int64? = nil, vpcId: String? = nil, snapshotCreateTime: Date? = nil, accountsWithRestoreAccess: AccountsWithRestoreAccessList? = nil, numberOfNodes: Int32? = nil, kmsKeyId: String? = nil, sourceRegion: String? = nil, tags: TagList? = nil, nodeType: String? = nil, snapshotType: String? = nil, clusterCreateTime: Date? = nil, snapshotIdentifier: String? = nil, masterUsername: String? = nil, totalBackupSizeInMegaBytes: Double? = nil, elapsedTimeInSeconds: Int64? = nil, port: Int32? = nil) {
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.dBName = dBName
            self.clusterVersion = clusterVersion
            self.encrypted = encrypted
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.ownerAccount = ownerAccount
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.restorableNodeTypes = restorableNodeTypes
            self.enhancedVpcRouting = enhancedVpcRouting
            self.encryptedWithHSM = encryptedWithHSM
            self.clusterIdentifier = clusterIdentifier
            self.availabilityZone = availabilityZone
            self.status = status
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.vpcId = vpcId
            self.snapshotCreateTime = snapshotCreateTime
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.numberOfNodes = numberOfNodes
            self.kmsKeyId = kmsKeyId
            self.sourceRegion = sourceRegion
            self.tags = tags
            self.nodeType = nodeType
            self.snapshotType = snapshotType
            self.clusterCreateTime = clusterCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.masterUsername = masterUsername
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            self.actualIncrementalBackupSizeInMegaBytes = dictionary["ActualIncrementalBackupSizeInMegaBytes"] as? Double
            self.dBName = dictionary["DBName"] as? String
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.encrypted = dictionary["Encrypted"] as? Bool
            self.currentBackupRateInMegaBytesPerSecond = dictionary["CurrentBackupRateInMegaBytesPerSecond"] as? Double
            self.ownerAccount = dictionary["OwnerAccount"] as? String
            self.backupProgressInMegaBytes = dictionary["BackupProgressInMegaBytes"] as? Double
            if let restorableNodeTypes = dictionary["RestorableNodeTypes"] as? [String: Any] { self.restorableNodeTypes = try Redshift.RestorableNodeTypeList(dictionary: restorableNodeTypes) } else { self.restorableNodeTypes = nil }
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            self.encryptedWithHSM = dictionary["EncryptedWithHSM"] as? Bool
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            self.status = dictionary["Status"] as? String
            self.estimatedSecondsToCompletion = dictionary["EstimatedSecondsToCompletion"] as? Int64
            self.vpcId = dictionary["VpcId"] as? String
            self.snapshotCreateTime = dictionary["SnapshotCreateTime"] as? Date
            if let accountsWithRestoreAccess = dictionary["AccountsWithRestoreAccess"] as? [String: Any] { self.accountsWithRestoreAccess = try Redshift.AccountsWithRestoreAccessList(dictionary: accountsWithRestoreAccess) } else { self.accountsWithRestoreAccess = nil }
            self.numberOfNodes = dictionary["NumberOfNodes"] as? Int32
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
            self.sourceRegion = dictionary["SourceRegion"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.nodeType = dictionary["NodeType"] as? String
            self.snapshotType = dictionary["SnapshotType"] as? String
            self.clusterCreateTime = dictionary["ClusterCreateTime"] as? Date
            self.snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String
            self.masterUsername = dictionary["MasterUsername"] as? String
            self.totalBackupSizeInMegaBytes = dictionary["TotalBackupSizeInMegaBytes"] as? Double
            self.elapsedTimeInSeconds = dictionary["ElapsedTimeInSeconds"] as? Int64
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct EventSubscription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        public let severity: String?
        /// The status of the Amazon Redshift event notification subscription. Constraints:   Can be one of the following: active | no-permission | topic-not-exist   The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.  
        public let status: String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        public let snsTopicArn: String?
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        public let sourceIdsList: SourceIdsList?
        /// The source type of the events returned the Amazon Redshift event notification, such as cluster, or cluster-snapshot.
        public let sourceType: String?
        /// The name of the Amazon Redshift event notification subscription.
        public let custSubscriptionId: String?
        /// A Boolean value indicating whether the subscription is enabled. true indicates the subscription is enabled.
        public let enabled: Bool?
        /// The list of tags for the event subscription.
        public let tags: TagList?
        /// The AWS customer account associated with the Amazon Redshift event notification subscription.
        public let customerAwsId: String?
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategoriesList: EventCategoriesList?
        /// The date and time the Amazon Redshift event notification subscription was created.
        public let subscriptionCreationTime: Date?

        public init(severity: String? = nil, status: String? = nil, snsTopicArn: String? = nil, sourceIdsList: SourceIdsList? = nil, sourceType: String? = nil, custSubscriptionId: String? = nil, enabled: Bool? = nil, tags: TagList? = nil, customerAwsId: String? = nil, eventCategoriesList: EventCategoriesList? = nil, subscriptionCreationTime: Date? = nil) {
            self.severity = severity
            self.status = status
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.custSubscriptionId = custSubscriptionId
            self.enabled = enabled
            self.tags = tags
            self.customerAwsId = customerAwsId
            self.eventCategoriesList = eventCategoriesList
            self.subscriptionCreationTime = subscriptionCreationTime
        }

        public init(dictionary: [String: Any]) throws {
            self.severity = dictionary["Severity"] as? String
            self.status = dictionary["Status"] as? String
            self.snsTopicArn = dictionary["SnsTopicArn"] as? String
            if let sourceIdsList = dictionary["SourceIdsList"] as? [String: Any] { self.sourceIdsList = try Redshift.SourceIdsList(dictionary: sourceIdsList) } else { self.sourceIdsList = nil }
            self.sourceType = dictionary["SourceType"] as? String
            self.custSubscriptionId = dictionary["CustSubscriptionId"] as? String
            self.enabled = dictionary["Enabled"] as? Bool
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.customerAwsId = dictionary["CustomerAwsId"] as? String
            if let eventCategoriesList = dictionary["EventCategoriesList"] as? [String: Any] { self.eventCategoriesList = try Redshift.EventCategoriesList(dictionary: eventCategoriesList) } else { self.eventCategoriesList = nil }
            self.subscriptionCreationTime = dictionary["SubscriptionCreationTime"] as? Date
        }
    }

    public struct VpcSecurityGroupMembershipList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vpcSecurityGroup: [VpcSecurityGroupMembership]?

        public init(vpcSecurityGroup: [VpcSecurityGroupMembership]? = nil) {
            self.vpcSecurityGroup = vpcSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let vpcSecurityGroup = dictionary["VpcSecurityGroup"] as? [[String: Any]] {
                self.vpcSecurityGroup = try vpcSecurityGroup.map({ try VpcSecurityGroupMembership(dictionary: $0) })
            } else { 
                self.vpcSecurityGroup = nil
            }
        }
    }

    public struct CreateSnapshotCopyGrantMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the snapshot copy grant. This name must be unique in the region for the AWS account. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        public let snapshotCopyGrantName: String
        /// A list of tag instances.
        public let tags: TagList?
        /// The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
        public let kmsKeyId: String?

        public init(snapshotCopyGrantName: String, tags: TagList? = nil, kmsKeyId: String? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
            self.kmsKeyId = kmsKeyId
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String else { throw InitializableError.missingRequiredParam("SnapshotCopyGrantName") }
            self.snapshotCopyGrantName = snapshotCopyGrantName
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
        }
    }

    public struct TagList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [[String: Any]] {
                self.tag = try tag.map({ try Tag(dictionary: $0) })
            } else { 
                self.tag = nil
            }
        }
    }

    public struct ElasticIpStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The elastic IP (EIP) address for the cluster.
        public let elasticIp: String?
        /// The status of the elastic IP (EIP) address.
        public let status: String?

        public init(elasticIp: String? = nil, status: String? = nil) {
            self.elasticIp = elasticIp
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            self.elasticIp = dictionary["ElasticIp"] as? String
            self.status = dictionary["Status"] as? String
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, and cluster-security-group.
        public let sourceType: String?

        public init(sourceType: String? = nil) {
            self.sourceType = sourceType
        }

        public init(dictionary: [String: Any]) throws {
            self.sourceType = dictionary["SourceType"] as? String
        }
    }

    public struct AvailabilityZoneList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let availabilityZone: [AvailabilityZone]?

        public init(availabilityZone: [AvailabilityZone]? = nil) {
            self.availabilityZone = availabilityZone
        }

        public init(dictionary: [String: Any]) throws {
            if let availabilityZone = dictionary["AvailabilityZone"] as? [[String: Any]] {
                self.availabilityZone = try availabilityZone.map({ try AvailabilityZone(dictionary: $0) })
            } else { 
                self.availabilityZone = nil
            }
        }
    }

    public struct DeleteClusterParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the parameter group to be deleted. Constraints:   Must be the name of an existing cluster parameter group.   Cannot delete a default cluster parameter group.  
        public let parameterGroupName: String

        public init(parameterGroupName: String) {
            self.parameterGroupName = parameterGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let parameterGroupName = dictionary["ParameterGroupName"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupName") }
            self.parameterGroupName = parameterGroupName
        }
    }

    public struct CreateHsmClientCertificateMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of tag instances.
        public let tags: TagList?
        /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
        public let hsmClientCertificateIdentifier: String

        public init(tags: TagList? = nil, hsmClientCertificateIdentifier: String) {
            self.tags = tags
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String else { throw InitializableError.missingRequiredParam("HsmClientCertificateIdentifier") }
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }
    }

    public struct TaggedResourceList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let taggedResource: [TaggedResource]?

        public init(taggedResource: [TaggedResource]? = nil) {
            self.taggedResource = taggedResource
        }

        public init(dictionary: [String: Any]) throws {
            if let taggedResource = dictionary["TaggedResource"] as? [[String: Any]] {
                self.taggedResource = try taggedResource.map({ try TaggedResource(dictionary: $0) })
            } else { 
                self.taggedResource = nil
            }
        }
    }

    public struct DescribeSnapshotCopyGrantsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, snapshotCopyGrantName: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.marker = marker
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String
            self.marker = dictionary["Marker"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct ClustersMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Cluster objects, where each object describes one cluster. 
        public let clusters: ClusterList?

        public init(marker: String? = nil, clusters: ClusterList? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let clusters = dictionary["Clusters"] as? [String: Any] { self.clusters = try Redshift.ClusterList(dictionary: clusters) } else { self.clusters = nil }
        }
    }

    public struct PurchaseReservedNodeOfferingResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let reservedNode: ReservedNode?

        public init(reservedNode: ReservedNode? = nil) {
            self.reservedNode = reservedNode
        }

        public init(dictionary: [String: Any]) throws {
            if let reservedNode = dictionary["ReservedNode"] as? [String: Any] { self.reservedNode = try Redshift.ReservedNode(dictionary: reservedNode) } else { self.reservedNode = nil }
        }
    }

    public enum SourceType: String, CustomStringConvertible {
        case cluster = "cluster"
        case cluster_parameter_group = "cluster-parameter-group"
        case cluster_security_group = "cluster-security-group"
        case cluster_snapshot = "cluster-snapshot"
        public var description: String { return self.rawValue }
    }

    public struct DefaultClusterParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of cluster default parameters.
        public let parameters: ParametersList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        public let parameterGroupFamily: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil, parameterGroupFamily: String? = nil) {
            self.parameters = parameters
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
        }

        public init(dictionary: [String: Any]) throws {
            if let parameters = dictionary["Parameters"] as? [String: Any] { self.parameters = try Redshift.ParametersList(dictionary: parameters) } else { self.parameters = nil }
            self.marker = dictionary["Marker"] as? String
            self.parameterGroupFamily = dictionary["ParameterGroupFamily"] as? String
        }
    }

    public struct ModifyClusterMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?
        /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide. Example: 1.0 
        public let clusterVersion: String?
        /// The new identifier for the cluster. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: examplecluster 
        public let newClusterIdentifier: String?
        /// A list of virtual private cloud (VPC) security groups to be associated with the cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values:  ds1.xlarge | ds1.8xlarge |  ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge.
        public let nodeType: String?
        /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use DescribeResize to track the progress of the resize request.  Valid Values:  multi-node | single-node  
        public let clusterType: String?
        /// The unique identifier of the cluster to be modified. Example: examplecluster 
        public let clusterIdentifier: String
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.  Default: Uses existing setting. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        public let masterUserPassword: String?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
        public let publiclyAccessible: Bool?
        /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use RebootCluster.  Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
        public let clusterParameterGroupName: String?
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        public let elasticIp: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
        public let preferredMaintenanceWindow: String?
        /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window.  Default: false 
        public let allowVersionUpgrade: Bool?
        /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values: Integer greater than 0.
        public let numberOfNodes: Int32?

        public init(clusterSecurityGroups: ClusterSecurityGroupNameList? = nil, clusterVersion: String? = nil, newClusterIdentifier: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, nodeType: String? = nil, clusterType: String? = nil, clusterIdentifier: String, enhancedVpcRouting: Bool? = nil, masterUserPassword: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, hsmConfigurationIdentifier: String? = nil, publiclyAccessible: Bool? = nil, clusterParameterGroupName: String? = nil, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, allowVersionUpgrade: Bool? = nil, numberOfNodes: Int32? = nil) {
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterVersion = clusterVersion
            self.newClusterIdentifier = newClusterIdentifier
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.nodeType = nodeType
            self.clusterType = clusterType
            self.clusterIdentifier = clusterIdentifier
            self.enhancedVpcRouting = enhancedVpcRouting
            self.masterUserPassword = masterUserPassword
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.publiclyAccessible = publiclyAccessible
            self.clusterParameterGroupName = clusterParameterGroupName
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.allowVersionUpgrade = allowVersionUpgrade
            self.numberOfNodes = numberOfNodes
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroups = dictionary["ClusterSecurityGroups"] as? [String: Any] { self.clusterSecurityGroups = try Redshift.ClusterSecurityGroupNameList(dictionary: clusterSecurityGroups) } else { self.clusterSecurityGroups = nil }
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.newClusterIdentifier = dictionary["NewClusterIdentifier"] as? String
            if let vpcSecurityGroupIds = dictionary["VpcSecurityGroupIds"] as? [String: Any] { self.vpcSecurityGroupIds = try Redshift.VpcSecurityGroupIdList(dictionary: vpcSecurityGroupIds) } else { self.vpcSecurityGroupIds = nil }
            self.nodeType = dictionary["NodeType"] as? String
            self.clusterType = dictionary["ClusterType"] as? String
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            self.masterUserPassword = dictionary["MasterUserPassword"] as? String
            self.automatedSnapshotRetentionPeriod = dictionary["AutomatedSnapshotRetentionPeriod"] as? Int32
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            self.clusterParameterGroupName = dictionary["ClusterParameterGroupName"] as? String
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
            self.elasticIp = dictionary["ElasticIp"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.allowVersionUpgrade = dictionary["AllowVersionUpgrade"] as? Bool
            self.numberOfNodes = dictionary["NumberOfNodes"] as? Int32
        }
    }

    public struct RotateEncryptionKeyResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        public init(dictionary: [String: Any]) throws {
            if let cluster = dictionary["Cluster"] as? [String: Any] { self.cluster = try Redshift.Cluster(dictionary: cluster) } else { self.cluster = nil }
        }
    }

    public struct HsmConfigurationList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hsmConfiguration: [HsmConfiguration]?

        public init(hsmConfiguration: [HsmConfiguration]? = nil) {
            self.hsmConfiguration = hsmConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let hsmConfiguration = dictionary["HsmConfiguration"] as? [[String: Any]] {
                self.hsmConfiguration = try hsmConfiguration.map({ try HsmConfiguration(dictionary: $0) })
            } else { 
                self.hsmConfiguration = nil
            }
        }
    }

    public struct DescribeClusterSubnetGroupsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSubnetGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The name of the cluster subnet group for which information is requested.
        public let clusterSubnetGroupName: String?
        /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, marker: String? = nil, clusterSubnetGroupName: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.marker = marker
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.marker = dictionary["Marker"] as? String
            self.clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct ModifyClusterIamRolesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
        public let clusterIdentifier: String
        /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
        public let addIamRoles: IamRoleArnList?
        /// Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
        public let removeIamRoles: IamRoleArnList?

        public init(clusterIdentifier: String, addIamRoles: IamRoleArnList? = nil, removeIamRoles: IamRoleArnList? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.addIamRoles = addIamRoles
            self.removeIamRoles = removeIamRoles
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            if let addIamRoles = dictionary["AddIamRoles"] as? [String: Any] { self.addIamRoles = try Redshift.IamRoleArnList(dictionary: addIamRoles) } else { self.addIamRoles = nil }
            if let removeIamRoles = dictionary["RemoveIamRoles"] as? [String: Any] { self.removeIamRoles = try Redshift.IamRoleArnList(dictionary: removeIamRoles) } else { self.removeIamRoles = nil }
        }
    }

    public struct ClusterIamRole: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload. 
        public let iamRoleArn: String?
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.    in-sync: The role is available for use by the cluster.    adding: The role is in the process of being associated with the cluster.    removing: The role is in the process of being disassociated with the cluster.  
        public let applyStatus: String?

        public init(iamRoleArn: String? = nil, applyStatus: String? = nil) {
            self.iamRoleArn = iamRoleArn
            self.applyStatus = applyStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.iamRoleArn = dictionary["IamRoleArn"] as? String
            self.applyStatus = dictionary["ApplyStatus"] as? String
        }
    }

    public struct CreateClusterSnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The cluster identifier for which you want a snapshot.
        public let clusterIdentifier: String
        /// A list of tag instances.
        public let tags: TagList?
        /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let snapshotIdentifier: String

        public init(clusterIdentifier: String, tags: TagList? = nil, snapshotIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
            self.tags = tags
            self.snapshotIdentifier = snapshotIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
        }
    }

    public struct ClusterSecurityGroupMembershipList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroup: [ClusterSecurityGroupMembership]?

        public init(clusterSecurityGroup: [ClusterSecurityGroupMembership]? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroup = dictionary["ClusterSecurityGroup"] as? [[String: Any]] {
                self.clusterSecurityGroup = try clusterSecurityGroup.map({ try ClusterSecurityGroupMembership(dictionary: $0) })
            } else { 
                self.clusterSecurityGroup = nil
            }
        }
    }

    public struct ClusterParameterGroupDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Parameter instances. Each instance lists the parameters of one cluster parameter group. 
        public let parameters: ParametersList?

        public init(marker: String? = nil, parameters: ParametersList? = nil) {
            self.marker = marker
            self.parameters = parameters
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let parameters = dictionary["Parameters"] as? [String: Any] { self.parameters = try Redshift.ParametersList(dictionary: parameters) } else { self.parameters = nil }
        }
    }

    public struct AuthorizeClusterSecurityGroupIngressResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroup = dictionary["ClusterSecurityGroup"] as? [String: Any] { self.clusterSecurityGroup = try Redshift.ClusterSecurityGroup(dictionary: clusterSecurityGroup) } else { self.clusterSecurityGroup = nil }
        }
    }

    public struct ClusterSecurityGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A description of the security group.
        public let description: String?
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        public let iPRanges: IPRangeList?
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        public let eC2SecurityGroups: EC2SecurityGroupList?
        /// The list of tags for the cluster security group.
        public let tags: TagList?
        /// The name of the cluster security group to which the operation was applied.
        public let clusterSecurityGroupName: String?

        public init(description: String? = nil, iPRanges: IPRangeList? = nil, eC2SecurityGroups: EC2SecurityGroupList? = nil, tags: TagList? = nil, clusterSecurityGroupName: String? = nil) {
            self.description = description
            self.iPRanges = iPRanges
            self.eC2SecurityGroups = eC2SecurityGroups
            self.tags = tags
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            if let iPRanges = dictionary["IPRanges"] as? [String: Any] { self.iPRanges = try Redshift.IPRangeList(dictionary: iPRanges) } else { self.iPRanges = nil }
            if let eC2SecurityGroups = dictionary["EC2SecurityGroups"] as? [String: Any] { self.eC2SecurityGroups = try Redshift.EC2SecurityGroupList(dictionary: eC2SecurityGroups) } else { self.eC2SecurityGroups = nil }
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String
        }
    }

    public struct TaggedResource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag for the resource.
        public let tag: Tag?
        /// The Amazon Resource Name (ARN) with which the tag is associated. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1.
        public let resourceName: String?
        /// The type of resource with which the tag is associated. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   For more information about Amazon Redshift resource types and constructing ARNs, go to Constructing an Amazon Redshift Amazon Resource Name (ARN) in the Amazon Redshift Cluster Management Guide. 
        public let resourceType: String?

        public init(tag: Tag? = nil, resourceName: String? = nil, resourceType: String? = nil) {
            self.tag = tag
            self.resourceName = resourceName
            self.resourceType = resourceType
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [String: Any] { self.tag = try Redshift.Tag(dictionary: tag) } else { self.tag = nil }
            self.resourceName = dictionary["ResourceName"] as? String
            self.resourceType = dictionary["ResourceType"] as? String
        }
    }

    public struct ReservedNodeOfferingsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of ReservedNodeOffering objects.
        public let reservedNodeOfferings: ReservedNodeOfferingList?
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?

        public init(reservedNodeOfferings: ReservedNodeOfferingList? = nil, marker: String? = nil) {
            self.reservedNodeOfferings = reservedNodeOfferings
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            if let reservedNodeOfferings = dictionary["ReservedNodeOfferings"] as? [String: Any] { self.reservedNodeOfferings = try Redshift.ReservedNodeOfferingList(dictionary: reservedNodeOfferings) } else { self.reservedNodeOfferings = nil }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct ClusterNode: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Whether the node is a leader node or a compute node.
        public let nodeRole: String?
        /// The private IP address of a node within a cluster.
        public let privateIPAddress: String?
        /// The public IP address of a node within a cluster.
        public let publicIPAddress: String?

        public init(nodeRole: String? = nil, privateIPAddress: String? = nil, publicIPAddress: String? = nil) {
            self.nodeRole = nodeRole
            self.privateIPAddress = privateIPAddress
            self.publicIPAddress = publicIPAddress
        }

        public init(dictionary: [String: Any]) throws {
            self.nodeRole = dictionary["NodeRole"] as? String
            self.privateIPAddress = dictionary["PrivateIPAddress"] as? String
            self.publicIPAddress = dictionary["PublicIPAddress"] as? String
        }
    }

    public struct OrderableClusterOptionsList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let orderableClusterOption: [OrderableClusterOption]?

        public init(orderableClusterOption: [OrderableClusterOption]? = nil) {
            self.orderableClusterOption = orderableClusterOption
        }

        public init(dictionary: [String: Any]) throws {
            if let orderableClusterOption = dictionary["OrderableClusterOption"] as? [[String: Any]] {
                self.orderableClusterOption = try orderableClusterOption.map({ try OrderableClusterOption(dictionary: $0) })
            } else { 
                self.orderableClusterOption = nil
            }
        }
    }

    public struct TagKeyList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tagKey: [String]?

        public init(tagKey: [String]? = nil) {
            self.tagKey = tagKey
        }

        public init(dictionary: [String: Any]) throws {
            self.tagKey = dictionary["TagKey"] as? [String]
        }
    }

    public struct SnapshotCopyGrantMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// The list of SnapshotCopyGrant objects.
        public let snapshotCopyGrants: SnapshotCopyGrantList?

        public init(marker: String? = nil, snapshotCopyGrants: SnapshotCopyGrantList? = nil) {
            self.marker = marker
            self.snapshotCopyGrants = snapshotCopyGrants
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let snapshotCopyGrants = dictionary["SnapshotCopyGrants"] as? [String: Any] { self.snapshotCopyGrants = try Redshift.SnapshotCopyGrantList(dictionary: snapshotCopyGrants) } else { self.snapshotCopyGrants = nil }
        }
    }

    public struct SnapshotCopyGrantList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshotCopyGrant: [SnapshotCopyGrant]?

        public init(snapshotCopyGrant: [SnapshotCopyGrant]? = nil) {
            self.snapshotCopyGrant = snapshotCopyGrant
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotCopyGrant = dictionary["SnapshotCopyGrant"] as? [[String: Any]] {
                self.snapshotCopyGrant = try snapshotCopyGrant.map({ try SnapshotCopyGrant(dictionary: $0) })
            } else { 
                self.snapshotCopyGrant = nil
            }
        }
    }

    public struct Cluster: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// The nodes in the cluster.
        public let clusterNodes: [ClusterNode]?
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default. 
        public let dBName: String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public let clusterVersion: String?
        /// A Boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        public let encrypted: Bool?
        /// The unique identifier of the cluster.
        public let clusterIdentifier: String?
        /// The number of days that automatic cluster snapshots are retained.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        public let clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus?
        /// The name of the Availability Zone in which the cluster is located.
        public let availabilityZone: String?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.
        public let iamRoles: ClusterIamRoleList?
        ///  The current state of the cluster. Possible values are the following:    available     creating     deleting     final-snapshot     hardware-failure     incompatible-hsm     incompatible-network     incompatible-parameters     incompatible-restore     modifying     rebooting     renaming     resizing     rotating-keys     storage-full     updating-hsm   
        public let clusterStatus: String?
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        public let vpcId: String?
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        public let preferredMaintenanceWindow: String?
        /// The number of compute nodes in the cluster.
        public let numberOfNodes: Int32?
        /// The connection endpoint.
        public let endpoint: Endpoint?
        /// The specific revision number of the database in the cluster.
        public let clusterRevisionNumber: String?
        /// The AWS Key Management Service (AWS KMS) key ID of the encryption key used to encrypt data in the cluster.
        public let kmsKeyId: String?
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements.  Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter. 
        public let clusterSecurityGroups: ClusterSecurityGroupMembershipList?
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        public let clusterParameterGroups: ClusterParameterGroupStatusList?
        /// The list of tags for the cluster.
        public let tags: TagList?
        /// The node type for the nodes in the cluster.
        public let nodeType: String?
        /// The public key for the cluster.
        public let clusterPublicKey: String?
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        public let hsmStatus: HsmStatus?
        /// The date and time that the cluster was created.
        public let clusterCreateTime: Date?
        /// A Boolean value that, if true, indicates that the cluster can be accessed from a public network.
        public let publiclyAccessible: Bool?
        /// The status of the elastic IP (EIP) address.
        public let elasticIpStatus: ElasticIpStatus?
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        public let restoreStatus: RestoreStatus?
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        public let clusterSubnetGroupName: String?
        /// The master user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter. 
        public let masterUsername: String?
        /// A Boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window. 
        public let allowVersionUpgrade: Bool?
        /// The status of a modify operation, if any, initiated for the cluster.
        public let modifyStatus: String?

        public init(vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, clusterNodes: [ClusterNode]? = nil, dBName: String? = nil, clusterVersion: String? = nil, encrypted: Bool? = nil, clusterIdentifier: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, enhancedVpcRouting: Bool? = nil, clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus? = nil, availabilityZone: String? = nil, iamRoles: ClusterIamRoleList? = nil, clusterStatus: String? = nil, vpcId: String? = nil, preferredMaintenanceWindow: String? = nil, numberOfNodes: Int32? = nil, endpoint: Endpoint? = nil, clusterRevisionNumber: String? = nil, kmsKeyId: String? = nil, pendingModifiedValues: PendingModifiedValues? = nil, clusterSecurityGroups: ClusterSecurityGroupMembershipList? = nil, clusterParameterGroups: ClusterParameterGroupStatusList? = nil, tags: TagList? = nil, nodeType: String? = nil, clusterPublicKey: String? = nil, hsmStatus: HsmStatus? = nil, clusterCreateTime: Date? = nil, publiclyAccessible: Bool? = nil, elasticIpStatus: ElasticIpStatus? = nil, restoreStatus: RestoreStatus? = nil, clusterSubnetGroupName: String? = nil, masterUsername: String? = nil, allowVersionUpgrade: Bool? = nil, modifyStatus: String? = nil) {
            self.vpcSecurityGroups = vpcSecurityGroups
            self.clusterNodes = clusterNodes
            self.dBName = dBName
            self.clusterVersion = clusterVersion
            self.encrypted = encrypted
            self.clusterIdentifier = clusterIdentifier
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.enhancedVpcRouting = enhancedVpcRouting
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.availabilityZone = availabilityZone
            self.iamRoles = iamRoles
            self.clusterStatus = clusterStatus
            self.vpcId = vpcId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.numberOfNodes = numberOfNodes
            self.endpoint = endpoint
            self.clusterRevisionNumber = clusterRevisionNumber
            self.kmsKeyId = kmsKeyId
            self.pendingModifiedValues = pendingModifiedValues
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterParameterGroups = clusterParameterGroups
            self.tags = tags
            self.nodeType = nodeType
            self.clusterPublicKey = clusterPublicKey
            self.hsmStatus = hsmStatus
            self.clusterCreateTime = clusterCreateTime
            self.publiclyAccessible = publiclyAccessible
            self.elasticIpStatus = elasticIpStatus
            self.restoreStatus = restoreStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.masterUsername = masterUsername
            self.allowVersionUpgrade = allowVersionUpgrade
            self.modifyStatus = modifyStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let vpcSecurityGroups = dictionary["VpcSecurityGroups"] as? [String: Any] { self.vpcSecurityGroups = try Redshift.VpcSecurityGroupMembershipList(dictionary: vpcSecurityGroups) } else { self.vpcSecurityGroups = nil }
            if let clusterNodes = dictionary["ClusterNodes"] as? [[String: Any]] {
                self.clusterNodes = try clusterNodes.map({ try ClusterNode(dictionary: $0) })
            } else { 
                self.clusterNodes = nil
            }
            self.dBName = dictionary["DBName"] as? String
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.encrypted = dictionary["Encrypted"] as? Bool
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            self.automatedSnapshotRetentionPeriod = dictionary["AutomatedSnapshotRetentionPeriod"] as? Int32
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            if let clusterSnapshotCopyStatus = dictionary["ClusterSnapshotCopyStatus"] as? [String: Any] { self.clusterSnapshotCopyStatus = try Redshift.ClusterSnapshotCopyStatus(dictionary: clusterSnapshotCopyStatus) } else { self.clusterSnapshotCopyStatus = nil }
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            if let iamRoles = dictionary["IamRoles"] as? [String: Any] { self.iamRoles = try Redshift.ClusterIamRoleList(dictionary: iamRoles) } else { self.iamRoles = nil }
            self.clusterStatus = dictionary["ClusterStatus"] as? String
            self.vpcId = dictionary["VpcId"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.numberOfNodes = dictionary["NumberOfNodes"] as? Int32
            if let endpoint = dictionary["Endpoint"] as? [String: Any] { self.endpoint = try Redshift.Endpoint(dictionary: endpoint) } else { self.endpoint = nil }
            self.clusterRevisionNumber = dictionary["ClusterRevisionNumber"] as? String
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
            if let pendingModifiedValues = dictionary["PendingModifiedValues"] as? [String: Any] { self.pendingModifiedValues = try Redshift.PendingModifiedValues(dictionary: pendingModifiedValues) } else { self.pendingModifiedValues = nil }
            if let clusterSecurityGroups = dictionary["ClusterSecurityGroups"] as? [String: Any] { self.clusterSecurityGroups = try Redshift.ClusterSecurityGroupMembershipList(dictionary: clusterSecurityGroups) } else { self.clusterSecurityGroups = nil }
            if let clusterParameterGroups = dictionary["ClusterParameterGroups"] as? [String: Any] { self.clusterParameterGroups = try Redshift.ClusterParameterGroupStatusList(dictionary: clusterParameterGroups) } else { self.clusterParameterGroups = nil }
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.nodeType = dictionary["NodeType"] as? String
            self.clusterPublicKey = dictionary["ClusterPublicKey"] as? String
            if let hsmStatus = dictionary["HsmStatus"] as? [String: Any] { self.hsmStatus = try Redshift.HsmStatus(dictionary: hsmStatus) } else { self.hsmStatus = nil }
            self.clusterCreateTime = dictionary["ClusterCreateTime"] as? Date
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            if let elasticIpStatus = dictionary["ElasticIpStatus"] as? [String: Any] { self.elasticIpStatus = try Redshift.ElasticIpStatus(dictionary: elasticIpStatus) } else { self.elasticIpStatus = nil }
            if let restoreStatus = dictionary["RestoreStatus"] as? [String: Any] { self.restoreStatus = try Redshift.RestoreStatus(dictionary: restoreStatus) } else { self.restoreStatus = nil }
            self.clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String
            self.masterUsername = dictionary["MasterUsername"] as? String
            self.allowVersionUpgrade = dictionary["AllowVersionUpgrade"] as? Bool
            self.modifyStatus = dictionary["ModifyStatus"] as? String
        }
    }

    public struct CreateClusterSnapshotResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshot = dictionary["Snapshot"] as? [String: Any] { self.snapshot = try Redshift.Snapshot(dictionary: snapshot) } else { self.snapshot = nil }
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        public let severity: String?
        /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
        public let snsTopicArn: String?
        /// The name of the modified Amazon Redshift event notification subscription.
        public let subscriptionName: String
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        public let sourceType: String?
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        public let eventCategories: EventCategoriesList?
        /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled 
        public let enabled: Bool?
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        public let sourceIds: SourceIdsList?

        public init(severity: String? = nil, snsTopicArn: String? = nil, subscriptionName: String, sourceType: String? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, sourceIds: SourceIdsList? = nil) {
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.subscriptionName = subscriptionName
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.sourceIds = sourceIds
        }

        public init(dictionary: [String: Any]) throws {
            self.severity = dictionary["Severity"] as? String
            self.snsTopicArn = dictionary["SnsTopicArn"] as? String
            guard let subscriptionName = dictionary["SubscriptionName"] as? String else { throw InitializableError.missingRequiredParam("SubscriptionName") }
            self.subscriptionName = subscriptionName
            self.sourceType = dictionary["SourceType"] as? String
            if let eventCategories = dictionary["EventCategories"] as? [String: Any] { self.eventCategories = try Redshift.EventCategoriesList(dictionary: eventCategories) } else { self.eventCategories = nil }
            self.enabled = dictionary["Enabled"] as? Bool
            if let sourceIds = dictionary["SourceIds"] as? [String: Any] { self.sourceIds = try Redshift.SourceIdsList(dictionary: sourceIds) } else { self.sourceIds = nil }
        }
    }

    public struct ClusterSnapshotCopyStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        public let destinationRegion: String?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        public let retentionPeriod: Int64?
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?

        public init(destinationRegion: String? = nil, retentionPeriod: Int64? = nil, snapshotCopyGrantName: String? = nil) {
            self.destinationRegion = destinationRegion
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

        public init(dictionary: [String: Any]) throws {
            self.destinationRegion = dictionary["DestinationRegion"] as? String
            self.retentionPeriod = dictionary["RetentionPeriod"] as? Int64
            self.snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String
        }
    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the availability zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
        }
    }

    public struct ModifyClusterSubnetGroupResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSubnetGroup: ClusterSubnetGroup?

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSubnetGroup = dictionary["ClusterSubnetGroup"] as? [String: Any] { self.clusterSubnetGroup = try Redshift.ClusterSubnetGroup(dictionary: clusterSubnetGroup) } else { self.clusterSubnetGroup = nil }
        }
    }

    public struct HsmConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public let hsmIpAddress: String?
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public let hsmPartitionName: String?
        /// The list of tags for the HSM configuration.
        public let tags: TagList?
        /// The name of the Amazon Redshift HSM configuration.
        public let hsmConfigurationIdentifier: String?
        /// A text description of the HSM configuration.
        public let description: String?

        public init(hsmIpAddress: String? = nil, hsmPartitionName: String? = nil, tags: TagList? = nil, hsmConfigurationIdentifier: String? = nil, description: String? = nil) {
            self.hsmIpAddress = hsmIpAddress
            self.hsmPartitionName = hsmPartitionName
            self.tags = tags
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmIpAddress = dictionary["HsmIpAddress"] as? String
            self.hsmPartitionName = dictionary["HsmPartitionName"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DisableLoggingMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster 
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct HsmClientCertificateList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hsmClientCertificate: [HsmClientCertificate]?

        public init(hsmClientCertificate: [HsmClientCertificate]? = nil) {
            self.hsmClientCertificate = hsmClientCertificate
        }

        public init(dictionary: [String: Any]) throws {
            if let hsmClientCertificate = dictionary["HsmClientCertificate"] as? [[String: Any]] {
                self.hsmClientCertificate = try hsmClientCertificate.map({ try HsmClientCertificate(dictionary: $0) })
            } else { 
                self.hsmClientCertificate = nil
            }
        }
    }

    public struct DescribeClustersMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
        public let clusterIdentifier: String?
        /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(clusterIdentifier: String? = nil, tagValues: TagValueList? = nil, maxRecords: Int32? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.tagValues = tagValues
            self.maxRecords = maxRecords
            self.marker = marker
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct RotateEncryptionKeyMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct RevokeClusterSecurityGroupIngressMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided. 
        public let cIDRIP: String?
        /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided. 
        public let eC2SecurityGroupName: String?
        /// The AWS account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The AWS access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided.  Example: 111122223333 
        public let eC2SecurityGroupOwnerId: String?
        /// The name of the security Group from which to revoke the ingress rule.
        public let clusterSecurityGroupName: String

        public init(cIDRIP: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String) {
            self.cIDRIP = cIDRIP
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.cIDRIP = dictionary["CIDRIP"] as? String
            self.eC2SecurityGroupName = dictionary["EC2SecurityGroupName"] as? String
            self.eC2SecurityGroupOwnerId = dictionary["EC2SecurityGroupOwnerId"] as? String
            guard let clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSecurityGroupName") }
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }
    }

    public struct EC2SecurityGroupList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eC2SecurityGroup: [EC2SecurityGroup]?

        public init(eC2SecurityGroup: [EC2SecurityGroup]? = nil) {
            self.eC2SecurityGroup = eC2SecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let eC2SecurityGroup = dictionary["EC2SecurityGroup"] as? [[String: Any]] {
                self.eC2SecurityGroup = try eC2SecurityGroup.map({ try EC2SecurityGroup(dictionary: $0) })
            } else { 
                self.eC2SecurityGroup = nil
            }
        }
    }

    public struct EnableLoggingMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster on which logging is to be started. Example: examplecluster 
        public let clusterIdentifier: String
        /// The name of an existing S3 bucket where the log files are to be stored. Constraints:   Must be in the same region as the cluster   The cluster must have read bucket and put object permissions  
        public let bucketName: String
        /// The prefix applied to the log file names. Constraints:   Cannot exceed 512 characters   Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:    x00 to x20   x22   x27   x5c   x7f or larger    
        public let s3KeyPrefix: String?

        public init(clusterIdentifier: String, bucketName: String, s3KeyPrefix: String? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.bucketName = bucketName
            self.s3KeyPrefix = s3KeyPrefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            guard let bucketName = dictionary["BucketName"] as? String else { throw InitializableError.missingRequiredParam("BucketName") }
            self.bucketName = bucketName
            self.s3KeyPrefix = dictionary["S3KeyPrefix"] as? String
        }
    }

    public struct SubnetList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        public init(dictionary: [String: Any]) throws {
            if let subnet = dictionary["Subnet"] as? [[String: Any]] {
                self.subnet = try subnet.map({ try Subnet(dictionary: $0) })
            } else { 
                self.subnet = nil
            }
        }
    }

    public struct SnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        public let marker: String?
        /// A list of Snapshot instances. 
        public let snapshots: SnapshotList?

        public init(marker: String? = nil, snapshots: SnapshotList? = nil) {
            self.marker = marker
            self.snapshots = snapshots
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let snapshots = dictionary["Snapshots"] as? [String: Any] { self.snapshots = try Redshift.SnapshotList(dictionary: snapshots) } else { self.snapshots = nil }
        }
    }

    public struct CreateClusterMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to Create a Database in the Amazon Redshift Database Developer Guide.  Default: dev  Constraints:   Must contain 1 to 64 alphanumeric characters.   Must contain only lowercase letters.   Cannot be a word that is reserved by the service. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        public let dBName: String?
        /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0 
        public let clusterVersion: String?
        /// If true, the data in the cluster is encrypted at rest.  Default: false
        public let encrypted: Bool?
        /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: myexamplecluster 
        public let clusterIdentifier: String
        /// The type of the cluster. When cluster type is specified as    single-node, the NumberOfNodes parameter is not required.    multi-node, the NumberOfNodes parameter is required.   Valid Values: multi-node | single-node  Default: multi-node 
        public let clusterType: String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: 1  Constraints: Must be a value from 0 to 35.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// The password associated with the master user account for the cluster that is being created. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        public let masterUserPassword: String
        /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-1d  Constraint: The specified Availability Zone must be in the same region as the current endpoint.
        public let availabilityZone: String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public let hsmConfigurationIdentifier: String?
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated with it at any time.
        public let iamRoles: IamRoleArnList?
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public let hsmClientCertificateIdentifier: String?
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        public let elasticIp: String?
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.  For information about determining how many nodes you need, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1  Constraints: Value must be at least 1 and no more than 100.
        public let numberOfNodes: Int32?
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
        public let kmsKeyId: String?
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
        public let clusterSecurityGroups: ClusterSecurityGroupNameList?
        /// A list of tag instances.
        public let tags: TagList?
        /// The node type to be provisioned for the cluster. For information about node types, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  Valid Values: ds1.xlarge | ds1.8xlarge | ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge. 
        public let nodeType: String
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups  Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterParameterGroupName: String?
        /// If true, the cluster can be accessed from a public network. 
        public let publiclyAccessible: Bool?
        /// The user name associated with the master user account for the cluster that is being created. Constraints:   Must be 1 - 128 alphanumeric characters.   First character must be a letter.   Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        public let masterUsername: String
        /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
        public let clusterSubnetGroupName: String?
        /// Reserved.
        public let additionalInfo: String?
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true 
        public let allowVersionUpgrade: Bool?
        /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439  Valid Values: 1150-65535 
        public let port: Int32?

        public init(dBName: String? = nil, clusterVersion: String? = nil, encrypted: Bool? = nil, clusterIdentifier: String, clusterType: String? = nil, enhancedVpcRouting: Bool? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, masterUserPassword: String, availabilityZone: String? = nil, hsmConfigurationIdentifier: String? = nil, iamRoles: IamRoleArnList? = nil, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, numberOfNodes: Int32? = nil, kmsKeyId: String? = nil, clusterSecurityGroups: ClusterSecurityGroupNameList? = nil, tags: TagList? = nil, nodeType: String, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, clusterParameterGroupName: String? = nil, publiclyAccessible: Bool? = nil, masterUsername: String, clusterSubnetGroupName: String? = nil, additionalInfo: String? = nil, allowVersionUpgrade: Bool? = nil, port: Int32? = nil) {
            self.dBName = dBName
            self.clusterVersion = clusterVersion
            self.encrypted = encrypted
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.masterUserPassword = masterUserPassword
            self.availabilityZone = availabilityZone
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.iamRoles = iamRoles
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.numberOfNodes = numberOfNodes
            self.kmsKeyId = kmsKeyId
            self.clusterSecurityGroups = clusterSecurityGroups
            self.tags = tags
            self.nodeType = nodeType
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.clusterParameterGroupName = clusterParameterGroupName
            self.publiclyAccessible = publiclyAccessible
            self.masterUsername = masterUsername
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.additionalInfo = additionalInfo
            self.allowVersionUpgrade = allowVersionUpgrade
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            self.dBName = dictionary["DBName"] as? String
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.encrypted = dictionary["Encrypted"] as? Bool
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = dictionary["ClusterType"] as? String
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            self.automatedSnapshotRetentionPeriod = dictionary["AutomatedSnapshotRetentionPeriod"] as? Int32
            guard let masterUserPassword = dictionary["MasterUserPassword"] as? String else { throw InitializableError.missingRequiredParam("MasterUserPassword") }
            self.masterUserPassword = masterUserPassword
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            self.hsmConfigurationIdentifier = dictionary["HsmConfigurationIdentifier"] as? String
            if let iamRoles = dictionary["IamRoles"] as? [String: Any] { self.iamRoles = try Redshift.IamRoleArnList(dictionary: iamRoles) } else { self.iamRoles = nil }
            self.hsmClientCertificateIdentifier = dictionary["HsmClientCertificateIdentifier"] as? String
            self.elasticIp = dictionary["ElasticIp"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.numberOfNodes = dictionary["NumberOfNodes"] as? Int32
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
            if let clusterSecurityGroups = dictionary["ClusterSecurityGroups"] as? [String: Any] { self.clusterSecurityGroups = try Redshift.ClusterSecurityGroupNameList(dictionary: clusterSecurityGroups) } else { self.clusterSecurityGroups = nil }
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            guard let nodeType = dictionary["NodeType"] as? String else { throw InitializableError.missingRequiredParam("NodeType") }
            self.nodeType = nodeType
            if let vpcSecurityGroupIds = dictionary["VpcSecurityGroupIds"] as? [String: Any] { self.vpcSecurityGroupIds = try Redshift.VpcSecurityGroupIdList(dictionary: vpcSecurityGroupIds) } else { self.vpcSecurityGroupIds = nil }
            self.clusterParameterGroupName = dictionary["ClusterParameterGroupName"] as? String
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            guard let masterUsername = dictionary["MasterUsername"] as? String else { throw InitializableError.missingRequiredParam("MasterUsername") }
            self.masterUsername = masterUsername
            self.clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String
            self.additionalInfo = dictionary["AdditionalInfo"] as? String
            self.allowVersionUpgrade = dictionary["AllowVersionUpgrade"] as? Bool
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct SnapshotCopyGrant: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the snapshot copy grant.
        public let snapshotCopyGrantName: String?
        /// A list of tag instances.
        public let tags: TagList?
        /// The unique identifier of the customer master key (CMK) in AWS KMS to which Amazon Redshift is granted permission.
        public let kmsKeyId: String?

        public init(snapshotCopyGrantName: String? = nil, tags: TagList? = nil, kmsKeyId: String? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
            self.kmsKeyId = kmsKeyId
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotCopyGrantName = dictionary["SnapshotCopyGrantName"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
        }
    }

    public struct ClusterSecurityGroupNameList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroupName: [String]?

        public init(clusterSecurityGroupName: [String]? = nil) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterSecurityGroupName = dictionary["ClusterSecurityGroupName"] as? [String]
        }
    }

    public struct ModifySnapshotCopyRetentionPeriodMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the cluster for which you want to change the retention period for automated snapshots that are copied to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        public let clusterIdentifier: String
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. If you decrease the retention period for automated snapshots that are copied to a destination region, Amazon Redshift will delete any existing automated snapshots that were copied to the destination region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35.
        public let retentionPeriod: Int32

        public init(clusterIdentifier: String, retentionPeriod: Int32) {
            self.clusterIdentifier = clusterIdentifier
            self.retentionPeriod = retentionPeriod
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
            guard let retentionPeriod = dictionary["RetentionPeriod"] as? Int32 else { throw InitializableError.missingRequiredParam("RetentionPeriod") }
            self.retentionPeriod = retentionPeriod
        }
    }

    public struct DeleteClusterSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the cluster subnet group name to be deleted.
        public let clusterSubnetGroupName: String

        public init(clusterSubnetGroupName: String) {
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterSubnetGroupName = dictionary["ClusterSubnetGroupName"] as? String else { throw InitializableError.missingRequiredParam("ClusterSubnetGroupName") }
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }
    }

    public struct RevokeSnapshotAccessMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        public let snapshotClusterIdentifier: String?
        /// The identifier of the snapshot that the account can no longer access.
        public let snapshotIdentifier: String
        /// The identifier of the AWS customer account that can no longer restore the specified snapshot.
        public let accountWithRestoreAccess: String

        public init(snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String, accountWithRestoreAccess: String) {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotClusterIdentifier = dictionary["SnapshotClusterIdentifier"] as? String
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
            guard let accountWithRestoreAccess = dictionary["AccountWithRestoreAccess"] as? String else { throw InitializableError.missingRequiredParam("AccountWithRestoreAccess") }
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }
    }

    public struct CreateHsmClientCertificateResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hsmClientCertificate: HsmClientCertificate?

        public init(hsmClientCertificate: HsmClientCertificate? = nil) {
            self.hsmClientCertificate = hsmClientCertificate
        }

        public init(dictionary: [String: Any]) throws {
            if let hsmClientCertificate = dictionary["HsmClientCertificate"] as? [String: Any] { self.hsmClientCertificate = try Redshift.HsmClientCertificate(dictionary: hsmClientCertificate) } else { self.hsmClientCertificate = nil }
        }
    }

    public struct CreateSnapshotCopyGrantResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshotCopyGrant: SnapshotCopyGrant?

        public init(snapshotCopyGrant: SnapshotCopyGrant? = nil) {
            self.snapshotCopyGrant = snapshotCopyGrant
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotCopyGrant = dictionary["SnapshotCopyGrant"] as? [String: Any] { self.snapshotCopyGrant = try Redshift.SnapshotCopyGrant(dictionary: snapshotCopyGrant) } else { self.snapshotCopyGrant = nil }
        }
    }

    public struct ClusterParameterStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The error that prevented the parameter from being applied to the database.
        public let parameterApplyErrorDescription: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.    in-sync: The parameter value is in sync with the database.    pending-reboot: The parameter value will be applied after the cluster reboots.    applying: The parameter value is being applied to the database.    invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.    apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.    apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.    unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.  
        public let parameterApplyStatus: String?

        public init(parameterApplyErrorDescription: String? = nil, parameterName: String? = nil, parameterApplyStatus: String? = nil) {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterName = parameterName
            self.parameterApplyStatus = parameterApplyStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.parameterApplyErrorDescription = dictionary["ParameterApplyErrorDescription"] as? String
            self.parameterName = dictionary["ParameterName"] as? String
            self.parameterApplyStatus = dictionary["ParameterApplyStatus"] as? String
        }
    }

    public struct CreateClusterSecurityGroupResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterSecurityGroup: ClusterSecurityGroup?

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterSecurityGroup = dictionary["ClusterSecurityGroup"] as? [String: Any] { self.clusterSecurityGroup = try Redshift.ClusterSecurityGroup(dictionary: clusterSecurityGroup) } else { self.clusterSecurityGroup = nil }
        }
    }

    public struct PendingModifiedValues: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The pending or in-progress change of the service version.
        public let clusterVersion: String?
        /// The pending or in-progress change of the cluster's node type.
        public let nodeType: String?
        /// The pending or in-progress change of the new identifier for the cluster.
        public let clusterIdentifier: String?
        /// The pending or in-progress change of the automated snapshot retention period.
        public let automatedSnapshotRetentionPeriod: Int32?
        /// The pending or in-progress change of the number of nodes in the cluster.
        public let numberOfNodes: Int32?
        /// The pending or in-progress change of the master user password for the cluster.
        public let masterUserPassword: String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        public let enhancedVpcRouting: Bool?
        /// The pending or in-progress change of the cluster type.
        public let clusterType: String?
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        public let publiclyAccessible: Bool?

        public init(clusterVersion: String? = nil, nodeType: String? = nil, clusterIdentifier: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, numberOfNodes: Int32? = nil, masterUserPassword: String? = nil, enhancedVpcRouting: Bool? = nil, clusterType: String? = nil, publiclyAccessible: Bool? = nil) {
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
            self.clusterIdentifier = clusterIdentifier
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.numberOfNodes = numberOfNodes
            self.masterUserPassword = masterUserPassword
            self.enhancedVpcRouting = enhancedVpcRouting
            self.clusterType = clusterType
            self.publiclyAccessible = publiclyAccessible
        }

        public init(dictionary: [String: Any]) throws {
            self.clusterVersion = dictionary["ClusterVersion"] as? String
            self.nodeType = dictionary["NodeType"] as? String
            self.clusterIdentifier = dictionary["ClusterIdentifier"] as? String
            self.automatedSnapshotRetentionPeriod = dictionary["AutomatedSnapshotRetentionPeriod"] as? Int32
            self.numberOfNodes = dictionary["NumberOfNodes"] as? Int32
            self.masterUserPassword = dictionary["MasterUserPassword"] as? String
            self.enhancedVpcRouting = dictionary["EnhancedVpcRouting"] as? Bool
            self.clusterType = dictionary["ClusterType"] as? String
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
        }
    }

    public struct CreateHsmConfigurationResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hsmConfiguration: HsmConfiguration?

        public init(hsmConfiguration: HsmConfiguration? = nil) {
            self.hsmConfiguration = hsmConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let hsmConfiguration = dictionary["HsmConfiguration"] as? [String: Any] { self.hsmConfiguration = try Redshift.HsmConfiguration(dictionary: hsmConfiguration) } else { self.hsmConfiguration = nil }
        }
    }

    public struct CreateTagsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0". 
        public let tags: TagList
        /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        public let resourceName: String

        public init(tags: TagList, resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Redshift.TagList(dictionary: tags)
            guard let resourceName = dictionary["ResourceName"] as? String else { throw InitializableError.missingRequiredParam("ResourceName") }
            self.resourceName = resourceName
        }
    }

    public struct ParameterGroupList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let clusterParameterGroup: [ClusterParameterGroup]?

        public init(clusterParameterGroup: [ClusterParameterGroup]? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let clusterParameterGroup = dictionary["ClusterParameterGroup"] as? [[String: Any]] {
                self.clusterParameterGroup = try clusterParameterGroup.map({ try ClusterParameterGroup(dictionary: $0) })
            } else { 
                self.clusterParameterGroup = nil
            }
        }
    }

    public struct IPRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the IP range, for example, "authorized".
        public let status: String?
        /// The list of tags for the IP range.
        public let tags: TagList?
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        public let cIDRIP: String?

        public init(status: String? = nil, tags: TagList? = nil, cIDRIP: String? = nil) {
            self.status = status
            self.tags = tags
            self.cIDRIP = cIDRIP
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Redshift.TagList(dictionary: tags) } else { self.tags = nil }
            self.cIDRIP = dictionary["CIDRIP"] as? String
        }
    }

    public struct DeleteClusterSnapshotMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available state.
        public let snapshotIdentifier: String
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        public let snapshotClusterIdentifier: String?

        public init(snapshotIdentifier: String, snapshotClusterIdentifier: String? = nil) {
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotIdentifier = dictionary["SnapshotIdentifier"] as? String else { throw InitializableError.missingRequiredParam("SnapshotIdentifier") }
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotClusterIdentifier = dictionary["SnapshotClusterIdentifier"] as? String
        }
    }

    public struct DescribeClusterParameterGroupsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
        public let tagValues: TagValueList?
        /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
        public let parameterGroupName: String?
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameterGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
        public let tagKeys: TagKeyList?

        public init(maxRecords: Int32? = nil, tagValues: TagValueList? = nil, parameterGroupName: String? = nil, marker: String? = nil, tagKeys: TagKeyList? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.parameterGroupName = parameterGroupName
            self.marker = marker
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            if let tagValues = dictionary["TagValues"] as? [String: Any] { self.tagValues = try Redshift.TagValueList(dictionary: tagValues) } else { self.tagValues = nil }
            self.parameterGroupName = dictionary["ParameterGroupName"] as? String
            self.marker = dictionary["Marker"] as? String
            if let tagKeys = dictionary["TagKeys"] as? [String: Any] { self.tagKeys = try Redshift.TagKeyList(dictionary: tagKeys) } else { self.tagKeys = nil }
        }
    }

    public struct ParametersList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let parameter: [Parameter]?

        public init(parameter: [Parameter]? = nil) {
            self.parameter = parameter
        }

        public init(dictionary: [String: Any]) throws {
            if let parameter = dictionary["Parameter"] as? [[String: Any]] {
                self.parameter = try parameter.map({ try Parameter(dictionary: $0) })
            } else { 
                self.parameter = nil
            }
        }
    }

    public struct DisableSnapshotCopyMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        public let clusterIdentifier: String

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let clusterIdentifier = dictionary["ClusterIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ClusterIdentifier") }
            self.clusterIdentifier = clusterIdentifier
        }
    }

    public struct ModifyClusterParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
        public let parameters: ParametersList
        /// The name of the parameter group to be modified.
        public let parameterGroupName: String

        public init(parameters: ParametersList, parameterGroupName: String) {
            self.parameters = parameters
            self.parameterGroupName = parameterGroupName
        }

        public init(dictionary: [String: Any]) throws {
            guard let parameters = dictionary["Parameters"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Parameters") }
            self.parameters = try Redshift.ParametersList(dictionary: parameters)
            guard let parameterGroupName = dictionary["ParameterGroupName"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupName") }
            self.parameterGroupName = parameterGroupName
        }
    }

    public struct DescribeClusterParametersMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of a cluster parameter group for which to return details.
        public let parameterGroupName: String
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        public let marker: String?
        /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group.  Default: All parameter types returned. Valid Values: user | engine-default 
        public let source: String?

        public init(maxRecords: Int32? = nil, parameterGroupName: String, marker: String? = nil, source: String? = nil) {
            self.maxRecords = maxRecords
            self.parameterGroupName = parameterGroupName
            self.marker = marker
            self.source = source
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            guard let parameterGroupName = dictionary["ParameterGroupName"] as? String else { throw InitializableError.missingRequiredParam("ParameterGroupName") }
            self.parameterGroupName = parameterGroupName
            self.marker = dictionary["Marker"] as? String
            self.source = dictionary["Source"] as? String
        }
    }

    public struct AccountWithRestoreAccess: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of an AWS customer account authorized to restore a snapshot.
        public let accountId: String?

        public init(accountId: String? = nil) {
            self.accountId = accountId
        }

        public init(dictionary: [String: Any]) throws {
            self.accountId = dictionary["AccountId"] as? String
        }
    }

    public struct EventInfoMap: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The severity of the event. Values: ERROR, INFO
        public let severity: String?
        /// The identifier of an Amazon Redshift event.
        public let eventId: String?
        /// The description of an Amazon Redshift event.
        public let eventDescription: String?
        /// The category of an Amazon Redshift event.
        public let eventCategories: EventCategoriesList?

        public init(severity: String? = nil, eventId: String? = nil, eventDescription: String? = nil, eventCategories: EventCategoriesList? = nil) {
            self.severity = severity
            self.eventId = eventId
            self.eventDescription = eventDescription
            self.eventCategories = eventCategories
        }

        public init(dictionary: [String: Any]) throws {
            self.severity = dictionary["Severity"] as? String
            self.eventId = dictionary["EventId"] as? String
            self.eventDescription = dictionary["EventDescription"] as? String
            if let eventCategories = dictionary["EventCategories"] as? [String: Any] { self.eventCategories = try Redshift.EventCategoriesList(dictionary: eventCategories) } else { self.eventCategories = nil }
        }
    }

    public struct EventCategoriesMapList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let eventCategoriesMap: [EventCategoriesMap]?

        public init(eventCategoriesMap: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMap = eventCategoriesMap
        }

        public init(dictionary: [String: Any]) throws {
            if let eventCategoriesMap = dictionary["EventCategoriesMap"] as? [[String: Any]] {
                self.eventCategoriesMap = try eventCategoriesMap.map({ try EventCategoriesMap(dictionary: $0) })
            } else { 
                self.eventCategoriesMap = nil
            }
        }
    }

}