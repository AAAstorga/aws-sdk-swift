// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Es {

    public struct InstanceCountLimits: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let minimumInstanceCount: Int32?
        public let maximumInstanceCount: Int32?

        public init(minimumInstanceCount: Int32? = nil, maximumInstanceCount: Int32? = nil) {
            self.minimumInstanceCount = minimumInstanceCount
            self.maximumInstanceCount = maximumInstanceCount
        }

        public init(dictionary: [String: Any]) throws {
            self.minimumInstanceCount = dictionary["MinimumInstanceCount"] as? Int32
            self.maximumInstanceCount = dictionary["MaximumInstanceCount"] as? Int32
        }
    }

    public struct DescribeElasticsearchDomainsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Elasticsearch domains for which you want information.
        public let domainNames: [String]

        public init(domainNames: [String]) {
            self.domainNames = domainNames
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainNames = dictionary["DomainNames"] as? [String] else { throw InitializableError.missingRequiredParam("DomainNames") }
            self.domainNames = domainNames
        }
    }

    public struct DescribeElasticsearchDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DomainName": "DomainName"]
        }
        /// The name of the Elasticsearch domain for which you want information.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct AddTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specify the ARN for which you want to add the tags.
        public let aRN: String
        ///  List of Tag that need to be added for the Elasticsearch domain. 
        public let tagList: [Tag]

        public init(aRN: String, tagList: [Tag]) {
            self.aRN = aRN
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let tagList = dictionary["TagList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagList") }
            self.tagList = try tagList.map({ try Tag(dictionary: $0) })
        }
    }

    public struct ListElasticsearchInstanceTypesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["domainName": "DomainName", "maxResults": "MaxResults", "nextToken": "NextToken"]
        }
        public static var pathParams: [String: String] {
            return ["ElasticsearchVersion": "ElasticsearchVersion"]
        }
        ///  Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. 
        public let maxResults: Int32?
        /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. 
        public let domainName: String?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. 
        public let nextToken: String?
        /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed. 
        public let elasticsearchVersion: String

        public init(maxResults: Int32? = nil, domainName: String? = nil, nextToken: String? = nil, elasticsearchVersion: String) {
            self.maxResults = maxResults
            self.domainName = domainName
            self.nextToken = nextToken
            self.elasticsearchVersion = elasticsearchVersion
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["MaxResults"] as? Int32
            self.domainName = dictionary["DomainName"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            guard let elasticsearchVersion = dictionary["ElasticsearchVersion"] as? String else { throw InitializableError.missingRequiredParam("ElasticsearchVersion") }
            self.elasticsearchVersion = elasticsearchVersion
        }
    }

    public struct UpdateElasticsearchDomainConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DomainName": "DomainName"]
        }
        /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// The type and number of instances to instantiate for the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// Specify the type and size of the EBS volume that you want to use. 
        public let eBSOptions: EBSOptions?
        /// The name of the Elasticsearch domain that you are updating. 
        public let domainName: String

        public init(snapshotOptions: SnapshotOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, advancedOptions: [String: String]? = nil, accessPolicies: String? = nil, eBSOptions: EBSOptions? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.advancedOptions = advancedOptions
            self.accessPolicies = accessPolicies
            self.eBSOptions = eBSOptions
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotOptions = dictionary["SnapshotOptions"] as? [String: Any] { self.snapshotOptions = try Es.SnapshotOptions(dictionary: snapshotOptions) } else { self.snapshotOptions = nil }
            if let elasticsearchClusterConfig = dictionary["ElasticsearchClusterConfig"] as? [String: Any] { self.elasticsearchClusterConfig = try Es.ElasticsearchClusterConfig(dictionary: elasticsearchClusterConfig) } else { self.elasticsearchClusterConfig = nil }
            if let advancedOptions = dictionary["AdvancedOptions"] as? [String: String] {
                self.advancedOptions = advancedOptions
            } else { 
                self.advancedOptions = nil
            }
            self.accessPolicies = dictionary["AccessPolicies"] as? String
            if let eBSOptions = dictionary["EBSOptions"] as? [String: Any] { self.eBSOptions = try Es.EBSOptions(dictionary: eBSOptions) } else { self.eBSOptions = nil }
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct CreateElasticsearchDomainResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the newly created Elasticsearch domain. 
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let domainStatus = dictionary["DomainStatus"] as? [String: Any] { self.domainStatus = try Es.ElasticsearchDomainStatus(dictionary: domainStatus) } else { self.domainStatus = nil }
        }
    }

    public struct ElasticsearchClusterConfigStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies the cluster configuration for the specified Elasticsearch domain.
        public let options: ElasticsearchClusterConfig
        ///  Specifies the status of the configuration for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: ElasticsearchClusterConfig, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Options") }
            self.options = try Es.ElasticsearchClusterConfig(dictionary: options)
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public struct ListTagsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  List of Tag for the requested Elasticsearch domain.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            if let tagList = dictionary["TagList"] as? [[String: Any]] {
                self.tagList = try tagList.map({ try Tag(dictionary: $0) })
            } else { 
                self.tagList = nil
            }
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["domainName": "DomainName"]
        }
        public static var pathParams: [String: String] {
            return ["InstanceType": "InstanceType", "ElasticsearchVersion": "ElasticsearchVersion"]
        }
        ///  The instance type for an Elasticsearch cluster for which Elasticsearch  Limits  are needed. 
        public let instanceType: ESPartitionInstanceType
        ///  DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch  Limits  for existing domain. 
        public let domainName: String?
        ///  Version of Elasticsearch for which  Limits  are needed. 
        public let elasticsearchVersion: String

        public init(instanceType: ESPartitionInstanceType, domainName: String? = nil, elasticsearchVersion: String) {
            self.instanceType = instanceType
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawInstanceType = dictionary["InstanceType"] as? String, let instanceType = ESPartitionInstanceType(rawValue: rawInstanceType) else { throw InitializableError.missingRequiredParam("InstanceType") }
            self.instanceType = instanceType
            self.domainName = dictionary["DomainName"] as? String
            guard let elasticsearchVersion = dictionary["ElasticsearchVersion"] as? String else { throw InitializableError.missingRequiredParam("ElasticsearchVersion") }
            self.elasticsearchVersion = elasticsearchVersion
        }
    }

    public struct RemoveTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
        public let aRN: String
        /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
        public let tagKeys: [String]

        public init(aRN: String, tagKeys: [String]) {
            self.aRN = aRN
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct OptionStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the latest version for the entity.
        public let updateVersion: Int32?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public let pendingDeletion: Bool?
        /// Timestamp which tells the creation date for the entity.
        public let creationDate: Date
        /// Provides the OptionState for the Elasticsearch domain.
        public let state: OptionState
        /// Timestamp which tells the last updated time for the entity.
        public let updateDate: Date

        public init(updateVersion: Int32? = nil, pendingDeletion: Bool? = nil, creationDate: Date, state: OptionState, updateDate: Date) {
            self.updateVersion = updateVersion
            self.pendingDeletion = pendingDeletion
            self.creationDate = creationDate
            self.state = state
            self.updateDate = updateDate
        }

        public init(dictionary: [String: Any]) throws {
            self.updateVersion = dictionary["UpdateVersion"] as? Int32
            self.pendingDeletion = dictionary["PendingDeletion"] as? Bool
            guard let creationDate = dictionary["CreationDate"] as? Date else { throw InitializableError.missingRequiredParam("CreationDate") }
            self.creationDate = creationDate
            guard let rawState = dictionary["State"] as? String, let state = OptionState(rawValue: rawState) else { throw InitializableError.missingRequiredParam("State") }
            self.state = state
            guard let updateDate = dictionary["UpdateDate"] as? Date else { throw InitializableError.missingRequiredParam("UpdateDate") }
            self.updateDate = updateDate
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let limitsByRole: [String: Limits]?

        public init(limitsByRole: [String: Limits]? = nil) {
            self.limitsByRole = limitsByRole
        }

        public init(dictionary: [String: Any]) throws {
            if let limitsByRole = dictionary["LimitsByRole"] as? [String: Any] {
                var limitsByRoleDict: [String: Limits] = [:]
                for (key, value) in limitsByRole {
                    guard let limitsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                    limitsByRoleDict[key] = try Limits(dictionary: limitsDict)
                }
                self.limitsByRole = limitsByRoleDict
            } else { 
                self.limitsByRole = nil
            }
        }
    }

    public struct DescribeElasticsearchDomainResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current status of the Elasticsearch domain.
        public let domainStatus: ElasticsearchDomainStatus

        public init(domainStatus: ElasticsearchDomainStatus) {
            self.domainStatus = domainStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainStatus = dictionary["DomainStatus"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DomainStatus") }
            self.domainStatus = try Es.ElasticsearchDomainStatus(dictionary: domainStatus)
        }
    }

    public enum ESPartitionInstanceType: String, CustomStringConvertible {
        case m3_medium_elasticsearch = "m3.medium.elasticsearch"
        case m3_large_elasticsearch = "m3.large.elasticsearch"
        case m3_xlarge_elasticsearch = "m3.xlarge.elasticsearch"
        case m3_2xlarge_elasticsearch = "m3.2xlarge.elasticsearch"
        case m4_large_elasticsearch = "m4.large.elasticsearch"
        case m4_xlarge_elasticsearch = "m4.xlarge.elasticsearch"
        case m4_2xlarge_elasticsearch = "m4.2xlarge.elasticsearch"
        case m4_4xlarge_elasticsearch = "m4.4xlarge.elasticsearch"
        case m4_10xlarge_elasticsearch = "m4.10xlarge.elasticsearch"
        case t2_micro_elasticsearch = "t2.micro.elasticsearch"
        case t2_small_elasticsearch = "t2.small.elasticsearch"
        case t2_medium_elasticsearch = "t2.medium.elasticsearch"
        case r3_large_elasticsearch = "r3.large.elasticsearch"
        case r3_xlarge_elasticsearch = "r3.xlarge.elasticsearch"
        case r3_2xlarge_elasticsearch = "r3.2xlarge.elasticsearch"
        case r3_4xlarge_elasticsearch = "r3.4xlarge.elasticsearch"
        case r3_8xlarge_elasticsearch = "r3.8xlarge.elasticsearch"
        case i2_xlarge_elasticsearch = "i2.xlarge.elasticsearch"
        case i2_2xlarge_elasticsearch = "i2.2xlarge.elasticsearch"
        case d2_xlarge_elasticsearch = "d2.xlarge.elasticsearch"
        case d2_2xlarge_elasticsearch = "d2.2xlarge.elasticsearch"
        case d2_4xlarge_elasticsearch = "d2.4xlarge.elasticsearch"
        case d2_8xlarge_elasticsearch = "d2.8xlarge.elasticsearch"
        case c4_large_elasticsearch = "c4.large.elasticsearch"
        case c4_xlarge_elasticsearch = "c4.xlarge.elasticsearch"
        case c4_2xlarge_elasticsearch = "c4.2xlarge.elasticsearch"
        case c4_4xlarge_elasticsearch = "c4.4xlarge.elasticsearch"
        case c4_8xlarge_elasticsearch = "c4.8xlarge.elasticsearch"
        case r4_large_elasticsearch = "r4.large.elasticsearch"
        case r4_xlarge_elasticsearch = "r4.xlarge.elasticsearch"
        case r4_2xlarge_elasticsearch = "r4.2xlarge.elasticsearch"
        case r4_4xlarge_elasticsearch = "r4.4xlarge.elasticsearch"
        case r4_8xlarge_elasticsearch = "r4.8xlarge.elasticsearch"
        case r4_16xlarge_elasticsearch = "r4.16xlarge.elasticsearch"
        public var description: String { return self.rawValue }
    }

    public struct AdditionalLimit: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Name of Additional Limit is specific to a given InstanceType and for each of it's  InstanceRole  etc.  Attributes and their details:   MaximumNumberOfDataNodesSupported This attribute will be present in Master node only to specify how much data nodes upto which given  ESPartitionInstanceType  can support as master node. MaximumNumberOfDataNodesWithoutMasterNode This attribute will be present in Data node only to specify how much data nodes of given  ESPartitionInstanceType  upto which you don't need any master nodes to govern them.  
        public let limitName: String?
        ///  Value for given  AdditionalLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        public init(dictionary: [String: Any]) throws {
            self.limitName = dictionary["LimitName"] as? String
            self.limitValues = dictionary["LimitValues"] as? [String]
        }
    }

    public struct ListDomainNamesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of Elasticsearch domain names.
        public let domainNames: [DomainInfo]?

        public init(domainNames: [DomainInfo]? = nil) {
            self.domainNames = domainNames
        }

        public init(dictionary: [String: Any]) throws {
            if let domainNames = dictionary["DomainNames"] as? [[String: Any]] {
                self.domainNames = try domainNames.map({ try DomainInfo(dictionary: $0) })
            } else { 
                self.domainNames = nil
            }
        }
    }

    public struct SnapshotOptions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public let automatedSnapshotStartHour: Int32?

        public init(automatedSnapshotStartHour: Int32? = nil) {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }

        public init(dictionary: [String: Any]) throws {
            self.automatedSnapshotStartHour = dictionary["AutomatedSnapshotStartHour"] as? Int32
        }
    }

    public struct EBSOptions: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Integer to specify the size of an EBS volume.
        public let volumeSize: Int32?
        ///  Specifies the volume type for EBS-based storage.
        public let volumeType: VolumeType?
        /// Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
        public let iops: Int32?
        /// Specifies whether EBS-based storage is enabled.
        public let eBSEnabled: Bool?

        public init(volumeSize: Int32? = nil, volumeType: VolumeType? = nil, iops: Int32? = nil, eBSEnabled: Bool? = nil) {
            self.volumeSize = volumeSize
            self.volumeType = volumeType
            self.iops = iops
            self.eBSEnabled = eBSEnabled
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeSize = dictionary["VolumeSize"] as? Int32
            if let volumeType = dictionary["VolumeType"] as? String { self.volumeType = VolumeType(rawValue: volumeType) } else { self.volumeType = nil }
            self.iops = dictionary["Iops"] as? Int32
            self.eBSEnabled = dictionary["EBSEnabled"] as? Bool
        }
    }

    public struct DescribeElasticsearchDomainConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DomainName": "DomainName"]
        }
        /// The Elasticsearch domain that you want to get information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct DescribeElasticsearchDomainConfigResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainConfig = dictionary["DomainConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DomainConfig") }
            self.domainConfig = try Es.ElasticsearchDomainConfig(dictionary: domainConfig)
        }
    }

    public struct ListElasticsearchVersionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["nextToken": "NextToken", "maxResults": "MaxResults"]
        }
        public let nextToken: String?
        ///  Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct ListElasticsearchInstanceTypesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  List of instance types supported by Amazon Elasticsearch service for given  ElasticsearchVersion  
        public let elasticsearchInstanceTypes: [ESPartitionInstanceType]?
        /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results. 
        public let nextToken: String?

        public init(elasticsearchInstanceTypes: [ESPartitionInstanceType]? = nil, nextToken: String? = nil) {
            self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let elasticsearchInstanceTypes = dictionary["ElasticsearchInstanceTypes"] as? [String] { self.elasticsearchInstanceTypes = elasticsearchInstanceTypes.flatMap({ ESPartitionInstanceType(rawValue: $0)}) } else { self.elasticsearchInstanceTypes = nil }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        public let value: String
        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct SnapshotOptionsStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        public let options: SnapshotOptions
        /// Specifies the status of a daily automated snapshot.
        public let status: OptionStatus

        public init(options: SnapshotOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Options") }
            self.options = try Es.SnapshotOptions(dictionary: options)
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public struct DomainInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies the DomainName.
        public let domainName: String?

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            self.domainName = dictionary["DomainName"] as? String
        }
    }

    public struct DescribeElasticsearchDomainsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the domains requested in the DescribeElasticsearchDomains request.
        public let domainStatusList: [ElasticsearchDomainStatus]

        public init(domainStatusList: [ElasticsearchDomainStatus]) {
            self.domainStatusList = domainStatusList
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainStatusList = dictionary["DomainStatusList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("DomainStatusList") }
            self.domainStatusList = try domainStatusList.map({ try ElasticsearchDomainStatus(dictionary: $0) })
        }
    }

    public struct UpdateElasticsearchDomainConfigResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the updated Elasticsearch domain. 
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainConfig = dictionary["DomainConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DomainConfig") }
            self.domainConfig = try Es.ElasticsearchDomainConfig(dictionary: domainConfig)
        }
    }

    public struct StorageTypeLimit: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Name of storage limits that are applicable for given storage type. If  StorageType  is ebs, following storage options are applicable  MinimumVolumeSize Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumVolumeSize Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumIops Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable. MinimumIops Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.  
        public let limitName: String?
        ///  Values for the  StorageTypeLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        public init(dictionary: [String: Any]) throws {
            self.limitName = dictionary["LimitName"] as? String
            self.limitValues = dictionary["LimitValues"] as? [String]
        }
    }

    public struct ElasticsearchVersionStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies the Elasticsearch version for the specified Elasticsearch domain.
        public let options: String
        ///  Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? String else { throw InitializableError.missingRequiredParam("Options") }
            self.options = options
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public struct ListElasticsearchVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let elasticsearchVersions: [String]?
        public let nextToken: String?

        public init(elasticsearchVersions: [String]? = nil, nextToken: String? = nil) {
            self.elasticsearchVersions = elasticsearchVersions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.elasticsearchVersions = dictionary["ElasticsearchVersions"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct InstanceLimits: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let instanceCountLimits: InstanceCountLimits?

        public init(instanceCountLimits: InstanceCountLimits? = nil) {
            self.instanceCountLimits = instanceCountLimits
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceCountLimits = dictionary["InstanceCountLimits"] as? [String: Any] { self.instanceCountLimits = try Es.InstanceCountLimits(dictionary: instanceCountLimits) } else { self.instanceCountLimits = nil }
        }
    }

    public struct DeleteElasticsearchDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var pathParams: [String: String] {
            return ["DomainName": "DomainName"]
        }
        /// The name of the Elasticsearch domain that you want to permanently delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct AdvancedOptionsStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies the status of advanced options for the specified Elasticsearch domain.
        public let options: [String: String]
        ///  Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: [String: String], status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? [String: String] else { throw InitializableError.missingRequiredParam("Options") }
            self.options = options
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public struct Limits: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  List of additional limits that are specific to a given InstanceType and for each of it's  InstanceRole  . 
        public let additionalLimits: [AdditionalLimit]?
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType. 
        public let storageTypes: [StorageType]?
        public let instanceLimits: InstanceLimits?

        public init(additionalLimits: [AdditionalLimit]? = nil, storageTypes: [StorageType]? = nil, instanceLimits: InstanceLimits? = nil) {
            self.additionalLimits = additionalLimits
            self.storageTypes = storageTypes
            self.instanceLimits = instanceLimits
        }

        public init(dictionary: [String: Any]) throws {
            if let additionalLimits = dictionary["AdditionalLimits"] as? [[String: Any]] {
                self.additionalLimits = try additionalLimits.map({ try AdditionalLimit(dictionary: $0) })
            } else { 
                self.additionalLimits = nil
            }
            if let storageTypes = dictionary["StorageTypes"] as? [[String: Any]] {
                self.storageTypes = try storageTypes.map({ try StorageType(dictionary: $0) })
            } else { 
                self.storageTypes = nil
            }
            if let instanceLimits = dictionary["InstanceLimits"] as? [String: Any] { self.instanceLimits = try Es.InstanceLimits(dictionary: instanceLimits) } else { self.instanceLimits = nil }
        }
    }

    public struct ElasticsearchDomainConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public let snapshotOptions: SnapshotOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfigStatus?
        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain. See Configuring Advanced Options for more information.
        public let advancedOptions: AdvancedOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public let eBSOptions: EBSOptionsStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public let elasticsearchVersion: ElasticsearchVersionStatus?

        public init(snapshotOptions: SnapshotOptionsStatus? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfigStatus? = nil, accessPolicies: AccessPoliciesStatus? = nil, advancedOptions: AdvancedOptionsStatus? = nil, eBSOptions: EBSOptionsStatus? = nil, elasticsearchVersion: ElasticsearchVersionStatus? = nil) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.eBSOptions = eBSOptions
            self.elasticsearchVersion = elasticsearchVersion
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotOptions = dictionary["SnapshotOptions"] as? [String: Any] { self.snapshotOptions = try Es.SnapshotOptionsStatus(dictionary: snapshotOptions) } else { self.snapshotOptions = nil }
            if let elasticsearchClusterConfig = dictionary["ElasticsearchClusterConfig"] as? [String: Any] { self.elasticsearchClusterConfig = try Es.ElasticsearchClusterConfigStatus(dictionary: elasticsearchClusterConfig) } else { self.elasticsearchClusterConfig = nil }
            if let accessPolicies = dictionary["AccessPolicies"] as? [String: Any] { self.accessPolicies = try Es.AccessPoliciesStatus(dictionary: accessPolicies) } else { self.accessPolicies = nil }
            if let advancedOptions = dictionary["AdvancedOptions"] as? [String: Any] { self.advancedOptions = try Es.AdvancedOptionsStatus(dictionary: advancedOptions) } else { self.advancedOptions = nil }
            if let eBSOptions = dictionary["EBSOptions"] as? [String: Any] { self.eBSOptions = try Es.EBSOptionsStatus(dictionary: eBSOptions) } else { self.eBSOptions = nil }
            if let elasticsearchVersion = dictionary["ElasticsearchVersion"] as? [String: Any] { self.elasticsearchVersion = try Es.ElasticsearchVersionStatus(dictionary: elasticsearchVersion) } else { self.elasticsearchVersion = nil }
        }
    }

    public struct CreateElasticsearchDomainRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. 
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// Options to enable, disable and specify the type and size of EBS storage volumes. 
        public let eBSOptions: EBSOptions?
        /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see Creating Elasticsearch Domains in the Amazon Elasticsearch Service Developer Guide.
        public let elasticsearchVersion: String?
        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        ///  Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String

        public init(snapshotOptions: SnapshotOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, eBSOptions: EBSOptions? = nil, elasticsearchVersion: String? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.eBSOptions = eBSOptions
            self.elasticsearchVersion = elasticsearchVersion
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
        }

        public init(dictionary: [String: Any]) throws {
            if let snapshotOptions = dictionary["SnapshotOptions"] as? [String: Any] { self.snapshotOptions = try Es.SnapshotOptions(dictionary: snapshotOptions) } else { self.snapshotOptions = nil }
            if let elasticsearchClusterConfig = dictionary["ElasticsearchClusterConfig"] as? [String: Any] { self.elasticsearchClusterConfig = try Es.ElasticsearchClusterConfig(dictionary: elasticsearchClusterConfig) } else { self.elasticsearchClusterConfig = nil }
            if let eBSOptions = dictionary["EBSOptions"] as? [String: Any] { self.eBSOptions = try Es.EBSOptions(dictionary: eBSOptions) } else { self.eBSOptions = nil }
            self.elasticsearchVersion = dictionary["ElasticsearchVersion"] as? String
            self.accessPolicies = dictionary["AccessPolicies"] as? String
            if let advancedOptions = dictionary["AdvancedOptions"] as? [String: String] {
                self.advancedOptions = advancedOptions
            } else { 
                self.advancedOptions = nil
            }
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
        }
    }

    public struct StorageType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of limits that are applicable for given storage type. 
        public let storageTypeLimits: [StorageTypeLimit]?
        public let storageSubTypeName: String?
        public let storageTypeName: String?

        public init(storageTypeLimits: [StorageTypeLimit]? = nil, storageSubTypeName: String? = nil, storageTypeName: String? = nil) {
            self.storageTypeLimits = storageTypeLimits
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeName = storageTypeName
        }

        public init(dictionary: [String: Any]) throws {
            if let storageTypeLimits = dictionary["StorageTypeLimits"] as? [[String: Any]] {
                self.storageTypeLimits = try storageTypeLimits.map({ try StorageTypeLimit(dictionary: $0) })
            } else { 
                self.storageTypeLimits = nil
            }
            self.storageSubTypeName = dictionary["StorageSubTypeName"] as? String
            self.storageTypeName = dictionary["StorageTypeName"] as? String
        }
    }

    public struct DeleteElasticsearchDomainResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the Elasticsearch domain being deleted.
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let domainStatus = dictionary["DomainStatus"] as? [String: Any] { self.domainStatus = try Es.ElasticsearchDomainStatus(dictionary: domainStatus) } else { self.domainStatus = nil }
        }
    }

    public struct EBSOptionsStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies the EBS options for the specified Elasticsearch domain.
        public let options: EBSOptions
        ///  Specifies the status of the EBS options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: EBSOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Options") }
            self.options = try Es.EBSOptions(dictionary: options)
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public enum VolumeType: String, CustomStringConvertible {
        case standard = "standard"
        case gp2 = "gp2"
        case io1 = "io1"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var queryParams: [String: String] {
            return ["arn": "ARN"]
        }
        ///  Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
        public let aRN: String

        public init(aRN: String) {
            self.aRN = aRN
        }

        public init(dictionary: [String: Any]) throws {
            guard let aRN = dictionary["Arn"] as? String else { throw InitializableError.missingRequiredParam("Arn") }
            self.aRN = aRN
        }
    }

    public struct ElasticsearchClusterConfig: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public let dedicatedMasterCount: Int32?
        /// The number of instances in the specified domain cluster.
        public let instanceCount: Int32?
        /// The instance type for an Elasticsearch cluster.
        public let instanceType: ESPartitionInstanceType?
        /// A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
        public let dedicatedMasterEnabled: Bool?
        /// The instance type for a dedicated master node.
        public let dedicatedMasterType: ESPartitionInstanceType?
        /// A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
        public let zoneAwarenessEnabled: Bool?

        public init(dedicatedMasterCount: Int32? = nil, instanceCount: Int32? = nil, instanceType: ESPartitionInstanceType? = nil, dedicatedMasterEnabled: Bool? = nil, dedicatedMasterType: ESPartitionInstanceType? = nil, zoneAwarenessEnabled: Bool? = nil) {
            self.dedicatedMasterCount = dedicatedMasterCount
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }

        public init(dictionary: [String: Any]) throws {
            self.dedicatedMasterCount = dictionary["DedicatedMasterCount"] as? Int32
            self.instanceCount = dictionary["InstanceCount"] as? Int32
            if let instanceType = dictionary["InstanceType"] as? String { self.instanceType = ESPartitionInstanceType(rawValue: instanceType) } else { self.instanceType = nil }
            self.dedicatedMasterEnabled = dictionary["DedicatedMasterEnabled"] as? Bool
            if let dedicatedMasterType = dictionary["DedicatedMasterType"] as? String { self.dedicatedMasterType = ESPartitionInstanceType(rawValue: dedicatedMasterType) } else { self.dedicatedMasterType = nil }
            self.zoneAwarenessEnabled = dictionary["ZoneAwarenessEnabled"] as? Bool
        }
    }

    public enum OptionState: String, CustomStringConvertible {
        case requiresindexdocuments = "RequiresIndexDocuments"
        case processing = "Processing"
        case active = "Active"
        public var description: String { return self.rawValue }
    }

    public struct AccessPoliciesStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
        public let options: String
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let options = dictionary["Options"] as? String else { throw InitializableError.missingRequiredParam("Options") }
            self.options = options
            guard let status = dictionary["Status"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Status") }
            self.status = try Es.OptionStatus(dictionary: status)
        }
    }

    public struct ElasticsearchDomainStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public let processing: Bool?
        public let elasticsearchVersion: String?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public let created: Bool?
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
        public let aRN: String
        /// The EBSOptions for the specified domain. See Configuring EBS-based Storage for more information.
        public let eBSOptions: EBSOptions?
        /// The type and number of instances in the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig
        /// Specifies the status of the SnapshotOptions
        public let snapshotOptions: SnapshotOptions?
        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// Specifies the status of the AdvancedOptions
        public let advancedOptions: [String: String]?
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public let endpoint: String?
        /// The unique identifier for the specified Elasticsearch domain.
        public let domainId: String
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public let deleted: Bool?

        public init(processing: Bool? = nil, elasticsearchVersion: String? = nil, created: Bool? = nil, aRN: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig, snapshotOptions: SnapshotOptions? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String, endpoint: String? = nil, domainId: String, deleted: Bool? = nil) {
            self.processing = processing
            self.elasticsearchVersion = elasticsearchVersion
            self.created = created
            self.aRN = aRN
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.snapshotOptions = snapshotOptions
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
            self.endpoint = endpoint
            self.domainId = domainId
            self.deleted = deleted
        }

        public init(dictionary: [String: Any]) throws {
            self.processing = dictionary["Processing"] as? Bool
            self.elasticsearchVersion = dictionary["ElasticsearchVersion"] as? String
            self.created = dictionary["Created"] as? Bool
            guard let aRN = dictionary["ARN"] as? String else { throw InitializableError.missingRequiredParam("ARN") }
            self.aRN = aRN
            if let eBSOptions = dictionary["EBSOptions"] as? [String: Any] { self.eBSOptions = try Es.EBSOptions(dictionary: eBSOptions) } else { self.eBSOptions = nil }
            guard let elasticsearchClusterConfig = dictionary["ElasticsearchClusterConfig"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ElasticsearchClusterConfig") }
            self.elasticsearchClusterConfig = try Es.ElasticsearchClusterConfig(dictionary: elasticsearchClusterConfig)
            if let snapshotOptions = dictionary["SnapshotOptions"] as? [String: Any] { self.snapshotOptions = try Es.SnapshotOptions(dictionary: snapshotOptions) } else { self.snapshotOptions = nil }
            self.accessPolicies = dictionary["AccessPolicies"] as? String
            if let advancedOptions = dictionary["AdvancedOptions"] as? [String: String] {
                self.advancedOptions = advancedOptions
            } else { 
                self.advancedOptions = nil
            }
            guard let domainName = dictionary["DomainName"] as? String else { throw InitializableError.missingRequiredParam("DomainName") }
            self.domainName = domainName
            self.endpoint = dictionary["Endpoint"] as? String
            guard let domainId = dictionary["DomainId"] as? String else { throw InitializableError.missingRequiredParam("DomainId") }
            self.domainId = domainId
            self.deleted = dictionary["Deleted"] as? Bool
        }
    }

}