// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Dms {

    public struct ModifyReplicationSubnetGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The modified replication subnet group.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationSubnetGroup = dictionary["ReplicationSubnetGroup"] as? [String: Any] { self.replicationSubnetGroup = try Dms.ReplicationSubnetGroup(dictionary: replicationSubnetGroup) } else { self.replicationSubnetGroup = nil }
        }
    }

    public struct CreateReplicationTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication task that was created.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [String: Any] { self.replicationTask = try Dms.ReplicationTask(dictionary: replicationTask) } else { self.replicationTask = nil }
        }
    }

    public struct CreateReplicationSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The EC2 subnet IDs for the subnet group.
        public let subnetIds: SubnetIdentifierList
        /// The name for the replication subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default". Example: mySubnetgroup 
        public let replicationSubnetGroupIdentifier: String
        /// The description for the subnet group.
        public let replicationSubnetGroupDescription: String
        /// The tag to be assigned to the subnet group.
        public let tags: TagList?

        public init(subnetIds: SubnetIdentifierList, replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String, tags: TagList? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetIds = dictionary["SubnetIds"] as? [String: Any] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = try Dms.SubnetIdentifierList(dictionary: subnetIds)
            guard let replicationSubnetGroupIdentifier = dictionary["ReplicationSubnetGroupIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ReplicationSubnetGroupIdentifier") }
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            guard let replicationSubnetGroupDescription = dictionary["ReplicationSubnetGroupDescription"] as? String else { throw InitializableError.missingRequiredParam("ReplicationSubnetGroupDescription") }
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Dms.TagList(dictionary: tags) } else { self.tags = nil }
        }
    }

    public struct ReplicationTaskList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let replicationTask: [ReplicationTask]?

        public init(replicationTask: [ReplicationTask]? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [[String: Any]] {
                self.replicationTask = try replicationTask.map({ try ReplicationTask(dictionary: $0) })
            } else { 
                self.replicationTask = nil
            }
        }
    }

    public struct ModifyEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The modified endpoint.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        public init(dictionary: [String: Any]) throws {
            if let endpoint = dictionary["Endpoint"] as? [String: Any] { self.endpoint = try Dms.Endpoint(dictionary: endpoint) } else { self.endpoint = nil }
        }
    }

    public struct FilterList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let filter: [Filter]?

        public init(filter: [Filter]? = nil) {
            self.filter = filter
        }

        public init(dictionary: [String: Any]) throws {
            if let filter = dictionary["Filter"] as? [[String: Any]] {
                self.filter = try filter.map({ try Filter(dictionary: $0) })
            } else { 
                self.filter = nil
            }
        }
    }

    public struct DescribeReplicationSubnetGroupsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe action.
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct DescribeEndpointsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe action. Valid filter names: endpoint-arn | endpoint-type | endpoint-id | engine-name
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct DeleteEndpointMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
        }
    }

    public struct ReplicationSubnetGroups: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let replicationSubnetGroup: [ReplicationSubnetGroup]?

        public init(replicationSubnetGroup: [ReplicationSubnetGroup]? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationSubnetGroup = dictionary["ReplicationSubnetGroup"] as? [[String: Any]] {
                self.replicationSubnetGroup = try replicationSubnetGroup.map({ try ReplicationSubnetGroup(dictionary: $0) })
            } else { 
                self.replicationSubnetGroup = nil
            }
        }
    }

    public struct FilterValueList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let value: [String]?

        public init(value: [String]? = nil) {
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? [String]
        }
    }

    public struct Endpoint: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The user name used to connect to the endpoint.
        public let username: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The status of the endpoint.
        public let status: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// The name of the server at the endpoint.
        public let serverName: String?
        /// The name of the database at the endpoint.
        public let databaseName: String?
        /// The SSL mode used to connect to the endpoint. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The Amazon Resource Name (ARN) used for SSL connection to the endpoint.
        public let certificateArn: String?
        /// The database engine name. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        public let engineName: String?
        /// The port value used to access the endpoint.
        public let port: Int32?
        /// Additional connection attributes used to connect to the endpoint.
        public let extraConnectionAttributes: String?

        public init(kmsKeyId: String? = nil, endpointIdentifier: String? = nil, username: String? = nil, endpointArn: String? = nil, status: String? = nil, endpointType: ReplicationEndpointTypeValue? = nil, serverName: String? = nil, databaseName: String? = nil, sslMode: DmsSslModeValue? = nil, certificateArn: String? = nil, engineName: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.endpointIdentifier = endpointIdentifier
            self.username = username
            self.endpointArn = endpointArn
            self.status = status
            self.endpointType = endpointType
            self.serverName = serverName
            self.databaseName = databaseName
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

        public init(dictionary: [String: Any]) throws {
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
            self.endpointIdentifier = dictionary["EndpointIdentifier"] as? String
            self.username = dictionary["Username"] as? String
            self.endpointArn = dictionary["EndpointArn"] as? String
            self.status = dictionary["Status"] as? String
            if let endpointType = dictionary["EndpointType"] as? String { self.endpointType = ReplicationEndpointTypeValue(rawValue: endpointType) } else { self.endpointType = nil }
            self.serverName = dictionary["ServerName"] as? String
            self.databaseName = dictionary["DatabaseName"] as? String
            if let sslMode = dictionary["SslMode"] as? String { self.sslMode = DmsSslModeValue(rawValue: sslMode) } else { self.sslMode = nil }
            self.certificateArn = dictionary["CertificateArn"] as? String
            self.engineName = dictionary["EngineName"] as? String
            self.port = dictionary["Port"] as? Int32
            self.extraConnectionAttributes = dictionary["ExtraConnectionAttributes"] as? String
        }
    }

    public struct DescribeOrderableReplicationInstancesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The order-able replication instances available.
        public let orderableReplicationInstances: OrderableReplicationInstanceList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(orderableReplicationInstances: OrderableReplicationInstanceList? = nil, marker: String? = nil) {
            self.orderableReplicationInstances = orderableReplicationInstances
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            if let orderableReplicationInstances = dictionary["OrderableReplicationInstances"] as? [String: Any] { self.orderableReplicationInstances = try Dms.OrderableReplicationInstanceList(dictionary: orderableReplicationInstances) } else { self.orderableReplicationInstances = nil }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct DescribeTableStatisticsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The table statistics.
        public let tableStatistics: [TableStatistics]?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?

        public init(marker: String? = nil, tableStatistics: [TableStatistics]? = nil, replicationTaskArn: String? = nil) {
            self.marker = marker
            self.tableStatistics = tableStatistics
            self.replicationTaskArn = replicationTaskArn
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let tableStatistics = dictionary["TableStatistics"] as? [[String: Any]] {
                self.tableStatistics = try tableStatistics.map({ try TableStatistics(dictionary: $0) })
            } else { 
                self.tableStatistics = nil
            }
            self.replicationTaskArn = dictionary["ReplicationTaskArn"] as? String
        }
    }

    public struct DescribeEndpointTypesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe action. Valid filter names: engine-name | endpoint-type
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct VpcSecurityGroupMembershipList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vpcSecurityGroupMembership: [VpcSecurityGroupMembership]?

        public init(vpcSecurityGroupMembership: [VpcSecurityGroupMembership]? = nil) {
            self.vpcSecurityGroupMembership = vpcSecurityGroupMembership
        }

        public init(dictionary: [String: Any]) throws {
            if let vpcSecurityGroupMembership = dictionary["VpcSecurityGroupMembership"] as? [[String: Any]] {
                self.vpcSecurityGroupMembership = try vpcSecurityGroupMembership.map({ try VpcSecurityGroupMembership(dictionary: $0) })
            } else { 
                self.vpcSecurityGroupMembership = nil
            }
        }
    }

    public struct TagList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        public init(dictionary: [String: Any]) throws {
            if let tag = dictionary["Tag"] as? [[String: Any]] {
                self.tag = try tag.map({ try Tag(dictionary: $0) })
            } else { 
                self.tag = nil
            }
        }
    }

    public enum DmsSslModeValue: String, CustomStringConvertible {
        case none = "none"
        case require = "require"
        case verify_ca = "verify-ca"
        case verify_full = "verify-full"
        public var description: String { return self.rawValue }
    }

    public struct DeleteReplicationInstanceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance to be deleted.
        public let replicationInstanceArn: String

        public init(replicationInstanceArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceArn") }
            self.replicationInstanceArn = replicationInstanceArn
        }
    }

    public struct SupportedEndpointType: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The database engine name. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        public let engineName: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// Indicates if Change Data Capture (CDC) is supported.
        public let supportsCDC: Bool?

        public init(engineName: String? = nil, endpointType: ReplicationEndpointTypeValue? = nil, supportsCDC: Bool? = nil) {
            self.engineName = engineName
            self.endpointType = endpointType
            self.supportsCDC = supportsCDC
        }

        public init(dictionary: [String: Any]) throws {
            self.engineName = dictionary["EngineName"] as? String
            if let endpointType = dictionary["EndpointType"] as? String { self.endpointType = ReplicationEndpointTypeValue(rawValue: endpointType) } else { self.endpointType = nil }
            self.supportsCDC = dictionary["SupportsCDC"] as? Bool
        }
    }

    public enum MigrationTypeValue: String, CustomStringConvertible {
        case full_load = "full-load"
        case cdc = "cdc"
        case full_load_and_cdc = "full-load-and-cdc"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCertificatesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The pagination token.
        public let marker: String?
        /// The Secure Sockets Layer (SSL) certificates associated with the replication instance.
        public let certificates: CertificateList?

        public init(marker: String? = nil, certificates: CertificateList? = nil) {
            self.marker = marker
            self.certificates = certificates
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let certificates = dictionary["Certificates"] as? [String: Any] { self.certificates = try Dms.CertificateList(dictionary: certificates) } else { self.certificates = nil }
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeReplicationTasksMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe action. Valid filter names: replication-task-arn | replication-task-id | migration-type | endpoint-arn | replication-instance-arn
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct DeleteReplicationInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication instance that was deleted.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationInstance = dictionary["ReplicationInstance"] as? [String: Any] { self.replicationInstance = try Dms.ReplicationInstance(dictionary: replicationInstance) } else { self.replicationInstance = nil }
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.value = dictionary["Value"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the AWS DMS resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
        }
    }

    public struct DescribeEndpointTypesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The type of endpoints that are supported.
        public let supportedEndpointTypes: SupportedEndpointTypeList?

        public init(marker: String? = nil, supportedEndpointTypes: SupportedEndpointTypeList? = nil) {
            self.marker = marker
            self.supportedEndpointTypes = supportedEndpointTypes
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let supportedEndpointTypes = dictionary["SupportedEndpointTypes"] as? [String: Any] { self.supportedEndpointTypes = try Dms.SupportedEndpointTypeList(dictionary: supportedEndpointTypes) } else { self.supportedEndpointTypes = nil }
        }
    }

    public struct StartReplicationTaskMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Number (ARN) of the replication task to be started.
        public let replicationTaskArn: String
        /// The start time for the Change Data Capture (CDC) operation.
        public let cdcStartTime: Date?
        /// The type of replication task.
        public let startReplicationTaskType: StartReplicationTaskTypeValue

        public init(replicationTaskArn: String, cdcStartTime: Date? = nil, startReplicationTaskType: StartReplicationTaskTypeValue) {
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartTime = cdcStartTime
            self.startReplicationTaskType = startReplicationTaskType
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationTaskArn = dictionary["ReplicationTaskArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskArn") }
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartTime = dictionary["CdcStartTime"] as? Date
            guard let rawStartReplicationTaskType = dictionary["StartReplicationTaskType"] as? String, let startReplicationTaskType = StartReplicationTaskTypeValue(rawValue: rawStartReplicationTaskType) else { throw InitializableError.missingRequiredParam("StartReplicationTaskType") }
            self.startReplicationTaskType = startReplicationTaskType
        }
    }

    public struct CreateReplicationInstanceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// Tags to be associated with the replication instance.
        public let tags: TagList?
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The EC2 Availability Zone that the replication instance will be created in. Default: A random, system-chosen Availability Zone in the endpoint's region.  Example: us-east-1d 
        public let availabilityZone: String?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance as specified by the replication instance class.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).  Format: ddd:hh24:mi-ddd:hh24:mi  Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A subnet group to associate with the replication instance.
        public let replicationSubnetGroupIdentifier: String?
        /// The KMS key identifier that will be used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?

        public init(multiAZ: Bool? = nil, tags: TagList? = nil, allocatedStorage: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, availabilityZone: String? = nil, publiclyAccessible: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String, engineVersion: String? = nil, replicationInstanceClass: String, preferredMaintenanceWindow: String? = nil, replicationSubnetGroupIdentifier: String? = nil, kmsKeyId: String? = nil) {
            self.multiAZ = multiAZ
            self.tags = tags
            self.allocatedStorage = allocatedStorage
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.availabilityZone = availabilityZone
            self.publiclyAccessible = publiclyAccessible
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.kmsKeyId = kmsKeyId
        }

        public init(dictionary: [String: Any]) throws {
            self.multiAZ = dictionary["MultiAZ"] as? Bool
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Dms.TagList(dictionary: tags) } else { self.tags = nil }
            self.allocatedStorage = dictionary["AllocatedStorage"] as? Int32
            if let vpcSecurityGroupIds = dictionary["VpcSecurityGroupIds"] as? [String: Any] { self.vpcSecurityGroupIds = try Dms.VpcSecurityGroupIdList(dictionary: vpcSecurityGroupIds) } else { self.vpcSecurityGroupIds = nil }
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            self.autoMinorVersionUpgrade = dictionary["AutoMinorVersionUpgrade"] as? Bool
            guard let replicationInstanceIdentifier = dictionary["ReplicationInstanceIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceIdentifier") }
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.engineVersion = dictionary["EngineVersion"] as? String
            guard let replicationInstanceClass = dictionary["ReplicationInstanceClass"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceClass") }
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.replicationSubnetGroupIdentifier = dictionary["ReplicationSubnetGroupIdentifier"] as? String
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
        }
    }

    public struct DeleteCertificateResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Secure Sockets Layer (SSL) certificate.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        public init(dictionary: [String: Any]) throws {
            if let certificate = dictionary["Certificate"] as? [String: Any] { self.certificate = try Dms.Certificate(dictionary: certificate) } else { self.certificate = nil }
        }
    }

    public struct DescribeConnectionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A description of the connections.
        public let connections: ConnectionList?

        public init(marker: String? = nil, connections: ConnectionList? = nil) {
            self.marker = marker
            self.connections = connections
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let connections = dictionary["Connections"] as? [String: Any] { self.connections = try Dms.ConnectionList(dictionary: connections) } else { self.connections = nil }
        }
    }

    public struct VpcSecurityGroupIdList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vpcSecurityGroupId: [String]?

        public init(vpcSecurityGroupId: [String]? = nil) {
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        public init(dictionary: [String: Any]) throws {
            self.vpcSecurityGroupId = dictionary["VpcSecurityGroupId"] as? [String]
        }
    }

    public struct DescribeTableStatisticsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String

        public init(marker: String? = nil, maxRecords: Int32? = nil, replicationTaskArn: String) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.replicationTaskArn = replicationTaskArn
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            guard let replicationTaskArn = dictionary["ReplicationTaskArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskArn") }
            self.replicationTaskArn = replicationTaskArn
        }
    }

    public struct DescribeRefreshSchemasStatusMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// &gt;The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be removed from.
        public let resourceArn: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct ModifyReplicationInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The modified replication instance.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationInstance = dictionary["ReplicationInstance"] as? [String: Any] { self.replicationInstance = try Dms.ReplicationInstance(dictionary: replicationInstance) } else { self.replicationInstance = nil }
        }
    }

    public struct DescribeReplicationSubnetGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A description of the replication subnet groups.
        public let replicationSubnetGroups: ReplicationSubnetGroups?

        public init(marker: String? = nil, replicationSubnetGroups: ReplicationSubnetGroups? = nil) {
            self.marker = marker
            self.replicationSubnetGroups = replicationSubnetGroups
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let replicationSubnetGroups = dictionary["ReplicationSubnetGroups"] as? [String: Any] { self.replicationSubnetGroups = try Dms.ReplicationSubnetGroups(dictionary: replicationSubnetGroups) } else { self.replicationSubnetGroups = nil }
        }
    }

    public struct DescribeAccountAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Account quota information.
        public let accountQuotas: AccountQuotaList?

        public init(accountQuotas: AccountQuotaList? = nil) {
            self.accountQuotas = accountQuotas
        }

        public init(dictionary: [String: Any]) throws {
            if let accountQuotas = dictionary["AccountQuotas"] as? [String: Any] { self.accountQuotas = try Dms.AccountQuotaList(dictionary: accountQuotas) } else { self.accountQuotas = nil }
        }
    }

    public struct ReplicationInstanceList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let replicationInstance: [ReplicationInstance]?

        public init(replicationInstance: [ReplicationInstance]? = nil) {
            self.replicationInstance = replicationInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationInstance = dictionary["ReplicationInstance"] as? [[String: Any]] {
                self.replicationInstance = try replicationInstance.map({ try ReplicationInstance(dictionary: $0) })
            } else { 
                self.replicationInstance = nil
            }
        }
    }

    public enum StartReplicationTaskTypeValue: String, CustomStringConvertible {
        case start_replication = "start-replication"
        case resume_processing = "resume-processing"
        case reload_target = "reload-target"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSchemasResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The described schema.
        public let schemas: [String]?

        public init(marker: String? = nil, schemas: [String]? = nil) {
            self.marker = marker
            self.schemas = schemas
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.schemas = dictionary["Schemas"] as? [String]
        }
    }

    public struct DescribeAccountAttributesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIdentifier = dictionary["SubnetIdentifier"] as? [String]
        }
    }

    public struct CertificateList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let certificate: [Certificate]?

        public init(certificate: [Certificate]? = nil) {
            self.certificate = certificate
        }

        public init(dictionary: [String: Any]) throws {
            if let certificate = dictionary["Certificate"] as? [[String: Any]] {
                self.certificate = try certificate.map({ try Certificate(dictionary: $0) })
            } else { 
                self.certificate = nil
            }
        }
    }

    public struct Certificate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The beginning date that the certificate is valid.
        public let validFromDate: Date?
        /// The key length of the cryptographic algorithm being used.
        public let keyLength: Int32?
        /// The signing algorithm for the certificate.
        public let signingAlgorithm: String?
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?
        /// The final date that the certificate is valid.
        public let validToDate: Date?
        /// The owner of the certificate.
        public let certificateOwner: String?
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String?
        /// The date that the certificate was created.
        public let certificateCreationDate: Date?

        public init(validFromDate: Date? = nil, keyLength: Int32? = nil, signingAlgorithm: String? = nil, certificateWallet: Data? = nil, certificateArn: String? = nil, certificatePem: String? = nil, validToDate: Date? = nil, certificateOwner: String? = nil, certificateIdentifier: String? = nil, certificateCreationDate: Date? = nil) {
            self.validFromDate = validFromDate
            self.keyLength = keyLength
            self.signingAlgorithm = signingAlgorithm
            self.certificateWallet = certificateWallet
            self.certificateArn = certificateArn
            self.certificatePem = certificatePem
            self.validToDate = validToDate
            self.certificateOwner = certificateOwner
            self.certificateIdentifier = certificateIdentifier
            self.certificateCreationDate = certificateCreationDate
        }

        public init(dictionary: [String: Any]) throws {
            self.validFromDate = dictionary["ValidFromDate"] as? Date
            self.keyLength = dictionary["KeyLength"] as? Int32
            self.signingAlgorithm = dictionary["SigningAlgorithm"] as? String
            self.certificateWallet = dictionary["CertificateWallet"] as? Data
            self.certificateArn = dictionary["CertificateArn"] as? String
            self.certificatePem = dictionary["CertificatePem"] as? String
            self.validToDate = dictionary["ValidToDate"] as? Date
            self.certificateOwner = dictionary["CertificateOwner"] as? String
            self.certificateIdentifier = dictionary["CertificateIdentifier"] as? String
            self.certificateCreationDate = dictionary["CertificateCreationDate"] as? Date
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of tags for the resource.
        public let tagList: TagList?

        public init(tagList: TagList? = nil) {
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            if let tagList = dictionary["TagList"] as? [String: Any] { self.tagList = try Dms.TagList(dictionary: tagList) } else { self.tagList = nil }
        }
    }

    public struct Subnet: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The subnet identifier.
        public let subnetIdentifier: String?
        /// The Availability Zone of the subnet.
        public let subnetAvailabilityZone: AvailabilityZone?
        /// The status of the subnet.
        public let subnetStatus: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetIdentifier = dictionary["SubnetIdentifier"] as? String
            if let subnetAvailabilityZone = dictionary["SubnetAvailabilityZone"] as? [String: Any] { self.subnetAvailabilityZone = try Dms.AvailabilityZone(dictionary: subnetAvailabilityZone) } else { self.subnetAvailabilityZone = nil }
            self.subnetStatus = dictionary["SubnetStatus"] as? String
        }
    }

    public struct StartReplicationTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication task started.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [String: Any] { self.replicationTask = try Dms.ReplicationTask(dictionary: replicationTask) } else { self.replicationTask = nil }
        }
    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the availability zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
        }
    }

    public struct ConnectionList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let connection: [Connection]?

        public init(connection: [Connection]? = nil) {
            self.connection = connection
        }

        public init(dictionary: [String: Any]) throws {
            if let connection = dictionary["Connection"] as? [[String: Any]] {
                self.connection = try connection.map({ try Connection(dictionary: $0) })
            } else { 
                self.connection = nil
            }
        }
    }

    public struct Connection: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The error message when the connection last failed.
        public let lastFailureMessage: String?
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The connection status.
        public let status: String?
        /// The identifier of the endpoint. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?

        public init(lastFailureMessage: String? = nil, replicationInstanceIdentifier: String? = nil, replicationInstanceArn: String? = nil, status: String? = nil, endpointIdentifier: String? = nil, endpointArn: String? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstanceArn = replicationInstanceArn
            self.status = status
            self.endpointIdentifier = endpointIdentifier
            self.endpointArn = endpointArn
        }

        public init(dictionary: [String: Any]) throws {
            self.lastFailureMessage = dictionary["LastFailureMessage"] as? String
            self.replicationInstanceIdentifier = dictionary["ReplicationInstanceIdentifier"] as? String
            self.replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String
            self.status = dictionary["Status"] as? String
            self.endpointIdentifier = dictionary["EndpointIdentifier"] as? String
            self.endpointArn = dictionary["EndpointArn"] as? String
        }
    }

    public struct RefreshSchemasStatus: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The last failure message for the schema.
        public let lastFailureMessage: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The status of the schema.
        public let status: RefreshSchemasStatusTypeValue?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String?
        /// The date the schema was last refreshed.
        public let lastRefreshDate: Date?

        public init(lastFailureMessage: String? = nil, replicationInstanceArn: String? = nil, status: RefreshSchemasStatusTypeValue? = nil, endpointArn: String? = nil, lastRefreshDate: Date? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.replicationInstanceArn = replicationInstanceArn
            self.status = status
            self.endpointArn = endpointArn
            self.lastRefreshDate = lastRefreshDate
        }

        public init(dictionary: [String: Any]) throws {
            self.lastFailureMessage = dictionary["LastFailureMessage"] as? String
            self.replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String
            if let status = dictionary["Status"] as? String { self.status = RefreshSchemasStatusTypeValue(rawValue: status) } else { self.status = nil }
            self.endpointArn = dictionary["EndpointArn"] as? String
            self.lastRefreshDate = dictionary["LastRefreshDate"] as? Date
        }
    }

    public struct DeleteReplicationTaskMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the replication task to be deleted.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationTaskArn = dictionary["ReplicationTaskArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskArn") }
            self.replicationTaskArn = replicationTaskArn
        }
    }

    public struct DescribeReplicationInstancesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the describe action. Valid filter names: replication-instance-arn | replication-instance-id | replication-instance-class | engine-version
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct RefreshSchemasMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceArn") }
            self.replicationInstanceArn = replicationInstanceArn
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
        }
    }

    public struct ModifyReplicationInstanceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the replication instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        public let replicationInstanceIdentifier: String?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter does not result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        /// The amount of storage (in gigabytes) to be allocated for the replication instance.
        public let allocatedStorage: Int32?
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// Indicates whether the changes should be applied immediately or during the next maintenance window.
        public let applyImmediately: Bool?
        ///  Indicates that minor version upgrades will be applied automatically to the replication instance during the maintenance window. Changing this parameter does not result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and AWS DMS has enabled auto patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?

        public init(allowMajorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String? = nil, multiAZ: Bool? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, preferredMaintenanceWindow: String? = nil, allocatedStorage: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, replicationInstanceArn: String, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil) {
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.multiAZ = multiAZ
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.allocatedStorage = allocatedStorage
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.replicationInstanceArn = replicationInstanceArn
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        }

        public init(dictionary: [String: Any]) throws {
            self.allowMajorVersionUpgrade = dictionary["AllowMajorVersionUpgrade"] as? Bool
            self.replicationInstanceIdentifier = dictionary["ReplicationInstanceIdentifier"] as? String
            self.multiAZ = dictionary["MultiAZ"] as? Bool
            self.engineVersion = dictionary["EngineVersion"] as? String
            self.replicationInstanceClass = dictionary["ReplicationInstanceClass"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.allocatedStorage = dictionary["AllocatedStorage"] as? Int32
            if let vpcSecurityGroupIds = dictionary["VpcSecurityGroupIds"] as? [String: Any] { self.vpcSecurityGroupIds = try Dms.VpcSecurityGroupIdList(dictionary: vpcSecurityGroupIds) } else { self.vpcSecurityGroupIds = nil }
            guard let replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceArn") }
            self.replicationInstanceArn = replicationInstanceArn
            self.applyImmediately = dictionary["ApplyImmediately"] as? Bool
            self.autoMinorVersionUpgrade = dictionary["AutoMinorVersionUpgrade"] as? Bool
        }
    }

    public struct AccountQuota: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum allowed value for the quota.
        public let max: Int64?
        /// The amount currently used toward the quota maximum.
        public let used: Int64?
        /// The name of the AWS DMS quota for this AWS account.
        public let accountQuotaName: String?

        public init(max: Int64? = nil, used: Int64? = nil, accountQuotaName: String? = nil) {
            self.max = max
            self.used = used
            self.accountQuotaName = accountQuotaName
        }

        public init(dictionary: [String: Any]) throws {
            self.max = dictionary["Max"] as? Int64
            self.used = dictionary["Used"] as? Int64
            self.accountQuotaName = dictionary["AccountQuotaName"] as? String
        }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 10
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters applied to the certificate described in the form of key-value pairs.
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct CreateEndpointMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String
        /// Tags to be added to the endpoint.
        public let tags: TagList?
        /// The user name to be used to login to the endpoint database.
        public let username: String?
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        /// The name of the endpoint database.
        public let databaseName: String?
        /// The SSL mode to use for the SSL connection. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The Amazon Resource Number (ARN) for the certificate.
        public let certificateArn: String?
        /// The type of engine for the endpoint. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        public let engineName: String
        /// The password to be used to login to the endpoint database.
        public let password: String?
        /// The port used by the endpoint database.
        public let port: Int32?
        /// Additional attributes associated with the connection.
        public let extraConnectionAttributes: String?

        public init(kmsKeyId: String? = nil, endpointIdentifier: String, tags: TagList? = nil, username: String? = nil, endpointType: ReplicationEndpointTypeValue, serverName: String? = nil, databaseName: String? = nil, sslMode: DmsSslModeValue? = nil, certificateArn: String? = nil, engineName: String, password: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.endpointIdentifier = endpointIdentifier
            self.tags = tags
            self.username = username
            self.endpointType = endpointType
            self.serverName = serverName
            self.databaseName = databaseName
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.password = password
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

        public init(dictionary: [String: Any]) throws {
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
            guard let endpointIdentifier = dictionary["EndpointIdentifier"] as? String else { throw InitializableError.missingRequiredParam("EndpointIdentifier") }
            self.endpointIdentifier = endpointIdentifier
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Dms.TagList(dictionary: tags) } else { self.tags = nil }
            self.username = dictionary["Username"] as? String
            guard let rawEndpointType = dictionary["EndpointType"] as? String, let endpointType = ReplicationEndpointTypeValue(rawValue: rawEndpointType) else { throw InitializableError.missingRequiredParam("EndpointType") }
            self.endpointType = endpointType
            self.serverName = dictionary["ServerName"] as? String
            self.databaseName = dictionary["DatabaseName"] as? String
            if let sslMode = dictionary["SslMode"] as? String { self.sslMode = DmsSslModeValue(rawValue: sslMode) } else { self.sslMode = nil }
            self.certificateArn = dictionary["CertificateArn"] as? String
            guard let engineName = dictionary["EngineName"] as? String else { throw InitializableError.missingRequiredParam("EngineName") }
            self.engineName = engineName
            self.password = dictionary["Password"] as? String
            self.port = dictionary["Port"] as? Int32
            self.extraConnectionAttributes = dictionary["ExtraConnectionAttributes"] as? String
        }
    }

    public struct ReplicationSubnetGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the subnet group.
        public let subnetGroupStatus: String?
        /// The subnets that are in the subnet group.
        public let subnets: SubnetList?
        /// The identifier of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String?
        /// The description of the replication subnet group.
        public let replicationSubnetGroupDescription: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(subnetGroupStatus: String? = nil, subnets: SubnetList? = nil, replicationSubnetGroupIdentifier: String? = nil, replicationSubnetGroupDescription: String? = nil, vpcId: String? = nil) {
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.vpcId = vpcId
        }

        public init(dictionary: [String: Any]) throws {
            self.subnetGroupStatus = dictionary["SubnetGroupStatus"] as? String
            if let subnets = dictionary["Subnets"] as? [String: Any] { self.subnets = try Dms.SubnetList(dictionary: subnets) } else { self.subnets = nil }
            self.replicationSubnetGroupIdentifier = dictionary["ReplicationSubnetGroupIdentifier"] as? String
            self.replicationSubnetGroupDescription = dictionary["ReplicationSubnetGroupDescription"] as? String
            self.vpcId = dictionary["VpcId"] as? String
        }
    }

    public struct TestConnectionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The connection tested.
        public let connection: Connection?

        public init(connection: Connection? = nil) {
            self.connection = connection
        }

        public init(dictionary: [String: Any]) throws {
            if let connection = dictionary["Connection"] as? [String: Any] { self.connection = try Dms.Connection(dictionary: connection) } else { self.connection = nil }
        }
    }

    public struct DeleteReplicationTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The deleted replication task.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [String: Any] { self.replicationTask = try Dms.ReplicationTask(dictionary: replicationTask) } else { self.replicationTask = nil }
        }
    }

    public struct CreateReplicationSubnetGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication subnet group that was created.
        public let replicationSubnetGroup: ReplicationSubnetGroup?

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationSubnetGroup = dictionary["ReplicationSubnetGroup"] as? [String: Any] { self.replicationSubnetGroup = try Dms.ReplicationSubnetGroup(dictionary: replicationSubnetGroup) } else { self.replicationSubnetGroup = nil }
        }
    }

    public struct TableStatistics: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of delete actions performed on a table.
        public let deletes: Int64?
        /// The number of update actions performed on a table.
        public let updates: Int64?
        /// The state of the table.
        public let tableState: String?
        /// The schema name.
        public let schemaName: String?
        /// The number of rows added during the Full Load operation.
        public let fullLoadRows: Int64?
        /// The number of insert actions performed on a table.
        public let inserts: Int64?
        /// The name of the table.
        public let tableName: String?
        /// The last time the table was updated.
        public let lastUpdateTime: Date?
        /// The Data Definition Language (DDL) used to build and modify the structure of your tables.
        public let ddls: Int64?

        public init(deletes: Int64? = nil, updates: Int64? = nil, tableState: String? = nil, schemaName: String? = nil, fullLoadRows: Int64? = nil, inserts: Int64? = nil, tableName: String? = nil, lastUpdateTime: Date? = nil, ddls: Int64? = nil) {
            self.deletes = deletes
            self.updates = updates
            self.tableState = tableState
            self.schemaName = schemaName
            self.fullLoadRows = fullLoadRows
            self.inserts = inserts
            self.tableName = tableName
            self.lastUpdateTime = lastUpdateTime
            self.ddls = ddls
        }

        public init(dictionary: [String: Any]) throws {
            self.deletes = dictionary["Deletes"] as? Int64
            self.updates = dictionary["Updates"] as? Int64
            self.tableState = dictionary["TableState"] as? String
            self.schemaName = dictionary["SchemaName"] as? String
            self.fullLoadRows = dictionary["FullLoadRows"] as? Int64
            self.inserts = dictionary["Inserts"] as? Int64
            self.tableName = dictionary["TableName"] as? String
            self.lastUpdateTime = dictionary["LastUpdateTime"] as? Date
            self.ddls = dictionary["Ddls"] as? Int64
        }
    }

    public struct ImportCertificateMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        public let certificateWallet: Data?
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        public let certificateIdentifier: String
        /// The contents of the .pem X.509 certificate file for the certificate.
        public let certificatePem: String?

        public init(certificateWallet: Data? = nil, certificateIdentifier: String, certificatePem: String? = nil) {
            self.certificateWallet = certificateWallet
            self.certificateIdentifier = certificateIdentifier
            self.certificatePem = certificatePem
        }

        public init(dictionary: [String: Any]) throws {
            self.certificateWallet = dictionary["CertificateWallet"] as? Data
            guard let certificateIdentifier = dictionary["CertificateIdentifier"] as? String else { throw InitializableError.missingRequiredParam("CertificateIdentifier") }
            self.certificateIdentifier = certificateIdentifier
            self.certificatePem = dictionary["CertificatePem"] as? String
        }
    }

    public struct TestConnectionMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceArn") }
            self.replicationInstanceArn = replicationInstanceArn
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
        }
    }

    public struct CreateEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The endpoint that was created.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        public init(dictionary: [String: Any]) throws {
            if let endpoint = dictionary["Endpoint"] as? [String: Any] { self.endpoint = try Dms.Endpoint(dictionary: endpoint) } else { self.endpoint = nil }
        }
    }

    public struct CreateReplicationInstanceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication instance that was created.
        public let replicationInstance: ReplicationInstance?

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationInstance = dictionary["ReplicationInstance"] as? [String: Any] { self.replicationInstance = try Dms.ReplicationInstance(dictionary: replicationInstance) } else { self.replicationInstance = nil }
        }
    }

    public struct SubnetList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        public init(dictionary: [String: Any]) throws {
            if let subnet = dictionary["Subnet"] as? [[String: Any]] {
                self.subnet = try subnet.map({ try Subnet(dictionary: $0) })
            } else { 
                self.subnet = nil
            }
        }
    }

    public struct EndpointList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let endpoint: [Endpoint]?

        public init(endpoint: [Endpoint]? = nil) {
            self.endpoint = endpoint
        }

        public init(dictionary: [String: Any]) throws {
            if let endpoint = dictionary["Endpoint"] as? [[String: Any]] {
                self.endpoint = try endpoint.map({ try Endpoint(dictionary: $0) })
            } else { 
                self.endpoint = nil
            }
        }
    }

    public struct ModifyReplicationTaskMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The path of the JSON file that contains the table mappings. Preceed the path with "file://". For example, --table-mappings file://mappingfile.json
        public let tableMappings: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// The migration type. Valid values: full-load | cdc | full-load-and-cdc
        public let migrationType: MigrationTypeValue?
        /// The start time for the Change Data Capture (CDC) operation.
        public let cdcStartTime: Date?
        /// JSON file that contains settings for the task, such as target metadata settings.
        public let replicationTaskSettings: String?

        public init(tableMappings: String? = nil, replicationTaskArn: String, replicationTaskIdentifier: String? = nil, migrationType: MigrationTypeValue? = nil, cdcStartTime: Date? = nil, replicationTaskSettings: String? = nil) {
            self.tableMappings = tableMappings
            self.replicationTaskArn = replicationTaskArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.cdcStartTime = cdcStartTime
            self.replicationTaskSettings = replicationTaskSettings
        }

        public init(dictionary: [String: Any]) throws {
            self.tableMappings = dictionary["TableMappings"] as? String
            guard let replicationTaskArn = dictionary["ReplicationTaskArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskArn") }
            self.replicationTaskArn = replicationTaskArn
            self.replicationTaskIdentifier = dictionary["ReplicationTaskIdentifier"] as? String
            if let migrationType = dictionary["MigrationType"] as? String { self.migrationType = MigrationTypeValue(rawValue: migrationType) } else { self.migrationType = nil }
            self.cdcStartTime = dictionary["CdcStartTime"] as? Date
            self.replicationTaskSettings = dictionary["ReplicationTaskSettings"] as? String
        }
    }

    public struct ModifyReplicationSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of subnet IDs.
        public let subnetIds: SubnetIdentifierList
        /// The name of the replication instance subnet group.
        public let replicationSubnetGroupIdentifier: String
        /// The description of the replication instance subnet group.
        public let replicationSubnetGroupDescription: String?

        public init(subnetIds: SubnetIdentifierList, replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetIds = dictionary["SubnetIds"] as? [String: Any] else { throw InitializableError.missingRequiredParam("SubnetIds") }
            self.subnetIds = try Dms.SubnetIdentifierList(dictionary: subnetIds)
            guard let replicationSubnetGroupIdentifier = dictionary["ReplicationSubnetGroupIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ReplicationSubnetGroupIdentifier") }
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = dictionary["ReplicationSubnetGroupDescription"] as? String
        }
    }

    public struct OrderableReplicationInstance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The version of the replication engine.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The default amount of storage (in gigabytes) that is allocated for the replication instance.
        public let defaultAllocatedStorage: Int32?
        /// The type of storage used by the replication instance.
        public let storageType: String?
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let minAllocatedStorage: Int32?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let includedAllocatedStorage: Int32?
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        public let maxAllocatedStorage: Int32?

        public init(engineVersion: String? = nil, replicationInstanceClass: String? = nil, defaultAllocatedStorage: Int32? = nil, storageType: String? = nil, minAllocatedStorage: Int32? = nil, includedAllocatedStorage: Int32? = nil, maxAllocatedStorage: Int32? = nil) {
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.defaultAllocatedStorage = defaultAllocatedStorage
            self.storageType = storageType
            self.minAllocatedStorage = minAllocatedStorage
            self.includedAllocatedStorage = includedAllocatedStorage
            self.maxAllocatedStorage = maxAllocatedStorage
        }

        public init(dictionary: [String: Any]) throws {
            self.engineVersion = dictionary["EngineVersion"] as? String
            self.replicationInstanceClass = dictionary["ReplicationInstanceClass"] as? String
            self.defaultAllocatedStorage = dictionary["DefaultAllocatedStorage"] as? Int32
            self.storageType = dictionary["StorageType"] as? String
            self.minAllocatedStorage = dictionary["MinAllocatedStorage"] as? Int32
            self.includedAllocatedStorage = dictionary["IncludedAllocatedStorage"] as? Int32
            self.maxAllocatedStorage = dictionary["MaxAllocatedStorage"] as? Int32
        }
    }

    public struct ReplicationTaskStats: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of tables loaded for this task.
        public let tablesLoaded: Int32?
        /// The elapsed time of the task, in milliseconds.
        public let elapsedTimeMillis: Int64?
        /// The percent complete for the full load migration task.
        public let fullLoadProgressPercent: Int32?
        /// The number of tables queued for this task.
        public let tablesQueued: Int32?
        /// The number of errors that have occurred during this task.
        public let tablesErrored: Int32?
        /// The number of tables currently loading for this task.
        public let tablesLoading: Int32?

        public init(tablesLoaded: Int32? = nil, elapsedTimeMillis: Int64? = nil, fullLoadProgressPercent: Int32? = nil, tablesQueued: Int32? = nil, tablesErrored: Int32? = nil, tablesLoading: Int32? = nil) {
            self.tablesLoaded = tablesLoaded
            self.elapsedTimeMillis = elapsedTimeMillis
            self.fullLoadProgressPercent = fullLoadProgressPercent
            self.tablesQueued = tablesQueued
            self.tablesErrored = tablesErrored
            self.tablesLoading = tablesLoading
        }

        public init(dictionary: [String: Any]) throws {
            self.tablesLoaded = dictionary["TablesLoaded"] as? Int32
            self.elapsedTimeMillis = dictionary["ElapsedTimeMillis"] as? Int64
            self.fullLoadProgressPercent = dictionary["FullLoadProgressPercent"] as? Int32
            self.tablesQueued = dictionary["TablesQueued"] as? Int32
            self.tablesErrored = dictionary["TablesErrored"] as? Int32
            self.tablesLoading = dictionary["TablesLoading"] as? Int32
        }
    }

    public struct ModifyReplicationTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication task that was modified.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [String: Any] { self.replicationTask = try Dms.ReplicationTask(dictionary: replicationTask) } else { self.replicationTask = nil }
        }
    }

    public struct DeleteEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The endpoint that was deleted.
        public let endpoint: Endpoint?

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

        public init(dictionary: [String: Any]) throws {
            if let endpoint = dictionary["Endpoint"] as? [String: Any] { self.endpoint = try Dms.Endpoint(dictionary: endpoint) } else { self.endpoint = nil }
        }
    }

    public struct StopReplicationTaskResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The replication task stopped.
        public let replicationTask: ReplicationTask?

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTask = dictionary["ReplicationTask"] as? [String: Any] { self.replicationTask = try Dms.ReplicationTask(dictionary: replicationTask) } else { self.replicationTask = nil }
        }
    }

    public struct ReplicationTask: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The statistics for the task, including elapsed time, tables loaded, and table errors.
        public let replicationTaskStats: ReplicationTaskStats?
        /// The last error (failure) message generated for the replication instance.
        public let lastFailureMessage: String?
        /// The date the replication task is scheduled to start.
        public let replicationTaskStartDate: Date?
        /// The date the replication task was created.
        public let replicationTaskCreationDate: Date?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String?
        /// Table mappings specified in the task.
        public let tableMappings: String?
        /// The Amazon Resource Name (ARN) of the replication task.
        public let replicationTaskArn: String?
        /// The status of the replication task.
        public let status: String?
        /// The reason the replication task was stopped.
        public let stopReason: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String?
        /// The type of migration.
        public let migrationType: MigrationTypeValue?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String?
        /// The settings for the replication task.
        public let replicationTaskSettings: String?

        public init(replicationTaskStats: ReplicationTaskStats? = nil, lastFailureMessage: String? = nil, replicationTaskStartDate: Date? = nil, replicationTaskCreationDate: Date? = nil, sourceEndpointArn: String? = nil, tableMappings: String? = nil, replicationTaskArn: String? = nil, status: String? = nil, stopReason: String? = nil, replicationInstanceArn: String? = nil, replicationTaskIdentifier: String? = nil, migrationType: MigrationTypeValue? = nil, targetEndpointArn: String? = nil, replicationTaskSettings: String? = nil) {
            self.replicationTaskStats = replicationTaskStats
            self.lastFailureMessage = lastFailureMessage
            self.replicationTaskStartDate = replicationTaskStartDate
            self.replicationTaskCreationDate = replicationTaskCreationDate
            self.sourceEndpointArn = sourceEndpointArn
            self.tableMappings = tableMappings
            self.replicationTaskArn = replicationTaskArn
            self.status = status
            self.stopReason = stopReason
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.targetEndpointArn = targetEndpointArn
            self.replicationTaskSettings = replicationTaskSettings
        }

        public init(dictionary: [String: Any]) throws {
            if let replicationTaskStats = dictionary["ReplicationTaskStats"] as? [String: Any] { self.replicationTaskStats = try Dms.ReplicationTaskStats(dictionary: replicationTaskStats) } else { self.replicationTaskStats = nil }
            self.lastFailureMessage = dictionary["LastFailureMessage"] as? String
            self.replicationTaskStartDate = dictionary["ReplicationTaskStartDate"] as? Date
            self.replicationTaskCreationDate = dictionary["ReplicationTaskCreationDate"] as? Date
            self.sourceEndpointArn = dictionary["SourceEndpointArn"] as? String
            self.tableMappings = dictionary["TableMappings"] as? String
            self.replicationTaskArn = dictionary["ReplicationTaskArn"] as? String
            self.status = dictionary["Status"] as? String
            self.stopReason = dictionary["StopReason"] as? String
            self.replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String
            self.replicationTaskIdentifier = dictionary["ReplicationTaskIdentifier"] as? String
            if let migrationType = dictionary["MigrationType"] as? String { self.migrationType = MigrationTypeValue(rawValue: migrationType) } else { self.migrationType = nil }
            self.targetEndpointArn = dictionary["TargetEndpointArn"] as? String
            self.replicationTaskSettings = dictionary["ReplicationTaskSettings"] as? String
        }
    }

    public struct SupportedEndpointTypeList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let supportedEndpointType: [SupportedEndpointType]?

        public init(supportedEndpointType: [SupportedEndpointType]? = nil) {
            self.supportedEndpointType = supportedEndpointType
        }

        public init(dictionary: [String: Any]) throws {
            if let supportedEndpointType = dictionary["SupportedEndpointType"] as? [[String: Any]] {
                self.supportedEndpointType = try supportedEndpointType.map({ try SupportedEndpointType(dictionary: $0) })
            } else { 
                self.supportedEndpointType = nil
            }
        }
    }

    public struct RefreshSchemasResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the refreshed schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let refreshSchemasStatus = dictionary["RefreshSchemasStatus"] as? [String: Any] { self.refreshSchemasStatus = try Dms.RefreshSchemasStatus(dictionary: refreshSchemasStatus) } else { self.refreshSchemasStatus = nil }
        }
    }

    public struct DeleteCertificateMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the deleted certificate.
        public let certificateArn: String

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let certificateArn = dictionary["CertificateArn"] as? String else { throw InitializableError.missingRequiredParam("CertificateArn") }
            self.certificateArn = certificateArn
        }
    }

    public struct DescribeRefreshSchemasStatusResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the schema.
        public let refreshSchemasStatus: RefreshSchemasStatus?

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let refreshSchemasStatus = dictionary["RefreshSchemasStatus"] as? [String: Any] { self.refreshSchemasStatus = try Dms.RefreshSchemasStatus(dictionary: refreshSchemasStatus) } else { self.refreshSchemasStatus = nil }
        }
    }

    public struct DescribeSchemasMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(marker: String? = nil, endpointArn: String, maxRecords: Int32? = nil) {
            self.marker = marker
            self.endpointArn = endpointArn
            self.maxRecords = maxRecords
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
            self.maxRecords = dictionary["MaxRecords"] as? Int32
        }
    }

    public struct OrderableReplicationInstanceList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let orderableReplicationInstance: [OrderableReplicationInstance]?

        public init(orderableReplicationInstance: [OrderableReplicationInstance]? = nil) {
            self.orderableReplicationInstance = orderableReplicationInstance
        }

        public init(dictionary: [String: Any]) throws {
            if let orderableReplicationInstance = dictionary["OrderableReplicationInstance"] as? [[String: Any]] {
                self.orderableReplicationInstance = try orderableReplicationInstance.map({ try OrderableReplicationInstance(dictionary: $0) })
            } else { 
                self.orderableReplicationInstance = nil
            }
        }
    }

    public struct StopReplicationTaskMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Number(ARN) of the replication task to be stopped.
        public let replicationTaskArn: String

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationTaskArn = dictionary["ReplicationTaskArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskArn") }
            self.replicationTaskArn = replicationTaskArn
        }
    }

    public enum RefreshSchemasStatusTypeValue: String, CustomStringConvertible {
        case successful = "successful"
        case failed = "failed"
        case refreshing = "refreshing"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReplicationTasksResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A description of the replication tasks.
        public let replicationTasks: ReplicationTaskList?

        public init(marker: String? = nil, replicationTasks: ReplicationTaskList? = nil) {
            self.marker = marker
            self.replicationTasks = replicationTasks
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let replicationTasks = dictionary["ReplicationTasks"] as? [String: Any] { self.replicationTasks = try Dms.ReplicationTaskList(dictionary: replicationTasks) } else { self.replicationTasks = nil }
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be added to. AWS DMS resources include a replication instance, endpoint, and a replication task.
        public let resourceArn: String
        /// The tag to be assigned to the DMS resource.
        public let tags: TagList

        public init(resourceArn: String, tags: TagList) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
            guard let tags = dictionary["Tags"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try Dms.TagList(dictionary: tags)
        }
    }

    public struct DescribeConnectionsMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The filters applied to the connection. Valid filter names: endpoint-arn | replication-instance-arn
        public let filters: FilterList?

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: FilterList? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
            if let filters = dictionary["Filters"] as? [String: Any] { self.filters = try Dms.FilterList(dictionary: filters) } else { self.filters = nil }
        }
    }

    public struct AccountQuotaList: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let accountQuota: [AccountQuota]?

        public init(accountQuota: [AccountQuota]? = nil) {
            self.accountQuota = accountQuota
        }

        public init(dictionary: [String: Any]) throws {
            if let accountQuota = dictionary["AccountQuota"] as? [[String: Any]] {
                self.accountQuota = try accountQuota.map({ try AccountQuota(dictionary: $0) })
            } else { 
                self.accountQuota = nil
            }
        }
    }

    public struct DeleteReplicationSubnetGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteReplicationSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The subnet group name of the replication instance.
        public let replicationSubnetGroupIdentifier: String

        public init(replicationSubnetGroupIdentifier: String) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            guard let replicationSubnetGroupIdentifier = dictionary["ReplicationSubnetGroupIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ReplicationSubnetGroupIdentifier") }
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
        }
    }

    public struct ReplicationPendingModifiedValues: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?

        public init(multiAZ: Bool? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, allocatedStorage: Int32? = nil) {
            self.multiAZ = multiAZ
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.allocatedStorage = allocatedStorage
        }

        public init(dictionary: [String: Any]) throws {
            self.multiAZ = dictionary["MultiAZ"] as? Bool
            self.engineVersion = dictionary["EngineVersion"] as? String
            self.replicationInstanceClass = dictionary["ReplicationInstanceClass"] as? String
            self.allocatedStorage = dictionary["AllocatedStorage"] as? Int32
        }
    }

    public struct ReplicationInstance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The time the replication instance was created.
        public let instanceCreateTime: Date?
        /// The pending modification values.
        public let pendingModifiedValues: ReplicationPendingModifiedValues?
        /// The status of the replication instance.
        public let replicationInstanceStatus: String?
        /// The VPC security group for the instance.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        public let multiAZ: Bool?
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddresses: [String]?
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        public let allocatedStorage: Int32?
        /// The subnet group for the replication instance.
        public let replicationSubnetGroup: ReplicationSubnetGroup?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddress: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// Boolean value indicating if minor version upgrades will be automatically applied to the instance.
        public let autoMinorVersionUpgrade: Bool?
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        public let publiclyAccessible: Bool?
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        public let replicationInstanceIdentifier: String?
        /// The private IP address of the replication instance.
        public let replicationInstancePrivateIpAddresses: [String]?
        /// The engine version number of the replication instance.
        public let engineVersion: String?
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        public let replicationInstanceClass: String?
        /// The maintenance window times for the replication instance.
        public let preferredMaintenanceWindow: String?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String?
        /// The public IP address of the replication instance.
        public let replicationInstancePublicIpAddress: String?
        /// The availability zone of the standby replication instance in a Multi-AZ deployment.
        public let secondaryAvailabilityZone: String?
        /// The KMS key identifier that is used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        public let kmsKeyId: String?

        public init(instanceCreateTime: Date? = nil, pendingModifiedValues: ReplicationPendingModifiedValues? = nil, replicationInstanceStatus: String? = nil, vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, multiAZ: Bool? = nil, replicationInstancePublicIpAddresses: [String]? = nil, allocatedStorage: Int32? = nil, replicationSubnetGroup: ReplicationSubnetGroup? = nil, replicationInstancePrivateIpAddress: String? = nil, availabilityZone: String? = nil, autoMinorVersionUpgrade: Bool? = nil, publiclyAccessible: Bool? = nil, replicationInstanceIdentifier: String? = nil, replicationInstancePrivateIpAddresses: [String]? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, preferredMaintenanceWindow: String? = nil, replicationInstanceArn: String? = nil, replicationInstancePublicIpAddress: String? = nil, secondaryAvailabilityZone: String? = nil, kmsKeyId: String? = nil) {
            self.instanceCreateTime = instanceCreateTime
            self.pendingModifiedValues = pendingModifiedValues
            self.replicationInstanceStatus = replicationInstanceStatus
            self.vpcSecurityGroups = vpcSecurityGroups
            self.multiAZ = multiAZ
            self.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses
            self.allocatedStorage = allocatedStorage
            self.replicationSubnetGroup = replicationSubnetGroup
            self.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress
            self.availabilityZone = availabilityZone
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.publiclyAccessible = publiclyAccessible
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.kmsKeyId = kmsKeyId
        }

        public init(dictionary: [String: Any]) throws {
            self.instanceCreateTime = dictionary["InstanceCreateTime"] as? Date
            if let pendingModifiedValues = dictionary["PendingModifiedValues"] as? [String: Any] { self.pendingModifiedValues = try Dms.ReplicationPendingModifiedValues(dictionary: pendingModifiedValues) } else { self.pendingModifiedValues = nil }
            self.replicationInstanceStatus = dictionary["ReplicationInstanceStatus"] as? String
            if let vpcSecurityGroups = dictionary["VpcSecurityGroups"] as? [String: Any] { self.vpcSecurityGroups = try Dms.VpcSecurityGroupMembershipList(dictionary: vpcSecurityGroups) } else { self.vpcSecurityGroups = nil }
            self.multiAZ = dictionary["MultiAZ"] as? Bool
            self.replicationInstancePublicIpAddresses = dictionary["ReplicationInstancePublicIpAddresses"] as? [String]
            self.allocatedStorage = dictionary["AllocatedStorage"] as? Int32
            if let replicationSubnetGroup = dictionary["ReplicationSubnetGroup"] as? [String: Any] { self.replicationSubnetGroup = try Dms.ReplicationSubnetGroup(dictionary: replicationSubnetGroup) } else { self.replicationSubnetGroup = nil }
            self.replicationInstancePrivateIpAddress = dictionary["ReplicationInstancePrivateIpAddress"] as? String
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            self.autoMinorVersionUpgrade = dictionary["AutoMinorVersionUpgrade"] as? Bool
            self.publiclyAccessible = dictionary["PubliclyAccessible"] as? Bool
            self.replicationInstanceIdentifier = dictionary["ReplicationInstanceIdentifier"] as? String
            self.replicationInstancePrivateIpAddresses = dictionary["ReplicationInstancePrivateIpAddresses"] as? [String]
            self.engineVersion = dictionary["EngineVersion"] as? String
            self.replicationInstanceClass = dictionary["ReplicationInstanceClass"] as? String
            self.preferredMaintenanceWindow = dictionary["PreferredMaintenanceWindow"] as? String
            self.replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String
            self.replicationInstancePublicIpAddress = dictionary["ReplicationInstancePublicIpAddress"] as? String
            self.secondaryAvailabilityZone = dictionary["SecondaryAvailabilityZone"] as? String
            self.kmsKeyId = dictionary["KmsKeyId"] as? String
        }
    }

    public struct ImportCertificateResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The certificate to be uploaded.
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        public init(dictionary: [String: Any]) throws {
            if let certificate = dictionary["Certificate"] as? [String: Any] { self.certificate = try Dms.Certificate(dictionary: certificate) } else { self.certificate = nil }
        }
    }

    public struct DescribeEndpointsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Endpoint description.
        public let endpoints: EndpointList?

        public init(marker: String? = nil, endpoints: EndpointList? = nil) {
            self.marker = marker
            self.endpoints = endpoints
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let endpoints = dictionary["Endpoints"] as? [String: Any] { self.endpoints = try Dms.EndpointList(dictionary: endpoints) } else { self.endpoints = nil }
        }
    }

    public struct ModifyEndpointMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of endpoint.
        public let endpointType: ReplicationEndpointTypeValue?
        /// The name of the server where the endpoint database resides.
        public let serverName: String?
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        public let endpointIdentifier: String?
        /// The name of the endpoint database.
        public let databaseName: String?
        /// The user name to be used to login to the endpoint database.
        public let username: String?
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let endpointArn: String
        /// The SSL mode to be used. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        public let sslMode: DmsSslModeValue?
        /// The Amazon Resource Name (ARN) of the certificate used for SSL connection.
        public let certificateArn: String?
        /// The type of engine for the endpoint. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        public let engineName: String?
        /// The password to be used to login to the endpoint database.
        public let password: String?
        /// The port used by the endpoint database.
        public let port: Int32?
        /// Additional attributes associated with the connection.
        public let extraConnectionAttributes: String?

        public init(endpointType: ReplicationEndpointTypeValue? = nil, serverName: String? = nil, endpointIdentifier: String? = nil, databaseName: String? = nil, username: String? = nil, endpointArn: String, sslMode: DmsSslModeValue? = nil, certificateArn: String? = nil, engineName: String? = nil, password: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.endpointType = endpointType
            self.serverName = serverName
            self.endpointIdentifier = endpointIdentifier
            self.databaseName = databaseName
            self.username = username
            self.endpointArn = endpointArn
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.password = password
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

        public init(dictionary: [String: Any]) throws {
            if let endpointType = dictionary["EndpointType"] as? String { self.endpointType = ReplicationEndpointTypeValue(rawValue: endpointType) } else { self.endpointType = nil }
            self.serverName = dictionary["ServerName"] as? String
            self.endpointIdentifier = dictionary["EndpointIdentifier"] as? String
            self.databaseName = dictionary["DatabaseName"] as? String
            self.username = dictionary["Username"] as? String
            guard let endpointArn = dictionary["EndpointArn"] as? String else { throw InitializableError.missingRequiredParam("EndpointArn") }
            self.endpointArn = endpointArn
            if let sslMode = dictionary["SslMode"] as? String { self.sslMode = DmsSslModeValue(rawValue: sslMode) } else { self.sslMode = nil }
            self.certificateArn = dictionary["CertificateArn"] as? String
            self.engineName = dictionary["EngineName"] as? String
            self.password = dictionary["Password"] as? String
            self.port = dictionary["Port"] as? Int32
            self.extraConnectionAttributes = dictionary["ExtraConnectionAttributes"] as? String
        }
    }

    public struct DescribeOrderableReplicationInstancesMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            self.maxRecords = dictionary["MaxRecords"] as? Int32
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the VPC security group.
        public let status: String?
        /// The VPC security group Id.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        public init(dictionary: [String: Any]) throws {
            self.status = dictionary["Status"] as? String
            self.vpcSecurityGroupId = dictionary["VpcSecurityGroupId"] as? String
        }
    }

    public struct CreateReplicationTaskMessage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The path of the JSON file that contains the table mappings. Preceed the path with "file://". For example, --table-mappings file://mappingfile.json
        public let tableMappings: String
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let sourceEndpointArn: String
        /// Tags to be added to the replication instance.
        public let tags: TagList?
        /// The Amazon Resource Name (ARN) of the replication instance.
        public let replicationInstanceArn: String
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationTaskIdentifier: String
        /// The migration type.
        public let migrationType: MigrationTypeValue
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        public let targetEndpointArn: String
        /// The start time for the Change Data Capture (CDC) operation.
        public let cdcStartTime: Date?
        /// Settings for the task, such as target metadata settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks.
        public let replicationTaskSettings: String?

        public init(tableMappings: String, sourceEndpointArn: String, tags: TagList? = nil, replicationInstanceArn: String, replicationTaskIdentifier: String, migrationType: MigrationTypeValue, targetEndpointArn: String, cdcStartTime: Date? = nil, replicationTaskSettings: String? = nil) {
            self.tableMappings = tableMappings
            self.sourceEndpointArn = sourceEndpointArn
            self.tags = tags
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.targetEndpointArn = targetEndpointArn
            self.cdcStartTime = cdcStartTime
            self.replicationTaskSettings = replicationTaskSettings
        }

        public init(dictionary: [String: Any]) throws {
            guard let tableMappings = dictionary["TableMappings"] as? String else { throw InitializableError.missingRequiredParam("TableMappings") }
            self.tableMappings = tableMappings
            guard let sourceEndpointArn = dictionary["SourceEndpointArn"] as? String else { throw InitializableError.missingRequiredParam("SourceEndpointArn") }
            self.sourceEndpointArn = sourceEndpointArn
            if let tags = dictionary["Tags"] as? [String: Any] { self.tags = try Dms.TagList(dictionary: tags) } else { self.tags = nil }
            guard let replicationInstanceArn = dictionary["ReplicationInstanceArn"] as? String else { throw InitializableError.missingRequiredParam("ReplicationInstanceArn") }
            self.replicationInstanceArn = replicationInstanceArn
            guard let replicationTaskIdentifier = dictionary["ReplicationTaskIdentifier"] as? String else { throw InitializableError.missingRequiredParam("ReplicationTaskIdentifier") }
            self.replicationTaskIdentifier = replicationTaskIdentifier
            guard let rawMigrationType = dictionary["MigrationType"] as? String, let migrationType = MigrationTypeValue(rawValue: rawMigrationType) else { throw InitializableError.missingRequiredParam("MigrationType") }
            self.migrationType = migrationType
            guard let targetEndpointArn = dictionary["TargetEndpointArn"] as? String else { throw InitializableError.missingRequiredParam("TargetEndpointArn") }
            self.targetEndpointArn = targetEndpointArn
            self.cdcStartTime = dictionary["CdcStartTime"] as? Date
            self.replicationTaskSettings = dictionary["ReplicationTaskSettings"] as? String
        }
    }

    public enum ReplicationEndpointTypeValue: String, CustomStringConvertible {
        case source = "source"
        case target = "target"
        public var description: String { return self.rawValue }
    }

    public struct Filter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The name of the filter.
        public let name: String
        /// The filter value.
        public let values: FilterValueList

        public init(name: String, values: FilterValueList) {
            self.name = name
            self.values = values
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let values = dictionary["Values"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Values") }
            self.values = try Dms.FilterValueList(dictionary: values)
        }
    }

    public struct DescribeReplicationInstancesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The replication instances described.
        public let replicationInstances: ReplicationInstanceList?

        public init(marker: String? = nil, replicationInstances: ReplicationInstanceList? = nil) {
            self.marker = marker
            self.replicationInstances = replicationInstances
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let replicationInstances = dictionary["ReplicationInstances"] as? [String: Any] { self.replicationInstances = try Dms.ReplicationInstanceList(dictionary: replicationInstances) } else { self.replicationInstances = nil }
        }
    }

}