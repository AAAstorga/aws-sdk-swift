// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTAnalytics {

    public struct ContainerDatasetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "variables", required: false, type: .list), 
            AWSShapeMember(label: "executionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "image", required: true, type: .string), 
            AWSShapeMember(label: "resourceConfiguration", required: true, type: .structure)
        ]
        /// The values of variables used within the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".
        public let variables: [Variable]?
        /// The ARN of the role which gives permission to the system to access needed resources in order to run the "containerAction". This includes, at minimum, permission to retrieve the data set contents which are the input to the containerized application.
        public let executionRoleArn: String
        /// The ARN of the Docker container stored in your account. The Docker container contains an application and needed support libraries and is used to generate data set contents.
        public let image: String
        /// Configuration of the resource which executes the "containerAction".
        public let resourceConfiguration: ResourceConfiguration

        public init(variables: [Variable]? = nil, executionRoleArn: String, image: String, resourceConfiguration: ResourceConfiguration) {
            self.variables = variables
            self.executionRoleArn = executionRoleArn
            self.image = image
            self.resourceConfiguration = resourceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case variables = "variables"
            case executionRoleArn = "executionRoleArn"
            case image = "image"
            case resourceConfiguration = "resourceConfiguration"
        }
    }

    public struct StartPipelineReprocessingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reprocessingId", required: false, type: .string)
        ]
        /// The ID of the pipeline reprocessing activity that was started.
        public let reprocessingId: String?

        public init(reprocessingId: String? = nil) {
            self.reprocessingId = reprocessingId
        }

        private enum CodingKeys: String, CodingKey {
            case reprocessingId = "reprocessingId"
        }
    }

    public struct DeleteDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The version of the data set whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        public let versionId: String?
        /// The name of the data set whose content is deleted.
        public let datasetName: String

        public init(versionId: String? = nil, datasetName: String) {
            self.versionId = versionId
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case datasetName = "datasetName"
        }
    }

    public struct Channel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure)
        ]
        /// The ARN of the channel.
        public let arn: String?
        /// When the channel was last updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of the channel.
        public let status: ChannelStatus?
        /// The name of the channel.
        public let name: String?
        /// When the channel was created.
        public let creationTime: TimeStamp?
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?

        public init(arn: String? = nil, lastUpdateTime: TimeStamp? = nil, status: ChannelStatus? = nil, name: String? = nil, creationTime: TimeStamp? = nil, retentionPeriod: RetentionPeriod? = nil) {
            self.arn = arn
            self.lastUpdateTime = lastUpdateTime
            self.status = status
            self.name = name
            self.creationTime = creationTime
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
            case name = "name"
            case creationTime = "creationTime"
            case retentionPeriod = "retentionPeriod"
        }
    }

    public struct RetentionPeriod: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfDays", required: false, type: .integer), 
            AWSShapeMember(label: "unlimited", required: false, type: .boolean)
        ]
        /// The number of days that message data is kept. The "unlimited" parameter must be false.
        public let numberOfDays: Int32?
        /// If true, message data is kept indefinitely.
        public let unlimited: Bool?

        public init(numberOfDays: Int32? = nil, unlimited: Bool? = nil) {
            self.numberOfDays = numberOfDays
            self.unlimited = unlimited
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfDays = "numberOfDays"
            case unlimited = "unlimited"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string)
        ]
        /// The ARN of the resource whose tags you want to list.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct DatasetContentStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .enum)
        ]
        /// The reason the data set contents are in this state.
        public let reason: String?
        /// The state of the data set contents. Can be one of "READY", "CREATING", "SUCCEEDED" or "FAILED".
        public let state: DatasetContentState?

        public init(reason: String? = nil, state: DatasetContentState? = nil) {
            self.reason = reason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "reason"
            case state = "state"
        }
    }

    public struct ChannelStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "size", required: false, type: .structure)
        ]
        /// The estimated size of the channel.
        public let size: EstimatedResourceSize?

        public init(size: EstimatedResourceSize? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct DatastoreActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "datastoreName", required: true, type: .string)
        ]
        /// The name of the 'datastore' activity.
        public let name: String
        /// The name of the data store where processed messages are stored.
        public let datastoreName: String

        public init(name: String, datastoreName: String) {
            self.name = name
            self.datastoreName = datastoreName
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case datastoreName = "datastoreName"
        }
    }

    public struct DescribeDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataset", required: false, type: .structure)
        ]
        /// An object that contains information about the data set.
        public let dataset: Dataset?

        public init(dataset: Dataset? = nil) {
            self.dataset = dataset
        }

        private enum CodingKeys: String, CodingKey {
            case dataset = "dataset"
        }
    }

    public struct BatchPutMessageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "batchPutMessageErrorEntries", required: false, type: .list)
        ]
        /// A list of any errors encountered when sending the messages to the channel.
        public let batchPutMessageErrorEntries: [BatchPutMessageErrorEntry]?

        public init(batchPutMessageErrorEntries: [BatchPutMessageErrorEntry]? = nil) {
            self.batchPutMessageErrorEntries = batchPutMessageErrorEntries
        }

        private enum CodingKeys: String, CodingKey {
            case batchPutMessageErrorEntries = "batchPutMessageErrorEntries"
        }
    }

    public struct DeletePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The name of the pipeline to delete.
        public let pipelineName: String

        public init(pipelineName: String) {
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
        }
    }

    public struct CreatePipelineResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineArn", required: false, type: .string), 
            AWSShapeMember(label: "pipelineName", required: false, type: .string)
        ]
        /// The ARN of the pipeline.
        public let pipelineArn: String?
        /// The name of the pipeline.
        public let pipelineName: String?

        public init(pipelineArn: String? = nil, pipelineName: String? = nil) {
            self.pipelineArn = pipelineArn
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineArn = "pipelineArn"
            case pipelineName = "pipelineName"
        }
    }

    public struct LambdaActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "lambdaName", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "batchSize", required: true, type: .integer)
        ]
        /// The name of the 'lambda' activity.
        public let name: String
        /// The name of the Lambda function that is run on the message.
        public let lambdaName: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The number of messages passed to the Lambda function for processing. The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        public let batchSize: Int32

        public init(name: String, lambdaName: String, next: String? = nil, batchSize: Int32) {
            self.name = name
            self.lambdaName = lambdaName
            self.next = next
            self.batchSize = batchSize
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case lambdaName = "lambdaName"
            case next = "next"
            case batchSize = "batchSize"
        }
    }

    public struct UpdateDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: true, type: .list), 
            AWSShapeMember(label: "triggers", required: false, type: .list), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "contentDeliveryRules", required: false, type: .list), 
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// A list of "DatasetAction" objects.
        public let actions: [DatasetAction]
        /// A list of "DatasetTrigger" objects. The list can be empty or can contain up to five DataSetTrigger objects.
        public let triggers: [DatasetTrigger]?
        /// How long, in days, message data is kept for the data set.
        public let retentionPeriod: RetentionPeriod?
        public let contentDeliveryRules: [DatasetContentDeliveryRule]?
        /// The name of the data set to update.
        public let datasetName: String

        public init(actions: [DatasetAction], triggers: [DatasetTrigger]? = nil, retentionPeriod: RetentionPeriod? = nil, contentDeliveryRules: [DatasetContentDeliveryRule]? = nil, datasetName: String) {
            self.actions = actions
            self.triggers = triggers
            self.retentionPeriod = retentionPeriod
            self.contentDeliveryRules = contentDeliveryRules
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case triggers = "triggers"
            case retentionPeriod = "retentionPeriod"
            case contentDeliveryRules = "contentDeliveryRules"
            case datasetName = "datasetName"
        }
    }

    public struct PutLoggingOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: true, type: .structure)
        ]
        /// The new values of the AWS IoT Analytics logging options.
        public let loggingOptions: LoggingOptions

        public init(loggingOptions: LoggingOptions) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct DatasetContentVersionValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", required: true, type: .string)
        ]
        /// The name of the data set whose latest contents will be used as input to the notebook or application.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct SqlQueryDatasetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sqlQuery", required: true, type: .string), 
            AWSShapeMember(label: "filters", required: false, type: .list)
        ]
        /// A SQL query string.
        public let sqlQuery: String
        /// Pre-filters applied to message data.
        public let filters: [QueryFilter]?

        public init(sqlQuery: String, filters: [QueryFilter]? = nil) {
            self.sqlQuery = sqlQuery
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sqlQuery = "sqlQuery"
            case filters = "filters"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ARN of the resource whose tags will be modified.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct QueryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deltaTime", required: false, type: .structure)
        ]
        /// Used to limit data to that which has arrived since the last execution of the action. When you create data set contents using message data from a specified time frame, some message data may still be "in flight" when processing begins, and so will not arrive in time to be processed. Use this field to make allowances for the "in flight" time of you message data, so that data not processed from a previous time frame will be included with the next time frame. Without this, missed message data would be excluded from processing during the next time frame as well, because its timestamp places it within the previous time frame.
        public let deltaTime: DeltaTime?

        public init(deltaTime: DeltaTime? = nil) {
            self.deltaTime = deltaTime
        }

        private enum CodingKeys: String, CodingKey {
            case deltaTime = "deltaTime"
        }
    }

    public struct DatasetSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "datasetName", required: false, type: .string), 
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "triggers", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The time the data set was created.
        public let creationTime: TimeStamp?
        /// The name of the data set.
        public let datasetName: String?
        /// A list of "DataActionSummary" objects.
        public let actions: [DatasetActionSummary]?
        /// A list of triggers. A trigger causes data set content to be populated at a specified time interval or when another data set is populated. The list of triggers can be empty or contain up to five DataSetTrigger objects
        public let triggers: [DatasetTrigger]?
        /// The last time the data set was updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of the data set.
        public let status: DatasetStatus?

        public init(creationTime: TimeStamp? = nil, datasetName: String? = nil, actions: [DatasetActionSummary]? = nil, triggers: [DatasetTrigger]? = nil, lastUpdateTime: TimeStamp? = nil, status: DatasetStatus? = nil) {
            self.creationTime = creationTime
            self.datasetName = datasetName
            self.actions = actions
            self.triggers = triggers
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case datasetName = "datasetName"
            case actions = "actions"
            case triggers = "triggers"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
        }
    }

    public struct DescribeChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeStatistics", location: .querystring(locationName: "includeStatistics"), required: false, type: .boolean), 
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// If true, additional statistical information about the channel is included in the response.
        public let includeStatistics: Bool?
        /// The name of the channel whose information is retrieved.
        public let channelName: String

        public init(includeStatistics: Bool? = nil, channelName: String) {
            self.includeStatistics = includeStatistics
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case includeStatistics = "includeStatistics"
            case channelName = "channelName"
        }
    }

    public struct DescribeLoggingOptionsRequest: AWSShape {

    }

    public enum DatastoreStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case acu1 = "ACU_1"
        case acu2 = "ACU_2"
        public var description: String { return self.rawValue }
    }

    public struct DatastoreStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "size", required: false, type: .structure)
        ]
        /// The estimated size of the data store.
        public let size: EstimatedResourceSize?

        public init(size: EstimatedResourceSize? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The tags (metadata) which you have assigned to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct DeleteDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set to delete.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct UpdateDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure)
        ]
        /// The name of the data store to be updated.
        public let datastoreName: String
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?

        public init(datastoreName: String, retentionPeriod: RetentionPeriod? = nil) {
            self.datastoreName = datastoreName
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case retentionPeriod = "retentionPeriod"
        }
    }

    public struct OutputFileUriValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileName", required: true, type: .string)
        ]
        /// The URI of the location where data set contents are stored, usually the URI of a file in an S3 bucket.
        public let fileName: String

        public init(fileName: String) {
            self.fileName = fileName
        }

        private enum CodingKeys: String, CodingKey {
            case fileName = "fileName"
        }
    }

    public struct Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: true, type: .blob), 
            AWSShapeMember(label: "messageId", required: true, type: .string)
        ]
        /// The payload of the message. This may be a JSON string or a Base64-encoded string representing binary data (in which case you must decode it by means of a pipeline activity).
        public let payload: Data
        /// The ID you wish to assign to the message. Each "messageId" must be unique within each batch sent.
        public let messageId: String

        public init(payload: Data, messageId: String) {
            self.payload = payload
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case messageId = "messageId"
        }
    }

    public struct GetDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string), 
            AWSShapeMember(label: "versionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        /// The name of the data set whose contents are retrieved.
        public let datasetName: String
        /// The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
        public let versionId: String?

        public init(datasetName: String, versionId: String? = nil) {
            self.datasetName = datasetName
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case versionId = "versionId"
        }
    }

    public enum ChannelStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct ListDatasetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeltaTime: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "offsetSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "timeExpression", required: true, type: .string)
        ]
        /// The number of seconds of estimated "in flight" lag time of message data.
        public let offsetSeconds: Int32
        /// An expression by which the time of the message data may be determined. This may be the name of a timestamp field, or a SQL expression which is used to derive the time the message data was generated.
        public let timeExpression: String

        public init(offsetSeconds: Int32, timeExpression: String) {
            self.offsetSeconds = offsetSeconds
            self.timeExpression = timeExpression
        }

        private enum CodingKeys: String, CodingKey {
            case offsetSeconds = "offsetSeconds"
            case timeExpression = "timeExpression"
        }
    }

    public struct SelectAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the 'selectAttributes' activity.
        public let name: String
        /// A list of the attributes to select from the message.
        public let attributes: [String]

        public init(next: String? = nil, name: String, attributes: [String]) {
            self.next = next
            self.name = name
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case name = "name"
            case attributes = "attributes"
        }
    }

    public struct CancelPipelineReprocessingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reprocessingId", location: .uri(locationName: "reprocessingId"), required: true, type: .string), 
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The ID of the reprocessing task (returned by "StartPipelineReprocessing").
        public let reprocessingId: String
        /// The name of pipeline for which data reprocessing is canceled.
        public let pipelineName: String

        public init(reprocessingId: String, pipelineName: String) {
            self.reprocessingId = reprocessingId
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case reprocessingId = "reprocessingId"
            case pipelineName = "pipelineName"
        }
    }

    public struct CancelPipelineReprocessingResponse: AWSShape {

    }

    public struct DatastoreSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "datastoreName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp)
        ]
        /// The last time the data store was updated.
        public let lastUpdateTime: TimeStamp?
        /// The name of the data store.
        public let datastoreName: String?
        /// The status of the data store.
        public let status: DatastoreStatus?
        /// When the data store was created.
        public let creationTime: TimeStamp?

        public init(lastUpdateTime: TimeStamp? = nil, datastoreName: String? = nil, status: DatastoreStatus? = nil, creationTime: TimeStamp? = nil) {
            self.lastUpdateTime = lastUpdateTime
            self.datastoreName = datastoreName
            self.status = status
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdateTime = "lastUpdateTime"
            case datastoreName = "datastoreName"
            case status = "status"
            case creationTime = "creationTime"
        }
    }

    public struct CreateDatasetContentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionId", required: false, type: .string)
        ]
        /// The version ID of the data set contents which are being created.
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
        }
    }

    public enum ReprocessingStatus: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case succeeded = "SUCCEEDED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct DatasetContentSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "scheduleTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .structure)
        ]
        /// The version of the data set contents.
        public let version: String?
        /// The actual time the creation of the data set contents was started.
        public let creationTime: TimeStamp?
        /// The time the creation of the data set contents was scheduled to start.
        public let scheduleTime: TimeStamp?
        /// The status of the data set contents.
        public let status: DatasetContentStatus?

        public init(version: String? = nil, creationTime: TimeStamp? = nil, scheduleTime: TimeStamp? = nil, status: DatasetContentStatus? = nil) {
            self.version = version
            self.creationTime = creationTime
            self.scheduleTime = scheduleTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case creationTime = "creationTime"
            case scheduleTime = "scheduleTime"
            case status = "status"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list), 
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string)
        ]
        /// The keys of those tags which will be removed.
        public let tagKeys: [String]
        /// The ARN of the resource whose tags will be removed.
        public let resourceArn: String

        public init(tagKeys: [String], resourceArn: String) {
            self.tagKeys = tagKeys
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "tagKeys"
            case resourceArn = "resourceArn"
        }
    }

    public struct RunPipelineActivityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logResult", required: false, type: .string), 
            AWSShapeMember(label: "payloads", required: false, type: .list)
        ]
        /// In case the pipeline activity fails, the log message that is generated.
        public let logResult: String?
        /// The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)
        public let payloads: [Data]?

        public init(logResult: String? = nil, payloads: [Data]? = nil) {
            self.logResult = logResult
            self.payloads = payloads
        }

        private enum CodingKeys: String, CodingKey {
            case logResult = "logResult"
            case payloads = "payloads"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: true, type: .string), 
            AWSShapeMember(label: "key", required: true, type: .string)
        ]
        /// The tag's value.
        public let value: String
        /// The tag's key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case key = "key"
        }
    }

    public struct CreateDatastoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", required: false, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "datastoreArn", required: false, type: .string)
        ]
        /// The name of the data store.
        public let datastoreName: String?
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?
        /// The ARN of the data store.
        public let datastoreArn: String?

        public init(datastoreName: String? = nil, retentionPeriod: RetentionPeriod? = nil, datastoreArn: String? = nil) {
            self.datastoreName = datastoreName
            self.retentionPeriod = retentionPeriod
            self.datastoreArn = datastoreArn
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case retentionPeriod = "retentionPeriod"
            case datastoreArn = "datastoreArn"
        }
    }

    public struct TriggeringDataset: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the data set whose content generation will trigger the new data set content generation.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ListChannelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "channelSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "ChannelSummary" objects.
        public let channelSummaries: [ChannelSummary]?

        public init(nextToken: String? = nil, channelSummaries: [ChannelSummary]? = nil) {
            self.nextToken = nextToken
            self.channelSummaries = channelSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case channelSummaries = "channelSummaries"
        }
    }

    public enum DatasetContentState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ListDatastoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct PipelineActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "removeAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "selectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "addAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "channel", required: false, type: .structure), 
            AWSShapeMember(label: "deviceShadowEnrich", required: false, type: .structure), 
            AWSShapeMember(label: "math", required: false, type: .structure), 
            AWSShapeMember(label: "lambda", required: false, type: .structure), 
            AWSShapeMember(label: "deviceRegistryEnrich", required: false, type: .structure), 
            AWSShapeMember(label: "datastore", required: false, type: .structure)
        ]
        /// Removes attributes from a message.
        public let removeAttributes: RemoveAttributesActivity?
        /// Filters a message based on its attributes.
        public let filter: FilterActivity?
        /// Creates a new message using only the specified attributes from the original message. 
        public let selectAttributes: SelectAttributesActivity?
        /// Adds other attributes based on existing attributes in the message.
        public let addAttributes: AddAttributesActivity?
        /// Determines the source of the messages to be processed.
        public let channel: ChannelActivity?
        /// Adds information from the AWS IoT Device Shadows service to a message.
        public let deviceShadowEnrich: DeviceShadowEnrichActivity?
        /// Computes an arithmetic expression using the message's attributes and adds it to the message.
        public let math: MathActivity?
        /// Runs a Lambda function to modify the message.
        public let lambda: LambdaActivity?
        /// Adds data from the AWS IoT device registry to your message.
        public let deviceRegistryEnrich: DeviceRegistryEnrichActivity?
        /// Specifies where to store the processed message data.
        public let datastore: DatastoreActivity?

        public init(removeAttributes: RemoveAttributesActivity? = nil, filter: FilterActivity? = nil, selectAttributes: SelectAttributesActivity? = nil, addAttributes: AddAttributesActivity? = nil, channel: ChannelActivity? = nil, deviceShadowEnrich: DeviceShadowEnrichActivity? = nil, math: MathActivity? = nil, lambda: LambdaActivity? = nil, deviceRegistryEnrich: DeviceRegistryEnrichActivity? = nil, datastore: DatastoreActivity? = nil) {
            self.removeAttributes = removeAttributes
            self.filter = filter
            self.selectAttributes = selectAttributes
            self.addAttributes = addAttributes
            self.channel = channel
            self.deviceShadowEnrich = deviceShadowEnrich
            self.math = math
            self.lambda = lambda
            self.deviceRegistryEnrich = deviceRegistryEnrich
            self.datastore = datastore
        }

        private enum CodingKeys: String, CodingKey {
            case removeAttributes = "removeAttributes"
            case filter = "filter"
            case selectAttributes = "selectAttributes"
            case addAttributes = "addAttributes"
            case channel = "channel"
            case deviceShadowEnrich = "deviceShadowEnrich"
            case math = "math"
            case lambda = "lambda"
            case deviceRegistryEnrich = "deviceRegistryEnrich"
            case datastore = "datastore"
        }
    }

    public struct ListDatasetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "datasetSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "DatasetSummary" objects.
        public let datasetSummaries: [DatasetSummary]?

        public init(nextToken: String? = nil, datasetSummaries: [DatasetSummary]? = nil) {
            self.nextToken = nextToken
            self.datasetSummaries = datasetSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case datasetSummaries = "datasetSummaries"
        }
    }

    public struct Schedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expression", required: false, type: .string)
        ]
        /// The expression that defines when to trigger an update. For more information, see  Schedule Expressions for Rules in the Amazon CloudWatch documentation.
        public let expression: String?

        public init(expression: String? = nil) {
            self.expression = expression
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
        }
    }

    public struct DeleteChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string)
        ]
        /// The name of the channel to delete.
        public let channelName: String

        public init(channelName: String) {
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
        }
    }

    public struct RunPipelineActivityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineActivity", required: true, type: .structure), 
            AWSShapeMember(label: "payloads", required: true, type: .list)
        ]
        /// The pipeline activity that is run. This must not be a 'channel' activity or a 'datastore' activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a 'lambda' activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.
        public let pipelineActivity: PipelineActivity
        /// The sample message payloads on which the pipeline activity is run.
        public let payloads: [Data]

        public init(pipelineActivity: PipelineActivity, payloads: [Data]) {
            self.pipelineActivity = pipelineActivity
            self.payloads = payloads
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineActivity = "pipelineActivity"
            case payloads = "payloads"
        }
    }

    public struct DescribeDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string), 
            AWSShapeMember(label: "includeStatistics", location: .querystring(locationName: "includeStatistics"), required: false, type: .boolean)
        ]
        /// The name of the data store
        public let datastoreName: String
        /// If true, additional statistical information about the datastore is included in the response.
        public let includeStatistics: Bool?

        public init(datastoreName: String, includeStatistics: Bool? = nil) {
            self.datastoreName = datastoreName
            self.includeStatistics = includeStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
            case includeStatistics = "includeStatistics"
        }
    }

    public struct CreateDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "datastoreName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the data store.
        public let datastoreName: String
        /// Metadata which can be used to manage the data store.
        public let tags: [Tag]?

        public init(retentionPeriod: RetentionPeriod? = nil, datastoreName: String, tags: [Tag]? = nil) {
            self.retentionPeriod = retentionPeriod
            self.datastoreName = datastoreName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case retentionPeriod = "retentionPeriod"
            case datastoreName = "datastoreName"
            case tags = "tags"
        }
    }

    public struct ListDatastoresResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "datastoreSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "DatastoreSummary" objects.
        public let datastoreSummaries: [DatastoreSummary]?

        public init(nextToken: String? = nil, datastoreSummaries: [DatastoreSummary]? = nil) {
            self.nextToken = nextToken
            self.datastoreSummaries = datastoreSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case datastoreSummaries = "datastoreSummaries"
        }
    }

    public struct DatasetTrigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "schedule", required: false, type: .structure), 
            AWSShapeMember(label: "dataset", required: false, type: .structure)
        ]
        /// The "Schedule" when the trigger is initiated.
        public let schedule: Schedule?
        /// The data set whose content creation will trigger the creation of this data set's contents.
        public let dataset: TriggeringDataset?

        public init(schedule: Schedule? = nil, dataset: TriggeringDataset? = nil) {
            self.schedule = schedule
            self.dataset = dataset
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "schedule"
            case dataset = "dataset"
        }
    }

    public struct FilterActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "filter", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string)
        ]
        /// The name of the 'filter' activity.
        public let name: String
        /// An expression that looks like a SQL WHERE clause that must return a Boolean value.
        public let filter: String
        /// The next activity in the pipeline.
        public let next: String?

        public init(name: String, filter: String, next: String? = nil) {
            self.name = name
            self.filter = filter
            self.next = next
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case filter = "filter"
            case next = "next"
        }
    }

    public struct PipelineSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "reprocessingSummaries", required: false, type: .list), 
            AWSShapeMember(label: "pipelineName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp)
        ]
        /// When the pipeline was created.
        public let creationTime: TimeStamp?
        /// A summary of information about the pipeline reprocessing.
        public let reprocessingSummaries: [ReprocessingSummary]?
        /// The name of the pipeline.
        public let pipelineName: String?
        /// When the pipeline was last updated.
        public let lastUpdateTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, reprocessingSummaries: [ReprocessingSummary]? = nil, pipelineName: String? = nil, lastUpdateTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.reprocessingSummaries = reprocessingSummaries
            self.pipelineName = pipelineName
            self.lastUpdateTime = lastUpdateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case reprocessingSummaries = "reprocessingSummaries"
            case pipelineName = "pipelineName"
            case lastUpdateTime = "lastUpdateTime"
        }
    }

    public struct UpdatePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineActivities", required: true, type: .list), 
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// A list of "PipelineActivity" objects. The list can be 1-25 PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        public let pipelineActivities: [PipelineActivity]
        /// The name of the pipeline to update.
        public let pipelineName: String

        public init(pipelineActivities: [PipelineActivity], pipelineName: String) {
            self.pipelineActivities = pipelineActivities
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineActivities = "pipelineActivities"
            case pipelineName = "pipelineName"
        }
    }

    public struct SampleChannelDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string), 
            AWSShapeMember(label: "maxMessages", location: .querystring(locationName: "maxMessages"), required: false, type: .integer), 
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: false, type: .timestamp)
        ]
        /// The name of the channel whose message samples are retrieved.
        public let channelName: String
        /// The number of sample messages to be retrieved. The limit is 10, the default is also 10.
        public let maxMessages: Int32?
        /// The end of the time window from which sample messages are retrieved.
        public let endTime: TimeStamp?
        /// The start of the time window from which sample messages are retrieved.
        public let startTime: TimeStamp?

        public init(channelName: String, maxMessages: Int32? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil) {
            self.channelName = channelName
            self.maxMessages = maxMessages
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
            case maxMessages = "maxMessages"
            case endTime = "endTime"
            case startTime = "startTime"
        }
    }

    public struct Dataset: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "triggers", required: false, type: .list), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "contentDeliveryRules", required: false, type: .list), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// [Optional] How long, in days, message data is kept for the data set.
        public let retentionPeriod: RetentionPeriod?
        /// The "DatasetTrigger" objects that specify when the data set is automatically updated.
        public let triggers: [DatasetTrigger]?
        /// When the data set was created.
        public let creationTime: TimeStamp?
        /// The status of the data set.
        public let status: DatasetStatus?
        /// The last time the data set was updated.
        public let lastUpdateTime: TimeStamp?
        /// The "DatasetAction" objects that automatically create the data set contents.
        public let actions: [DatasetAction]?
        public let contentDeliveryRules: [DatasetContentDeliveryRule]?
        /// The name of the data set.
        public let name: String?
        /// The ARN of the data set.
        public let arn: String?

        public init(retentionPeriod: RetentionPeriod? = nil, triggers: [DatasetTrigger]? = nil, creationTime: TimeStamp? = nil, status: DatasetStatus? = nil, lastUpdateTime: TimeStamp? = nil, actions: [DatasetAction]? = nil, contentDeliveryRules: [DatasetContentDeliveryRule]? = nil, name: String? = nil, arn: String? = nil) {
            self.retentionPeriod = retentionPeriod
            self.triggers = triggers
            self.creationTime = creationTime
            self.status = status
            self.lastUpdateTime = lastUpdateTime
            self.actions = actions
            self.contentDeliveryRules = contentDeliveryRules
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case retentionPeriod = "retentionPeriod"
            case triggers = "triggers"
            case creationTime = "creationTime"
            case status = "status"
            case lastUpdateTime = "lastUpdateTime"
            case actions = "actions"
            case contentDeliveryRules = "contentDeliveryRules"
            case name = "name"
            case arn = "arn"
        }
    }

    public struct Datastore: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The last time the data store was updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of a data store:  CREATING  The data store is being created.  ACTIVE  The data store has been created and can be used.  DELETING  The data store is being deleted.  
        public let status: DatastoreStatus?
        /// When the data store was created.
        public let creationTime: TimeStamp?
        /// The name of the data store.
        public let name: String?
        /// How long, in days, message data is kept for the data store.
        public let retentionPeriod: RetentionPeriod?
        /// The ARN of the data store.
        public let arn: String?

        public init(lastUpdateTime: TimeStamp? = nil, status: DatastoreStatus? = nil, creationTime: TimeStamp? = nil, name: String? = nil, retentionPeriod: RetentionPeriod? = nil, arn: String? = nil) {
            self.lastUpdateTime = lastUpdateTime
            self.status = status
            self.creationTime = creationTime
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
            case creationTime = "creationTime"
            case name = "name"
            case retentionPeriod = "retentionPeriod"
            case arn = "arn"
        }
    }

    public struct GetDatasetContentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "entries", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .structure)
        ]
        /// The time when the request was made.
        public let timestamp: TimeStamp?
        /// A list of "DatasetEntry" objects.
        public let entries: [DatasetEntry]?
        /// The status of the data set content.
        public let status: DatasetContentStatus?

        public init(timestamp: TimeStamp? = nil, entries: [DatasetEntry]? = nil, status: DatasetContentStatus? = nil) {
            self.timestamp = timestamp
            self.entries = entries
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case entries = "entries"
            case status = "status"
        }
    }

    public struct IotEventsDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        public let inputName: String
        public let roleArn: String

        public init(inputName: String, roleArn: String) {
            self.inputName = inputName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
            case roleArn = "roleArn"
        }
    }

    public struct DescribeDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set whose information is retrieved.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public enum DatasetActionType: String, CustomStringConvertible, Codable {
        case query = "QUERY"
        case container = "CONTAINER"
        public var description: String { return self.rawValue }
    }

    public struct ChannelSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "channelName", required: false, type: .string)
        ]
        /// The last time the channel was updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of the channel.
        public let status: ChannelStatus?
        /// When the channel was created.
        public let creationTime: TimeStamp?
        /// The name of the channel.
        public let channelName: String?

        public init(lastUpdateTime: TimeStamp? = nil, status: ChannelStatus? = nil, creationTime: TimeStamp? = nil, channelName: String? = nil) {
            self.lastUpdateTime = lastUpdateTime
            self.status = status
            self.creationTime = creationTime
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
            case creationTime = "creationTime"
            case channelName = "channelName"
        }
    }

    public struct ListChannelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct LoggingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "level", required: true, type: .enum)
        ]
        /// The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
        public let roleArn: String
        /// If true, logging is enabled for AWS IoT Analytics.
        public let enabled: Bool
        /// The logging level. Currently, only "ERROR" is supported.
        public let level: LoggingLevel

        public init(roleArn: String, enabled: Bool, level: LoggingLevel) {
            self.roleArn = roleArn
            self.enabled = enabled
            self.level = level
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case enabled = "enabled"
            case level = "level"
        }
    }

    public struct ListDatasetContentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The name of the data set whose contents information you want to list.
        public let datasetName: String
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request.
        public let maxResults: Int32?

        public init(datasetName: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.datasetName = datasetName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeviceRegistryEnrichActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "thingName", required: true, type: .string), 
            AWSShapeMember(label: "attribute", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the 'deviceRegistryEnrich' activity.
        public let name: String
        /// The name of the IoT device whose registry information is added to the message.
        public let thingName: String
        /// The name of the attribute that is added to the message.
        public let attribute: String
        /// The ARN of the role that allows access to the device's registry information.
        public let roleArn: String

        public init(next: String? = nil, name: String, thingName: String, attribute: String, roleArn: String) {
            self.next = next
            self.name = name
            self.thingName = thingName
            self.attribute = attribute
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case next = "next"
            case name = "name"
            case thingName = "thingName"
            case attribute = "attribute"
            case roleArn = "roleArn"
        }
    }

    public struct Pipeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "activities", required: false, type: .list), 
            AWSShapeMember(label: "reprocessingSummaries", required: false, type: .list), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp)
        ]
        /// The ARN of the pipeline.
        public let arn: String?
        /// The name of the pipeline.
        public let name: String?
        /// The last time the pipeline was updated.
        public let lastUpdateTime: TimeStamp?
        /// The activities that perform transformations on the messages.
        public let activities: [PipelineActivity]?
        /// A summary of information about the pipeline reprocessing.
        public let reprocessingSummaries: [ReprocessingSummary]?
        /// When the pipeline was created.
        public let creationTime: TimeStamp?

        public init(arn: String? = nil, name: String? = nil, lastUpdateTime: TimeStamp? = nil, activities: [PipelineActivity]? = nil, reprocessingSummaries: [ReprocessingSummary]? = nil, creationTime: TimeStamp? = nil) {
            self.arn = arn
            self.name = name
            self.lastUpdateTime = lastUpdateTime
            self.activities = activities
            self.reprocessingSummaries = reprocessingSummaries
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
            case lastUpdateTime = "lastUpdateTime"
            case activities = "activities"
            case reprocessingSummaries = "reprocessingSummaries"
            case creationTime = "creationTime"
        }
    }

    public struct StartPipelineReprocessingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp)
        ]
        /// The name of the pipeline on which to start reprocessing.
        public let pipelineName: String
        /// The start time (inclusive) of raw message data that is reprocessed.
        public let startTime: TimeStamp?
        /// The end time (exclusive) of raw message data that is reprocessed.
        public let endTime: TimeStamp?

        public init(pipelineName: String, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil) {
            self.pipelineName = pipelineName
            self.startTime = startTime
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
            case startTime = "startTime"
            case endTime = "endTime"
        }
    }

    public struct BatchPutMessageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "messages", required: true, type: .list), 
            AWSShapeMember(label: "channelName", required: true, type: .string)
        ]
        /// The list of messages to be sent. Each message has format: '{ "messageId": "string", "payload": "string"}'.
        public let messages: [Message]
        /// The name of the channel where the messages are sent.
        public let channelName: String

        public init(messages: [Message], channelName: String) {
            self.messages = messages
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "messages"
            case channelName = "channelName"
        }
    }

    public struct CreateDatasetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetArn", required: false, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "datasetName", required: false, type: .string)
        ]
        /// The ARN of the data set.
        public let datasetArn: String?
        /// How long, in days, message data is kept for the data set.
        public let retentionPeriod: RetentionPeriod?
        /// The name of the data set.
        public let datasetName: String?

        public init(datasetArn: String? = nil, retentionPeriod: RetentionPeriod? = nil, datasetName: String? = nil) {
            self.datasetArn = datasetArn
            self.retentionPeriod = retentionPeriod
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetArn = "datasetArn"
            case retentionPeriod = "retentionPeriod"
            case datasetName = "datasetName"
        }
    }

    public struct CreateChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", required: false, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "channelArn", required: false, type: .string)
        ]
        /// The name of the channel.
        public let channelName: String?
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// The ARN of the channel.
        public let channelArn: String?

        public init(channelName: String? = nil, retentionPeriod: RetentionPeriod? = nil, channelArn: String? = nil) {
            self.channelName = channelName
            self.retentionPeriod = retentionPeriod
            self.channelArn = channelArn
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
            case retentionPeriod = "retentionPeriod"
            case channelArn = "channelArn"
        }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct EstimatedResourceSize: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "estimatedSizeInBytes", required: false, type: .double), 
            AWSShapeMember(label: "estimatedOn", required: false, type: .timestamp)
        ]
        /// The estimated size of the resource in bytes.
        public let estimatedSizeInBytes: Double?
        /// The time when the estimate of the size of the resource was made.
        public let estimatedOn: TimeStamp?

        public init(estimatedSizeInBytes: Double? = nil, estimatedOn: TimeStamp? = nil) {
            self.estimatedSizeInBytes = estimatedSizeInBytes
            self.estimatedOn = estimatedOn
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedSizeInBytes = "estimatedSizeInBytes"
            case estimatedOn = "estimatedOn"
        }
    }

    public struct MathActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attribute", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "math", required: true, type: .string)
        ]
        /// The name of the attribute that will contain the result of the math operation.
        public let attribute: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the 'math' activity.
        public let name: String
        /// An expression that uses one or more existing attributes and must return an integer value.
        public let math: String

        public init(attribute: String, next: String? = nil, name: String, math: String) {
            self.attribute = attribute
            self.next = next
            self.name = name
            self.math = math
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case next = "next"
            case name = "name"
            case math = "math"
        }
    }

    public struct ResourceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "volumeSizeInGB", required: true, type: .integer), 
            AWSShapeMember(label: "computeType", required: true, type: .enum)
        ]
        /// The size (in GB) of the persistent storage available to the resource instance used to execute the "containerAction" (min: 1, max: 50).
        public let volumeSizeInGB: Int32
        /// The type of the compute resource used to execute the "containerAction". Possible values are: ACU_1 (vCPU=4, memory=16GiB) or ACU_2 (vCPU=8, memory=32GiB).
        public let computeType: ComputeType

        public init(volumeSizeInGB: Int32, computeType: ComputeType) {
            self.volumeSizeInGB = volumeSizeInGB
            self.computeType = computeType
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSizeInGB = "volumeSizeInGB"
            case computeType = "computeType"
        }
    }

    public struct DatasetContentDeliveryDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "iotEventsDestinationConfiguration", required: false, type: .structure)
        ]
        public let iotEventsDestinationConfiguration: IotEventsDestinationConfiguration?

        public init(iotEventsDestinationConfiguration: IotEventsDestinationConfiguration? = nil) {
            self.iotEventsDestinationConfiguration = iotEventsDestinationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case iotEventsDestinationConfiguration = "iotEventsDestinationConfiguration"
        }
    }

    public struct DescribeLoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: false, type: .structure)
        ]
        /// The current settings of the AWS IoT Analytics logging options.
        public let loggingOptions: LoggingOptions?

        public init(loggingOptions: LoggingOptions? = nil) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct DescribePipelineResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipeline", required: false, type: .structure)
        ]
        /// A "Pipeline" object that contains information about the pipeline.
        public let pipeline: Pipeline?

        public init(pipeline: Pipeline? = nil) {
            self.pipeline = pipeline
        }

        private enum CodingKeys: String, CodingKey {
            case pipeline = "pipeline"
        }
    }

    public enum DatasetStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct AddAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .map), 
            AWSShapeMember(label: "next", required: false, type: .string)
        ]
        /// The name of the 'addAttributes' activity.
        public let name: String
        /// A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.  The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity". 
        public let attributes: [String: String]
        /// The next activity in the pipeline.
        public let next: String?

        public init(name: String, attributes: [String: String], next: String? = nil) {
            self.name = name
            self.attributes = attributes
            self.next = next
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case attributes = "attributes"
            case next = "next"
        }
    }

    public struct ListPipelinesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this request. The default value is 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct CreatePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "pipelineName", required: true, type: .string), 
            AWSShapeMember(label: "pipelineActivities", required: true, type: .list)
        ]
        /// Metadata which can be used to manage the pipeline.
        public let tags: [Tag]?
        /// The name of the pipeline.
        public let pipelineName: String
        /// A list of pipeline activities. The list can be 1-25 PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming, or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.
        public let pipelineActivities: [PipelineActivity]

        public init(tags: [Tag]? = nil, pipelineName: String, pipelineActivities: [PipelineActivity]) {
            self.tags = tags
            self.pipelineName = pipelineName
            self.pipelineActivities = pipelineActivities
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case pipelineName = "pipelineName"
            case pipelineActivities = "pipelineActivities"
        }
    }

    public struct DatasetContentDeliveryRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "entryName", required: false, type: .string), 
            AWSShapeMember(label: "destination", required: true, type: .structure)
        ]
        public let entryName: String?
        public let destination: DatasetContentDeliveryDestination

        public init(entryName: String? = nil, destination: DatasetContentDeliveryDestination) {
            self.entryName = entryName
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case entryName = "entryName"
            case destination = "destination"
        }
    }

    public struct DatasetEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataURI", required: false, type: .string), 
            AWSShapeMember(label: "entryName", required: false, type: .string)
        ]
        /// The pre-signed URI of the data set item.
        public let dataURI: String?
        /// The name of the data set item.
        public let entryName: String?

        public init(dataURI: String? = nil, entryName: String? = nil) {
            self.dataURI = dataURI
            self.entryName = entryName
        }

        private enum CodingKeys: String, CodingKey {
            case dataURI = "dataURI"
            case entryName = "entryName"
        }
    }

    public struct UpdateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", location: .uri(locationName: "channelName"), required: true, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure)
        ]
        /// The name of the channel to be updated.
        public let channelName: String
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?

        public init(channelName: String, retentionPeriod: RetentionPeriod? = nil) {
            self.channelName = channelName
            self.retentionPeriod = retentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
            case retentionPeriod = "retentionPeriod"
        }
    }

    public struct BatchPutMessageErrorEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorMessage", required: false, type: .string), 
            AWSShapeMember(label: "errorCode", required: false, type: .string), 
            AWSShapeMember(label: "messageId", required: false, type: .string)
        ]
        /// The message associated with the error.
        public let errorMessage: String?
        /// The code associated with the error.
        public let errorCode: String?
        /// The ID of the message that caused the error. (See the value corresponding to the "messageId" key in the message object.)
        public let messageId: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil, messageId: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "errorMessage"
            case errorCode = "errorCode"
            case messageId = "messageId"
        }
    }

    public struct DescribeChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statistics", required: false, type: .structure), 
            AWSShapeMember(label: "channel", required: false, type: .structure)
        ]
        /// Statistics about the channel. Included if the 'includeStatistics' parameter is set to true in the request.
        public let statistics: ChannelStatistics?
        /// An object that contains information about the channel.
        public let channel: Channel?

        public init(statistics: ChannelStatistics? = nil, channel: Channel? = nil) {
            self.statistics = statistics
            self.channel = channel
        }

        private enum CodingKeys: String, CodingKey {
            case statistics = "statistics"
            case channel = "channel"
        }
    }

    public struct ListPipelinesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pipelineSummaries", required: false, type: .list)
        ]
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?
        /// A list of "PipelineSummary" objects.
        public let pipelineSummaries: [PipelineSummary]?

        public init(nextToken: String? = nil, pipelineSummaries: [PipelineSummary]? = nil) {
            self.nextToken = nextToken
            self.pipelineSummaries = pipelineSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case pipelineSummaries = "pipelineSummaries"
        }
    }

    public struct DeviceShadowEnrichActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: true, type: .string), 
            AWSShapeMember(label: "attribute", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the IoT device whose shadow information is added to the message.
        public let thingName: String
        /// The name of the attribute that is added to the message.
        public let attribute: String
        /// The ARN of the role that allows access to the device's shadow.
        public let roleArn: String
        /// The next activity in the pipeline.
        public let next: String?
        /// The name of the 'deviceShadowEnrich' activity.
        public let name: String

        public init(thingName: String, attribute: String, roleArn: String, next: String? = nil, name: String) {
            self.thingName = thingName
            self.attribute = attribute
            self.roleArn = roleArn
            self.next = next
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case attribute = "attribute"
            case roleArn = "roleArn"
            case next = "next"
            case name = "name"
        }
    }

    public struct ReprocessingSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp)
        ]
        /// The status of the pipeline reprocessing.
        public let status: ReprocessingStatus?
        /// The 'reprocessingId' returned by "StartPipelineReprocessing".
        public let id: String?
        /// The time the pipeline reprocessing was created.
        public let creationTime: TimeStamp?

        public init(status: ReprocessingStatus? = nil, id: String? = nil, creationTime: TimeStamp? = nil) {
            self.status = status
            self.id = id
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case id = "id"
            case creationTime = "creationTime"
        }
    }

    public struct CreateDatasetContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetName", location: .uri(locationName: "datasetName"), required: true, type: .string)
        ]
        /// The name of the data set.
        public let datasetName: String

        public init(datasetName: String) {
            self.datasetName = datasetName
        }

        private enum CodingKeys: String, CodingKey {
            case datasetName = "datasetName"
        }
    }

    public struct CreateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelName", required: true, type: .string), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The name of the channel.
        public let channelName: String
        /// How long, in days, message data is kept for the channel.
        public let retentionPeriod: RetentionPeriod?
        /// Metadata which can be used to manage the channel.
        public let tags: [Tag]?

        public init(channelName: String, retentionPeriod: RetentionPeriod? = nil, tags: [Tag]? = nil) {
            self.channelName = channelName
            self.retentionPeriod = retentionPeriod
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "channelName"
            case retentionPeriod = "retentionPeriod"
            case tags = "tags"
        }
    }

    public struct DescribeDatastoreResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastore", required: false, type: .structure), 
            AWSShapeMember(label: "statistics", required: false, type: .structure)
        ]
        /// Information about the data store.
        public let datastore: Datastore?
        /// Additional statistical information about the data store. Included if the 'includeStatistics' parameter is set to true in the request.
        public let statistics: DatastoreStatistics?

        public init(datastore: Datastore? = nil, statistics: DatastoreStatistics? = nil) {
            self.datastore = datastore
            self.statistics = statistics
        }

        private enum CodingKeys: String, CodingKey {
            case datastore = "datastore"
            case statistics = "statistics"
        }
    }

    public struct DescribePipelineRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pipelineName", location: .uri(locationName: "pipelineName"), required: true, type: .string)
        ]
        /// The name of the pipeline whose information is retrieved.
        public let pipelineName: String

        public init(pipelineName: String) {
            self.pipelineName = pipelineName
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineName = "pipelineName"
        }
    }

    public struct ChannelActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "channelName", required: true, type: .string), 
            AWSShapeMember(label: "next", required: false, type: .string)
        ]
        /// The name of the 'channel' activity.
        public let name: String
        /// The name of the channel from which the messages are processed.
        public let channelName: String
        /// The next activity in the pipeline.
        public let next: String?

        public init(name: String, channelName: String, next: String? = nil) {
            self.name = name
            self.channelName = channelName
            self.next = next
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case channelName = "channelName"
            case next = "next"
        }
    }

    public struct DeleteDatastoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datastoreName", location: .uri(locationName: "datastoreName"), required: true, type: .string)
        ]
        /// The name of the data store to delete.
        public let datastoreName: String

        public init(datastoreName: String) {
            self.datastoreName = datastoreName
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreName = "datastoreName"
        }
    }

    public struct Variable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "outputFileUriValue", required: false, type: .structure), 
            AWSShapeMember(label: "doubleValue", required: false, type: .double), 
            AWSShapeMember(label: "datasetContentVersionValue", required: false, type: .structure), 
            AWSShapeMember(label: "stringValue", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The value of the variable as a structure that specifies an output file URI.
        public let outputFileUriValue: OutputFileUriValue?
        /// The value of the variable as a double (numeric).
        public let doubleValue: Double?
        /// The value of the variable as a structure that specifies a data set content version.
        public let datasetContentVersionValue: DatasetContentVersionValue?
        /// The value of the variable as a string.
        public let stringValue: String?
        /// The name of the variable.
        public let name: String

        public init(outputFileUriValue: OutputFileUriValue? = nil, doubleValue: Double? = nil, datasetContentVersionValue: DatasetContentVersionValue? = nil, stringValue: String? = nil, name: String) {
            self.outputFileUriValue = outputFileUriValue
            self.doubleValue = doubleValue
            self.datasetContentVersionValue = datasetContentVersionValue
            self.stringValue = stringValue
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case outputFileUriValue = "outputFileUriValue"
            case doubleValue = "doubleValue"
            case datasetContentVersionValue = "datasetContentVersionValue"
            case stringValue = "stringValue"
            case name = "name"
        }
    }

    public struct DatasetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queryAction", required: false, type: .structure), 
            AWSShapeMember(label: "containerAction", required: false, type: .structure), 
            AWSShapeMember(label: "actionName", required: false, type: .string)
        ]
        /// An "SqlQueryDatasetAction" object that contains the SQL query to modify the message.
        public let queryAction: SqlQueryDatasetAction?
        /// Information which allows the system to run a containerized application in order to create the data set contents. The application must be in a Docker container along with any needed support libraries.
        public let containerAction: ContainerDatasetAction?
        /// The name of the data set action by which data set contents are automatically created.
        public let actionName: String?

        public init(queryAction: SqlQueryDatasetAction? = nil, containerAction: ContainerDatasetAction? = nil, actionName: String? = nil) {
            self.queryAction = queryAction
            self.containerAction = containerAction
            self.actionName = actionName
        }

        private enum CodingKeys: String, CodingKey {
            case queryAction = "queryAction"
            case containerAction = "containerAction"
            case actionName = "actionName"
        }
    }

    public struct DatasetActionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionType", required: false, type: .enum), 
            AWSShapeMember(label: "actionName", required: false, type: .string)
        ]
        /// The type of action by which the data set's contents are automatically created.
        public let actionType: DatasetActionType?
        /// The name of the action which automatically creates the data set's contents.
        public let actionName: String?

        public init(actionType: DatasetActionType? = nil, actionName: String? = nil) {
            self.actionType = actionType
            self.actionName = actionName
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "actionType"
            case actionName = "actionName"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct RemoveAttributesActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "next", required: false, type: .string)
        ]
        /// The name of the 'removeAttributes' activity.
        public let name: String
        /// A list of 1-50 attributes to remove from the message.
        public let attributes: [String]
        /// The next activity in the pipeline.
        public let next: String?

        public init(name: String, attributes: [String], next: String? = nil) {
            self.name = name
            self.attributes = attributes
            self.next = next
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case attributes = "attributes"
            case next = "next"
        }
    }

    public struct CreateDatasetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "triggers", required: false, type: .list), 
            AWSShapeMember(label: "retentionPeriod", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "datasetName", required: true, type: .string), 
            AWSShapeMember(label: "contentDeliveryRules", required: false, type: .list), 
            AWSShapeMember(label: "actions", required: true, type: .list)
        ]
        /// A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five DataSetTrigger objects.
        public let triggers: [DatasetTrigger]?
        /// [Optional] How long, in days, message data is kept for the data set. If not given or set to null, the latest version of the dataset content plus the latest succeeded version (if they are different) are retained for at most 90 days.
        public let retentionPeriod: RetentionPeriod?
        /// Metadata which can be used to manage the data set.
        public let tags: [Tag]?
        /// The name of the data set.
        public let datasetName: String
        public let contentDeliveryRules: [DatasetContentDeliveryRule]?
        /// A list of actions that create the data set contents.
        public let actions: [DatasetAction]

        public init(triggers: [DatasetTrigger]? = nil, retentionPeriod: RetentionPeriod? = nil, tags: [Tag]? = nil, datasetName: String, contentDeliveryRules: [DatasetContentDeliveryRule]? = nil, actions: [DatasetAction]) {
            self.triggers = triggers
            self.retentionPeriod = retentionPeriod
            self.tags = tags
            self.datasetName = datasetName
            self.contentDeliveryRules = contentDeliveryRules
            self.actions = actions
        }

        private enum CodingKeys: String, CodingKey {
            case triggers = "triggers"
            case retentionPeriod = "retentionPeriod"
            case tags = "tags"
            case datasetName = "datasetName"
            case contentDeliveryRules = "contentDeliveryRules"
            case actions = "actions"
        }
    }

    public struct ListDatasetContentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "datasetContentSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Summary information about data set contents that have been created.
        public let datasetContentSummaries: [DatasetContentSummary]?
        /// The token to retrieve the next set of results, or null if there are no more results.
        public let nextToken: String?

        public init(datasetContentSummaries: [DatasetContentSummary]? = nil, nextToken: String? = nil) {
            self.datasetContentSummaries = datasetContentSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case datasetContentSummaries = "datasetContentSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct SampleChannelDataResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payloads", required: false, type: .list)
        ]
        /// The list of message samples. Each sample message is returned as a base64-encoded string.
        public let payloads: [Data]?

        public init(payloads: [Data]? = nil) {
            self.payloads = payloads
        }

        private enum CodingKeys: String, CodingKey {
            case payloads = "payloads"
        }
    }

}