// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RAM {

    public struct UpdateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string), 
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// Indicates whether principals outside your organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The name of the resource share.
        public let name: String?

        public init(resourceShareArn: String, allowExternalPrincipals: Bool? = nil, clientToken: String? = nil, name: String? = nil) {
            self.resourceShareArn = resourceShareArn
            self.allowExternalPrincipals = allowExternalPrincipals
            self.clientToken = clientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case allowExternalPrincipals = "allowExternalPrincipals"
            case clientToken = "clientToken"
            case name = "name"
        }
    }

    public enum ResourceStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case zonalResourceInaccessible = "ZONAL_RESOURCE_INACCESSIBLE"
        case limitExceeded = "LIMIT_EXCEEDED"
        case unavailable = "UNAVAILABLE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareInvitationStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case accepted = "ACCEPTED"
        case rejected = "REJECTED"
        case expired = "EXPIRED"
        public var description: String { return self.rawValue }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagValues", required: false, type: .list), 
            AWSShapeMember(label: "tagKey", required: false, type: .string)
        ]
        /// The tag values.
        public let tagValues: [String]?
        /// The tag key.
        public let tagKey: String?

        public init(tagValues: [String]? = nil, tagKey: String? = nil) {
            self.tagValues = tagValues
            self.tagKey = tagKey
        }

        private enum CodingKeys: String, CodingKey {
            case tagValues = "tagValues"
            case tagKey = "tagKey"
        }
    }

    public struct ResourceShareAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "associationType", required: false, type: .enum), 
            AWSShapeMember(label: "external", required: false, type: .boolean), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "associatedEntity", required: false, type: .string)
        ]
        /// The time when the association was created.
        public let creationTime: TimeStamp?
        /// The status of the association.
        public let status: ResourceShareAssociationStatus?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The association type.
        public let associationType: ResourceShareAssociationType?
        /// Indicates whether the principal belongs to the same organization as the AWS account that owns the resource share.
        public let external: Bool?
        /// A message about the status of the association.
        public let statusMessage: String?
        /// The associated entity. For resource associations, this is the ARN of the resource. For principal associations, this is the ID of an AWS account or the ARN of an OU or organization from AWS Organizations.
        public let associatedEntity: String?

        public init(creationTime: TimeStamp? = nil, status: ResourceShareAssociationStatus? = nil, lastUpdatedTime: TimeStamp? = nil, resourceShareArn: String? = nil, associationType: ResourceShareAssociationType? = nil, external: Bool? = nil, statusMessage: String? = nil, associatedEntity: String? = nil) {
            self.creationTime = creationTime
            self.status = status
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceShareArn = resourceShareArn
            self.associationType = associationType
            self.external = external
            self.statusMessage = statusMessage
            self.associatedEntity = associatedEntity
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case status = "status"
            case lastUpdatedTime = "lastUpdatedTime"
            case resourceShareArn = "resourceShareArn"
            case associationType = "associationType"
            case external = "external"
            case statusMessage = "statusMessage"
            case associatedEntity = "associatedEntity"
        }
    }

    public struct GetResourceShareAssociationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the association.
        public let resourceShareAssociations: [ResourceShareAssociation]?

        public init(nextToken: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil) {
            self.nextToken = nextToken
            self.resourceShareAssociations = resourceShareAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceShareAssociations = "resourceShareAssociations"
        }
    }

    public struct DisassociateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// The principals.
        public let principals: [String]?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]?

        public init(resourceShareArn: String, principals: [String]? = nil, clientToken: String? = nil, resourceArns: [String]? = nil) {
            self.resourceShareArn = resourceShareArn
            self.principals = principals
            self.clientToken = clientToken
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case principals = "principals"
            case clientToken = "clientToken"
            case resourceArns = "resourceArns"
        }
    }

    public struct UpdateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShare", required: false, type: .structure)
        ]
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the resource share.
        public let resourceShare: ResourceShare?

        public init(clientToken: String? = nil, resourceShare: ResourceShare? = nil) {
            self.clientToken = clientToken
            self.resourceShare = resourceShare
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShare = "resourceShare"
        }
    }

    public enum ResourceShareAssociationType: String, CustomStringConvertible, Codable {
        case principal = "PRINCIPAL"
        case resource = "RESOURCE"
        public var description: String { return self.rawValue }
    }

    public struct AcceptResourceShareInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: true, type: .string)
        ]
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String

        public init(clientToken: String? = nil, resourceShareInvitationArn: String) {
            self.clientToken = clientToken
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct ListResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the resources.
        public let resources: [Resource]?

        public init(nextToken: String? = nil, resources: [Resource]? = nil) {
            self.nextToken = nextToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resources = "resources"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The key of the tag.
        public let key: String?
        /// The value of the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct CreateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShare", required: false, type: .structure), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// Information about the resource share.
        public let resourceShare: ResourceShare?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(resourceShare: ResourceShare? = nil, clientToken: String? = nil) {
            self.resourceShare = resourceShare
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShare = "resourceShare"
            case clientToken = "clientToken"
        }
    }

    public struct AcceptResourceShareInvitationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareInvitation", required: false, type: .structure), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// Information about the invitation.
        public let resourceShareInvitation: ResourceShareInvitation?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(resourceShareInvitation: ResourceShareInvitation? = nil, clientToken: String? = nil) {
            self.resourceShareInvitation = resourceShareInvitation
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareInvitation = "resourceShareInvitation"
            case clientToken = "clientToken"
        }
    }

    public struct DeleteResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", location: .querystring(locationName: "resourceShareArn"), required: true, type: .string), 
            AWSShapeMember(label: "clientToken", location: .querystring(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(resourceShareArn: String, clientToken: String? = nil) {
            self.resourceShareArn = resourceShareArn
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case clientToken = "clientToken"
        }
    }

    public struct GetResourceShareAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "associationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "associationType", required: true, type: .enum)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The status of the association.
        public let associationStatus: ResourceShareAssociationStatus?
        /// The principal.
        public let principal: String?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// The association type.
        public let associationType: ResourceShareAssociationType

        public init(maxResults: Int32? = nil, resourceShareArns: [String]? = nil, associationStatus: ResourceShareAssociationStatus? = nil, principal: String? = nil, nextToken: String? = nil, resourceArn: String? = nil, associationType: ResourceShareAssociationType) {
            self.maxResults = maxResults
            self.resourceShareArns = resourceShareArns
            self.associationStatus = associationStatus
            self.principal = principal
            self.nextToken = nextToken
            self.resourceArn = resourceArn
            self.associationType = associationType
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case resourceShareArns = "resourceShareArns"
            case associationStatus = "associationStatus"
            case principal = "principal"
            case nextToken = "nextToken"
            case resourceArn = "resourceArn"
            case associationType = "associationType"
        }
    }

    public struct GetResourcePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The principal.
        public let principal: String?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]
        /// The token for the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?

        public init(principal: String? = nil, resourceArns: [String], nextToken: String? = nil, maxResults: Int32? = nil) {
            self.principal = principal
            self.resourceArns = resourceArns
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "principal"
            case resourceArns = "resourceArns"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "returnValue", required: false, type: .boolean), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// Indicates whether the request succeeded.
        public let returnValue: Bool?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(returnValue: Bool? = nil, clientToken: String? = nil) {
            self.returnValue = returnValue
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
            case clientToken = "clientToken"
        }
    }

    public struct EnableSharingWithAwsOrganizationRequest: AWSShape {

    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]
        /// One or more tags.
        public let tags: [Tag]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(tags: [Tag], resourceShareArn: String) {
            self.tags = tags
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct CreateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean)
        ]
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Names (ARN) of the resources to associate with the resource share.
        public let resourceArns: [String]?
        /// The name of the resource share.
        public let name: String
        /// One or more tags.
        public let tags: [Tag]?
        /// The principals to associate with the resource share. The possible values are IDs of AWS accounts, the ARN of an OU or organization from AWS Organizations.
        public let principals: [String]?
        /// Indicates whether principals outside your organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?

        public init(clientToken: String? = nil, resourceArns: [String]? = nil, name: String, tags: [Tag]? = nil, principals: [String]? = nil, allowExternalPrincipals: Bool? = nil) {
            self.clientToken = clientToken
            self.resourceArns = resourceArns
            self.name = name
            self.tags = tags
            self.principals = principals
            self.allowExternalPrincipals = allowExternalPrincipals
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceArns = "resourceArns"
            case name = "name"
            case tags = "tags"
            case principals = "principals"
            case allowExternalPrincipals = "allowExternalPrincipals"
        }
    }

    public struct ResourceShare: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "owningAccountId", required: false, type: .string), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        /// The tags for the resource share.
        public let tags: [Tag]?
        /// The time when the resource share was created.
        public let creationTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The time when the resource share was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// Indicates whether principals outside your organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?
        /// The name of the resource share.
        public let name: String?
        /// The status of the resource share.
        public let status: ResourceShareStatus?
        /// The ID of the AWS account that owns the resource share.
        public let owningAccountId: String?
        /// A message about the status of the resource share.
        public let statusMessage: String?

        public init(tags: [Tag]? = nil, creationTime: TimeStamp? = nil, resourceShareArn: String? = nil, lastUpdatedTime: TimeStamp? = nil, allowExternalPrincipals: Bool? = nil, name: String? = nil, status: ResourceShareStatus? = nil, owningAccountId: String? = nil, statusMessage: String? = nil) {
            self.tags = tags
            self.creationTime = creationTime
            self.resourceShareArn = resourceShareArn
            self.lastUpdatedTime = lastUpdatedTime
            self.allowExternalPrincipals = allowExternalPrincipals
            self.name = name
            self.status = status
            self.owningAccountId = owningAccountId
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case creationTime = "creationTime"
            case resourceShareArn = "resourceShareArn"
            case lastUpdatedTime = "lastUpdatedTime"
            case allowExternalPrincipals = "allowExternalPrincipals"
            case name = "name"
            case status = "status"
            case owningAccountId = "owningAccountId"
            case statusMessage = "statusMessage"
        }
    }

    public enum ResourceShareStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case failed = "FAILED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareAssociationStatus: String, CustomStringConvertible, Codable {
        case associating = "ASSOCIATING"
        case associated = "ASSOCIATED"
        case failed = "FAILED"
        case disassociating = "DISASSOCIATING"
        case disassociated = "DISASSOCIATED"
        public var description: String { return self.rawValue }
    }

    public struct GetResourceSharesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShares", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Information about the resource shares.
        public let resourceShares: [ResourceShare]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(resourceShares: [ResourceShare]? = nil, nextToken: String? = nil) {
            self.resourceShares = resourceShares
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShares = "resourceShares"
            case nextToken = "nextToken"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct GetResourceShareInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArns", required: false, type: .list)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Names (ARN) of the invitations.
        public let resourceShareInvitationArns: [String]?

        public init(maxResults: Int32? = nil, resourceShareArns: [String]? = nil, nextToken: String? = nil, resourceShareInvitationArns: [String]? = nil) {
            self.maxResults = maxResults
            self.resourceShareArns = resourceShareArns
            self.nextToken = nextToken
            self.resourceShareInvitationArns = resourceShareInvitationArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case resourceShareArns = "resourceShareArns"
            case nextToken = "nextToken"
            case resourceShareInvitationArns = "resourceShareInvitationArns"
        }
    }

    public enum ResourceOwner: String, CustomStringConvertible, Codable {
        case `self` = "SELF"
        case otherAccounts = "OTHER-ACCOUNTS"
        public var description: String { return self.rawValue }
    }

    public struct AssociateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list)
        ]
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the associations.
        public let resourceShareAssociations: [ResourceShareAssociation]?

        public init(clientToken: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil) {
            self.clientToken = clientToken
            self.resourceShareAssociations = resourceShareAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareAssociations = "resourceShareAssociations"
        }
    }

    public struct RejectResourceShareInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: true, type: .string)
        ]
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String

        public init(clientToken: String? = nil, resourceShareInvitationArn: String) {
            self.clientToken = clientToken
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct RejectResourceShareInvitationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareInvitation", required: false, type: .structure), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// Information about the invitation.
        public let resourceShareInvitation: ResourceShareInvitation?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(resourceShareInvitation: ResourceShareInvitation? = nil, clientToken: String? = nil) {
            self.resourceShareInvitation = resourceShareInvitation
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareInvitation = "resourceShareInvitation"
            case clientToken = "clientToken"
        }
    }

    public struct DisassociateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list), 
            AWSShapeMember(label: "clientToken", required: false, type: .string)
        ]
        /// Information about the associations.
        public let resourceShareAssociations: [ResourceShareAssociation]?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(resourceShareAssociations: [ResourceShareAssociation]? = nil, clientToken: String? = nil) {
            self.resourceShareAssociations = resourceShareAssociations
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareAssociations = "resourceShareAssociations"
            case clientToken = "clientToken"
        }
    }

    public struct GetResourceSharesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "tagFilters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareStatus", required: false, type: .enum), 
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more tag filters.
        public let tagFilters: [TagFilter]?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The status of the resource share.
        public let resourceShareStatus: ResourceShareStatus?
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The name of the resource share.
        public let name: String?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?

        public init(maxResults: Int32? = nil, tagFilters: [TagFilter]? = nil, nextToken: String? = nil, resourceShareStatus: ResourceShareStatus? = nil, resourceOwner: ResourceOwner, name: String? = nil, resourceShareArns: [String]? = nil) {
            self.maxResults = maxResults
            self.tagFilters = tagFilters
            self.nextToken = nextToken
            self.resourceShareStatus = resourceShareStatus
            self.resourceOwner = resourceOwner
            self.name = name
            self.resourceShareArns = resourceShareArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case tagFilters = "tagFilters"
            case nextToken = "nextToken"
            case resourceShareStatus = "resourceShareStatus"
            case resourceOwner = "resourceOwner"
            case name = "name"
            case resourceShareArns = "resourceShareArns"
        }
    }

    public struct ResourceShareInvitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "invitationTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "receiverAccountId", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareName", required: false, type: .string), 
            AWSShapeMember(label: "senderAccountId", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The status of the invitation.
        public let status: ResourceShareInvitationStatus?
        /// The date and time when the invitation was sent.
        public let invitationTimestamp: TimeStamp?
        /// The ID of the AWS account that received the invitation.
        public let receiverAccountId: String?
        /// The name of the resource share.
        public let resourceShareName: String?
        /// The ID of the AWS account that sent the invitation.
        public let senderAccountId: String?
        /// The resources associated with the resource share.
        public let resourceShareAssociations: [ResourceShareAssociation]?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String?

        public init(resourceShareArn: String? = nil, status: ResourceShareInvitationStatus? = nil, invitationTimestamp: TimeStamp? = nil, receiverAccountId: String? = nil, resourceShareName: String? = nil, senderAccountId: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil, resourceShareInvitationArn: String? = nil) {
            self.resourceShareArn = resourceShareArn
            self.status = status
            self.invitationTimestamp = invitationTimestamp
            self.receiverAccountId = receiverAccountId
            self.resourceShareName = resourceShareName
            self.senderAccountId = senderAccountId
            self.resourceShareAssociations = resourceShareAssociations
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case status = "status"
            case invitationTimestamp = "invitationTimestamp"
            case receiverAccountId = "receiverAccountId"
            case resourceShareName = "resourceShareName"
            case senderAccountId = "senderAccountId"
            case resourceShareAssociations = "resourceShareAssociations"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct GetResourcePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A key policy document, in JSON format.
        public let policies: [String]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(policies: [String]? = nil, nextToken: String? = nil) {
            self.policies = policies
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextToken = "nextToken"
        }
    }

    public struct ListPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The principals.
        public let principals: [Principal]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(principals: [Principal]? = nil, nextToken: String? = nil) {
            self.principals = principals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "principals"
            case nextToken = "nextToken"
        }
    }

    public struct ListPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The resource type.
        public let resourceType: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The principals.
        public let principals: [String]?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(resourceType: String? = nil, maxResults: Int32? = nil, resourceArn: String? = nil, resourceOwner: ResourceOwner, principals: [String]? = nil, resourceShareArns: [String]? = nil, nextToken: String? = nil) {
            self.resourceType = resourceType
            self.maxResults = maxResults
            self.resourceArn = resourceArn
            self.resourceOwner = resourceOwner
            self.principals = principals
            self.resourceShareArns = resourceShareArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case maxResults = "maxResults"
            case resourceArn = "resourceArn"
            case resourceOwner = "resourceOwner"
            case principals = "principals"
            case resourceShareArns = "resourceShareArns"
            case nextToken = "nextToken"
        }
    }

    public struct AssociateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list)
        ]
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The principals.
        public let principals: [String]?

        public init(resourceArns: [String]? = nil, resourceShareArn: String, clientToken: String? = nil, principals: [String]? = nil) {
            self.resourceArns = resourceArns
            self.resourceShareArn = resourceShareArn
            self.clientToken = clientToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "resourceArns"
            case resourceShareArn = "resourceShareArn"
            case clientToken = "clientToken"
            case principals = "principals"
        }
    }

    public struct GetResourceShareInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitations", required: false, type: .list)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the invitations.
        public let resourceShareInvitations: [ResourceShareInvitation]?

        public init(nextToken: String? = nil, resourceShareInvitations: [ResourceShareInvitation]? = nil) {
            self.nextToken = nextToken
            self.resourceShareInvitations = resourceShareInvitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceShareInvitations = "resourceShareInvitations"
        }
    }

    public struct ListResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceType", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The principal.
        public let principal: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The resource type.
        public let resourceType: String?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(resourceOwner: ResourceOwner, principal: String? = nil, maxResults: Int32? = nil, resourceShareArns: [String]? = nil, resourceType: String? = nil, resourceArns: [String]? = nil, nextToken: String? = nil) {
            self.resourceOwner = resourceOwner
            self.principal = principal
            self.maxResults = maxResults
            self.resourceShareArns = resourceShareArns
            self.resourceType = resourceType
            self.resourceArns = resourceArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceOwner = "resourceOwner"
            case principal = "principal"
            case maxResults = "maxResults"
            case resourceShareArns = "resourceShareArns"
            case resourceType = "resourceType"
            case resourceArns = "resourceArns"
            case nextToken = "nextToken"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagKeys", required: true, type: .list), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]
        /// The tag keys of the tags to remove.
        public let tagKeys: [String]
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(tagKeys: [String], resourceShareArn: String) {
            self.tagKeys = tagKeys
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "tagKeys"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct EnableSharingWithAwsOrganizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]
        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
        }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "external", required: false, type: .boolean)
        ]
        /// The ID of the principal.
        public let id: String?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The time when the principal was associated with the resource share.
        public let creationTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// Indicates whether the principal belongs to the same organization as the AWS account that owns the resource share.
        public let external: Bool?

        public init(id: String? = nil, lastUpdatedTime: TimeStamp? = nil, creationTime: TimeStamp? = nil, resourceShareArn: String? = nil, external: Bool? = nil) {
            self.id = id
            self.lastUpdatedTime = lastUpdatedTime
            self.creationTime = creationTime
            self.resourceShareArn = resourceShareArn
            self.external = external
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case lastUpdatedTime = "lastUpdatedTime"
            case creationTime = "creationTime"
            case resourceShareArn = "resourceShareArn"
            case external = "external"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "type", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let arn: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The time when the resource was associated with the resource share.
        public let creationTime: TimeStamp?
        /// The resource type.
        public let `type`: String?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// A message about the status of the resource.
        public let statusMessage: String?
        /// The status of the resource.
        public let status: ResourceStatus?

        public init(arn: String? = nil, resourceShareArn: String? = nil, creationTime: TimeStamp? = nil, type: String? = nil, lastUpdatedTime: TimeStamp? = nil, statusMessage: String? = nil, status: ResourceStatus? = nil) {
            self.arn = arn
            self.resourceShareArn = resourceShareArn
            self.creationTime = creationTime
            self.`type` = `type`
            self.lastUpdatedTime = lastUpdatedTime
            self.statusMessage = statusMessage
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case resourceShareArn = "resourceShareArn"
            case creationTime = "creationTime"
            case `type` = "type"
            case lastUpdatedTime = "lastUpdatedTime"
            case statusMessage = "statusMessage"
            case status = "status"
        }
    }

}