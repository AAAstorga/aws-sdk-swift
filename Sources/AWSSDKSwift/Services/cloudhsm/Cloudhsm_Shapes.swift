// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cloudhsm {

    public struct ModifyHapgResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        public init(dictionary: [String: Any]) throws {
            self.hapgArn = dictionary["HapgArn"] as? String
        }
    }

    public struct DeleteHsmResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
        }
    }

    public struct DescribeHsmRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter must be specified.
        public let hsmSerialNumber: String?
        /// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be specified.
        public let hsmArn: String?

        public init(hsmSerialNumber: String? = nil, hsmArn: String? = nil) {
            self.hsmSerialNumber = hsmSerialNumber
            self.hsmArn = hsmArn
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmSerialNumber = dictionary["HsmSerialNumber"] as? String
            self.hsmArn = dictionary["HsmArn"] as? String
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One or more tags.
        public let tagList: [Tag]

        public init(tagList: [Tag]) {
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            guard let tagList = dictionary["TagList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagList") }
            self.tagList = try tagList.map({ try Tag(dictionary: $0) })
        }
    }

    public struct CreateHapgRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The label of the new high-availability partition group.
        public let label: String

        public init(label: String) {
            self.label = label
        }

        public init(dictionary: [String: Any]) throws {
            guard let label = dictionary["Label"] as? String else { throw InitializableError.missingRequiredParam("Label") }
            self.label = label
        }
    }

    public struct GetConfigRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the client.
        public let clientArn: String
        /// A list of ARNs that identify the high-availability partition groups that are associated with the client.
        public let hapgList: [String]
        /// The client version.
        public let clientVersion: ClientVersion

        public init(clientArn: String, hapgList: [String], clientVersion: ClientVersion) {
            self.clientArn = clientArn
            self.hapgList = hapgList
            self.clientVersion = clientVersion
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientArn = dictionary["ClientArn"] as? String else { throw InitializableError.missingRequiredParam("ClientArn") }
            self.clientArn = clientArn
            guard let hapgList = dictionary["HapgList"] as? [String] else { throw InitializableError.missingRequiredParam("HapgList") }
            self.hapgList = hapgList
            guard let rawClientVersion = dictionary["ClientVersion"] as? String, let clientVersion = ClientVersion(rawValue: rawClientVersion) else { throw InitializableError.missingRequiredParam("ClientVersion") }
            self.clientVersion = clientVersion
        }
    }

    public struct ModifyHapgRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new label for the high-availability partition group.
        public let label: String?
        /// The ARN of the high-availability partition group to modify.
        public let hapgArn: String
        /// The list of partition serial numbers to make members of the high-availability partition group.
        public let partitionSerialList: [String]?

        public init(label: String? = nil, hapgArn: String, partitionSerialList: [String]? = nil) {
            self.label = label
            self.hapgArn = hapgArn
            self.partitionSerialList = partitionSerialList
        }

        public init(dictionary: [String: Any]) throws {
            self.label = dictionary["Label"] as? String
            guard let hapgArn = dictionary["HapgArn"] as? String else { throw InitializableError.missingRequiredParam("HapgArn") }
            self.hapgArn = hapgArn
            self.partitionSerialList = dictionary["PartitionSerialList"] as? [String]
        }
    }

    public struct ListLunaClientsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The NextToken value from a previous call to ListLunaClients. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateLunaClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this client.
        public let certificate: String
        /// The label for the client.
        public let label: String?

        public init(certificate: String, label: String? = nil) {
            self.certificate = certificate
            self.label = label
        }

        public init(dictionary: [String: Any]) throws {
            guard let certificate = dictionary["Certificate"] as? String else { throw InitializableError.missingRequiredParam("Certificate") }
            self.certificate = certificate
            self.label = dictionary["Label"] as? String
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible {
        case production = "PRODUCTION"
        public var description: String { return self.rawValue }
    }

    public enum CloudHsmObjectState: String, CustomStringConvertible {
        case ready = "READY"
        case updating = "UPDATING"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct ModifyLunaClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new certificate for the client.
        public let certificate: String
        /// The ARN of the client.
        public let clientArn: String

        public init(certificate: String, clientArn: String) {
            self.certificate = certificate
            self.clientArn = clientArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let certificate = dictionary["Certificate"] as? String else { throw InitializableError.missingRequiredParam("Certificate") }
            self.certificate = certificate
            guard let clientArn = dictionary["ClientArn"] as? String else { throw InitializableError.missingRequiredParam("ClientArn") }
            self.clientArn = clientArn
        }
    }

    public struct DescribeLunaClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the client.
        public let clientArn: String?
        /// The certificate fingerprint.
        public let certificateFingerprint: String?

        public init(clientArn: String? = nil, certificateFingerprint: String? = nil) {
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
        }

        public init(dictionary: [String: Any]) throws {
            self.clientArn = dictionary["ClientArn"] as? String
            self.certificateFingerprint = dictionary["CertificateFingerprint"] as? String
        }
    }

    public struct GetConfigResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of credentials.
        public let configType: String?
        /// The chrystoki.conf configuration file.
        public let configFile: String?
        /// The certificate file containing the server.pem files of the HSMs.
        public let configCred: String?

        public init(configType: String? = nil, configFile: String? = nil, configCred: String? = nil) {
            self.configType = configType
            self.configFile = configFile
            self.configCred = configCred
        }

        public init(dictionary: [String: Any]) throws {
            self.configType = dictionary["ConfigType"] as? String
            self.configFile = dictionary["ConfigFile"] as? String
            self.configCred = dictionary["ConfigCred"] as? String
        }
    }

    public enum HsmStatus: String, CustomStringConvertible {
        case pending = "PENDING"
        case running = "RUNNING"
        case updating = "UPDATING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteHsmRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the HSM to delete.
        public let hsmArn: String

        public init(hsmArn: String) {
            self.hsmArn = hsmArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let hsmArn = dictionary["HsmArn"] as? String else { throw InitializableError.missingRequiredParam("HsmArn") }
            self.hsmArn = hsmArn
        }
    }

    public struct ListHsmsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The NextToken value from a previous call to ListHsms. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct ModifyHsmRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The new external ID.
        public let externalId: String?
        /// The new identifier of the subnet that the HSM is in. The new subnet must be in the same Availability Zone as the current subnet.
        public let subnetId: String?
        /// The new IP address for the elastic network interface (ENI) attached to the HSM. If the HSM is moved to a different subnet, and an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the new subnet.
        public let eniIp: String?
        /// The new IAM role ARN.
        public let iamRoleArn: String?
        /// The new IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// The ARN of the HSM to modify.
        public let hsmArn: String

        public init(externalId: String? = nil, subnetId: String? = nil, eniIp: String? = nil, iamRoleArn: String? = nil, syslogIp: String? = nil, hsmArn: String) {
            self.externalId = externalId
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.syslogIp = syslogIp
            self.hsmArn = hsmArn
        }

        public init(dictionary: [String: Any]) throws {
            self.externalId = dictionary["ExternalId"] as? String
            self.subnetId = dictionary["SubnetId"] as? String
            self.eniIp = dictionary["EniIp"] as? String
            self.iamRoleArn = dictionary["IamRoleArn"] as? String
            self.syslogIp = dictionary["SyslogIp"] as? String
            guard let hsmArn = dictionary["HsmArn"] as? String else { throw InitializableError.missingRequiredParam("HsmArn") }
            self.hsmArn = hsmArn
        }
    }

    public struct DescribeHapgResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let hsmsPendingDeletion: [String]?
        /// The state of the high-availability partition group.
        public let state: CloudHsmObjectState?
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?
        /// The serial number of the high-availability partition group.
        public let hapgSerial: String?
        public let hsmsLastActionFailed: [String]?
        /// The list of partition serial numbers that belong to the high-availability partition group.
        public let partitionSerialList: [String]?
        public let hsmsPendingRegistration: [String]?
        /// The date and time the high-availability partition group was last modified.
        public let lastModifiedTimestamp: String?
        /// The label for the high-availability partition group.
        public let label: String?

        public init(hsmsPendingDeletion: [String]? = nil, state: CloudHsmObjectState? = nil, hapgArn: String? = nil, hapgSerial: String? = nil, hsmsLastActionFailed: [String]? = nil, partitionSerialList: [String]? = nil, hsmsPendingRegistration: [String]? = nil, lastModifiedTimestamp: String? = nil, label: String? = nil) {
            self.hsmsPendingDeletion = hsmsPendingDeletion
            self.state = state
            self.hapgArn = hapgArn
            self.hapgSerial = hapgSerial
            self.hsmsLastActionFailed = hsmsLastActionFailed
            self.partitionSerialList = partitionSerialList
            self.hsmsPendingRegistration = hsmsPendingRegistration
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.label = label
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmsPendingDeletion = dictionary["HsmsPendingDeletion"] as? [String]
            if let state = dictionary["State"] as? String { self.state = CloudHsmObjectState(rawValue: state) } else { self.state = nil }
            self.hapgArn = dictionary["HapgArn"] as? String
            self.hapgSerial = dictionary["HapgSerial"] as? String
            self.hsmsLastActionFailed = dictionary["HsmsLastActionFailed"] as? [String]
            self.partitionSerialList = dictionary["PartitionSerialList"] as? [String]
            self.hsmsPendingRegistration = dictionary["HsmsPendingRegistration"] as? [String]
            self.lastModifiedTimestamp = dictionary["LastModifiedTimestamp"] as? String
            self.label = dictionary["Label"] as? String
        }
    }

    public struct DescribeLunaClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The certificate installed on the HSMs used by this client.
        public let certificate: String?
        /// The date and time the client was last modified.
        public let lastModifiedTimestamp: String?
        /// The ARN of the client.
        public let clientArn: String?
        /// The certificate fingerprint.
        public let certificateFingerprint: String?
        /// The label of the client.
        public let label: String?

        public init(certificate: String? = nil, lastModifiedTimestamp: String? = nil, clientArn: String? = nil, certificateFingerprint: String? = nil, label: String? = nil) {
            self.certificate = certificate
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
            self.label = label
        }

        public init(dictionary: [String: Any]) throws {
            self.certificate = dictionary["Certificate"] as? String
            self.lastModifiedTimestamp = dictionary["LastModifiedTimestamp"] as? String
            self.clientArn = dictionary["ClientArn"] as? String
            self.certificateFingerprint = dictionary["CertificateFingerprint"] as? String
            self.label = dictionary["Label"] as? String
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The value of the tag.
        public let value: String
        /// The key of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
        }
    }

    public struct DeleteHapgRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the high-availability partition group to delete.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let hapgArn = dictionary["HapgArn"] as? String else { throw InitializableError.missingRequiredParam("HapgArn") }
            self.hapgArn = hapgArn
        }
    }

    public struct DescribeHsmResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Contains additional information about the status of the HSM.
        public let statusDetails: String?
        /// The identifier of the subnet that the HSM is in.
        public let subnetId: String?
        /// The IP address assigned to the HSM's ENI.
        public let eniIp: String?
        /// The identifier of the elastic network interface (ENI) attached to the HSM.
        public let eniId: String?
        /// The ARN of the HSM.
        public let hsmArn: String?
        /// The public SSH key.
        public let sshPublicKey: String?
        /// The subscription end date.
        public let subscriptionEndDate: String?
        /// The date and time that the SSH key was last updated.
        public let sshKeyLastUpdated: String?
        /// The serial number of the HSM.
        public let serialNumber: String?
        /// The Availability Zone that the HSM is in.
        public let availabilityZone: String?
        /// The status of the HSM.
        public let status: HsmStatus?
        /// The ARN of the IAM role assigned to the HSM.
        public let iamRoleArn: String?
        /// The date and time that the server certificate was last updated.
        public let serverCertLastUpdated: String?
        /// The identifier of the VPC that the HSM is in.
        public let vpcId: String?
        public let subscriptionType: SubscriptionType?
        /// The URI of the certificate server.
        public let serverCertUri: String?
        /// The list of partitions on the HSM.
        public let partitions: [String]?
        /// The HSM software version.
        public let softwareVersion: String?
        /// The HSM model type.
        public let hsmType: String?
        /// The subscription start date.
        public let subscriptionStartDate: String?
        /// The name of the HSM vendor.
        public let vendorName: String?

        public init(statusDetails: String? = nil, subnetId: String? = nil, eniIp: String? = nil, eniId: String? = nil, hsmArn: String? = nil, sshPublicKey: String? = nil, subscriptionEndDate: String? = nil, sshKeyLastUpdated: String? = nil, serialNumber: String? = nil, availabilityZone: String? = nil, status: HsmStatus? = nil, iamRoleArn: String? = nil, serverCertLastUpdated: String? = nil, vpcId: String? = nil, subscriptionType: SubscriptionType? = nil, serverCertUri: String? = nil, partitions: [String]? = nil, softwareVersion: String? = nil, hsmType: String? = nil, subscriptionStartDate: String? = nil, vendorName: String? = nil) {
            self.statusDetails = statusDetails
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.eniId = eniId
            self.hsmArn = hsmArn
            self.sshPublicKey = sshPublicKey
            self.subscriptionEndDate = subscriptionEndDate
            self.sshKeyLastUpdated = sshKeyLastUpdated
            self.serialNumber = serialNumber
            self.availabilityZone = availabilityZone
            self.status = status
            self.iamRoleArn = iamRoleArn
            self.serverCertLastUpdated = serverCertLastUpdated
            self.vpcId = vpcId
            self.subscriptionType = subscriptionType
            self.serverCertUri = serverCertUri
            self.partitions = partitions
            self.softwareVersion = softwareVersion
            self.hsmType = hsmType
            self.subscriptionStartDate = subscriptionStartDate
            self.vendorName = vendorName
        }

        public init(dictionary: [String: Any]) throws {
            self.statusDetails = dictionary["StatusDetails"] as? String
            self.subnetId = dictionary["SubnetId"] as? String
            self.eniIp = dictionary["EniIp"] as? String
            self.eniId = dictionary["EniId"] as? String
            self.hsmArn = dictionary["HsmArn"] as? String
            self.sshPublicKey = dictionary["SshPublicKey"] as? String
            self.subscriptionEndDate = dictionary["SubscriptionEndDate"] as? String
            self.sshKeyLastUpdated = dictionary["SshKeyLastUpdated"] as? String
            self.serialNumber = dictionary["SerialNumber"] as? String
            self.availabilityZone = dictionary["AvailabilityZone"] as? String
            if let status = dictionary["Status"] as? String { self.status = HsmStatus(rawValue: status) } else { self.status = nil }
            self.iamRoleArn = dictionary["IamRoleArn"] as? String
            self.serverCertLastUpdated = dictionary["ServerCertLastUpdated"] as? String
            self.vpcId = dictionary["VpcId"] as? String
            if let subscriptionType = dictionary["SubscriptionType"] as? String { self.subscriptionType = SubscriptionType(rawValue: subscriptionType) } else { self.subscriptionType = nil }
            self.serverCertUri = dictionary["ServerCertUri"] as? String
            self.partitions = dictionary["Partitions"] as? [String]
            self.softwareVersion = dictionary["SoftwareVersion"] as? String
            self.hsmType = dictionary["HsmType"] as? String
            self.subscriptionStartDate = dictionary["SubscriptionStartDate"] as? String
            self.vendorName = dictionary["VendorName"] as? String
        }
    }

    public struct ListLunaClientsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If not null, more results are available. Pass this to ListLunaClients to retrieve the next set of items.
        public let nextToken: String?
        /// The list of clients.
        public let clientList: [String]

        public init(nextToken: String? = nil, clientList: [String]) {
            self.nextToken = nextToken
            self.clientList = clientList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let clientList = dictionary["ClientList"] as? [String] else { throw InitializableError.missingRequiredParam("ClientList") }
            self.clientList = clientList
        }
    }

    public struct DeleteLunaClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
        }
    }

    public struct ListAvailableZonesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of Availability Zones that have available AWS CloudHSM capacity.
        public let aZList: [String]?

        public init(aZList: [String]? = nil) {
            self.aZList = aZList
        }

        public init(dictionary: [String: Any]) throws {
            self.aZList = dictionary["AZList"] as? [String]
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource to tag.
        public let resourceArn: String
        /// One or more tags.
        public let tagList: [Tag]

        public init(resourceArn: String, tagList: [Tag]) {
            self.resourceArn = resourceArn
            self.tagList = tagList
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
            guard let tagList = dictionary["TagList"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("TagList") }
            self.tagList = try tagList.map({ try Tag(dictionary: $0) })
        }
    }

    public struct CreateLunaClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        public init(dictionary: [String: Any]) throws {
            self.clientArn = dictionary["ClientArn"] as? String
        }
    }

    public struct CreateHapgResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        public init(dictionary: [String: Any]) throws {
            self.hapgArn = dictionary["HapgArn"] as? String
        }
    }

    public struct CreateHsmResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmArn = dictionary["HsmArn"] as? String
        }
    }

    public struct ListHapgsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If not null, more results are available. Pass this value to ListHapgs to retrieve the next set of items.
        public let nextToken: String?
        /// The list of high-availability partition groups.
        public let hapgList: [String]

        public init(nextToken: String? = nil, hapgList: [String]) {
            self.nextToken = nextToken
            self.hapgList = hapgList
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            guard let hapgList = dictionary["HapgList"] as? [String] else { throw InitializableError.missingRequiredParam("HapgList") }
            self.hapgList = hapgList
        }
    }

    public struct CreateHsmRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The identifier of the subnet in your VPC in which to place the HSM.
        public let subnetId: String
        /// A user-defined token to ensure idempotence. Subsequent calls to this operation with the same token will be ignored.
        public let clientToken: String?
        /// The IP address to assign to the HSM's ENI. If an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the subnet.
        public let eniIp: String?
        /// The ARN of an IAM role to enable the AWS CloudHSM service to allocate an ENI on your behalf.
        public let iamRoleArn: String
        /// The SSH public key to install on the HSM.
        public let sshKey: String
        public let subscriptionType: SubscriptionType
        /// The IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// The external ID from IamRoleArn, if present.
        public let externalId: String?

        public init(subnetId: String, clientToken: String? = nil, eniIp: String? = nil, iamRoleArn: String, sshKey: String, subscriptionType: SubscriptionType, syslogIp: String? = nil, externalId: String? = nil) {
            self.subnetId = subnetId
            self.clientToken = clientToken
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.sshKey = sshKey
            self.subscriptionType = subscriptionType
            self.syslogIp = syslogIp
            self.externalId = externalId
        }

        public init(dictionary: [String: Any]) throws {
            guard let subnetId = dictionary["SubnetId"] as? String else { throw InitializableError.missingRequiredParam("SubnetId") }
            self.subnetId = subnetId
            self.clientToken = dictionary["ClientToken"] as? String
            self.eniIp = dictionary["EniIp"] as? String
            guard let iamRoleArn = dictionary["IamRoleArn"] as? String else { throw InitializableError.missingRequiredParam("IamRoleArn") }
            self.iamRoleArn = iamRoleArn
            guard let sshKey = dictionary["SshKey"] as? String else { throw InitializableError.missingRequiredParam("SshKey") }
            self.sshKey = sshKey
            guard let rawSubscriptionType = dictionary["SubscriptionType"] as? String, let subscriptionType = SubscriptionType(rawValue: rawSubscriptionType) else { throw InitializableError.missingRequiredParam("SubscriptionType") }
            self.subscriptionType = subscriptionType
            self.syslogIp = dictionary["SyslogIp"] as? String
            self.externalId = dictionary["ExternalId"] as? String
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tag key or keys to remove. Specify only the tag key to remove (not the value). To overwrite the value for an existing tag, use AddTagsToResource.
        public let tagKeyList: [String]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(tagKeyList: [String], resourceArn: String) {
            self.tagKeyList = tagKeyList
            self.resourceArn = resourceArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let tagKeyList = dictionary["TagKeyList"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeyList") }
            self.tagKeyList = tagKeyList
            guard let resourceArn = dictionary["ResourceArn"] as? String else { throw InitializableError.missingRequiredParam("ResourceArn") }
            self.resourceArn = resourceArn
        }
    }

    public struct ListAvailableZonesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DeleteHapgResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        public init(dictionary: [String: Any]) throws {
            guard let status = dictionary["Status"] as? String else { throw InitializableError.missingRequiredParam("Status") }
            self.status = status
        }
    }

    public struct DeleteLunaClientRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the client to delete.
        public let clientArn: String

        public init(clientArn: String) {
            self.clientArn = clientArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let clientArn = dictionary["ClientArn"] as? String else { throw InitializableError.missingRequiredParam("ClientArn") }
            self.clientArn = clientArn
        }
    }

    public struct ListHsmsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of ARNs that identify the HSMs.
        public let hsmList: [String]?
        /// If not null, more results are available. Pass this value to ListHsms to retrieve the next set of items.
        public let nextToken: String?

        public init(hsmList: [String]? = nil, nextToken: String? = nil) {
            self.hsmList = hsmList
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmList = dictionary["HsmList"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeHapgRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the high-availability partition group to describe.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let hapgArn = dictionary["HapgArn"] as? String else { throw InitializableError.missingRequiredParam("HapgArn") }
            self.hapgArn = hapgArn
        }
    }

    public struct ModifyLunaClientResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        public init(dictionary: [String: Any]) throws {
            self.clientArn = dictionary["ClientArn"] as? String
        }
    }

    public struct ModifyHsmResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        public init(dictionary: [String: Any]) throws {
            self.hsmArn = dictionary["HsmArn"] as? String
        }
    }

    public struct ListHapgsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The NextToken value from a previous call to ListHapgs. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum ClientVersion: String, CustomStringConvertible {
        case _5_1 = "5.1"
        case _5_3 = "5.3"
        public var description: String { return self.rawValue }
    }

}