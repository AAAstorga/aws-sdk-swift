// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension LicenseManager {

    public struct DeleteLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string)
        ]
        /// Unique ID of the configuration object to delete.
        public let licenseConfigurationArn: String

        public init(licenseConfigurationArn: String) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct CreateLicenseConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]
        /// ARN of the license configuration object after its creation.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// ARN of the resource.
        public let resourceArn: String
        /// List keys identifying tags to remove.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Condition", required: true, type: .enum)
        ]
        /// Value of the filter.
        public let value: String?
        /// The name of the filter.
        public let name: String
        /// The condition of the filter.
        public let condition: InventoryFilterCondition

        public init(value: String? = nil, name: String, condition: InventoryFilterCondition) {
            self.value = value
            self.name = name
            self.condition = condition
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
            case condition = "Condition"
        }
    }

    public struct OrganizationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableIntegration", required: true, type: .boolean)
        ]
        /// Flag to activate AWS Organization integration.
        public let enableIntegration: Bool

        public init(enableIntegration: Bool) {
            self.enableIntegration = enableIntegration
        }

        private enum CodingKeys: String, CodingKey {
            case enableIntegration = "EnableIntegration"
        }
    }

    public struct ResourceInventory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceOwningAccountId", required: false, type: .string), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string)
        ]
        /// The type of resource.
        public let resourceType: ResourceType?
        /// Unique ID of the account that owns the resource.
        public let resourceOwningAccountId: String?
        /// Platform version of the resource in the inventory.
        public let platformVersion: String?
        /// Unique ID of the resource.
        public let resourceId: String?
        /// The ARN of the resource.
        public let resourceArn: String?
        /// The platform of the resource.
        public let platform: String?

        public init(resourceType: ResourceType? = nil, resourceOwningAccountId: String? = nil, platformVersion: String? = nil, resourceId: String? = nil, resourceArn: String? = nil, platform: String? = nil) {
            self.resourceType = resourceType
            self.resourceOwningAccountId = resourceOwningAccountId
            self.platformVersion = platformVersion
            self.resourceId = resourceId
            self.resourceArn = resourceArn
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceOwningAccountId = "ResourceOwningAccountId"
            case platformVersion = "PlatformVersion"
            case resourceId = "ResourceId"
            case resourceArn = "ResourceArn"
            case platform = "Platform"
        }
    }

    public struct ListLicenseSpecificationsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Token for the next set of results.
        public let nextToken: String?
        /// ARN of an AMI or Amazon EC2 instance that has an associated license configuration.
        public let resourceArn: String
        /// Maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, resourceArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceArn = "ResourceArn"
            case maxResults = "MaxResults"
        }
    }

    public struct ListAssociationsForLicenseConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LicenseConfigurationAssociations", required: false, type: .list)
        ]
        /// Token for the next set of results.
        public let nextToken: String?
        /// Lists association objects for the license configuration, each containing the association time, number of consumed licenses, resource ARN, resource ID, account ID that owns the resource, resource size, and resource type.
        public let licenseConfigurationAssociations: [LicenseConfigurationAssociation]?

        public init(nextToken: String? = nil, licenseConfigurationAssociations: [LicenseConfigurationAssociation]? = nil) {
            self.nextToken = nextToken
            self.licenseConfigurationAssociations = licenseConfigurationAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case licenseConfigurationAssociations = "LicenseConfigurationAssociations"
        }
    }

    public struct UpdateLicenseSpecificationsForResourceResponse: AWSShape {

    }

    public struct ListUsageForLicenseConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LicenseConfigurationUsageList", required: false, type: .list)
        ]
        /// Token for the next set of results.
        public let nextToken: String?
        /// An array of LicenseConfigurationUsage objects.
        public let licenseConfigurationUsageList: [LicenseConfigurationUsage]?

        public init(nextToken: String? = nil, licenseConfigurationUsageList: [LicenseConfigurationUsage]? = nil) {
            self.nextToken = nextToken
            self.licenseConfigurationUsageList = licenseConfigurationUsageList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case licenseConfigurationUsageList = "LicenseConfigurationUsageList"
        }
    }

    public struct LicenseConfigurationAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceOwnerId", required: false, type: .string)
        ]
        /// Type of server resource.
        public let resourceType: ResourceType?
        /// ARN of the resource associated with the license configuration.
        public let resourceArn: String?
        /// Time when the license configuration was associated with the resource.
        public let associationTime: TimeStamp?
        /// ID of the AWS account that owns the resource consuming licenses.
        public let resourceOwnerId: String?

        public init(resourceType: ResourceType? = nil, resourceArn: String? = nil, associationTime: TimeStamp? = nil, resourceOwnerId: String? = nil) {
            self.resourceType = resourceType
            self.resourceArn = resourceArn
            self.associationTime = associationTime
            self.resourceOwnerId = resourceOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceArn = "ResourceArn"
            case associationTime = "AssociationTime"
            case resourceOwnerId = "ResourceOwnerId"
        }
    }

    public struct UpdateLicenseConfigurationResponse: AWSShape {

    }

    public struct GetServiceSettingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketArn", required: false, type: .string), 
            AWSShapeMember(label: "EnableCrossAccountsDiscovery", required: false, type: .boolean), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationConfiguration", required: false, type: .structure)
        ]
        /// Regional S3 bucket path for storing reports, license trail event data, discovery data, etc.
        public let s3BucketArn: String?
        /// Indicates whether cross-account discovery has been enabled.
        public let enableCrossAccountsDiscovery: Bool?
        /// SNS topic configured to receive notifications from License Manager.
        public let snsTopicArn: String?
        /// Indicates whether AWS Organizations has been integrated with License Manager for cross-account discovery.
        public let organizationConfiguration: OrganizationConfiguration?

        public init(s3BucketArn: String? = nil, enableCrossAccountsDiscovery: Bool? = nil, snsTopicArn: String? = nil, organizationConfiguration: OrganizationConfiguration? = nil) {
            self.s3BucketArn = s3BucketArn
            self.enableCrossAccountsDiscovery = enableCrossAccountsDiscovery
            self.snsTopicArn = snsTopicArn
            self.organizationConfiguration = organizationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketArn = "S3BucketArn"
            case enableCrossAccountsDiscovery = "EnableCrossAccountsDiscovery"
            case snsTopicArn = "SnsTopicArn"
            case organizationConfiguration = "OrganizationConfiguration"
        }
    }

    public struct GetServiceSettingsRequest: AWSShape {

    }

    public enum LicenseCountingType: String, CustomStringConvertible, Codable {
        case vcpu = "vCPU"
        case instance = "Instance"
        case core = "Core"
        case socket = "Socket"
        public var description: String { return self.rawValue }
    }

    public struct ConsumedLicenseSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "ConsumedLicenses", required: false, type: .long)
        ]
        /// Resource type of the resource consuming a license (instance, host, or AMI).
        public let resourceType: ResourceType?
        /// Number of licenses consumed by a resource.
        public let consumedLicenses: Int64?

        public init(resourceType: ResourceType? = nil, consumedLicenses: Int64? = nil) {
            self.resourceType = resourceType
            self.consumedLicenses = consumedLicenses
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case consumedLicenses = "ConsumedLicenses"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// Names of the tags to attach to the resource.
        public let tags: [Tag]
        /// Resource of the ARN to be tagged.
        public let resourceArn: String

        public init(tags: [Tag], resourceArn: String) {
            self.tags = tags
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListLicenseSpecificationsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseSpecifications", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// License configurations associated with a resource.
        public let licenseSpecifications: [LicenseSpecification]?
        /// Token for the next set of results.
        public let nextToken: String?

        public init(licenseSpecifications: [LicenseSpecification]? = nil, nextToken: String? = nil) {
            self.licenseSpecifications = licenseSpecifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case licenseSpecifications = "LicenseSpecifications"
            case nextToken = "NextToken"
        }
    }

    public struct ListUsageForLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// ARN of the targeted LicenseConfiguration object.
        public let licenseConfigurationArn: String
        /// Maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// List of filters to apply.
        public let filters: [Filter]?
        /// Token for the next set of results.
        public let nextToken: String?

        public init(licenseConfigurationArn: String, maxResults: Int32? = nil, filters: [Filter]? = nil, nextToken: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteLicenseConfigurationResponse: AWSShape {

    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case ec2Instance = "EC2_INSTANCE"
        case ec2Host = "EC2_HOST"
        case ec2Ami = "EC2_AMI"
        public var description: String { return self.rawValue }
    }

    public struct ListAssociationsForLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// ARN of a LicenseConfiguration object.
        public let licenseConfigurationArn: String
        /// Token for the next set of results.
        public let nextToken: String?
        /// Maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(licenseConfigurationArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LicenseCountHardLimit", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseConfigurationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "LicenseRules", required: false, type: .list), 
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LicenseCount", required: false, type: .long)
        ]
        /// New human-friendly description of the license configuration.
        public let description: String?
        /// Sets the number of available licenses as a hard limit.
        public let licenseCountHardLimit: Bool?
        /// New status of the license configuration (ACTIVE or INACTIVE).
        public let licenseConfigurationStatus: LicenseConfigurationStatus?
        /// List of flexible text strings designating license rules.
        public let licenseRules: [String]?
        /// ARN for a license configuration.
        public let licenseConfigurationArn: String
        /// New name of the license configuration.
        public let name: String?
        /// New number of licenses managed by the license configuration.
        public let licenseCount: Int64?

        public init(description: String? = nil, licenseCountHardLimit: Bool? = nil, licenseConfigurationStatus: LicenseConfigurationStatus? = nil, licenseRules: [String]? = nil, licenseConfigurationArn: String, name: String? = nil, licenseCount: Int64? = nil) {
            self.description = description
            self.licenseCountHardLimit = licenseCountHardLimit
            self.licenseConfigurationStatus = licenseConfigurationStatus
            self.licenseRules = licenseRules
            self.licenseConfigurationArn = licenseConfigurationArn
            self.name = name
            self.licenseCount = licenseCount
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case licenseCountHardLimit = "LicenseCountHardLimit"
            case licenseConfigurationStatus = "LicenseConfigurationStatus"
            case licenseRules = "LicenseRules"
            case licenseConfigurationArn = "LicenseConfigurationArn"
            case name = "Name"
            case licenseCount = "LicenseCount"
        }
    }

    public struct UpdateLicenseSpecificationsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "AddLicenseSpecifications", required: false, type: .list), 
            AWSShapeMember(label: "RemoveLicenseSpecifications", required: false, type: .list)
        ]
        /// ARN for an AWS server resource.
        public let resourceArn: String
        /// License configuration ARNs to be added to a resource.
        public let addLicenseSpecifications: [LicenseSpecification]?
        /// License configuration ARNs to be removed from a resource.
        public let removeLicenseSpecifications: [LicenseSpecification]?

        public init(resourceArn: String, addLicenseSpecifications: [LicenseSpecification]? = nil, removeLicenseSpecifications: [LicenseSpecification]? = nil) {
            self.resourceArn = resourceArn
            self.addLicenseSpecifications = addLicenseSpecifications
            self.removeLicenseSpecifications = removeLicenseSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case addLicenseSpecifications = "AddLicenseSpecifications"
            case removeLicenseSpecifications = "RemoveLicenseSpecifications"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// One or more filter values. Filter values are case-sensitive.
        public let values: [String]?
        /// Name of the filter. Filter names are case-sensitive.
        public let name: String?

        public init(values: [String]? = nil, name: String? = nil) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public struct ManagedResourceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "AssociationCount", required: false, type: .long)
        ]
        /// Type of resource associated with a license (instance, host, or AMI).
        public let resourceType: ResourceType?
        /// Number of resources associated with licenses.
        public let associationCount: Int64?

        public init(resourceType: ResourceType? = nil, associationCount: Int64? = nil) {
            self.resourceType = resourceType
            self.associationCount = associationCount
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case associationCount = "AssociationCount"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// Value for the resource tag.
        public let value: String?
        /// Key for the resource tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public enum LicenseConfigurationStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct LicenseSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string)
        ]
        /// ARN of the LicenseConfiguration object.
        public let licenseConfigurationArn: String

        public init(licenseConfigurationArn: String) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct CreateLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseCountingType", required: true, type: .enum), 
            AWSShapeMember(label: "LicenseCountHardLimit", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LicenseRules", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "LicenseCount", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Dimension to use to track the license inventory.
        public let licenseCountingType: LicenseCountingType
        /// Flag indicating whether hard or soft license enforcement is used. Exceeding a hard limit results in the blocked deployment of new instances.
        public let licenseCountHardLimit: Bool?
        /// Human-friendly description of the license configuration.
        public let description: String?
        /// Array of configured License Manager rules.
        public let licenseRules: [String]?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags . 
        public let tags: [Tag]?
        /// Number of licenses managed by the license configuration.
        public let licenseCount: Int64?
        /// Name of the license configuration.
        public let name: String

        public init(licenseCountingType: LicenseCountingType, licenseCountHardLimit: Bool? = nil, description: String? = nil, licenseRules: [String]? = nil, tags: [Tag]? = nil, licenseCount: Int64? = nil, name: String) {
            self.licenseCountingType = licenseCountingType
            self.licenseCountHardLimit = licenseCountHardLimit
            self.description = description
            self.licenseRules = licenseRules
            self.tags = tags
            self.licenseCount = licenseCount
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case licenseCountingType = "LicenseCountingType"
            case licenseCountHardLimit = "LicenseCountHardLimit"
            case description = "Description"
            case licenseRules = "LicenseRules"
            case tags = "Tags"
            case licenseCount = "LicenseCount"
            case name = "Name"
        }
    }

    public struct ListLicenseConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LicenseConfigurations", required: false, type: .list)
        ]
        /// Token for the next set of results.
        public let nextToken: String?
        /// Array of license configuration objects.
        public let licenseConfigurations: [LicenseConfiguration]?

        public init(nextToken: String? = nil, licenseConfigurations: [LicenseConfiguration]? = nil) {
            self.nextToken = nextToken
            self.licenseConfigurations = licenseConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case licenseConfigurations = "LicenseConfigurations"
        }
    }

    public struct LicenseConfigurationUsage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "ConsumedLicenses", required: false, type: .long), 
            AWSShapeMember(label: "AssociationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceStatus", required: false, type: .string)
        ]
        /// ARN of the resource associated with a license configuration.
        public let resourceArn: String?
        /// Type of resource associated with athe license configuration.
        public let resourceType: ResourceType?
        /// Number of licenses consumed out of the total provisioned in the license configuration.
        public let consumedLicenses: Int64?
        /// Time when the license configuration was initially associated with a resource.
        public let associationTime: TimeStamp?
        /// ID of the account that owns a resource that is associated with the license configuration.
        public let resourceOwnerId: String?
        /// Status of a resource associated with the license configuration.
        public let resourceStatus: String?

        public init(resourceArn: String? = nil, resourceType: ResourceType? = nil, consumedLicenses: Int64? = nil, associationTime: TimeStamp? = nil, resourceOwnerId: String? = nil, resourceStatus: String? = nil) {
            self.resourceArn = resourceArn
            self.resourceType = resourceType
            self.consumedLicenses = consumedLicenses
            self.associationTime = associationTime
            self.resourceOwnerId = resourceOwnerId
            self.resourceStatus = resourceStatus
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case resourceType = "ResourceType"
            case consumedLicenses = "ConsumedLicenses"
            case associationTime = "AssociationTime"
            case resourceOwnerId = "ResourceOwnerId"
            case resourceStatus = "ResourceStatus"
        }
    }

    public struct LicenseConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string), 
            AWSShapeMember(label: "LicenseCountingType", required: false, type: .enum), 
            AWSShapeMember(label: "ConsumedLicenses", required: false, type: .long), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "OwnerAccountId", required: false, type: .string), 
            AWSShapeMember(label: "ManagedResourceSummaryList", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LicenseCountHardLimit", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseCount", required: false, type: .long), 
            AWSShapeMember(label: "LicenseConfigurationId", required: false, type: .string), 
            AWSShapeMember(label: "ConsumedLicenseSummaryList", required: false, type: .list), 
            AWSShapeMember(label: "LicenseRules", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// ARN of the LicenseConfiguration object.
        public let licenseConfigurationArn: String?
        /// Dimension to use to track license inventory.
        public let licenseCountingType: LicenseCountingType?
        /// Number of licenses consumed. 
        public let consumedLicenses: Int64?
        /// Status of the license configuration.
        public let status: String?
        /// Account ID of the license configuration's owner.
        public let ownerAccountId: String?
        /// List of summaries for managed resources.
        public let managedResourceSummaryList: [ManagedResourceSummary]?
        /// Name of the license configuration.
        public let name: String?
        /// Sets the number of available licenses as a hard limit.
        public let licenseCountHardLimit: Bool?
        /// Number of licenses managed by the license configuration.
        public let licenseCount: Int64?
        /// Unique ID of the LicenseConfiguration object.
        public let licenseConfigurationId: String?
        /// List of summaries for licenses consumed by various resources.
        public let consumedLicenseSummaryList: [ConsumedLicenseSummary]?
        /// Array of configured License Manager rules.
        public let licenseRules: [String]?
        /// Description of the license configuration.
        public let description: String?

        public init(licenseConfigurationArn: String? = nil, licenseCountingType: LicenseCountingType? = nil, consumedLicenses: Int64? = nil, status: String? = nil, ownerAccountId: String? = nil, managedResourceSummaryList: [ManagedResourceSummary]? = nil, name: String? = nil, licenseCountHardLimit: Bool? = nil, licenseCount: Int64? = nil, licenseConfigurationId: String? = nil, consumedLicenseSummaryList: [ConsumedLicenseSummary]? = nil, licenseRules: [String]? = nil, description: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
            self.licenseCountingType = licenseCountingType
            self.consumedLicenses = consumedLicenses
            self.status = status
            self.ownerAccountId = ownerAccountId
            self.managedResourceSummaryList = managedResourceSummaryList
            self.name = name
            self.licenseCountHardLimit = licenseCountHardLimit
            self.licenseCount = licenseCount
            self.licenseConfigurationId = licenseConfigurationId
            self.consumedLicenseSummaryList = consumedLicenseSummaryList
            self.licenseRules = licenseRules
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
            case licenseCountingType = "LicenseCountingType"
            case consumedLicenses = "ConsumedLicenses"
            case status = "Status"
            case ownerAccountId = "OwnerAccountId"
            case managedResourceSummaryList = "ManagedResourceSummaryList"
            case name = "Name"
            case licenseCountHardLimit = "LicenseCountHardLimit"
            case licenseCount = "LicenseCount"
            case licenseConfigurationId = "LicenseConfigurationId"
            case consumedLicenseSummaryList = "ConsumedLicenseSummaryList"
            case licenseRules = "LicenseRules"
            case description = "Description"
        }
    }

    public struct UpdateServiceSettingsResponse: AWSShape {

    }

    public enum InventoryFilterCondition: String, CustomStringConvertible, Codable {
        case equals = "EQUALS"
        case notEquals = "NOT_EQUALS"
        case beginsWith = "BEGINS_WITH"
        case contains = "CONTAINS"
        public var description: String { return self.rawValue }
    }

    public struct ListResourceInventoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceInventoryList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The detailed list of resources.
        public let resourceInventoryList: [ResourceInventory]?
        /// Token for the next set of results.
        public let nextToken: String?

        public init(resourceInventoryList: [ResourceInventory]? = nil, nextToken: String? = nil) {
            self.resourceInventoryList = resourceInventoryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceInventoryList = "ResourceInventoryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// List of tags attached to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct UpdateServiceSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketArn", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "EnableCrossAccountsDiscovery", required: false, type: .boolean), 
            AWSShapeMember(label: "OrganizationConfiguration", required: false, type: .structure)
        ]
        /// ARN of the Amazon S3 bucket where License Manager information is stored.
        public let s3BucketArn: String?
        /// ARN of the Amazon SNS topic used for License Manager alerts.
        public let snsTopicArn: String?
        /// Activates cross-account discovery.
        public let enableCrossAccountsDiscovery: Bool?
        /// Integrates AWS Organizations with License Manager for cross-account discovery.
        public let organizationConfiguration: OrganizationConfiguration?

        public init(s3BucketArn: String? = nil, snsTopicArn: String? = nil, enableCrossAccountsDiscovery: Bool? = nil, organizationConfiguration: OrganizationConfiguration? = nil) {
            self.s3BucketArn = s3BucketArn
            self.snsTopicArn = snsTopicArn
            self.enableCrossAccountsDiscovery = enableCrossAccountsDiscovery
            self.organizationConfiguration = organizationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketArn = "S3BucketArn"
            case snsTopicArn = "SnsTopicArn"
            case enableCrossAccountsDiscovery = "EnableCrossAccountsDiscovery"
            case organizationConfiguration = "OrganizationConfiguration"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// ARN for the resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListResourceInventoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// One or more filters.
        public let filters: [InventoryFilter]?
        /// Maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Token for the next set of results.
        public let nextToken: String?

        public init(filters: [InventoryFilter]? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: true, type: .string)
        ]
        /// ARN of the license configuration being requested.
        public let licenseConfigurationArn: String

        public init(licenseConfigurationArn: String) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct GetLicenseConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LicenseRules", required: false, type: .list), 
            AWSShapeMember(label: "ConsumedLicenses", required: false, type: .long), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LicenseConfigurationId", required: false, type: .string), 
            AWSShapeMember(label: "LicenseCountHardLimit", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseCount", required: false, type: .long), 
            AWSShapeMember(label: "LicenseCountingType", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ConsumedLicenseSummaryList", required: false, type: .list), 
            AWSShapeMember(label: "ManagedResourceSummaryList", required: false, type: .list), 
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string), 
            AWSShapeMember(label: "OwnerAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Description of the license configuration.
        public let description: String?
        /// List of flexible text strings designating license rules.
        public let licenseRules: [String]?
        /// Number of licenses assigned to resources.
        public let consumedLicenses: Int64?
        /// Name of the license configuration.
        public let name: String?
        /// Unique ID for the license configuration.
        public let licenseConfigurationId: String?
        /// Sets the number of available licenses as a hard limit.
        public let licenseCountHardLimit: Bool?
        /// Number of available licenses.
        public let licenseCount: Int64?
        /// Dimension on which the licenses are counted (for example, instances, cores, sockets, or VCPUs).
        public let licenseCountingType: LicenseCountingType?
        /// License configuration status (active, etc.).
        public let status: String?
        /// List of summaries for consumed licenses used by various resources.
        public let consumedLicenseSummaryList: [ConsumedLicenseSummary]?
        /// List of summaries of managed resources.
        public let managedResourceSummaryList: [ManagedResourceSummary]?
        /// ARN of the license configuration requested.
        public let licenseConfigurationArn: String?
        /// Owner account ID for the license configuration.
        public let ownerAccountId: String?
        /// List of tags attached to the license configuration.
        public let tags: [Tag]?

        public init(description: String? = nil, licenseRules: [String]? = nil, consumedLicenses: Int64? = nil, name: String? = nil, licenseConfigurationId: String? = nil, licenseCountHardLimit: Bool? = nil, licenseCount: Int64? = nil, licenseCountingType: LicenseCountingType? = nil, status: String? = nil, consumedLicenseSummaryList: [ConsumedLicenseSummary]? = nil, managedResourceSummaryList: [ManagedResourceSummary]? = nil, licenseConfigurationArn: String? = nil, ownerAccountId: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.licenseRules = licenseRules
            self.consumedLicenses = consumedLicenses
            self.name = name
            self.licenseConfigurationId = licenseConfigurationId
            self.licenseCountHardLimit = licenseCountHardLimit
            self.licenseCount = licenseCount
            self.licenseCountingType = licenseCountingType
            self.status = status
            self.consumedLicenseSummaryList = consumedLicenseSummaryList
            self.managedResourceSummaryList = managedResourceSummaryList
            self.licenseConfigurationArn = licenseConfigurationArn
            self.ownerAccountId = ownerAccountId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case licenseRules = "LicenseRules"
            case consumedLicenses = "ConsumedLicenses"
            case name = "Name"
            case licenseConfigurationId = "LicenseConfigurationId"
            case licenseCountHardLimit = "LicenseCountHardLimit"
            case licenseCount = "LicenseCount"
            case licenseCountingType = "LicenseCountingType"
            case status = "Status"
            case consumedLicenseSummaryList = "ConsumedLicenseSummaryList"
            case managedResourceSummaryList = "ManagedResourceSummaryList"
            case licenseConfigurationArn = "LicenseConfigurationArn"
            case ownerAccountId = "OwnerAccountId"
            case tags = "Tags"
        }
    }

    public struct ListLicenseConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArns", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of ARNs for the calling account’s license configurations.
        public let licenseConfigurationArns: [String]?
        /// Maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// One or more filters.
        public let filters: [Filter]?
        /// Token for the next set of results.
        public let nextToken: String?

        public init(licenseConfigurationArns: [String]? = nil, maxResults: Int32? = nil, filters: [Filter]? = nil, nextToken: String? = nil) {
            self.licenseConfigurationArns = licenseConfigurationArns
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArns = "LicenseConfigurationArns"
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

}