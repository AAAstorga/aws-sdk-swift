// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Storagegateway {

    public struct DeleteSnapshotScheduleOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeARN = dictionary["VolumeARN"] as? String
        }
    }

    public struct DeleteTapeArchiveOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct ResetCacheInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeGatewayInformationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct SetLocalConsolePasswordInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The password you want to set for your VM local console.
        public let localConsolePassword: String
        public let gatewayARN: String

        public init(localConsolePassword: String, gatewayARN: String) {
            self.localConsolePassword = localConsolePassword
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let localConsolePassword = dictionary["LocalConsolePassword"] as? String else { throw InitializableError.missingRequiredParam("LocalConsolePassword") }
            self.localConsolePassword = localConsolePassword
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeTapesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string which can be used as part of a subsequent DescribeTapes call to retrieve the next page of results. If a response does not contain a marker, then there are no more results to be retrieved.
        public let marker: String?
        /// An array of virtual tape descriptions.
        public let tapes: [Tape]?

        public init(marker: String? = nil, tapes: [Tape]? = nil) {
            self.marker = marker
            self.tapes = tapes
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let tapes = dictionary["Tapes"] as? [[String: Any]] {
                self.tapes = try tapes.map({ try Tape(dictionary: $0) })
            } else { 
                self.tapes = nil
            }
        }
    }

    public struct AddUploadBufferOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct RetrieveTapeArchiveInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).
        public let tapeARN: String
        /// The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the ListGateways operation to return a list of gateways for your account and region. You retrieve archived virtual tapes to only one gateway and the gateway must be a gateway-VTL.
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct CreateTapeWithBarcodeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tape with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// The size, in bytes, of the virtual tape that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// The barcode that you want to assign to the tape.
        public let tapeBarcode: String

        public init(gatewayARN: String, tapeSizeInBytes: Int64, tapeBarcode: String) {
            self.gatewayARN = gatewayARN
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64 else { throw InitializableError.missingRequiredParam("TapeSizeInBytes") }
            self.tapeSizeInBytes = tapeSizeInBytes
            guard let tapeBarcode = dictionary["TapeBarcode"] as? String else { throw InitializableError.missingRequiredParam("TapeBarcode") }
            self.tapeBarcode = tapeBarcode
        }
    }

    public struct CancelArchivalInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel archiving for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DeleteGatewayOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct DescribeCacheOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let cacheAllocatedInBytes: Int64?
        public let gatewayARN: String?
        public let cacheUsedPercentage: Double?
        public let cacheDirtyPercentage: Double?
        public let cacheHitPercentage: Double?
        public let cacheMissPercentage: Double?
        public let diskIds: [String]?

        public init(cacheAllocatedInBytes: Int64? = nil, gatewayARN: String? = nil, cacheUsedPercentage: Double? = nil, cacheDirtyPercentage: Double? = nil, cacheHitPercentage: Double? = nil, cacheMissPercentage: Double? = nil, diskIds: [String]? = nil) {
            self.cacheAllocatedInBytes = cacheAllocatedInBytes
            self.gatewayARN = gatewayARN
            self.cacheUsedPercentage = cacheUsedPercentage
            self.cacheDirtyPercentage = cacheDirtyPercentage
            self.cacheHitPercentage = cacheHitPercentage
            self.cacheMissPercentage = cacheMissPercentage
            self.diskIds = diskIds
        }

        public init(dictionary: [String: Any]) throws {
            self.cacheAllocatedInBytes = dictionary["CacheAllocatedInBytes"] as? Int64
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.cacheUsedPercentage = dictionary["CacheUsedPercentage"] as? Double
            self.cacheDirtyPercentage = dictionary["CacheDirtyPercentage"] as? Double
            self.cacheHitPercentage = dictionary["CacheHitPercentage"] as? Double
            self.cacheMissPercentage = dictionary["CacheMissPercentage"] as? Double
            self.diskIds = dictionary["DiskIds"] as? [String]
        }
    }

    public struct DescribeNFSFileSharesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array containing a description for each requested file share. 
        public let nFSFileShareInfoList: [NFSFileShareInfo]?

        public init(nFSFileShareInfoList: [NFSFileShareInfo]? = nil) {
            self.nFSFileShareInfoList = nFSFileShareInfoList
        }

        public init(dictionary: [String: Any]) throws {
            if let nFSFileShareInfoList = dictionary["NFSFileShareInfoList"] as? [[String: Any]] {
                self.nFSFileShareInfoList = try nFSFileShareInfoList.map({ try NFSFileShareInfo(dictionary: $0) })
            } else { 
                self.nFSFileShareInfoList = nil
            }
        }
    }

    public struct NFSFileShareDefaults: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The default owner ID for files in the file share (unless the files have another owner ID specified). The default value is nfsnobody. 
        public let ownerId: Int64?
        /// The Unix file mode in the form "nnnn". For example, "0666" represents the default file mode inside the file share. The default value is 0666. 
        public let fileMode: String?
        /// The default group ID for the file share (unless the files have another group ID specified). The default value is nfsnobody. 
        public let groupId: Int64?
        /// The Unix directory mode in the form "nnnn". For example, "0666" represents the default access mode for all directories inside the file share. The default value is 0777.
        public let directoryMode: String?

        public init(ownerId: Int64? = nil, fileMode: String? = nil, groupId: Int64? = nil, directoryMode: String? = nil) {
            self.ownerId = ownerId
            self.fileMode = fileMode
            self.groupId = groupId
            self.directoryMode = directoryMode
        }

        public init(dictionary: [String: Any]) throws {
            self.ownerId = dictionary["OwnerId"] as? Int64
            self.fileMode = dictionary["FileMode"] as? String
            self.groupId = dictionary["GroupId"] as? Int64
            self.directoryMode = dictionary["DirectoryMode"] as? String
        }
    }

    public struct DescribeTapesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe. If this parameter is not specified, AWS Storage Gateway returns a description of all virtual tapes associated with the specified gateway.
        public let tapeARNs: [String]?
        /// Specifies that the number of virtual tapes described be limited to the specified number.  Amazon Web Services may impose its own limit, if this field is not set. 
        public let limit: Int32?
        /// A marker value, obtained in a previous call to DescribeTapes. This marker indicates which page of results to retrieve.  If not specified, the first page of results is retrieved.
        public let marker: String?

        public init(gatewayARN: String, tapeARNs: [String]? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.tapeARNs = tapeARNs
            self.limit = limit
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            self.tapeARNs = dictionary["TapeARNs"] as? [String]
            self.limit = dictionary["Limit"] as? Int32
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct DescribeTapeRecoveryPointsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that indicates the position at which to begin describing the virtual tape recovery points.
        public let marker: String?
        public let gatewayARN: String
        /// Specifies that the number of virtual tape recovery points that are described be limited to the specified number.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let snapshotDescription: String
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotDescription = dictionary["SnapshotDescription"] as? String else { throw InitializableError.missingRequiredParam("SnapshotDescription") }
            self.snapshotDescription = snapshotDescription
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct AddUploadBufferInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let diskIds = dictionary["DiskIds"] as? [String] else { throw InitializableError.missingRequiredParam("DiskIds") }
            self.diskIds = diskIds
        }
    }

    public struct ListVolumeRecoveryPointsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String
        /// An opaque string that indicates the position at which to begin returning the list of tags.
        public let marker: String?
        /// Specifies that the list of tags returned be limited to the specified number of items.
        public let limit: Int32?

        public init(resourceARN: String, marker: String? = nil, limit: Int32? = nil) {
            self.resourceARN = resourceARN
            self.marker = marker
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct UpdateVTLDeviceTypeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of medium changer you want to select.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let deviceType: String
        /// The Amazon Resource Name (ARN) of the medium changer you want to select.
        public let vTLDeviceARN: String

        public init(deviceType: String, vTLDeviceARN: String) {
            self.deviceType = deviceType
            self.vTLDeviceARN = vTLDeviceARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let deviceType = dictionary["DeviceType"] as? String else { throw InitializableError.missingRequiredParam("DeviceType") }
            self.deviceType = deviceType
            guard let vTLDeviceARN = dictionary["VTLDeviceARN"] as? String else { throw InitializableError.missingRequiredParam("VTLDeviceARN") }
            self.vTLDeviceARN = vTLDeviceARN
        }
    }

    public struct TapeRecoveryPointInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The time when the point-in-time view of the virtual tape was replicated for later recovery. The string format of the tape recovery point time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let tapeRecoveryPointTime: Date?
        public let tapeStatus: String?
        /// The size, in bytes, of the virtual tapes to recover.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, tapeRecoveryPointTime: Date? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.tapeRecoveryPointTime = tapeRecoveryPointTime
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
            self.tapeRecoveryPointTime = dictionary["TapeRecoveryPointTime"] as? Date
            self.tapeStatus = dictionary["TapeStatus"] as? String
            self.tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64
        }
    }

    public struct RetrieveTapeArchiveOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the retrieved virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let value: String
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public struct AddCacheOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct StartGatewayInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct ListTapesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.
        public let marker: String?
        public let tapeInfos: [TapeInfo]?

        public init(marker: String? = nil, tapeInfos: [TapeInfo]? = nil) {
            self.marker = marker
            self.tapeInfos = tapeInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let tapeInfos = dictionary["TapeInfos"] as? [[String: Any]] {
                self.tapeInfos = try tapeInfos.map({ try TapeInfo(dictionary: $0) })
            } else { 
                self.tapeInfos = nil
            }
        }
    }

    public struct TapeInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of a virtual tape.
        public let tapeARN: String?
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The status of the tape.
        public let tapeStatus: String?
        /// The size, in bytes, of a virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?

        public init(tapeARN: String? = nil, gatewayARN: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil, tapeBarcode: String? = nil) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcode = tapeBarcode
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.tapeStatus = dictionary["TapeStatus"] as? String
            self.tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64
            self.tapeBarcode = dictionary["TapeBarcode"] as? String
        }
    }

    public struct UpdateGatewayInformationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayTimezone: String?
        public let gatewayName: String?
        public let gatewayARN: String

        public init(gatewayTimezone: String? = nil, gatewayName: String? = nil, gatewayARN: String) {
            self.gatewayTimezone = gatewayTimezone
            self.gatewayName = gatewayName
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayTimezone = dictionary["GatewayTimezone"] as? String
            self.gatewayName = dictionary["GatewayName"] as? String
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct UpdateMaintenanceStartTimeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32
        /// The maintenance start time day of the week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
        public let dayOfWeek: Int32

        public init(gatewayARN: String, hourOfDay: Int32, minuteOfHour: Int32, dayOfWeek: Int32) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.dayOfWeek = dayOfWeek
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let hourOfDay = dictionary["HourOfDay"] as? Int32 else { throw InitializableError.missingRequiredParam("HourOfDay") }
            self.hourOfDay = hourOfDay
            guard let minuteOfHour = dictionary["MinuteOfHour"] as? Int32 else { throw InitializableError.missingRequiredParam("MinuteOfHour") }
            self.minuteOfHour = minuteOfHour
            guard let dayOfWeek = dictionary["DayOfWeek"] as? Int32 else { throw InitializableError.missingRequiredParam("DayOfWeek") }
            self.dayOfWeek = dayOfWeek
        }
    }

    public struct DeleteVolumeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct DescribeSnapshotScheduleInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct RemoveTagsFromResourceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the resource you want to remove the tags from.
        public let resourceARN: String
        /// The keys of the tags you want to remove from the specified resource. A tag is composed of a key/value pair.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let tagKeys = dictionary["TagKeys"] as? [String] else { throw InitializableError.missingRequiredParam("TagKeys") }
            self.tagKeys = tagKeys
        }
    }

    public struct DescribeWorkingStorageInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeWorkingStorageOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        public let diskIds: [String]?
        public let gatewayARN: String?
        /// The total working storage in bytes in use by the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageUsedInBytes: Int64?
        /// The total working storage in bytes allocated for the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageAllocatedInBytes: Int64?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, workingStorageUsedInBytes: Int64? = nil, workingStorageAllocatedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.workingStorageUsedInBytes = workingStorageUsedInBytes
            self.workingStorageAllocatedInBytes = workingStorageAllocatedInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.diskIds = dictionary["DiskIds"] as? [String]
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.workingStorageUsedInBytes = dictionary["WorkingStorageUsedInBytes"] as? Int64
            self.workingStorageAllocatedInBytes = dictionary["WorkingStorageAllocatedInBytes"] as? Int64
        }
    }

    public struct DeleteTapeArchiveInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).
        public let tapeARN: String

        public init(tapeARN: String) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
        }
    }

    public struct Disk: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let diskStatus: String?
        public let diskSizeInBytes: Int64?
        public let diskId: String?
        public let diskNode: String?
        public let diskPath: String?
        public let diskAllocationType: String?
        public let diskAllocationResource: String?

        public init(diskStatus: String? = nil, diskSizeInBytes: Int64? = nil, diskId: String? = nil, diskNode: String? = nil, diskPath: String? = nil, diskAllocationType: String? = nil, diskAllocationResource: String? = nil) {
            self.diskStatus = diskStatus
            self.diskSizeInBytes = diskSizeInBytes
            self.diskId = diskId
            self.diskNode = diskNode
            self.diskPath = diskPath
            self.diskAllocationType = diskAllocationType
            self.diskAllocationResource = diskAllocationResource
        }

        public init(dictionary: [String: Any]) throws {
            self.diskStatus = dictionary["DiskStatus"] as? String
            self.diskSizeInBytes = dictionary["DiskSizeInBytes"] as? Int64
            self.diskId = dictionary["DiskId"] as? String
            self.diskNode = dictionary["DiskNode"] as? String
            self.diskPath = dictionary["DiskPath"] as? String
            self.diskAllocationType = dictionary["DiskAllocationType"] as? String
            self.diskAllocationResource = dictionary["DiskAllocationResource"] as? String
        }
    }

    public struct UpdateVTLDeviceTypeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the medium changer you have selected.
        public let vTLDeviceARN: String?

        public init(vTLDeviceARN: String? = nil) {
            self.vTLDeviceARN = vTLDeviceARN
        }

        public init(dictionary: [String: Any]) throws {
            self.vTLDeviceARN = dictionary["VTLDeviceARN"] as? String
        }
    }

    public struct UpdateChapCredentialsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the target. This is the same target specified in the request.
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target. This is the same initiator name specified in the request.
        public let initiatorName: String?

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.initiatorName = dictionary["InitiatorName"] as? String
        }
    }

    public struct ActivateGatewayInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Your gateway activation key. You can obtain the activation key by sending an HTTP GET request with redirects enabled to the gateway IP address (port 80). The redirect URL returned in the response provides you the activation key for your gateway in the query string parameter activationKey. It may also include other activation-related parameters, however, these are merely defaults -- the arguments you pass to the ActivateGateway API call determine the actual configuration of your gateway.
        public let activationKey: String
        /// A value that defines the type of gateway to activate. The type specified is critical to all later functions of the gateway and cannot be changed after activation. The default value is STORED. 
        public let gatewayType: String?
        /// The value that indicates the type of medium changer to use for gateway-VTL. This field is optional.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let mediumChangerType: String?
        /// A value that indicates the time zone you want to set for the gateway. The time zone is used, for example, for scheduling snapshots and your gateway's maintenance schedule.
        public let gatewayTimezone: String
        /// A value that indicates the region where you want to store the snapshot backups. The gateway region specified must be the same region as the region in your Host header in the request. For more information about available regions and endpoints for AWS Storage Gateway, see Regions and Endpoints in the Amazon Web Services Glossary.  Valid Values: "us-east-1", "us-west-1", "us-west-2", "eu-west-1", "eu-central-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "sa-east-1"
        public let gatewayRegion: String
        /// The name you configured for your gateway.
        public let gatewayName: String
        /// The value that indicates the type of tape drive to use for gateway-VTL. This field is optional.  Valid Values: "IBM-ULT3580-TD5" 
        public let tapeDriveType: String?

        public init(activationKey: String, gatewayType: String? = nil, mediumChangerType: String? = nil, gatewayTimezone: String, gatewayRegion: String, gatewayName: String, tapeDriveType: String? = nil) {
            self.activationKey = activationKey
            self.gatewayType = gatewayType
            self.mediumChangerType = mediumChangerType
            self.gatewayTimezone = gatewayTimezone
            self.gatewayRegion = gatewayRegion
            self.gatewayName = gatewayName
            self.tapeDriveType = tapeDriveType
        }

        public init(dictionary: [String: Any]) throws {
            guard let activationKey = dictionary["ActivationKey"] as? String else { throw InitializableError.missingRequiredParam("ActivationKey") }
            self.activationKey = activationKey
            self.gatewayType = dictionary["GatewayType"] as? String
            self.mediumChangerType = dictionary["MediumChangerType"] as? String
            guard let gatewayTimezone = dictionary["GatewayTimezone"] as? String else { throw InitializableError.missingRequiredParam("GatewayTimezone") }
            self.gatewayTimezone = gatewayTimezone
            guard let gatewayRegion = dictionary["GatewayRegion"] as? String else { throw InitializableError.missingRequiredParam("GatewayRegion") }
            self.gatewayRegion = gatewayRegion
            guard let gatewayName = dictionary["GatewayName"] as? String else { throw InitializableError.missingRequiredParam("GatewayName") }
            self.gatewayName = gatewayName
            self.tapeDriveType = dictionary["TapeDriveType"] as? String
        }
    }

    public struct NFSFileShareInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// True to use Amazon S3 server side encryption with your own KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        public let fileShareStatus: String?
        public let gatewayARN: String?
        public let kMSKey: String?
        public let fileShareId: String?
        public let role: String?
        public let path: String?
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        public let clientList: [String]?
        public let fileShareARN: String?
        public let locationARN: String?
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?

        public init(kMSEncrypted: Bool? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, kMSKey: String? = nil, fileShareId: String? = nil, role: String? = nil, path: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, fileShareARN: String? = nil, locationARN: String? = nil, defaultStorageClass: String? = nil) {
            self.kMSEncrypted = kMSEncrypted
            self.fileShareStatus = fileShareStatus
            self.gatewayARN = gatewayARN
            self.kMSKey = kMSKey
            self.fileShareId = fileShareId
            self.role = role
            self.path = path
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.fileShareARN = fileShareARN
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
        }

        public init(dictionary: [String: Any]) throws {
            self.kMSEncrypted = dictionary["KMSEncrypted"] as? Bool
            self.fileShareStatus = dictionary["FileShareStatus"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.kMSKey = dictionary["KMSKey"] as? String
            self.fileShareId = dictionary["FileShareId"] as? String
            self.role = dictionary["Role"] as? String
            self.path = dictionary["Path"] as? String
            if let nFSFileShareDefaults = dictionary["NFSFileShareDefaults"] as? [String: Any] { self.nFSFileShareDefaults = try Storagegateway.NFSFileShareDefaults(dictionary: nFSFileShareDefaults) } else { self.nFSFileShareDefaults = nil }
            self.clientList = dictionary["ClientList"] as? [String]
            self.fileShareARN = dictionary["FileShareARN"] as? String
            self.locationARN = dictionary["LocationARN"] as? String
            self.defaultStorageClass = dictionary["DefaultStorageClass"] as? String
        }
    }

    public struct AddTagsToResourceInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String
        /// The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. 
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let tags = dictionary["Tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("Tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct UpdateMaintenanceStartTimeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct UpdateGatewaySoftwareNowOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct CancelArchivalOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape for which archiving was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct NetworkInterface: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Internet Protocol version 6 (IPv6) address of the interface. Currently not supported.
        public let ipv6Address: String?
        /// The Media Access Control (MAC) address of the interface.  This is currently unsupported and will not be returned in output. 
        public let macAddress: String?
        /// The Internet Protocol version 4 (IPv4) address of the interface.
        public let ipv4Address: String?

        public init(ipv6Address: String? = nil, macAddress: String? = nil, ipv4Address: String? = nil) {
            self.ipv6Address = ipv6Address
            self.macAddress = macAddress
            self.ipv4Address = ipv4Address
        }

        public init(dictionary: [String: Any]) throws {
            self.ipv6Address = dictionary["Ipv6Address"] as? String
            self.macAddress = dictionary["MacAddress"] as? String
            self.ipv4Address = dictionary["Ipv4Address"] as? String
        }
    }

    public struct DeviceiSCSIAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the unique Amazon Resource Name(ARN) that encodes the iSCSI qualified name(iqn) of a tape drive or media changer target.
        public let targetARN: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The network interface identifier of the VTL device.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI VTL device targets.
        public let networkInterfacePort: Int32?

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.chapEnabled = dictionary["ChapEnabled"] as? Bool
            self.networkInterfaceId = dictionary["NetworkInterfaceId"] as? String
            self.networkInterfacePort = dictionary["NetworkInterfacePort"] as? Int32
        }
    }

    public struct CancelRetrievalInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel retrieval for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct ResetCacheOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct DescribeCachediSCSIVolumesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARNs = dictionary["VolumeARNs"] as? [String] else { throw InitializableError.missingRequiredParam("VolumeARNs") }
            self.volumeARNs = volumeARNs
        }
    }

    public struct TapeArchive: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of an archived virtual tape.
        public let tapeARN: String?
        /// The time that the archiving of the virtual tape was completed. The string format of the completion time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let completionTime: Date?
        public let tapeCreatedDate: Date?
        /// The barcode that identifies the archived virtual tape.
        public let tapeBarcode: String?
        /// The Amazon Resource Name (ARN) of the gateway-VTL that the virtual tape is being retrieved to. The virtual tape is retrieved from the virtual tape shelf (VTS).
        public let retrievedTo: String?
        /// The current state of the archived virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of the archived virtual tape.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, completionTime: Date? = nil, tapeCreatedDate: Date? = nil, tapeBarcode: String? = nil, retrievedTo: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.completionTime = completionTime
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.retrievedTo = retrievedTo
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
            self.completionTime = dictionary["CompletionTime"] as? Date
            self.tapeCreatedDate = dictionary["TapeCreatedDate"] as? Date
            self.tapeBarcode = dictionary["TapeBarcode"] as? String
            self.retrievedTo = dictionary["RetrievedTo"] as? String
            self.tapeStatus = dictionary["TapeStatus"] as? String
            self.tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64
        }
    }

    public struct ListTapesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A string that indicates the position at which to begin the returned list of tapes.
        public let marker: String?
        public let tapeARNs: [String]?
        /// An optional number limit for the tapes in the list returned by this call.
        public let limit: Int32?

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.tapeARNs = dictionary["TapeARNs"] as? [String]
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct ListVolumeInitiatorsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes for the gateway.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct CreateSnapshotOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The snapshot ID that is used to refer to the snapshot in future operations such as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or creating a volume from a snapshot (CreateStorediSCSIVolume).
        public let snapshotId: String?
        /// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
        public let volumeARN: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
            self.volumeARN = dictionary["VolumeARN"] as? String
        }
    }

    public struct CreateNFSFileShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional.
        public let kMSKey: String?
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// File share default values. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        public let clientList: [String]?
        /// The ARN of the backend storage used for storing file data. 
        public let locationARN: String
        /// The default storage class for objects put into an Amazon S3 bucket by file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?

        public init(gatewayARN: String, clientToken: String, kMSKey: String? = nil, role: String, nFSFileShareDefaults: NFSFileShareDefaults? = nil, clientList: [String]? = nil, locationARN: String, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.kMSKey = kMSKey
            self.role = role
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.clientList = clientList
            self.locationARN = locationARN
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let clientToken = dictionary["ClientToken"] as? String else { throw InitializableError.missingRequiredParam("ClientToken") }
            self.clientToken = clientToken
            self.kMSKey = dictionary["KMSKey"] as? String
            guard let role = dictionary["Role"] as? String else { throw InitializableError.missingRequiredParam("Role") }
            self.role = role
            if let nFSFileShareDefaults = dictionary["NFSFileShareDefaults"] as? [String: Any] { self.nFSFileShareDefaults = try Storagegateway.NFSFileShareDefaults(dictionary: nFSFileShareDefaults) } else { self.nFSFileShareDefaults = nil }
            self.clientList = dictionary["ClientList"] as? [String]
            guard let locationARN = dictionary["LocationARN"] as? String else { throw InitializableError.missingRequiredParam("LocationARN") }
            self.locationARN = locationARN
            self.defaultStorageClass = dictionary["DefaultStorageClass"] as? String
            self.kMSEncrypted = dictionary["KMSEncrypted"] as? Bool
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// he Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String?
        /// An array that contains the tags for the specified resource.
        public let tags: [Tag]?
        /// An opaque string that indicates the position at which to stop returning the list of tags.
        public let marker: String?

        public init(resourceARN: String? = nil, tags: [Tag]? = nil, marker: String? = nil) {
            self.resourceARN = resourceARN
            self.tags = tags
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
            if let tags = dictionary["Tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            } else { 
                self.tags = nil
            }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct CreateCachediSCSIVolumeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let targetARN: String?
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.volumeARN = dictionary["VolumeARN"] as? String
        }
    }

    public struct ListVolumesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A string that indicates the position at which to begin the returned list of volumes. Obtain the marker from the response of a previous List iSCSI Volumes request.
        public let marker: String?
        public let gatewayARN: String?
        /// Specifies that the list of volumes returned be limited to the specified number of items.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct RemoveTagsFromResourceOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the resource that the tags were removed from.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
        }
    }

    public struct UpdateChapCredentialsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Byte constraints: Minimum bytes of 12. Maximum bytes of 16.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateTarget: String?
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateInitiator: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String

        public init(targetARN: String, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String, initiatorName: String) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetARN = dictionary["TargetARN"] as? String else { throw InitializableError.missingRequiredParam("TargetARN") }
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = dictionary["SecretToAuthenticateTarget"] as? String
            guard let secretToAuthenticateInitiator = dictionary["SecretToAuthenticateInitiator"] as? String else { throw InitializableError.missingRequiredParam("SecretToAuthenticateInitiator") }
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            guard let initiatorName = dictionary["InitiatorName"] as? String else { throw InitializableError.missingRequiredParam("InitiatorName") }
            self.initiatorName = initiatorName
        }
    }

    public struct CreateNFSFileShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public init(dictionary: [String: Any]) throws {
            self.fileShareARN = dictionary["FileShareARN"] as? String
        }
    }

    public struct DeleteVolumeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the storage volume that was deleted. It is the same ARN you provided in the request.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeARN = dictionary["VolumeARN"] as? String
        }
    }

    public struct RetrieveTapeRecoveryPointInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.
        public let tapeARN: String
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeBandwidthRateLimitOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The average download bandwidth rate limit in bits per second. This field does not appear in the response if the download rate limit is not set.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second. This field does not appear in the response if the upload rate limit is not set.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String?

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String? = nil) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.averageDownloadRateLimitInBitsPerSec = dictionary["AverageDownloadRateLimitInBitsPerSec"] as? Int64
            self.averageUploadRateLimitInBitsPerSec = dictionary["AverageUploadRateLimitInBitsPerSec"] as? Int64
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct SetLocalConsolePasswordOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct UpdateSnapshotScheduleOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeARN = dictionary["VolumeARN"] as? String
        }
    }

    public struct DescribeChapCredentialsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of ChapInfo objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:    InitiatorName: The iSCSI initiator that connects to the target.    SecretToAuthenticateInitiator: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.    SecretToAuthenticateTarget: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).    TargetARN: The Amazon Resource Name (ARN) of the storage volume.  
        public let chapCredentials: [ChapInfo]?

        public init(chapCredentials: [ChapInfo]? = nil) {
            self.chapCredentials = chapCredentials
        }

        public init(dictionary: [String: Any]) throws {
            if let chapCredentials = dictionary["ChapCredentials"] as? [[String: Any]] {
                self.chapCredentials = try chapCredentials.map({ try ChapInfo(dictionary: $0) })
            } else { 
                self.chapCredentials = nil
            }
        }
    }

    public struct UpdateNFSFileShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The KMS key used for Amazon S3 server side encryption. This value can only be set when KmsEncrypted is true. Optional. 
        public let kMSKey: String?
        /// The default values for the file share. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// The Amazon Resource Name (ARN) of the file share to be updated. 
        public let fileShareARN: String
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        public let clientList: [String]?
        /// The default storage class for objects put into an Amazon S3 bucket by a file gateway. Possible values are S3_STANDARD or S3_STANDARD_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?

        public init(kMSKey: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, fileShareARN: String, clientList: [String]? = nil, defaultStorageClass: String? = nil, kMSEncrypted: Bool? = nil) {
            self.kMSKey = kMSKey
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.fileShareARN = fileShareARN
            self.clientList = clientList
            self.defaultStorageClass = defaultStorageClass
            self.kMSEncrypted = kMSEncrypted
        }

        public init(dictionary: [String: Any]) throws {
            self.kMSKey = dictionary["KMSKey"] as? String
            if let nFSFileShareDefaults = dictionary["NFSFileShareDefaults"] as? [String: Any] { self.nFSFileShareDefaults = try Storagegateway.NFSFileShareDefaults(dictionary: nFSFileShareDefaults) } else { self.nFSFileShareDefaults = nil }
            guard let fileShareARN = dictionary["FileShareARN"] as? String else { throw InitializableError.missingRequiredParam("FileShareARN") }
            self.fileShareARN = fileShareARN
            self.clientList = dictionary["ClientList"] as? [String]
            self.defaultStorageClass = dictionary["DefaultStorageClass"] as? String
            self.kMSEncrypted = dictionary["KMSEncrypted"] as? Bool
        }
    }

    public struct ListLocalDisksOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let disks: [Disk]?
        public let gatewayARN: String?

        public init(disks: [Disk]? = nil, gatewayARN: String? = nil) {
            self.disks = disks
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            if let disks = dictionary["Disks"] as? [[String: Any]] {
                self.disks = try disks.map({ try Disk(dictionary: $0) })
            } else { 
                self.disks = nil
            }
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct DeleteBandwidthRateLimitOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct DeleteBandwidthRateLimitInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete. Valid Values: Upload, Download, All.
        public let bandwidthType: String
        public let gatewayARN: String

        public init(bandwidthType: String, gatewayARN: String) {
            self.bandwidthType = bandwidthType
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let bandwidthType = dictionary["BandwidthType"] as? String else { throw InitializableError.missingRequiredParam("BandwidthType") }
            self.bandwidthType = bandwidthType
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DeleteTapeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape to delete.
        public let tapeARN: String
        /// The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String

        public init(tapeARN: String, gatewayARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let tapeARN = dictionary["TapeARN"] as? String else { throw InitializableError.missingRequiredParam("TapeARN") }
            self.tapeARN = tapeARN
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct UpdateBandwidthRateLimitOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct VTLDevice: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let vTLDeviceVendor: String?
        public let vTLDeviceType: String?
        /// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or media changer).
        public let vTLDeviceARN: String?
        /// A list of iSCSI information about a VTL device.
        public let deviceiSCSIAttributes: DeviceiSCSIAttributes?
        public let vTLDeviceProductIdentifier: String?

        public init(vTLDeviceVendor: String? = nil, vTLDeviceType: String? = nil, vTLDeviceARN: String? = nil, deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil, vTLDeviceProductIdentifier: String? = nil) {
            self.vTLDeviceVendor = vTLDeviceVendor
            self.vTLDeviceType = vTLDeviceType
            self.vTLDeviceARN = vTLDeviceARN
            self.deviceiSCSIAttributes = deviceiSCSIAttributes
            self.vTLDeviceProductIdentifier = vTLDeviceProductIdentifier
        }

        public init(dictionary: [String: Any]) throws {
            self.vTLDeviceVendor = dictionary["VTLDeviceVendor"] as? String
            self.vTLDeviceType = dictionary["VTLDeviceType"] as? String
            self.vTLDeviceARN = dictionary["VTLDeviceARN"] as? String
            if let deviceiSCSIAttributes = dictionary["DeviceiSCSIAttributes"] as? [String: Any] { self.deviceiSCSIAttributes = try Storagegateway.DeviceiSCSIAttributes(dictionary: deviceiSCSIAttributes) } else { self.deviceiSCSIAttributes = nil }
            self.vTLDeviceProductIdentifier = dictionary["VTLDeviceProductIdentifier"] as? String
        }
    }

    public struct GatewayInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The type of the gateway.
        public let gatewayType: String?
        /// The state of the gateway. Valid Values: DISABLED or ACTIVE
        public let gatewayOperationalState: String?
        /// The name of the gateway.
        public let gatewayName: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?

        public init(gatewayARN: String? = nil, gatewayType: String? = nil, gatewayOperationalState: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayType = gatewayType
            self.gatewayOperationalState = gatewayOperationalState
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.gatewayType = dictionary["GatewayType"] as? String
            self.gatewayOperationalState = dictionary["GatewayOperationalState"] as? String
            self.gatewayName = dictionary["GatewayName"] as? String
            self.gatewayId = dictionary["GatewayId"] as? String
        }
    }

    public struct CreateSnapshotInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        public let snapshotDescription: String
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let snapshotDescription = dictionary["SnapshotDescription"] as? String else { throw InitializableError.missingRequiredParam("SnapshotDescription") }
            self.snapshotDescription = snapshotDescription
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct UpdateBandwidthRateLimitInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The average download bandwidth rate limit in bits per second.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.averageDownloadRateLimitInBitsPerSec = dictionary["AverageDownloadRateLimitInBitsPerSec"] as? Int64
            self.averageUploadRateLimitInBitsPerSec = dictionary["AverageUploadRateLimitInBitsPerSec"] as? Int64
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeMaintenanceStartTimeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct StartGatewayOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct ListFileSharesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Opaque pagination token returned from a previous ListFileShares operation. If present, Marker specifies where to continue the list from after a previous call to ListFileShares. Optional.
        public let marker: String?
        /// The Amazon resource Name (ARN) of the gateway whose file shares you want to list. If this field is not present, all file shares under your account are listed.
        public let gatewayARN: String?
        /// The maximum number of file shares to return in the response. The value must be an integer with a value greater than zero. Optional.
        public let limit: Int32?

        public init(marker: String? = nil, gatewayARN: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct ActivateGatewayOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct VolumeRecoveryPointInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeRecoveryPointTime: String?
        public let volumeARN: String?
        public let volumeUsageInBytes: Int64?
        public let volumeSizeInBytes: Int64?

        public init(volumeRecoveryPointTime: String? = nil, volumeARN: String? = nil, volumeUsageInBytes: Int64? = nil, volumeSizeInBytes: Int64? = nil) {
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.volumeARN = volumeARN
            self.volumeUsageInBytes = volumeUsageInBytes
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeRecoveryPointTime = dictionary["VolumeRecoveryPointTime"] as? String
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeUsageInBytes = dictionary["VolumeUsageInBytes"] as? Int64
            self.volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64
        }
    }

    public struct DescribeTapeArchivesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of virtual tape objects in the virtual tape shelf (VTS). The description includes of the Amazon Resource Name(ARN) of the virtual tapes. The information returned includes the Amazon Resource Names (ARNs) of the tapes, size of the tapes, status of the tapes, progress of the description and tape barcode.
        public let tapeArchives: [TapeArchive]?
        /// An opaque string that indicates the position at which the virtual tapes that were fetched for description ended. Use this marker in your next request to fetch the next set of virtual tapes in the virtual tape shelf (VTS). If there are no more virtual tapes to describe, this field does not appear in the response.
        public let marker: String?

        public init(tapeArchives: [TapeArchive]? = nil, marker: String? = nil) {
            self.tapeArchives = tapeArchives
            self.marker = marker
        }

        public init(dictionary: [String: Any]) throws {
            if let tapeArchives = dictionary["TapeArchives"] as? [[String: Any]] {
                self.tapeArchives = try tapeArchives.map({ try TapeArchive(dictionary: $0) })
            } else { 
                self.tapeArchives = nil
            }
            self.marker = dictionary["Marker"] as? String
        }
    }

    public struct StorediSCSIVolume: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// One of the VolumeType enumeration values describing the type of the volume.
        public let volumeType: String?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.  Valid Values: true, false
        public let preservedExistingData: Bool?
        public let createdDate: Date?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// The ID of the local disk that was specified in the CreateStorediSCSIVolume operation.
        public let volumeDiskId: String?

        public init(volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, preservedExistingData: Bool? = nil, createdDate: Date? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeDiskId: String? = nil) {
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.preservedExistingData = preservedExistingData
            self.createdDate = createdDate
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeDiskId = volumeDiskId
        }

        public init(dictionary: [String: Any]) throws {
            if let volumeiSCSIAttributes = dictionary["VolumeiSCSIAttributes"] as? [String: Any] { self.volumeiSCSIAttributes = try Storagegateway.VolumeiSCSIAttributes(dictionary: volumeiSCSIAttributes) } else { self.volumeiSCSIAttributes = nil }
            self.sourceSnapshotId = dictionary["SourceSnapshotId"] as? String
            self.volumeType = dictionary["VolumeType"] as? String
            self.volumeStatus = dictionary["VolumeStatus"] as? String
            self.volumeId = dictionary["VolumeId"] as? String
            self.volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64
            self.preservedExistingData = dictionary["PreservedExistingData"] as? Bool
            self.createdDate = dictionary["CreatedDate"] as? Date
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeProgress = dictionary["VolumeProgress"] as? Double
            self.volumeDiskId = dictionary["VolumeDiskId"] as? String
        }
    }

    public struct CreateTapesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The number of virtual tapes that you want to create.
        public let numTapesToCreate: Int32
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tapes with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String
        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.  Using the same ClientToken prevents creating the tape multiple times. 
        public let clientToken: String
        /// The size, in bytes, of the virtual tapes that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// A prefix that you append to the barcode of the virtual tape you are creating. This prefix makes the barcode unique.  The prefix must be 1 to 4 characters in length and must be one of the uppercase letters from A to Z. 
        public let tapeBarcodePrefix: String

        public init(numTapesToCreate: Int32, gatewayARN: String, clientToken: String, tapeSizeInBytes: Int64, tapeBarcodePrefix: String) {
            self.numTapesToCreate = numTapesToCreate
            self.gatewayARN = gatewayARN
            self.clientToken = clientToken
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeBarcodePrefix = tapeBarcodePrefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let numTapesToCreate = dictionary["NumTapesToCreate"] as? Int32 else { throw InitializableError.missingRequiredParam("NumTapesToCreate") }
            self.numTapesToCreate = numTapesToCreate
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let clientToken = dictionary["ClientToken"] as? String else { throw InitializableError.missingRequiredParam("ClientToken") }
            self.clientToken = clientToken
            guard let tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64 else { throw InitializableError.missingRequiredParam("TapeSizeInBytes") }
            self.tapeSizeInBytes = tapeSizeInBytes
            guard let tapeBarcodePrefix = dictionary["TapeBarcodePrefix"] as? String else { throw InitializableError.missingRequiredParam("TapeBarcodePrefix") }
            self.tapeBarcodePrefix = tapeBarcodePrefix
        }
    }

    public struct CachediSCSIVolume: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the cached volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// One of the VolumeType enumeration values that describes the type of the volume.
        public let volumeType: String?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the cached volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        public let createdDate: Date?

        public init(sourceSnapshotId: String? = nil, volumeType: String? = nil, volumeStatus: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, volumeARN: String? = nil, volumeProgress: Double? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil, createdDate: Date? = nil) {
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeType = volumeType
            self.volumeStatus = volumeStatus
            self.volumeId = volumeId
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeARN = volumeARN
            self.volumeProgress = volumeProgress
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.createdDate = createdDate
        }

        public init(dictionary: [String: Any]) throws {
            self.sourceSnapshotId = dictionary["SourceSnapshotId"] as? String
            self.volumeType = dictionary["VolumeType"] as? String
            self.volumeStatus = dictionary["VolumeStatus"] as? String
            self.volumeId = dictionary["VolumeId"] as? String
            self.volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeProgress = dictionary["VolumeProgress"] as? Double
            if let volumeiSCSIAttributes = dictionary["VolumeiSCSIAttributes"] as? [String: Any] { self.volumeiSCSIAttributes = try Storagegateway.VolumeiSCSIAttributes(dictionary: volumeiSCSIAttributes) } else { self.volumeiSCSIAttributes = nil }
            self.createdDate = dictionary["CreatedDate"] as? Date
        }
    }

    public struct AddTagsToResourceOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
        }
    }

    public struct DescribeChapCredentialsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(targetARN: String) {
            self.targetARN = targetARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetARN = dictionary["TargetARN"] as? String else { throw InitializableError.missingRequiredParam("TargetARN") }
            self.targetARN = targetARN
        }
    }

    public struct DeleteFileShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the deleted file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public init(dictionary: [String: Any]) throws {
            self.fileShareARN = dictionary["FileShareARN"] as? String
        }
    }

    public struct DeleteGatewayInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct Tape: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The virtual tape library (VTL) device that the virtual tape is associated with.
        public let vTLDevice: String?
        /// For archiving virtual tapes, indicates how much data remains to be uploaded before archiving is complete. Range: 0 (not started) to 100 (complete).
        public let progress: Double?
        public let tapeCreatedDate: Date?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?
        /// The current state of the virtual tape.
        public let tapeStatus: String?
        /// The size, in bytes, of the virtual tape.
        public let tapeSizeInBytes: Int64?

        public init(tapeARN: String? = nil, vTLDevice: String? = nil, progress: Double? = nil, tapeCreatedDate: Date? = nil, tapeBarcode: String? = nil, tapeStatus: String? = nil, tapeSizeInBytes: Int64? = nil) {
            self.tapeARN = tapeARN
            self.vTLDevice = vTLDevice
            self.progress = progress
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeBarcode = tapeBarcode
            self.tapeStatus = tapeStatus
            self.tapeSizeInBytes = tapeSizeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
            self.vTLDevice = dictionary["VTLDevice"] as? String
            self.progress = dictionary["Progress"] as? Double
            self.tapeCreatedDate = dictionary["TapeCreatedDate"] as? Date
            self.tapeBarcode = dictionary["TapeBarcode"] as? String
            self.tapeStatus = dictionary["TapeStatus"] as? String
            self.tapeSizeInBytes = dictionary["TapeSizeInBytes"] as? Int64
        }
    }

    public struct DeleteTapeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the deleted virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct DescribeStorediSCSIVolumesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARNs = dictionary["VolumeARNs"] as? [String] else { throw InitializableError.missingRequiredParam("VolumeARNs") }
            self.volumeARNs = volumeARNs
        }
    }

    public struct DescribeTapeArchivesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that indicates the position at which to begin describing virtual tapes.
        public let marker: String?
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.
        public let tapeARNs: [String]?
        /// Specifies that the number of virtual tapes descried be limited to the specified number.
        public let limit: Int32?

        public init(marker: String? = nil, tapeARNs: [String]? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.tapeARNs = dictionary["TapeARNs"] as? [String]
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct UpdateGatewaySoftwareNowInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct CreateTapeWithBarcodeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A unique Amazon Resource Name (ARN) that represents the virtual tape that was created.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct AddWorkingStorageInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let diskIds = dictionary["DiskIds"] as? [String] else { throw InitializableError.missingRequiredParam("DiskIds") }
            self.diskIds = diskIds
        }
    }

    public struct DeleteChapCredentialsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String

        public init(targetARN: String, initiatorName: String) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        public init(dictionary: [String: Any]) throws {
            guard let targetARN = dictionary["TargetARN"] as? String else { throw InitializableError.missingRequiredParam("TargetARN") }
            self.targetARN = targetARN
            guard let initiatorName = dictionary["InitiatorName"] as? String else { throw InitializableError.missingRequiredParam("InitiatorName") }
            self.initiatorName = initiatorName
        }
    }

    public enum ErrorCode: String, CustomStringConvertible {
        case activationkeyexpired = "ActivationKeyExpired"
        case activationkeyinvalid = "ActivationKeyInvalid"
        case activationkeynotfound = "ActivationKeyNotFound"
        case gatewayinternalerror = "GatewayInternalError"
        case gatewaynotconnected = "GatewayNotConnected"
        case gatewaynotfound = "GatewayNotFound"
        case gatewayproxynetworkconnectionbusy = "GatewayProxyNetworkConnectionBusy"
        case authenticationfailure = "AuthenticationFailure"
        case bandwidththrottleschedulenotfound = "BandwidthThrottleScheduleNotFound"
        case blocked = "Blocked"
        case cannotexportsnapshot = "CannotExportSnapshot"
        case chapcredentialnotfound = "ChapCredentialNotFound"
        case diskalreadyallocated = "DiskAlreadyAllocated"
        case diskdoesnotexist = "DiskDoesNotExist"
        case disksizegreaterthanvolumemaxsize = "DiskSizeGreaterThanVolumeMaxSize"
        case disksizelessthanvolumesize = "DiskSizeLessThanVolumeSize"
        case disksizenotgigaligned = "DiskSizeNotGigAligned"
        case duplicatecertificateinfo = "DuplicateCertificateInfo"
        case duplicateschedule = "DuplicateSchedule"
        case endpointnotfound = "EndpointNotFound"
        case iamnotsupported = "IAMNotSupported"
        case initiatorinvalid = "InitiatorInvalid"
        case initiatornotfound = "InitiatorNotFound"
        case internalerror = "InternalError"
        case invalidgateway = "InvalidGateway"
        case invalidendpoint = "InvalidEndpoint"
        case invalidparameters = "InvalidParameters"
        case invalidschedule = "InvalidSchedule"
        case localstoragelimitexceeded = "LocalStorageLimitExceeded"
        case lunalreadyallocated_ = "LunAlreadyAllocated "
        case luninvalid = "LunInvalid"
        case maximumcontentlengthexceeded = "MaximumContentLengthExceeded"
        case maximumtapecartridgecountexceeded = "MaximumTapeCartridgeCountExceeded"
        case maximumvolumecountexceeded = "MaximumVolumeCountExceeded"
        case networkconfigurationchanged = "NetworkConfigurationChanged"
        case nodisksavailable = "NoDisksAvailable"
        case notimplemented = "NotImplemented"
        case notsupported = "NotSupported"
        case operationaborted = "OperationAborted"
        case outdatedgateway = "OutdatedGateway"
        case parametersnotimplemented = "ParametersNotImplemented"
        case regioninvalid = "RegionInvalid"
        case requesttimeout = "RequestTimeout"
        case serviceunavailable = "ServiceUnavailable"
        case snapshotdeleted = "SnapshotDeleted"
        case snapshotidinvalid = "SnapshotIdInvalid"
        case snapshotinprogress = "SnapshotInProgress"
        case snapshotnotfound = "SnapshotNotFound"
        case snapshotschedulenotfound = "SnapshotScheduleNotFound"
        case stagingareafull = "StagingAreaFull"
        case storagefailure = "StorageFailure"
        case tapecartridgenotfound = "TapeCartridgeNotFound"
        case targetalreadyexists = "TargetAlreadyExists"
        case targetinvalid = "TargetInvalid"
        case targetnotfound = "TargetNotFound"
        case unauthorizedoperation = "UnauthorizedOperation"
        case volumealreadyexists = "VolumeAlreadyExists"
        case volumeidinvalid = "VolumeIdInvalid"
        case volumeinuse = "VolumeInUse"
        case volumenotfound = "VolumeNotFound"
        case volumenotready = "VolumeNotReady"
        public var description: String { return self.rawValue }
    }

    public struct DescribeNFSFileSharesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        public init(dictionary: [String: Any]) throws {
            guard let fileShareARNList = dictionary["FileShareARNList"] as? [String] else { throw InitializableError.missingRequiredParam("FileShareARNList") }
            self.fileShareARNList = fileShareARNList
        }
    }

    public struct DescribeStorediSCSIVolumesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let storediSCSIVolumes: [StorediSCSIVolume]?

        public init(storediSCSIVolumes: [StorediSCSIVolume]? = nil) {
            self.storediSCSIVolumes = storediSCSIVolumes
        }

        public init(dictionary: [String: Any]) throws {
            if let storediSCSIVolumes = dictionary["StorediSCSIVolumes"] as? [[String: Any]] {
                self.storediSCSIVolumes = try storediSCSIVolumes.map({ try StorediSCSIVolume(dictionary: $0) })
            } else { 
                self.storediSCSIVolumes = nil
            }
        }
    }

    public struct DescribeUploadBufferOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?
        public let uploadBufferUsedInBytes: Int64?
        public let uploadBufferAllocatedInBytes: Int64?
        public let diskIds: [String]?

        public init(gatewayARN: String? = nil, uploadBufferUsedInBytes: Int64? = nil, uploadBufferAllocatedInBytes: Int64? = nil, diskIds: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.uploadBufferUsedInBytes = uploadBufferUsedInBytes
            self.uploadBufferAllocatedInBytes = uploadBufferAllocatedInBytes
            self.diskIds = diskIds
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.uploadBufferUsedInBytes = dictionary["UploadBufferUsedInBytes"] as? Int64
            self.uploadBufferAllocatedInBytes = dictionary["UploadBufferAllocatedInBytes"] as? Int64
            self.diskIds = dictionary["DiskIds"] as? [String]
        }
    }

    public struct UpdateNFSFileShareOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the updated file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        public init(dictionary: [String: Any]) throws {
            self.fileShareARN = dictionary["FileShareARN"] as? String
        }
    }

    public struct ListVolumesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let marker: String?
        public let gatewayARN: String?
        public let volumeInfos: [VolumeInfo]?

        public init(marker: String? = nil, gatewayARN: String? = nil, volumeInfos: [VolumeInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.volumeInfos = volumeInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            if let volumeInfos = dictionary["VolumeInfos"] as? [[String: Any]] {
                self.volumeInfos = try volumeInfos.map({ try VolumeInfo(dictionary: $0) })
            } else { 
                self.volumeInfos = nil
            }
        }
    }

    public struct DescribeCachediSCSIVolumesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An array of objects where each object contains metadata about one cached volume.
        public let cachediSCSIVolumes: [CachediSCSIVolume]?

        public init(cachediSCSIVolumes: [CachediSCSIVolume]? = nil) {
            self.cachediSCSIVolumes = cachediSCSIVolumes
        }

        public init(dictionary: [String: Any]) throws {
            if let cachediSCSIVolumes = dictionary["CachediSCSIVolumes"] as? [[String: Any]] {
                self.cachediSCSIVolumes = try cachediSCSIVolumes.map({ try CachediSCSIVolume(dictionary: $0) })
            } else { 
                self.cachediSCSIVolumes = nil
            }
        }
    }

    public struct DeleteSnapshotScheduleInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
        }
    }

    public struct CreateTapesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of unique Amazon Resource Names (ARNs) that represents the virtual tapes that were created.
        public let tapeARNs: [String]?

        public init(tapeARNs: [String]? = nil) {
            self.tapeARNs = tapeARNs
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARNs = dictionary["TapeARNs"] as? [String]
        }
    }

    public struct CreateStorediSCSIVolumeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// he Amazon Resource Name (ARN) of the volume target that includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?

        public init(targetARN: String? = nil, volumeARN: String? = nil, volumeSizeInBytes: Int64? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64
        }
    }

    public struct ListLocalDisksInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let volumeARN: String?
        public let volumeRecoveryPointTime: String?
        public let snapshotId: String?

        public init(volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil, snapshotId: String? = nil) {
            self.volumeARN = volumeARN
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.snapshotId = snapshotId
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeRecoveryPointTime = dictionary["VolumeRecoveryPointTime"] as? String
            self.snapshotId = dictionary["SnapshotId"] as? String
        }
    }

    public struct DescribeGatewayInformationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A value that indicates the operating state of the gateway.
        public let gatewayState: String?
        /// The type of the gateway.
        public let gatewayType: String?
        public let gatewayARN: String?
        /// A value that indicates the time zone configured for the gateway.
        public let gatewayTimezone: String?
        /// The date on which the last software update was applied to the gateway. If the gateway has never been updated, this field does not return a value in the response.
        public let lastSoftwareUpdate: String?
        /// A NetworkInterface array that contains descriptions of the gateway network interfaces.
        public let gatewayNetworkInterfaces: [NetworkInterface]?
        /// The date on which an update to the gateway is available. This date is in the time zone of the gateway. If the gateway is not available for an update this field is not returned in the response.
        public let nextUpdateAvailabilityDate: String?
        /// The name you configured for your gateway.
        public let gatewayName: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?

        public init(gatewayState: String? = nil, gatewayType: String? = nil, gatewayARN: String? = nil, gatewayTimezone: String? = nil, lastSoftwareUpdate: String? = nil, gatewayNetworkInterfaces: [NetworkInterface]? = nil, nextUpdateAvailabilityDate: String? = nil, gatewayName: String? = nil, gatewayId: String? = nil) {
            self.gatewayState = gatewayState
            self.gatewayType = gatewayType
            self.gatewayARN = gatewayARN
            self.gatewayTimezone = gatewayTimezone
            self.lastSoftwareUpdate = lastSoftwareUpdate
            self.gatewayNetworkInterfaces = gatewayNetworkInterfaces
            self.nextUpdateAvailabilityDate = nextUpdateAvailabilityDate
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayState = dictionary["GatewayState"] as? String
            self.gatewayType = dictionary["GatewayType"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.gatewayTimezone = dictionary["GatewayTimezone"] as? String
            self.lastSoftwareUpdate = dictionary["LastSoftwareUpdate"] as? String
            if let gatewayNetworkInterfaces = dictionary["GatewayNetworkInterfaces"] as? [[String: Any]] {
                self.gatewayNetworkInterfaces = try gatewayNetworkInterfaces.map({ try NetworkInterface(dictionary: $0) })
            } else { 
                self.gatewayNetworkInterfaces = nil
            }
            self.nextUpdateAvailabilityDate = dictionary["NextUpdateAvailabilityDate"] as? String
            self.gatewayName = dictionary["GatewayName"] as? String
            self.gatewayId = dictionary["GatewayId"] as? String
        }
    }

    public struct FileShareInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let fileShareId: String?
        public let fileShareStatus: String?
        public let fileShareARN: String?
        public let gatewayARN: String?

        public init(fileShareId: String? = nil, fileShareStatus: String? = nil, fileShareARN: String? = nil, gatewayARN: String? = nil) {
            self.fileShareId = fileShareId
            self.fileShareStatus = fileShareStatus
            self.fileShareARN = fileShareARN
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.fileShareId = dictionary["FileShareId"] as? String
            self.fileShareStatus = dictionary["FileShareStatus"] as? String
            self.fileShareARN = dictionary["FileShareARN"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct UpdateSnapshotScheduleInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Frequency of snapshots. Specify the number of hours between snapshots.
        public let recurrenceInHours: Int32
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let startAt: Int32
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String
        /// Optional description of the snapshot that overwrites the existing description.
        public let description: String?

        public init(recurrenceInHours: Int32, startAt: Int32, volumeARN: String, description: String? = nil) {
            self.recurrenceInHours = recurrenceInHours
            self.startAt = startAt
            self.volumeARN = volumeARN
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let recurrenceInHours = dictionary["RecurrenceInHours"] as? Int32 else { throw InitializableError.missingRequiredParam("RecurrenceInHours") }
            self.recurrenceInHours = recurrenceInHours
            guard let startAt = dictionary["StartAt"] as? Int32 else { throw InitializableError.missingRequiredParam("StartAt") }
            self.startAt = startAt
            guard let volumeARN = dictionary["VolumeARN"] as? String else { throw InitializableError.missingRequiredParam("VolumeARN") }
            self.volumeARN = volumeARN
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DescribeVTLDevicesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of VTL device objects composed of the Amazon Resource Name(ARN) of the VTL devices.
        public let vTLDevices: [VTLDevice]?
        public let gatewayARN: String?

        public init(marker: String? = nil, vTLDevices: [VTLDevice]? = nil, gatewayARN: String? = nil) {
            self.marker = marker
            self.vTLDevices = vTLDevices
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let vTLDevices = dictionary["VTLDevices"] as? [[String: Any]] {
                self.vTLDevices = try vTLDevices.map({ try VTLDevice(dictionary: $0) })
            } else { 
                self.vTLDevices = nil
            }
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct DeleteChapCredentialsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the target.
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?

        public init(targetARN: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.initiatorName = dictionary["InitiatorName"] as? String
        }
    }

    public struct UpdateGatewayInformationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?
        public let gatewayName: String?

        public init(gatewayARN: String? = nil, gatewayName: String? = nil) {
            self.gatewayARN = gatewayARN
            self.gatewayName = gatewayName
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.gatewayName = dictionary["GatewayName"] as? String
        }
    }

    public struct DescribeMaintenanceStartTimeOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32?
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32?
        public let timezone: String?
        /// An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.
        public let dayOfWeek: Int32?

        public init(gatewayARN: String? = nil, hourOfDay: Int32? = nil, minuteOfHour: Int32? = nil, timezone: String? = nil, dayOfWeek: Int32? = nil) {
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
            self.timezone = timezone
            self.dayOfWeek = dayOfWeek
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.hourOfDay = dictionary["HourOfDay"] as? Int32
            self.minuteOfHour = dictionary["MinuteOfHour"] as? Int32
            self.timezone = dictionary["Timezone"] as? String
            self.dayOfWeek = dictionary["DayOfWeek"] as? Int32
        }
    }

    public struct DescribeSnapshotScheduleOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let startAt: Int32?
        public let recurrenceInHours: Int32?
        public let volumeARN: String?
        public let timezone: String?
        public let description: String?

        public init(startAt: Int32? = nil, recurrenceInHours: Int32? = nil, volumeARN: String? = nil, timezone: String? = nil, description: String? = nil) {
            self.startAt = startAt
            self.recurrenceInHours = recurrenceInHours
            self.volumeARN = volumeARN
            self.timezone = timezone
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.startAt = dictionary["StartAt"] as? Int32
            self.recurrenceInHours = dictionary["RecurrenceInHours"] as? Int32
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.timezone = dictionary["Timezone"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct DeleteFileShareInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the file share to be deleted. 
        public let fileShareARN: String

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let fileShareARN = dictionary["FileShareARN"] as? String else { throw InitializableError.missingRequiredParam("FileShareARN") }
            self.fileShareARN = fileShareARN
        }
    }

    public struct DescribeTapeRecoveryPointsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that indicates the position at which the virtual tape recovery points that were listed for description ended. Use this marker in your next request to list the next set of virtual tape recovery points in the list. If there are no more recovery points to describe, this field does not appear in the response.
        public let marker: String?
        public let gatewayARN: String?
        /// An array of TapeRecoveryPointInfos that are available for the specified gateway.
        public let tapeRecoveryPointInfos: [TapeRecoveryPointInfo]?

        public init(marker: String? = nil, gatewayARN: String? = nil, tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil) {
            self.marker = marker
            self.gatewayARN = gatewayARN
            self.tapeRecoveryPointInfos = tapeRecoveryPointInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.gatewayARN = dictionary["GatewayARN"] as? String
            if let tapeRecoveryPointInfos = dictionary["TapeRecoveryPointInfos"] as? [[String: Any]] {
                self.tapeRecoveryPointInfos = try tapeRecoveryPointInfos.map({ try TapeRecoveryPointInfo(dictionary: $0) })
            } else { 
                self.tapeRecoveryPointInfos = nil
            }
        }
    }

    public struct DescribeCacheInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct ShutdownGatewayOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct ListFileSharesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the request includes Marker, the response returns that value in this field. 
        public let marker: String?
        /// An array of information about the file gateway's file shares. 
        public let fileShareInfoList: [FileShareInfo]?
        /// If a value is present, there are more file shares to return. In a subsequent request, use NextMarker as the value for Marker to retrieve the next set of file shares. 
        public let nextMarker: String?

        public init(marker: String? = nil, fileShareInfoList: [FileShareInfo]? = nil, nextMarker: String? = nil) {
            self.marker = marker
            self.fileShareInfoList = fileShareInfoList
            self.nextMarker = nextMarker
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let fileShareInfoList = dictionary["FileShareInfoList"] as? [[String: Any]] {
                self.fileShareInfoList = try fileShareInfoList.map({ try FileShareInfo(dictionary: $0) })
            } else { 
                self.fileShareInfoList = nil
            }
            self.nextMarker = dictionary["NextMarker"] as? String
        }
    }

    public struct DisableGatewayInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeVTLDevicesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        /// Specifies that the number of VTL devices described be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing the VTL devices.
        public let marker: String?
        /// An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.  All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway. 
        public let vTLDeviceARNs: [String]?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, vTLDeviceARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
            self.vTLDeviceARNs = vTLDeviceARNs
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            self.limit = dictionary["Limit"] as? Int32
            self.marker = dictionary["Marker"] as? String
            self.vTLDeviceARNs = dictionary["VTLDeviceARNs"] as? [String]
        }
    }

    public struct VolumeiSCSIAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the volume target.
        public let targetARN: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The network interface identifier.
        public let networkInterfaceId: String?
        /// The port used to communicate with iSCSI targets.
        public let networkInterfacePort: Int32?
        /// The logical disk number.
        public let lunNumber: Int32?

        public init(targetARN: String? = nil, chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, lunNumber: Int32? = nil) {
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePort = networkInterfacePort
            self.lunNumber = lunNumber
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.chapEnabled = dictionary["ChapEnabled"] as? Bool
            self.networkInterfaceId = dictionary["NetworkInterfaceId"] as? String
            self.networkInterfacePort = dictionary["NetworkInterfacePort"] as? Int32
            self.lunNumber = dictionary["LunNumber"] as? Int32
        }
    }

    public struct ListVolumeRecoveryPointsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?
        public let volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]?

        public init(gatewayARN: String? = nil, volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.volumeRecoveryPointInfos = volumeRecoveryPointInfos
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
            if let volumeRecoveryPointInfos = dictionary["VolumeRecoveryPointInfos"] as? [[String: Any]] {
                self.volumeRecoveryPointInfos = try volumeRecoveryPointInfos.map({ try VolumeRecoveryPointInfo(dictionary: $0) })
            } else { 
                self.volumeRecoveryPointInfos = nil
            }
        }
    }

    public struct ListGatewaysInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// An opaque string that indicates the position at which to begin the returned list of gateways.
        public let marker: String?
        /// Specifies that the list of gateways returned be limited to the specified number of items.
        public let limit: Int32?

        public init(marker: String? = nil, limit: Int32? = nil) {
            self.marker = marker
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct CreateStorediSCSIVolumeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new stored volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?
        public let gatewayARN: String
        /// Specify this field as true if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.  Valid Values: true, false
        public let preserveExistingData: Bool
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The unique identifier for the gateway local disk that is configured as a stored volume. Use ListLocalDisks to list disk IDs for a gateway.
        public let diskId: String
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway.
        public let targetName: String

        public init(snapshotId: String? = nil, gatewayARN: String, preserveExistingData: Bool, networkInterfaceId: String, diskId: String, targetName: String) {
            self.snapshotId = snapshotId
            self.gatewayARN = gatewayARN
            self.preserveExistingData = preserveExistingData
            self.networkInterfaceId = networkInterfaceId
            self.diskId = diskId
            self.targetName = targetName
        }

        public init(dictionary: [String: Any]) throws {
            self.snapshotId = dictionary["SnapshotId"] as? String
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let preserveExistingData = dictionary["PreserveExistingData"] as? Bool else { throw InitializableError.missingRequiredParam("PreserveExistingData") }
            self.preserveExistingData = preserveExistingData
            guard let networkInterfaceId = dictionary["NetworkInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("NetworkInterfaceId") }
            self.networkInterfaceId = networkInterfaceId
            guard let diskId = dictionary["DiskId"] as? String else { throw InitializableError.missingRequiredParam("DiskId") }
            self.diskId = diskId
            guard let targetName = dictionary["TargetName"] as? String else { throw InitializableError.missingRequiredParam("TargetName") }
            self.targetName = targetName
        }
    }

    public struct ChapInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the volume.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let targetARN: String?
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).
        public let secretToAuthenticateTarget: String?
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.
        public let secretToAuthenticateInitiator: String?
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?

        public init(targetARN: String? = nil, secretToAuthenticateTarget: String? = nil, secretToAuthenticateInitiator: String? = nil, initiatorName: String? = nil) {
            self.targetARN = targetARN
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
        }

        public init(dictionary: [String: Any]) throws {
            self.targetARN = dictionary["TargetARN"] as? String
            self.secretToAuthenticateTarget = dictionary["SecretToAuthenticateTarget"] as? String
            self.secretToAuthenticateInitiator = dictionary["SecretToAuthenticateInitiator"] as? String
            self.initiatorName = dictionary["InitiatorName"] as? String
        }
    }

    public struct StorageGatewayError: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional information about the error.
        public let errorCode: ErrorCode?
        /// Human-readable text that provides detail about the error that occurred.
        public let errorDetails: [String: String]?

        public init(errorCode: ErrorCode? = nil, errorDetails: [String: String]? = nil) {
            self.errorCode = errorCode
            self.errorDetails = errorDetails
        }

        public init(dictionary: [String: Any]) throws {
            if let errorCode = dictionary["errorCode"] as? String { self.errorCode = ErrorCode(rawValue: errorCode) } else { self.errorCode = nil }
            if let errorDetails = dictionary["errorDetails"] as? [String: String] {
                self.errorDetails = errorDetails
            } else { 
                self.errorDetails = nil
            }
        }
    }

    public struct VolumeInfo: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The size of the volume in bytes. Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeSizeInBytes: Int64?
        public let gatewayARN: String?
        public let volumeType: String?
        /// The Amazon Resource Name (ARN) for the storage volume. For example, the following is a valid ARN:  arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB   Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeARN: String?
        /// The unique identifier assigned to the volume. This ID becomes part of the volume Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeId: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let gatewayId: String?

        public init(volumeSizeInBytes: Int64? = nil, gatewayARN: String? = nil, volumeType: String? = nil, volumeARN: String? = nil, volumeId: String? = nil, gatewayId: String? = nil) {
            self.volumeSizeInBytes = volumeSizeInBytes
            self.gatewayARN = gatewayARN
            self.volumeType = volumeType
            self.volumeARN = volumeARN
            self.volumeId = volumeId
            self.gatewayId = gatewayId
        }

        public init(dictionary: [String: Any]) throws {
            self.volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64
            self.gatewayARN = dictionary["GatewayARN"] as? String
            self.volumeType = dictionary["VolumeType"] as? String
            self.volumeARN = dictionary["VolumeARN"] as? String
            self.volumeId = dictionary["VolumeId"] as? String
            self.gatewayId = dictionary["GatewayId"] as? String
        }
    }

    public struct AddWorkingStorageOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct CancelRetrievalOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape for which retrieval was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct ListVolumeInitiatorsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The host names and port numbers of all iSCSI initiators that are connected to the gateway.
        public let initiators: [String]?

        public init(initiators: [String]? = nil) {
            self.initiators = initiators
        }

        public init(dictionary: [String: Any]) throws {
            self.initiators = dictionary["Initiators"] as? [String]
        }
    }

    public struct DescribeBandwidthRateLimitInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct DescribeUploadBufferInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct CreateCachediSCSIVolumeInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        public let networkInterfaceId: String
        public let clientToken: String
        public let volumeSizeInBytes: Int64
        public let snapshotId: String?
        public let targetName: String
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The VolumeSizeInBytes value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        public let sourceVolumeARN: String?

        public init(gatewayARN: String, networkInterfaceId: String, clientToken: String, volumeSizeInBytes: Int64, snapshotId: String? = nil, targetName: String, sourceVolumeARN: String? = nil) {
            self.gatewayARN = gatewayARN
            self.networkInterfaceId = networkInterfaceId
            self.clientToken = clientToken
            self.volumeSizeInBytes = volumeSizeInBytes
            self.snapshotId = snapshotId
            self.targetName = targetName
            self.sourceVolumeARN = sourceVolumeARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let networkInterfaceId = dictionary["NetworkInterfaceId"] as? String else { throw InitializableError.missingRequiredParam("NetworkInterfaceId") }
            self.networkInterfaceId = networkInterfaceId
            guard let clientToken = dictionary["ClientToken"] as? String else { throw InitializableError.missingRequiredParam("ClientToken") }
            self.clientToken = clientToken
            guard let volumeSizeInBytes = dictionary["VolumeSizeInBytes"] as? Int64 else { throw InitializableError.missingRequiredParam("VolumeSizeInBytes") }
            self.volumeSizeInBytes = volumeSizeInBytes
            self.snapshotId = dictionary["SnapshotId"] as? String
            guard let targetName = dictionary["TargetName"] as? String else { throw InitializableError.missingRequiredParam("TargetName") }
            self.targetName = targetName
            self.sourceVolumeARN = dictionary["SourceVolumeARN"] as? String
        }
    }

    public struct ListGatewaysOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let marker: String?
        public let gateways: [GatewayInfo]?

        public init(marker: String? = nil, gateways: [GatewayInfo]? = nil) {
            self.marker = marker
            self.gateways = gateways
        }

        public init(dictionary: [String: Any]) throws {
            self.marker = dictionary["Marker"] as? String
            if let gateways = dictionary["Gateways"] as? [[String: Any]] {
                self.gateways = try gateways.map({ try GatewayInfo(dictionary: $0) })
            } else { 
                self.gateways = nil
            }
        }
    }

    public struct ShutdownGatewayInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
        }
    }

    public struct RetrieveTapeRecoveryPointOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        public init(dictionary: [String: Any]) throws {
            self.tapeARN = dictionary["TapeARN"] as? String
        }
    }

    public struct DisableGatewayOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The unique Amazon Resource Name of the disabled gateway.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        public init(dictionary: [String: Any]) throws {
            self.gatewayARN = dictionary["GatewayARN"] as? String
        }
    }

    public struct AddCacheInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let gatewayARN: String
        public let diskIds: [String]

        public init(gatewayARN: String, diskIds: [String]) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        public init(dictionary: [String: Any]) throws {
            guard let gatewayARN = dictionary["GatewayARN"] as? String else { throw InitializableError.missingRequiredParam("GatewayARN") }
            self.gatewayARN = gatewayARN
            guard let diskIds = dictionary["DiskIds"] as? [String] else { throw InitializableError.missingRequiredParam("DiskIds") }
            self.diskIds = diskIds
        }
    }

}