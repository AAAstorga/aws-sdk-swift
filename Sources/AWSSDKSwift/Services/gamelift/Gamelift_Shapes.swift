// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Gamelift {

    public struct DeleteFleetInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
        }
    }

    public struct UpdateFleetCapacityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Minimum value allowed for the fleet's instance count. Default if not set is 0.
        public let minSize: Int32?
        /// Maximum value allowed for the fleet's instance count. Default if not set is 1.
        public let maxSize: Int32?
        /// Number of EC2 instances you want this fleet to host.
        public let desiredInstances: Int32?
        /// Unique identifier for a fleet to update capacity for.
        public let fleetId: String

        public init(minSize: Int32? = nil, maxSize: Int32? = nil, desiredInstances: Int32? = nil, fleetId: String) {
            self.minSize = minSize
            self.maxSize = maxSize
            self.desiredInstances = desiredInstances
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.minSize = dictionary["MinSize"] as? Int32
            self.maxSize = dictionary["MaxSize"] as? Int32
            self.desiredInstances = dictionary["DesiredInstances"] as? Int32
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
        }
    }

    public struct DescribePlayerSessionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a player to retrieve player sessions for.
        public let playerId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve player sessions for.
        public let gameSessionId: String?
        /// Player session status to filter results on. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        public let playerSessionStatusFilter: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
        public let nextToken: String?
        /// Unique identifier for a player session to retrieve.
        public let playerSessionId: String?

        public init(playerId: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, playerSessionStatusFilter: String? = nil, nextToken: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.playerSessionStatusFilter = playerSessionStatusFilter
            self.nextToken = nextToken
            self.playerSessionId = playerSessionId
        }

        public init(dictionary: [String: Any]) throws {
            self.playerId = dictionary["PlayerId"] as? String
            self.limit = dictionary["Limit"] as? Int32
            self.gameSessionId = dictionary["GameSessionId"] as? String
            self.playerSessionStatusFilter = dictionary["PlayerSessionStatusFilter"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.playerSessionId = dictionary["PlayerSessionId"] as? String
        }
    }

    public struct SearchGameSessionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Order -- Valid sort orders are ASC (ascending) and DESC (descending).   For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
        public let sortExpression: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. 
        public let limit: Int32?
        /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Comparator -- Valid comparators are: =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=.     Value -- Value to be searched for. Values can be numbers, boolean values (true/false) or strings. String values are case sensitive, enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and &lt;&gt;. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".    To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:    =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=    Parentheses   NOT   AND   OR   For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true". 
        public let filterExpression: String?
        /// Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(sortExpression: String? = nil, limit: Int32? = nil, filterExpression: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.sortExpression = sortExpression
            self.limit = limit
            self.filterExpression = filterExpression
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.sortExpression = dictionary["SortExpression"] as? String
            self.limit = dictionary["Limit"] as? Int32
            self.filterExpression = dictionary["FilterExpression"] as? String
            self.fleetId = dictionary["FleetId"] as? String
            self.aliasId = dictionary["AliasId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct PutScalingPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["Name"] as? String
        }
    }

    public enum EventCode: String, CustomStringConvertible {
        case generic_event = "GENERIC_EVENT"
        case fleet_created = "FLEET_CREATED"
        case fleet_deleted = "FLEET_DELETED"
        case fleet_scaling_event = "FLEET_SCALING_EVENT"
        case fleet_state_downloading = "FLEET_STATE_DOWNLOADING"
        case fleet_state_validating = "FLEET_STATE_VALIDATING"
        case fleet_state_building = "FLEET_STATE_BUILDING"
        case fleet_state_activating = "FLEET_STATE_ACTIVATING"
        case fleet_state_active = "FLEET_STATE_ACTIVE"
        case fleet_state_error = "FLEET_STATE_ERROR"
        case fleet_initialization_failed = "FLEET_INITIALIZATION_FAILED"
        case fleet_binary_download_failed = "FLEET_BINARY_DOWNLOAD_FAILED"
        case fleet_validation_launch_path_not_found = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case fleet_validation_executable_runtime_failure = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case fleet_validation_timed_out = "FLEET_VALIDATION_TIMED_OUT"
        case fleet_activation_failed = "FLEET_ACTIVATION_FAILED"
        case fleet_activation_failed_no_instances = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case fleet_new_game_session_protection_policy_updated = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case server_process_invalid_path = "SERVER_PROCESS_INVALID_PATH"
        case server_process_sdk_initialization_timeout = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case server_process_process_ready_timeout = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case server_process_crashed = "SERVER_PROCESS_CRASHED"
        case server_process_terminated_unhealthy = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        case server_process_force_terminated = "SERVER_PROCESS_FORCE_TERMINATED"
        case server_process_process_exit_timeout = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case game_session_activation_timeout = "GAME_SESSION_ACTIVATION_TIMEOUT"
        public var description: String { return self.rawValue }
    }

    public struct ScalingPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?
        /// Current status of the scaling policy. The scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATE_REQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETE_REQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        public let status: ScalingStatusType?
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number does include game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        public let metricName: MetricName?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int32?
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int32?
        /// Comparison operator to use when measuring a metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.  
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// Unique identifier for a fleet that is associated with this scaling policy.
        public let fleetId: String?

        public init(threshold: Double? = nil, status: ScalingStatusType? = nil, metricName: MetricName? = nil, evaluationPeriods: Int32? = nil, name: String? = nil, scalingAdjustment: Int32? = nil, comparisonOperator: ComparisonOperatorType? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, fleetId: String? = nil) {
            self.threshold = threshold
            self.status = status
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.threshold = dictionary["Threshold"] as? Double
            if let status = dictionary["Status"] as? String { self.status = ScalingStatusType(rawValue: status) } else { self.status = nil }
            if let metricName = dictionary["MetricName"] as? String { self.metricName = MetricName(rawValue: metricName) } else { self.metricName = nil }
            self.evaluationPeriods = dictionary["EvaluationPeriods"] as? Int32
            self.name = dictionary["Name"] as? String
            self.scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32
            if let comparisonOperator = dictionary["ComparisonOperator"] as? String { self.comparisonOperator = ComparisonOperatorType(rawValue: comparisonOperator) } else { self.comparisonOperator = nil }
            if let scalingAdjustmentType = dictionary["ScalingAdjustmentType"] as? String { self.scalingAdjustmentType = ScalingAdjustmentType(rawValue: scalingAdjustmentType) } else { self.scalingAdjustmentType = nil }
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct GetGameSessionLogUrlOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Location of the requested game session logs, available for download.
        public let preSignedUrl: String?

        public init(preSignedUrl: String? = nil) {
            self.preSignedUrl = preSignedUrl
        }

        public init(dictionary: [String: Any]) throws {
            self.preSignedUrl = dictionary["PreSignedUrl"] as? String
        }
    }

    public enum ScalingStatusType: String, CustomStringConvertible {
        case active = "ACTIVE"
        case update_requested = "UPDATE_REQUESTED"
        case updating = "UPDATING"
        case delete_requested = "DELETE_REQUESTED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct Build: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current status of the build. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?
        /// Descriptive label that is associated with a build. Build names do not need to be unique. It can be set using CreateBuild or UpdateBuild.
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique. This value can be set using CreateBuild or UpdateBuild.
        public let version: String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        public let operatingSystem: OperatingSystem?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED, this value is 0.
        public let sizeOnDisk: Int64?
        /// Unique identifier for a build.
        public let buildId: String?

        public init(status: BuildStatus? = nil, name: String? = nil, version: String? = nil, operatingSystem: OperatingSystem? = nil, creationTime: Date? = nil, sizeOnDisk: Int64? = nil, buildId: String? = nil) {
            self.status = status
            self.name = name
            self.version = version
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.sizeOnDisk = sizeOnDisk
            self.buildId = buildId
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = BuildStatus(rawValue: status) } else { self.status = nil }
            self.name = dictionary["Name"] as? String
            self.version = dictionary["Version"] as? String
            if let operatingSystem = dictionary["OperatingSystem"] as? String { self.operatingSystem = OperatingSystem(rawValue: operatingSystem) } else { self.operatingSystem = nil }
            self.creationTime = dictionary["CreationTime"] as? Date
            self.sizeOnDisk = dictionary["SizeOnDisk"] as? Int64
            self.buildId = dictionary["BuildId"] as? String
        }
    }

    public struct DescribeBuildInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a build to retrieve properties for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public init(dictionary: [String: Any]) throws {
            guard let buildId = dictionary["BuildId"] as? String else { throw InitializableError.missingRequiredParam("BuildId") }
            self.buildId = buildId
        }
    }

    public struct DescribeFleetPortSettingsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to retrieve port settings for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
        }
    }

    public struct DescribeFleetUtilizationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing utilization information for each requested fleet ID.
        public let fleetUtilization: [FleetUtilization]?

        public init(nextToken: String? = nil, fleetUtilization: [FleetUtilization]? = nil) {
            self.nextToken = nextToken
            self.fleetUtilization = fleetUtilization
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let fleetUtilization = dictionary["FleetUtilization"] as? [[String: Any]] {
                self.fleetUtilization = try fleetUtilization.map({ try FleetUtilization(dictionary: $0) })
            } else { 
                self.fleetUtilization = nil
            }
        }
    }

    public struct UpdateGameSessionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains the updated game session metadata.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSession = dictionary["GameSession"] as? [String: Any] { self.gameSession = try Gamelift.GameSession(dictionary: gameSession) } else { self.gameSession = nil }
        }
    }

    public enum EC2InstanceType: String, CustomStringConvertible {
        case t2_micro = "t2.micro"
        case t2_small = "t2.small"
        case t2_medium = "t2.medium"
        case t2_large = "t2.large"
        case c3_large = "c3.large"
        case c3_xlarge = "c3.xlarge"
        case c3_2xlarge = "c3.2xlarge"
        case c3_4xlarge = "c3.4xlarge"
        case c3_8xlarge = "c3.8xlarge"
        case c4_large = "c4.large"
        case c4_xlarge = "c4.xlarge"
        case c4_2xlarge = "c4.2xlarge"
        case c4_4xlarge = "c4.4xlarge"
        case c4_8xlarge = "c4.8xlarge"
        case r3_large = "r3.large"
        case r3_xlarge = "r3.xlarge"
        case r3_2xlarge = "r3.2xlarge"
        case r3_4xlarge = "r3.4xlarge"
        case r3_8xlarge = "r3.8xlarge"
        case m3_medium = "m3.medium"
        case m3_large = "m3.large"
        case m3_xlarge = "m3.xlarge"
        case m3_2xlarge = "m3.2xlarge"
        case m4_large = "m4.large"
        case m4_xlarge = "m4.xlarge"
        case m4_2xlarge = "m4.2xlarge"
        case m4_4xlarge = "m4.4xlarge"
        case m4_10xlarge = "m4.10xlarge"
        public var description: String { return self.rawValue }
    }

    public struct ResolveAliasOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Fleet identifier that is associated with the requested alias.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct DescribeAliasInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet alias. Specify the alias you want to retrieve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasId = dictionary["AliasId"] as? String else { throw InitializableError.missingRequiredParam("AliasId") }
            self.aliasId = aliasId
        }
    }

    public struct UpdateGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            if let destinations = dictionary["Destinations"] as? [[String: Any]] {
                self.destinations = try destinations.map({ try GameSessionQueueDestination(dictionary: $0) })
            } else { 
                self.destinations = nil
            }
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.timeoutInSeconds = dictionary["TimeoutInSeconds"] as? Int32
        }
    }

    public enum MetricName: String, CustomStringConvertible {
        case activatinggamesessions = "ActivatingGameSessions"
        case activegamesessions = "ActiveGameSessions"
        case activeinstances = "ActiveInstances"
        case availableplayersessions = "AvailablePlayerSessions"
        case currentplayersessions = "CurrentPlayerSessions"
        case idleinstances = "IdleInstances"
        case queuedepth = "QueueDepth"
        case waittime = "WaitTime"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the requested game session placement.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionPlacement = dictionary["GameSessionPlacement"] as? [String: Any] { self.gameSessionPlacement = try Gamelift.GameSessionPlacement(dictionary: gameSessionPlacement) } else { self.gameSessionPlacement = nil }
        }
    }

    public struct GameSession: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Unique identifier for the game session. A game session ID has the following format: "arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;game session ID&gt;".
        public let gameSessionId: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public let status: GameSessionStatus?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// IP address of the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public let creatorId: String?
        /// Indicates whether or not the game session is accepting new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Unique identifier for a fleet the game session is running on.
        public let fleetId: String?
        /// Number of players currently in the game session.
        public let currentPlayerSessionCount: Int32?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let port: Int32?

        public init(terminationTime: Date? = nil, creationTime: Date? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32? = nil, status: GameSessionStatus? = nil, name: String? = nil, ipAddress: String? = nil, creatorId: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, gameProperties: [GameProperty]? = nil, fleetId: String? = nil, currentPlayerSessionCount: Int32? = nil, port: Int32? = nil) {
            self.terminationTime = terminationTime
            self.creationTime = creationTime
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.status = status
            self.name = name
            self.ipAddress = ipAddress
            self.creatorId = creatorId
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.gameProperties = gameProperties
            self.fleetId = fleetId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            self.terminationTime = dictionary["TerminationTime"] as? Date
            self.creationTime = dictionary["CreationTime"] as? Date
            self.gameSessionId = dictionary["GameSessionId"] as? String
            self.maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32
            if let status = dictionary["Status"] as? String { self.status = GameSessionStatus(rawValue: status) } else { self.status = nil }
            self.name = dictionary["Name"] as? String
            self.ipAddress = dictionary["IpAddress"] as? String
            self.creatorId = dictionary["CreatorId"] as? String
            if let playerSessionCreationPolicy = dictionary["PlayerSessionCreationPolicy"] as? String { self.playerSessionCreationPolicy = PlayerSessionCreationPolicy(rawValue: playerSessionCreationPolicy) } else { self.playerSessionCreationPolicy = nil }
            if let gameProperties = dictionary["GameProperties"] as? [[String: Any]] {
                self.gameProperties = try gameProperties.map({ try GameProperty(dictionary: $0) })
            } else { 
                self.gameProperties = nil
            }
            self.fleetId = dictionary["FleetId"] as? String
            self.currentPlayerSessionCount = dictionary["CurrentPlayerSessionCount"] as? Int32
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct ListBuildsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of build records that match the request.
        public let builds: [Build]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(builds: [Build]? = nil, nextToken: String? = nil) {
            self.builds = builds
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let builds = dictionary["Builds"] as? [[String: Any]] {
                self.builds = try builds.map({ try Build(dictionary: $0) })
            } else { 
                self.builds = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum ComparisonOperatorType: String, CustomStringConvertible {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPoliciesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing the scaling policies matching the request.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let scalingPolicies = dictionary["ScalingPolicies"] as? [[String: Any]] {
                self.scalingPolicies = try scalingPolicies.map({ try ScalingPolicy(dictionary: $0) })
            } else { 
                self.scalingPolicies = nil
            }
        }
    }

    public struct GameSessionPlacement: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: Date?
        /// Current status of the game session placement request.    PENDING – The placement request is currently in the queue waiting to be processed.    FULFILLED – A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.     CANCELLED – The placement request was cancelled with a call to StopGameSessionPlacement.    TIMED_OUT – A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.  
        public let status: GameSessionPlacementState?
        /// Name of the region where the game session created by this placement request is running. This value exists only if the game session placement status is Completed.
        public let gameSessionRegion: String?
        /// Identifier for the game session created by this placement request. This value exists only if the game session placement status is Completed. This identifier is unique across all regions.
        public let gameSessionArn: String?
        /// Unique identifier for a game session placement.
        public let placementId: String?
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players experience when connected to AWS regions.
        public let playerLatencies: [PlayerLatency]?
        /// Time stamp indicating when this request was completed, cancelled, or timed out.
        public let endTime: Date?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let gameSessionQueueName: String?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?

        public init(startTime: Date? = nil, status: GameSessionPlacementState? = nil, gameSessionRegion: String? = nil, gameSessionArn: String? = nil, placementId: String? = nil, playerLatencies: [PlayerLatency]? = nil, endTime: Date? = nil, gameSessionQueueName: String? = nil, gameProperties: [GameProperty]? = nil, maximumPlayerSessionCount: Int32? = nil, gameSessionName: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.gameSessionRegion = gameSessionRegion
            self.gameSessionArn = gameSessionArn
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.endTime = endTime
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.gameSessionName = gameSessionName
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            if let status = dictionary["Status"] as? String { self.status = GameSessionPlacementState(rawValue: status) } else { self.status = nil }
            self.gameSessionRegion = dictionary["GameSessionRegion"] as? String
            self.gameSessionArn = dictionary["GameSessionArn"] as? String
            self.placementId = dictionary["PlacementId"] as? String
            if let playerLatencies = dictionary["PlayerLatencies"] as? [[String: Any]] {
                self.playerLatencies = try playerLatencies.map({ try PlayerLatency(dictionary: $0) })
            } else { 
                self.playerLatencies = nil
            }
            self.endTime = dictionary["EndTime"] as? Date
            self.gameSessionQueueName = dictionary["GameSessionQueueName"] as? String
            if let gameProperties = dictionary["GameProperties"] as? [[String: Any]] {
                self.gameProperties = try gameProperties.map({ try GameProperty(dictionary: $0) })
            } else { 
                self.gameProperties = nil
            }
            self.maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32
            self.gameSessionName = dictionary["GameSessionName"] as? String
        }
    }

    public struct ListBuildsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(status: BuildStatus? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = BuildStatus(rawValue: status) } else { self.status = nil }
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct RuntimeConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of server process configurations describing what server processes to run on each instance in a fleet
        public let serverProcesses: [ServerProcess]?

        public init(serverProcesses: [ServerProcess]? = nil) {
            self.serverProcesses = serverProcesses
        }

        public init(dictionary: [String: Any]) throws {
            if let serverProcesses = dictionary["ServerProcesses"] as? [[String: Any]] {
                self.serverProcesses = try serverProcesses.map({ try ServerProcess(dictionary: $0) })
            } else { 
                self.serverProcesses = nil
            }
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current status of the instance. Possible statuses include the following:    PENDING – The instance is in the process of being created and launching server processes as defined in the fleet's runtime configuration.     ACTIVE – The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.     TERMINATING – The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.  
        public let status: InstanceStatus?
        /// Unique identifier for an instance.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?
        /// Operating system that is running on this instance. 
        public let operatingSystem: OperatingSystem?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// EC2 instance type that defines the computing resources of this instance. 
        public let `type`: EC2InstanceType?
        /// Unique identifier for a fleet that the instance is in.
        public let fleetId: String?

        public init(status: InstanceStatus? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: OperatingSystem? = nil, creationTime: Date? = nil, type: EC2InstanceType? = nil, fleetId: String? = nil) {
            self.status = status
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.`type` = `type`
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = InstanceStatus(rawValue: status) } else { self.status = nil }
            self.instanceId = dictionary["InstanceId"] as? String
            self.ipAddress = dictionary["IpAddress"] as? String
            if let operatingSystem = dictionary["OperatingSystem"] as? String { self.operatingSystem = OperatingSystem(rawValue: operatingSystem) } else { self.operatingSystem = nil }
            self.creationTime = dictionary["CreationTime"] as? Date
            if let `type` = dictionary["Type"] as? String { self.`type` = EC2InstanceType(rawValue: `type`) } else { self.`type` = nil }
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct EC2InstanceLimit: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of instances of the specified type that are currently in use by this AWS account.
        public let currentInstances: Int32?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType?
        /// Number of instances allowed.
        public let instanceLimit: Int32?

        public init(currentInstances: Int32? = nil, eC2InstanceType: EC2InstanceType? = nil, instanceLimit: Int32? = nil) {
            self.currentInstances = currentInstances
            self.eC2InstanceType = eC2InstanceType
            self.instanceLimit = instanceLimit
        }

        public init(dictionary: [String: Any]) throws {
            self.currentInstances = dictionary["CurrentInstances"] as? Int32
            if let eC2InstanceType = dictionary["EC2InstanceType"] as? String { self.eC2InstanceType = EC2InstanceType(rawValue: eC2InstanceType) } else { self.eC2InstanceType = nil }
            self.instanceLimit = dictionary["InstanceLimit"] as? Int32
        }
    }

    public struct DeleteGameSessionQueueOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DescribeFleetAttributesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of objects containing attribute metadata for each requested fleet ID.
        public let fleetAttributes: [FleetAttributes]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetAttributes: [FleetAttributes]? = nil, nextToken: String? = nil) {
            self.fleetAttributes = fleetAttributes
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let fleetAttributes = dictionary["FleetAttributes"] as? [[String: Any]] {
                self.fleetAttributes = try fleetAttributes.map({ try FleetAttributes(dictionary: $0) })
            } else { 
                self.fleetAttributes = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct GetInstanceAccessOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains connection information for a fleet instance, including IP address and access credentials.
        public let instanceAccess: InstanceAccess?

        public init(instanceAccess: InstanceAccess? = nil) {
            self.instanceAccess = instanceAccess
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceAccess = dictionary["InstanceAccess"] as? [String: Any] { self.instanceAccess = try Gamelift.InstanceAccess(dictionary: instanceAccess) } else { self.instanceAccess = nil }
        }
    }

    public struct StartGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionPlacement = dictionary["GameSessionPlacement"] as? [String: Any] { self.gameSessionPlacement = try Gamelift.GameSessionPlacement(dictionary: gameSessionPlacement) } else { self.gameSessionPlacement = nil }
        }
    }

    public struct CreateGameSessionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly created game session record.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSession = dictionary["GameSession"] as? [String: Any] { self.gameSession = try Gamelift.GameSession(dictionary: gameSession) } else { self.gameSession = nil }
        }
    }

    public struct ListAliasesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Type of routing to filter results on. Use this parameter to retrieve only aliases of a certain type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let routingStrategyType: RoutingStrategyType?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(routingStrategyType: RoutingStrategyType? = nil, limit: Int32? = nil, name: String? = nil, nextToken: String? = nil) {
            self.routingStrategyType = routingStrategyType
            self.limit = limit
            self.name = name
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let routingStrategyType = dictionary["RoutingStrategyType"] as? String { self.routingStrategyType = RoutingStrategyType(rawValue: routingStrategyType) } else { self.routingStrategyType = nil }
            self.limit = dictionary["Limit"] as? Int32
            self.name = dictionary["Name"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct UpdateRuntimeConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The runtime configuration currently in force. If the update was successful, this object matches the one in the request.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let runtimeConfiguration = dictionary["RuntimeConfiguration"] as? [String: Any] { self.runtimeConfiguration = try Gamelift.RuntimeConfiguration(dictionary: runtimeConfiguration) } else { self.runtimeConfiguration = nil }
        }
    }

    public struct RequestUploadCredentialsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a build to get credentials for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public init(dictionary: [String: Any]) throws {
            guard let buildId = dictionary["BuildId"] as? String else { throw InitializableError.missingRequiredParam("BuildId") }
            self.buildId = buildId
        }
    }

    public enum PlayerSessionStatus: String, CustomStringConvertible {
        case reserved = "RESERVED"
        case active = "ACTIVE"
        case completed = "COMPLETED"
        case timedout = "TIMEDOUT"
        public var description: String { return self.rawValue }
    }

    public struct StopGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a game session placement to cancel.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public init(dictionary: [String: Any]) throws {
            guard let placementId = dictionary["PlacementId"] as? String else { throw InitializableError.missingRequiredParam("PlacementId") }
            self.placementId = placementId
        }
    }

    public struct CreateFleetInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType
        /// Unique identifier for a build to be deployed on the new fleet. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        public let buildId: String
        /// This parameter is no longer used. Instead, specify server launch parameters in the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.)
        public let serverLaunchParameters: String?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String
        /// Game session protection policy to apply to all instances in this fleet. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy using UpdateFleetAttributes, but this change will only affect sessions created after the policy change. You can also set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. If no inbound permissions are set, including both IP address range and port range, the server processes in the fleet cannot accept connections. You can specify one or more sets of permissions for a fleet.
        public let eC2InboundPermissions: [IpPermission]?
        /// Instructions for launching server processes on each instance in the fleet. The runtime configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance. A CreateFleet request must include a runtime configuration with at least one server process configuration; otherwise the request will fail with an invalid request exception. (This parameter replaces the parameters ServerLaunchPath and ServerLaunchParameters; requests that contain values for these parameters instead of a runtime configuration will continue to work.) 
        public let runtimeConfiguration: RuntimeConfiguration?
        /// This parameter is no longer used. Instead, to specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API ProcessReady() and specify one or more directory paths in logParameters. See more information in the Server API Reference. 
        public let logPaths: [String]?
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.)
        public let serverLaunchPath: String?
        /// Human-readable description of a fleet.
        public let description: String?

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, eC2InstanceType: EC2InstanceType, buildId: String, serverLaunchParameters: String? = nil, name: String, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, eC2InboundPermissions: [IpPermission]? = nil, runtimeConfiguration: RuntimeConfiguration? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, description: String? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.eC2InstanceType = eC2InstanceType
            self.buildId = buildId
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.eC2InboundPermissions = eC2InboundPermissions
            self.runtimeConfiguration = runtimeConfiguration
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceCreationLimitPolicy = dictionary["ResourceCreationLimitPolicy"] as? [String: Any] { self.resourceCreationLimitPolicy = try Gamelift.ResourceCreationLimitPolicy(dictionary: resourceCreationLimitPolicy) } else { self.resourceCreationLimitPolicy = nil }
            guard let rawEC2InstanceType = dictionary["EC2InstanceType"] as? String, let eC2InstanceType = EC2InstanceType(rawValue: rawEC2InstanceType) else { throw InitializableError.missingRequiredParam("EC2InstanceType") }
            self.eC2InstanceType = eC2InstanceType
            guard let buildId = dictionary["BuildId"] as? String else { throw InitializableError.missingRequiredParam("BuildId") }
            self.buildId = buildId
            self.serverLaunchParameters = dictionary["ServerLaunchParameters"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let newGameSessionProtectionPolicy = dictionary["NewGameSessionProtectionPolicy"] as? String { self.newGameSessionProtectionPolicy = ProtectionPolicy(rawValue: newGameSessionProtectionPolicy) } else { self.newGameSessionProtectionPolicy = nil }
            if let eC2InboundPermissions = dictionary["EC2InboundPermissions"] as? [[String: Any]] {
                self.eC2InboundPermissions = try eC2InboundPermissions.map({ try IpPermission(dictionary: $0) })
            } else { 
                self.eC2InboundPermissions = nil
            }
            if let runtimeConfiguration = dictionary["RuntimeConfiguration"] as? [String: Any] { self.runtimeConfiguration = try Gamelift.RuntimeConfiguration(dictionary: runtimeConfiguration) } else { self.runtimeConfiguration = nil }
            self.logPaths = dictionary["LogPaths"] as? [String]
            self.serverLaunchPath = dictionary["ServerLaunchPath"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct UpdateBuildInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a build to update.
        public let buildId: String
        /// Descriptive label that is associated with a build. Build names do not need to be unique. 
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique.
        public let version: String?

        public init(buildId: String, name: String? = nil, version: String? = nil) {
            self.buildId = buildId
            self.name = name
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            guard let buildId = dictionary["BuildId"] as? String else { throw InitializableError.missingRequiredParam("BuildId") }
            self.buildId = buildId
            self.name = dictionary["Name"] as? String
            self.version = dictionary["Version"] as? String
        }
    }

    public struct ResolveAliasInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the alias you want to resolve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasId = dictionary["AliasId"] as? String else { throw InitializableError.missingRequiredParam("AliasId") }
            self.aliasId = aliasId
        }
    }

    public struct PlayerLatency: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a player associated with the latency data.
        public let playerId: String?
        /// Name of the region that is associated with the latency value.
        public let regionIdentifier: String?
        /// Amount of time that represents the time lag experienced by the player when connected to the specified region.
        public let latencyInMilliseconds: Float?

        public init(playerId: String? = nil, regionIdentifier: String? = nil, latencyInMilliseconds: Float? = nil) {
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
            self.latencyInMilliseconds = latencyInMilliseconds
        }

        public init(dictionary: [String: Any]) throws {
            self.playerId = dictionary["PlayerId"] as? String
            self.regionIdentifier = dictionary["RegionIdentifier"] as? String
            self.latencyInMilliseconds = dictionary["LatencyInMilliseconds"] as? Float
        }
    }

    public struct CreatePlayerSessionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the game session to add players to.
        public let gameSessionId: String
        /// List of unique identifiers for the players to be added.
        public let playerIds: [String]
        /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Player data strings for player IDs not included in the PlayerIds parameter are ignored. 
        public let playerDataMap: [String: String]?

        public init(gameSessionId: String, playerIds: [String], playerDataMap: [String: String]? = nil) {
            self.gameSessionId = gameSessionId
            self.playerIds = playerIds
            self.playerDataMap = playerDataMap
        }

        public init(dictionary: [String: Any]) throws {
            guard let gameSessionId = dictionary["GameSessionId"] as? String else { throw InitializableError.missingRequiredParam("GameSessionId") }
            self.gameSessionId = gameSessionId
            guard let playerIds = dictionary["PlayerIds"] as? [String] else { throw InitializableError.missingRequiredParam("PlayerIds") }
            self.playerIds = playerIds
            if let playerDataMap = dictionary["PlayerDataMap"] as? [String: String] {
                self.playerDataMap = playerDataMap
            } else { 
                self.playerDataMap = nil
            }
        }
    }

    public struct DescribeFleetPortSettingsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains port settings for the requested fleet ID.
        public let inboundPermissions: [IpPermission]?

        public init(inboundPermissions: [IpPermission]? = nil) {
            self.inboundPermissions = inboundPermissions
        }

        public init(dictionary: [String: Any]) throws {
            if let inboundPermissions = dictionary["InboundPermissions"] as? [[String: Any]] {
                self.inboundPermissions = try inboundPermissions.map({ try IpPermission(dictionary: $0) })
            } else { 
                self.inboundPermissions = nil
            }
        }
    }

    public struct DeleteAliasInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet alias. Specify the alias you want to delete.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public init(dictionary: [String: Any]) throws {
            guard let aliasId = dictionary["AliasId"] as? String else { throw InitializableError.missingRequiredParam("AliasId") }
            self.aliasId = aliasId
        }
    }

    public struct DescribeGameSessionQueuesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of queue names to retrieve information for. To request settings for all queues, leave this parameter empty.
        public let names: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(names: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.names = names
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.names = dictionary["Names"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct Alias: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Time stamp indicating when this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let lastUpdatedTime: Date?
        /// Alias configuration for the alias, including routing type and settings.
        public let routingStrategy: RoutingStrategy?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Unique identifier for an alias; alias ARNs are unique across all regions.
        public let aliasArn: String?
        /// Unique identifier for an alias; alias IDs are unique within a region.
        public let aliasId: String?
        /// Human-readable description of an alias.
        public let description: String?

        public init(lastUpdatedTime: Date? = nil, routingStrategy: RoutingStrategy? = nil, name: String? = nil, creationTime: Date? = nil, aliasArn: String? = nil, aliasId: String? = nil, description: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.routingStrategy = routingStrategy
            self.name = name
            self.creationTime = creationTime
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            self.lastUpdatedTime = dictionary["LastUpdatedTime"] as? Date
            if let routingStrategy = dictionary["RoutingStrategy"] as? [String: Any] { self.routingStrategy = try Gamelift.RoutingStrategy(dictionary: routingStrategy) } else { self.routingStrategy = nil }
            self.name = dictionary["Name"] as? String
            self.creationTime = dictionary["CreationTime"] as? Date
            self.aliasArn = dictionary["AliasArn"] as? String
            self.aliasId = dictionary["AliasId"] as? String
            self.description = dictionary["Description"] as? String
        }
    }

    public struct CreatePlayerSessionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the game session to add a player to.
        public let gameSessionId: String
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player. Player IDs are developer-defined.
        public let playerId: String

        public init(gameSessionId: String, playerData: String? = nil, playerId: String) {
            self.gameSessionId = gameSessionId
            self.playerData = playerData
            self.playerId = playerId
        }

        public init(dictionary: [String: Any]) throws {
            guard let gameSessionId = dictionary["GameSessionId"] as? String else { throw InitializableError.missingRequiredParam("GameSessionId") }
            self.gameSessionId = gameSessionId
            self.playerData = dictionary["PlayerData"] as? String
            guard let playerId = dictionary["PlayerId"] as? String else { throw InitializableError.missingRequiredParam("PlayerId") }
            self.playerId = playerId
        }
    }

    public struct Event: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Additional information related to the event.
        public let message: String?
        /// Unique identifier for an event resource, such as a fleet ID.
        public let resourceId: String?
        /// Type of event being logged. 
        public let eventCode: EventCode?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let eventTime: Date?
        /// Unique identifier for a fleet event.
        public let eventId: String?

        public init(message: String? = nil, resourceId: String? = nil, eventCode: EventCode? = nil, eventTime: Date? = nil, eventId: String? = nil) {
            self.message = message
            self.resourceId = resourceId
            self.eventCode = eventCode
            self.eventTime = eventTime
            self.eventId = eventId
        }

        public init(dictionary: [String: Any]) throws {
            self.message = dictionary["Message"] as? String
            self.resourceId = dictionary["ResourceId"] as? String
            if let eventCode = dictionary["EventCode"] as? String { self.eventCode = EventCode(rawValue: eventCode) } else { self.eventCode = nil }
            self.eventTime = dictionary["EventTime"] as? Date
            self.eventId = dictionary["EventId"] as? String
        }
    }

    public struct UpdateGameSessionQueueOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly updated game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionQueue = dictionary["GameSessionQueue"] as? [String: Any] { self.gameSessionQueue = try Gamelift.GameSessionQueue(dictionary: gameSessionQueue) } else { self.gameSessionQueue = nil }
        }
    }

    public enum ProtectionPolicy: String, CustomStringConvertible {
        case noprotection = "NoProtection"
        case fullprotection = "FullProtection"
        public var description: String { return self.rawValue }
    }

    public struct GameSessionQueueDestination: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a region name, provide a unique identifier across all regions. 
        public let destinationArn: String?

        public init(destinationArn: String? = nil) {
            self.destinationArn = destinationArn
        }

        public init(dictionary: [String: Any]) throws {
            self.destinationArn = dictionary["DestinationArn"] as? String
        }
    }

    public struct DesiredPlayerSession: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player to associate with the player session.
        public let playerId: String?

        public init(playerData: String? = nil, playerId: String? = nil) {
            self.playerData = playerData
            self.playerId = playerId
        }

        public init(dictionary: [String: Any]) throws {
            self.playerData = dictionary["PlayerData"] as? String
            self.playerId = dictionary["PlayerId"] as? String
        }
    }

    public struct DescribeFleetUtilizationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet(s) to retrieve utilization data for. To request utilization data for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetIds = dictionary["FleetIds"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct CreateAliasInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String
        /// Human-readable description of an alias.
        public let description: String?

        public init(routingStrategy: RoutingStrategy, name: String, description: String? = nil) {
            self.routingStrategy = routingStrategy
            self.name = name
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let routingStrategy = dictionary["RoutingStrategy"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RoutingStrategy") }
            self.routingStrategy = try Gamelift.RoutingStrategy(dictionary: routingStrategy)
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.description = dictionary["Description"] as? String
        }
    }

    public struct ResourceCreationLimitPolicy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Maximum number of game sessions that an individual can create during the policy period. 
        public let newGameSessionsPerCreator: Int32?
        /// Time span used in evaluating the resource creation limit policy. 
        public let policyPeriodInMinutes: Int32?

        public init(newGameSessionsPerCreator: Int32? = nil, policyPeriodInMinutes: Int32? = nil) {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }

        public init(dictionary: [String: Any]) throws {
            self.newGameSessionsPerCreator = dictionary["NewGameSessionsPerCreator"] as? Int32
            self.policyPeriodInMinutes = dictionary["PolicyPeriodInMinutes"] as? Int32
        }
    }

    public struct PutScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Metric value used to trigger a scaling event.
        public let threshold: Double
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number includes game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        public let metricName: MetricName
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int32
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
        public let name: String
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int32
        /// Comparison operator to use when measuring the metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.  
        public let scalingAdjustmentType: ScalingAdjustmentType
        /// Unique identifier for a fleet to apply this policy to.
        public let fleetId: String

        public init(threshold: Double, metricName: MetricName, evaluationPeriods: Int32, name: String, scalingAdjustment: Int32, comparisonOperator: ComparisonOperatorType, scalingAdjustmentType: ScalingAdjustmentType, fleetId: String) {
            self.threshold = threshold
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let threshold = dictionary["Threshold"] as? Double else { throw InitializableError.missingRequiredParam("Threshold") }
            self.threshold = threshold
            guard let rawMetricName = dictionary["MetricName"] as? String, let metricName = MetricName(rawValue: rawMetricName) else { throw InitializableError.missingRequiredParam("MetricName") }
            self.metricName = metricName
            guard let evaluationPeriods = dictionary["EvaluationPeriods"] as? Int32 else { throw InitializableError.missingRequiredParam("EvaluationPeriods") }
            self.evaluationPeriods = evaluationPeriods
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let scalingAdjustment = dictionary["ScalingAdjustment"] as? Int32 else { throw InitializableError.missingRequiredParam("ScalingAdjustment") }
            self.scalingAdjustment = scalingAdjustment
            guard let rawComparisonOperator = dictionary["ComparisonOperator"] as? String, let comparisonOperator = ComparisonOperatorType(rawValue: rawComparisonOperator) else { throw InitializableError.missingRequiredParam("ComparisonOperator") }
            self.comparisonOperator = comparisonOperator
            guard let rawScalingAdjustmentType = dictionary["ScalingAdjustmentType"] as? String, let scalingAdjustmentType = ScalingAdjustmentType(rawValue: rawScalingAdjustmentType) else { throw InitializableError.missingRequiredParam("ScalingAdjustmentType") }
            self.scalingAdjustmentType = scalingAdjustmentType
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
        }
    }

    public struct DeleteBuildInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a build to delete.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public init(dictionary: [String: Any]) throws {
            guard let buildId = dictionary["BuildId"] as? String else { throw InitializableError.missingRequiredParam("BuildId") }
            self.buildId = buildId
        }
    }

    public enum IpProtocol: String, CustomStringConvertible {
        case tcp = "TCP"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFleetAttributesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct DescribeGameSessionsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING, and TERMINATING (the last two are transitory). 
        public let statusFilter: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// Unique identifier for a fleet to retrieve all game sessions for.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for. 
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.statusFilter = dictionary["StatusFilter"] as? String
            self.limit = dictionary["Limit"] as? Int32
            self.gameSessionId = dictionary["GameSessionId"] as? String
            self.fleetId = dictionary["FleetId"] as? String
            self.aliasId = dictionary["AliasId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct CreateFleetOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Properties for the newly created fleet.
        public let fleetAttributes: FleetAttributes?

        public init(fleetAttributes: FleetAttributes? = nil) {
            self.fleetAttributes = fleetAttributes
        }

        public init(dictionary: [String: Any]) throws {
            if let fleetAttributes = dictionary["FleetAttributes"] as? [String: Any] { self.fleetAttributes = try Gamelift.FleetAttributes(dictionary: fleetAttributes) } else { self.fleetAttributes = nil }
        }
    }

    public struct GameSessionQueue: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String? = nil, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            if let destinations = dictionary["Destinations"] as? [[String: Any]] {
                self.destinations = try destinations.map({ try GameSessionQueueDestination(dictionary: $0) })
            } else { 
                self.destinations = nil
            }
            self.name = dictionary["Name"] as? String
            self.timeoutInSeconds = dictionary["TimeoutInSeconds"] as? Int32
        }
    }

    public struct DescribeFleetCapacityOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing capacity information for each requested fleet ID. Leave this parameter empty to retrieve capacity information for all fleets.
        public let fleetCapacity: [FleetCapacity]?

        public init(nextToken: String? = nil, fleetCapacity: [FleetCapacity]? = nil) {
            self.nextToken = nextToken
            self.fleetCapacity = fleetCapacity
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let fleetCapacity = dictionary["FleetCapacity"] as? [[String: Any]] {
                self.fleetCapacity = try fleetCapacity.map({ try FleetCapacity(dictionary: $0) })
            } else { 
                self.fleetCapacity = nil
            }
        }
    }

    public struct DescribeGameSessionDetailsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory). 
        public let statusFilter: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// Unique identifier for a fleet to retrieve all game sessions active on the fleet.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.statusFilter = dictionary["StatusFilter"] as? String
            self.limit = dictionary["Limit"] as? Int32
            self.gameSessionId = dictionary["GameSessionId"] as? String
            self.fleetId = dictionary["FleetId"] as? String
            self.aliasId = dictionary["AliasId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct UpdateFleetPortSettingsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of port settings to be added to the fleet record.
        public let inboundPermissionAuthorizations: [IpPermission]?
        /// Unique identifier for a fleet to update port settings for.
        public let fleetId: String
        /// Collection of port settings to be removed from the fleet record.
        public let inboundPermissionRevocations: [IpPermission]?

        public init(inboundPermissionAuthorizations: [IpPermission]? = nil, fleetId: String, inboundPermissionRevocations: [IpPermission]? = nil) {
            self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
            self.fleetId = fleetId
            self.inboundPermissionRevocations = inboundPermissionRevocations
        }

        public init(dictionary: [String: Any]) throws {
            if let inboundPermissionAuthorizations = dictionary["InboundPermissionAuthorizations"] as? [[String: Any]] {
                self.inboundPermissionAuthorizations = try inboundPermissionAuthorizations.map({ try IpPermission(dictionary: $0) })
            } else { 
                self.inboundPermissionAuthorizations = nil
            }
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            if let inboundPermissionRevocations = dictionary["InboundPermissionRevocations"] as? [[String: Any]] {
                self.inboundPermissionRevocations = try inboundPermissionRevocations.map({ try IpPermission(dictionary: $0) })
            } else { 
                self.inboundPermissionRevocations = nil
            }
        }
    }

    public struct DescribeFleetCapacityInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet(s) to retrieve capacity information for. To request capacity information for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetIds = dictionary["FleetIds"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct InstanceCredentials: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// User login string.
        public let userName: String?
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        public let secret: String?

        public init(userName: String? = nil, secret: String? = nil) {
            self.userName = userName
            self.secret = secret
        }

        public init(dictionary: [String: Any]) throws {
            self.userName = dictionary["UserName"] as? String
            self.secret = dictionary["Secret"] as? String
        }
    }

    public struct ServerProcess: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Optional list of parameters to pass to the server executable on launch.
        public let parameters: String?
        /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game. A Windows game build with an executable file located at MyGame\latest\server.exe must have a launch path of "C:\game\MyGame\latest\server.exe". A Linux game build with an executable file located at MyGame/latest/server.exe must have a launch path of "/local/game/MyGame/latest/server.exe". 
        public let launchPath: String
        /// Number of server processes using this configuration to run concurrently on an instance.
        public let concurrentExecutions: Int32

        public init(parameters: String? = nil, launchPath: String, concurrentExecutions: Int32) {
            self.parameters = parameters
            self.launchPath = launchPath
            self.concurrentExecutions = concurrentExecutions
        }

        public init(dictionary: [String: Any]) throws {
            self.parameters = dictionary["Parameters"] as? String
            guard let launchPath = dictionary["LaunchPath"] as? String else { throw InitializableError.missingRequiredParam("LaunchPath") }
            self.launchPath = launchPath
            guard let concurrentExecutions = dictionary["ConcurrentExecutions"] as? Int32 else { throw InitializableError.missingRequiredParam("ConcurrentExecutions") }
            self.concurrentExecutions = concurrentExecutions
        }
    }

    public struct RequestUploadCredentialsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon S3 path and key, identifying where the game build files are stored.
        public let storageLocation: S3Location?
        /// AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
        public let uploadCredentials: AwsCredentials?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        public init(dictionary: [String: Any]) throws {
            if let storageLocation = dictionary["StorageLocation"] as? [String: Any] { self.storageLocation = try Gamelift.S3Location(dictionary: storageLocation) } else { self.storageLocation = nil }
            if let uploadCredentials = dictionary["UploadCredentials"] as? [String: Any] { self.uploadCredentials = try Gamelift.AwsCredentials(dictionary: uploadCredentials) } else { self.uploadCredentials = nil }
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible {
        case pending = "PENDING"
        case active = "ACTIVE"
        case terminating = "TERMINATING"
        public var description: String { return self.rawValue }
    }

    public struct GameProperty: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// TBD
        public let value: String
        /// TBD
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            guard let value = dictionary["Value"] as? String else { throw InitializableError.missingRequiredParam("Value") }
            self.value = value
            guard let key = dictionary["Key"] as? String else { throw InitializableError.missingRequiredParam("Key") }
            self.key = key
        }
    }

    public enum BuildStatus: String, CustomStringConvertible {
        case initialized = "INITIALIZED"
        case ready = "READY"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateBuildOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains the updated build record.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        public init(dictionary: [String: Any]) throws {
            if let build = dictionary["Build"] as? [String: Any] { self.build = try Gamelift.Build(dictionary: build) } else { self.build = nil }
        }
    }

    public struct DescribeFleetAttributesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet(s) to retrieve attributes for. To request attributes for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetIds = dictionary["FleetIds"] as? [String]
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DescribeEC2InstanceLimitsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions. Leave this parameter blank to retrieve limits for all types.
        public let eC2InstanceType: EC2InstanceType?

        public init(eC2InstanceType: EC2InstanceType? = nil) {
            self.eC2InstanceType = eC2InstanceType
        }

        public init(dictionary: [String: Any]) throws {
            if let eC2InstanceType = dictionary["EC2InstanceType"] as? String { self.eC2InstanceType = EC2InstanceType(rawValue: eC2InstanceType) } else { self.eC2InstanceType = nil }
        }
    }

    public struct CreatePlayerSessionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of player session objects created for the added players.
        public let playerSessions: [PlayerSession]?

        public init(playerSessions: [PlayerSession]? = nil) {
            self.playerSessions = playerSessions
        }

        public init(dictionary: [String: Any]) throws {
            if let playerSessions = dictionary["PlayerSessions"] as? [[String: Any]] {
                self.playerSessions = try playerSessions.map({ try PlayerSession(dictionary: $0) })
            } else { 
                self.playerSessions = nil
            }
        }
    }

    public struct GetGameSessionLogUrlInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for the game session to get logs for.
        public let gameSessionId: String

        public init(gameSessionId: String) {
            self.gameSessionId = gameSessionId
        }

        public init(dictionary: [String: Any]) throws {
            guard let gameSessionId = dictionary["GameSessionId"] as? String else { throw InitializableError.missingRequiredParam("GameSessionId") }
            self.gameSessionId = gameSessionId
        }
    }

    public struct DescribeEC2InstanceLimitsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains the maximum number of instances for the specified instance type.
        public let eC2InstanceLimits: [EC2InstanceLimit]?

        public init(eC2InstanceLimits: [EC2InstanceLimit]? = nil) {
            self.eC2InstanceLimits = eC2InstanceLimits
        }

        public init(dictionary: [String: Any]) throws {
            if let eC2InstanceLimits = dictionary["EC2InstanceLimits"] as? [[String: Any]] {
                self.eC2InstanceLimits = try eC2InstanceLimits.map({ try EC2InstanceLimit(dictionary: $0) })
            } else { 
                self.eC2InstanceLimits = nil
            }
        }
    }

    public struct EC2InstanceCounts: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of instances in the fleet that are no longer active but haven't yet been terminated.
        public let tERMINATING: Int32?
        /// Minimum value allowed for the fleet's instance count.
        public let mINIMUM: Int32?
        /// Number of instances in the fleet that are starting but not yet active.
        public let pENDING: Int32?
        /// Maximum value allowed for the fleet's instance count.
        public let mAXIMUM: Int32?
        /// Number of active instances in the fleet that are not currently hosting a game session.
        public let iDLE: Int32?
        /// Ideal number of active instances in the fleet.
        public let dESIRED: Int32?
        /// Actual number of active instances in the fleet.
        public let aCTIVE: Int32?

        public init(tERMINATING: Int32? = nil, mINIMUM: Int32? = nil, pENDING: Int32? = nil, mAXIMUM: Int32? = nil, iDLE: Int32? = nil, dESIRED: Int32? = nil, aCTIVE: Int32? = nil) {
            self.tERMINATING = tERMINATING
            self.mINIMUM = mINIMUM
            self.pENDING = pENDING
            self.mAXIMUM = mAXIMUM
            self.iDLE = iDLE
            self.dESIRED = dESIRED
            self.aCTIVE = aCTIVE
        }

        public init(dictionary: [String: Any]) throws {
            self.tERMINATING = dictionary["TERMINATING"] as? Int32
            self.mINIMUM = dictionary["MINIMUM"] as? Int32
            self.pENDING = dictionary["PENDING"] as? Int32
            self.mAXIMUM = dictionary["MAXIMUM"] as? Int32
            self.iDLE = dictionary["IDLE"] as? Int32
            self.dESIRED = dictionary["DESIRED"] as? Int32
            self.aCTIVE = dictionary["ACTIVE"] as? Int32
        }
    }

    public struct DescribePlayerSessionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing properties for each player session that matches the request.
        public let playerSessions: [PlayerSession]?

        public init(nextToken: String? = nil, playerSessions: [PlayerSession]? = nil) {
            self.nextToken = nextToken
            self.playerSessions = playerSessions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let playerSessions = dictionary["PlayerSessions"] as? [[String: Any]] {
                self.playerSessions = try playerSessions.map({ try PlayerSession(dictionary: $0) })
            } else { 
                self.playerSessions = nil
            }
        }
    }

    public struct FleetCapacity: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?
        /// Unique identifier for a fleet.
        public let fleetId: String?
        /// Current status of fleet capacity.
        public let instanceCounts: EC2InstanceCounts?

        public init(instanceType: EC2InstanceType? = nil, fleetId: String? = nil, instanceCounts: EC2InstanceCounts? = nil) {
            self.instanceType = instanceType
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
        }

        public init(dictionary: [String: Any]) throws {
            if let instanceType = dictionary["InstanceType"] as? String { self.instanceType = EC2InstanceType(rawValue: instanceType) } else { self.instanceType = nil }
            self.fleetId = dictionary["FleetId"] as? String
            if let instanceCounts = dictionary["InstanceCounts"] as? [String: Any] { self.instanceCounts = try Gamelift.EC2InstanceCounts(dictionary: instanceCounts) } else { self.instanceCounts = nil }
        }
    }

    public struct GameSessionDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current status of protection for the game session.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?
        /// Object that describes a game session.
        public let gameSession: GameSession?

        public init(protectionPolicy: ProtectionPolicy? = nil, gameSession: GameSession? = nil) {
            self.protectionPolicy = protectionPolicy
            self.gameSession = gameSession
        }

        public init(dictionary: [String: Any]) throws {
            if let protectionPolicy = dictionary["ProtectionPolicy"] as? String { self.protectionPolicy = ProtectionPolicy(rawValue: protectionPolicy) } else { self.protectionPolicy = nil }
            if let gameSession = dictionary["GameSession"] as? [String: Any] { self.gameSession = try Gamelift.GameSession(dictionary: gameSession) } else { self.gameSession = nil }
        }
    }

    public struct CreateBuildInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system.
        public let operatingSystem: OperatingSystem?
        /// Amazon S3 location of the game build files to be uploaded. The S3 bucket must be owned by the same AWS account that you're using to manage Amazon GameLift. It also must in the same region that you want to create a new build in. Before calling CreateBuild with this location, you must allow Amazon GameLift to access your Amazon S3 bucket (see Create a Build with Files in Amazon S3).
        public let storageLocation: S3Location?
        /// Descriptive label that is associated with a build. Build names do not need to be unique. You can use UpdateBuild to change this value later. 
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique. You can use UpdateBuild to change this value later. 
        public let version: String?

        public init(operatingSystem: OperatingSystem? = nil, storageLocation: S3Location? = nil, name: String? = nil, version: String? = nil) {
            self.operatingSystem = operatingSystem
            self.storageLocation = storageLocation
            self.name = name
            self.version = version
        }

        public init(dictionary: [String: Any]) throws {
            if let operatingSystem = dictionary["OperatingSystem"] as? String { self.operatingSystem = OperatingSystem(rawValue: operatingSystem) } else { self.operatingSystem = nil }
            if let storageLocation = dictionary["StorageLocation"] as? [String: Any] { self.storageLocation = try Gamelift.S3Location(dictionary: storageLocation) } else { self.storageLocation = nil }
            self.name = dictionary["Name"] as? String
            self.version = dictionary["Version"] as? String
        }
    }

    public struct DescribeInstancesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of objects containing properties for each instance returned.
        public let instances: [Instance]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(instances: [Instance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let instances = dictionary["Instances"] as? [[String: Any]] {
                self.instances = try instances.map({ try Instance(dictionary: $0) })
            } else { 
                self.instances = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeInstancesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to retrieve instance information for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
        public let instanceId: String?

        public init(limit: Int32? = nil, fleetId: String, nextToken: String? = nil, instanceId: String? = nil) {
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            self.nextToken = dictionary["NextToken"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
        }
    }

    public struct AwsCredentials: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Access key for an AWS account.
        public let accessKeyId: String?
        /// Secret key for an AWS account.
        public let secretAccessKey: String?
        /// Token specific to a build ID.
        public let sessionToken: String?

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

        public init(dictionary: [String: Any]) throws {
            self.accessKeyId = dictionary["AccessKeyId"] as? String
            self.secretAccessKey = dictionary["SecretAccessKey"] as? String
            self.sessionToken = dictionary["SessionToken"] as? String
        }
    }

    public struct ListFleetsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a build to return fleets for. Use this parameter to return only fleets using the specified build. To retrieve all fleets, leave this parameter empty.
        public let buildId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(buildId: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.buildId = buildId
            self.nextToken = nextToken
            self.limit = limit
        }

        public init(dictionary: [String: Any]) throws {
            self.buildId = dictionary["BuildId"] as? String
            self.nextToken = dictionary["NextToken"] as? String
            self.limit = dictionary["Limit"] as? Int32
        }
    }

    public struct DeleteScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String

        public init(fleetId: String, name: String) {
            self.fleetId = fleetId
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public enum GameSessionStatus: String, CustomStringConvertible {
        case active = "ACTIVE"
        case activating = "ACTIVATING"
        case terminated = "TERMINATED"
        case terminating = "TERMINATING"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct PlayerSession: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current status of the player session. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        public let status: PlayerSessionStatus?
        /// Unique identifier for a player session.
        public let playerSessionId: String?
        /// Game session IP address. All player sessions reference the game session location.
        public let ipAddress: String?
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. 
        public let playerData: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?
        /// Unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// Unique identifier for the game session that the player session is connected to.
        public let gameSessionId: String?
        /// Unique identifier for a fleet that the player's game session is running on.
        public let fleetId: String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let port: Int32?

        public init(status: PlayerSessionStatus? = nil, playerSessionId: String? = nil, ipAddress: String? = nil, playerData: String? = nil, creationTime: Date? = nil, terminationTime: Date? = nil, playerId: String? = nil, gameSessionId: String? = nil, fleetId: String? = nil, port: Int32? = nil) {
            self.status = status
            self.playerSessionId = playerSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.creationTime = creationTime
            self.terminationTime = terminationTime
            self.playerId = playerId
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.port = port
        }

        public init(dictionary: [String: Any]) throws {
            if let status = dictionary["Status"] as? String { self.status = PlayerSessionStatus(rawValue: status) } else { self.status = nil }
            self.playerSessionId = dictionary["PlayerSessionId"] as? String
            self.ipAddress = dictionary["IpAddress"] as? String
            self.playerData = dictionary["PlayerData"] as? String
            self.creationTime = dictionary["CreationTime"] as? Date
            self.terminationTime = dictionary["TerminationTime"] as? Date
            self.playerId = dictionary["PlayerId"] as? String
            self.gameSessionId = dictionary["GameSessionId"] as? String
            self.fleetId = dictionary["FleetId"] as? String
            self.port = dictionary["Port"] as? Int32
        }
    }

    public struct FleetUtilization: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Maximum players allowed across all game sessions currently being hosted on all instances in the fleet.
        public let maximumPlayerSessionCount: Int32?
        /// Number of server processes in an ACTIVE status currently running across all instances in the fleet
        public let activeServerProcessCount: Int32?
        /// Number of active game sessions currently being hosted on all instances in the fleet.
        public let activeGameSessionCount: Int32?
        /// Number of active player sessions currently being hosted on all instances in the fleet.
        public let currentPlayerSessionCount: Int32?
        /// Unique identifier for a fleet.
        public let fleetId: String?

        public init(maximumPlayerSessionCount: Int32? = nil, activeServerProcessCount: Int32? = nil, activeGameSessionCount: Int32? = nil, currentPlayerSessionCount: Int32? = nil, fleetId: String? = nil) {
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.activeGameSessionCount = activeGameSessionCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32
            self.activeServerProcessCount = dictionary["ActiveServerProcessCount"] as? Int32
            self.activeGameSessionCount = dictionary["ActiveGameSessionCount"] as? Int32
            self.currentPlayerSessionCount = dictionary["CurrentPlayerSessionCount"] as? Int32
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct DescribeGameSessionQueuesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of objects that describes the requested game session queues.
        public let gameSessionQueues: [GameSessionQueue]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionQueues: [GameSessionQueue]? = nil, nextToken: String? = nil) {
            self.gameSessionQueues = gameSessionQueues
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionQueues = dictionary["GameSessionQueues"] as? [[String: Any]] {
                self.gameSessionQueues = try gameSessionQueues.map({ try GameSessionQueue(dictionary: $0) })
            } else { 
                self.gameSessionQueues = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeGameSessionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessions = dictionary["GameSessions"] as? [[String: Any]] {
                self.gameSessions = try gameSessions.map({ try GameSession(dictionary: $0) })
            } else { 
                self.gameSessions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum OperatingSystem: String, CustomStringConvertible {
        case windows_2012 = "WINDOWS_2012"
        case amazon_linux = "AMAZON_LINUX"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFleetEventsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let startTime: Date?
        /// Most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let endTime: Date?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to get event logs for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(startTime: Date? = nil, endTime: Date? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            self.startTime = dictionary["StartTime"] as? Date
            self.endTime = dictionary["EndTime"] as? Date
            self.limit = dictionary["Limit"] as? Int32
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public enum FleetStatus: String, CustomStringConvertible {
        case new = "NEW"
        case downloading = "DOWNLOADING"
        case validating = "VALIDATING"
        case building = "BUILDING"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case error = "ERROR"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionPlacementState: String, CustomStringConvertible {
        case pending = "PENDING"
        case fulfilled = "FULFILLED"
        case cancelled = "CANCELLED"
        case timed_out = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct S3Location: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon S3 bucket identifier. This is the name of your S3 bucket.
        public let bucket: String?
        /// Amazon Resource Name (ARN) for the access role that allows Amazon GameLift to access your S3 bucket.
        public let roleArn: String?
        /// Name of the zip file containing your build files. 
        public let key: String?

        public init(bucket: String? = nil, roleArn: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.roleArn = roleArn
            self.key = key
        }

        public init(dictionary: [String: Any]) throws {
            self.bucket = dictionary["Bucket"] as? String
            self.roleArn = dictionary["RoleArn"] as? String
            self.key = dictionary["Key"] as? String
        }
    }

    public struct CreateGameSessionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// $player-id; or entity creating the game session. This ID is used to enforce a resource protection policy (if one exists) that limits the number of concurrent active game sessions one player can have.
        public let creatorId: String?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Custom string to include in the game session ID, with a maximum length of 48 characters. A game session ID has the following format: "arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;game session ID&gt;". If provided, the custom string is used for the game session ID string. This value cannot be updated once a game session is created.
        public let gameSessionId: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32
        /// Unique identifier for an alias associated with the fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?

        public init(fleetId: String? = nil, name: String? = nil, creatorId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32, aliasId: String? = nil) {
            self.fleetId = fleetId
            self.name = name
            self.creatorId = creatorId
            self.gameProperties = gameProperties
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.aliasId = aliasId
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetId = dictionary["FleetId"] as? String
            self.name = dictionary["Name"] as? String
            self.creatorId = dictionary["CreatorId"] as? String
            if let gameProperties = dictionary["GameProperties"] as? [[String: Any]] {
                self.gameProperties = try gameProperties.map({ try GameProperty(dictionary: $0) })
            } else { 
                self.gameProperties = nil
            }
            self.gameSessionId = dictionary["GameSessionId"] as? String
            guard let maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32 else { throw InitializableError.missingRequiredParam("MaximumPlayerSessionCount") }
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.aliasId = dictionary["AliasId"] as? String
        }
    }

    public struct UpdateGameSessionInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Policy determining whether or not the game session accepts new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Game session protection policy to apply to this game session only.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?
        /// Unique identifier for the game session to update.
        public let gameSessionId: String
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?

        public init(playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, protectionPolicy: ProtectionPolicy? = nil, gameSessionId: String, name: String? = nil, maximumPlayerSessionCount: Int32? = nil) {
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.protectionPolicy = protectionPolicy
            self.gameSessionId = gameSessionId
            self.name = name
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        public init(dictionary: [String: Any]) throws {
            if let playerSessionCreationPolicy = dictionary["PlayerSessionCreationPolicy"] as? String { self.playerSessionCreationPolicy = PlayerSessionCreationPolicy(rawValue: playerSessionCreationPolicy) } else { self.playerSessionCreationPolicy = nil }
            if let protectionPolicy = dictionary["ProtectionPolicy"] as? String { self.protectionPolicy = ProtectionPolicy(rawValue: protectionPolicy) } else { self.protectionPolicy = nil }
            guard let gameSessionId = dictionary["GameSessionId"] as? String else { throw InitializableError.missingRequiredParam("GameSessionId") }
            self.gameSessionId = gameSessionId
            self.name = dictionary["Name"] as? String
            self.maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32
        }
    }

    public struct CreateBuildOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon S3 location specified in the request.
        public let storageLocation: S3Location?
        /// This element is not currently in use.
        public let uploadCredentials: AwsCredentials?
        /// The newly created build record, including a unique build ID and status. 
        public let build: Build?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil, build: Build? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
            self.build = build
        }

        public init(dictionary: [String: Any]) throws {
            if let storageLocation = dictionary["StorageLocation"] as? [String: Any] { self.storageLocation = try Gamelift.S3Location(dictionary: storageLocation) } else { self.storageLocation = nil }
            if let uploadCredentials = dictionary["UploadCredentials"] as? [String: Any] { self.uploadCredentials = try Gamelift.AwsCredentials(dictionary: uploadCredentials) } else { self.uploadCredentials = nil }
            if let build = dictionary["Build"] as? [String: Any] { self.build = try Gamelift.Build(dictionary: build) } else { self.build = nil }
        }
    }

    public struct FleetAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?
        /// Identifier for a fleet that is unique across all regions.
        public let fleetArn: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Type of game session protection to set for all new instances started in the fleet.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Location of default log files. When a server process is shut down, Amazon GameLift captures and stores any log files in this location. These logs are in addition to game session logs; see more on game session logs in the Amazon GameLift Developer Guide. If no default log path for a fleet is specified, Amazon GameLift will automatically upload logs that are stored on each instance at C:\game\logs (for Windows) or /local/game/logs (for Linux). Use the Amazon GameLift console to access stored logs. 
        public let logPaths: [String]?
        /// Path to a game server executable in the fleet's build, specified for fleets created prior to 2016-08-04 (or AWS SDK v. 0.12.16). Server launch paths for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchPath: String?
        /// Human-readable description of the fleet.
        public let description: String?
        /// Fleet policy to limit the number of game sessions an individual player can create over a span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Current status of the fleet. Possible fleet statuses include the following:    NEW – A new fleet has been defined and desired instances is set to 1.     DOWNLOADING/VALIDATING/BUILDING/ACTIVATING – Amazon GameLift is setting up the new fleet, creating new instances with the game build and starting server processes.    ACTIVE – Hosts can now accept game sessions.    ERROR – An error occurred when downloading, validating, building, or activating the fleet.    DELETING – Hosts are responding to a delete fleet request.    TERMINATED – The fleet no longer exists.  
        public let status: FleetStatus?
        /// Unique identifier for a build.
        public let buildId: String?
        /// Game server launch parameters specified for fleets created prior to 2016-08-04 (or AWS SDK v. 0.12.16). Server launch parameters for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchParameters: String?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Operating system of the fleet's computing resources. A fleet's operating system depends on the OS specified for the build that is deployed on this fleet.
        public let operatingSystem: OperatingSystem?
        /// Unique identifier for a fleet.
        public let fleetId: String?

        public init(terminationTime: Date? = nil, fleetArn: String? = nil, creationTime: Date? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, description: String? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, status: FleetStatus? = nil, buildId: String? = nil, serverLaunchParameters: String? = nil, name: String? = nil, operatingSystem: OperatingSystem? = nil, fleetId: String? = nil) {
            self.terminationTime = terminationTime
            self.fleetArn = fleetArn
            self.creationTime = creationTime
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.description = description
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.status = status
            self.buildId = buildId
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.operatingSystem = operatingSystem
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.terminationTime = dictionary["TerminationTime"] as? Date
            self.fleetArn = dictionary["FleetArn"] as? String
            self.creationTime = dictionary["CreationTime"] as? Date
            if let newGameSessionProtectionPolicy = dictionary["NewGameSessionProtectionPolicy"] as? String { self.newGameSessionProtectionPolicy = ProtectionPolicy(rawValue: newGameSessionProtectionPolicy) } else { self.newGameSessionProtectionPolicy = nil }
            self.logPaths = dictionary["LogPaths"] as? [String]
            self.serverLaunchPath = dictionary["ServerLaunchPath"] as? String
            self.description = dictionary["Description"] as? String
            if let resourceCreationLimitPolicy = dictionary["ResourceCreationLimitPolicy"] as? [String: Any] { self.resourceCreationLimitPolicy = try Gamelift.ResourceCreationLimitPolicy(dictionary: resourceCreationLimitPolicy) } else { self.resourceCreationLimitPolicy = nil }
            if let status = dictionary["Status"] as? String { self.status = FleetStatus(rawValue: status) } else { self.status = nil }
            self.buildId = dictionary["BuildId"] as? String
            self.serverLaunchParameters = dictionary["ServerLaunchParameters"] as? String
            self.name = dictionary["Name"] as? String
            if let operatingSystem = dictionary["OperatingSystem"] as? String { self.operatingSystem = OperatingSystem(rawValue: operatingSystem) } else { self.operatingSystem = nil }
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct InstanceAccess: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Operating system that is running on the instance.
        public let operatingSystem: OperatingSystem?
        /// Credentials required to access the instance.
        public let credentials: InstanceCredentials?
        /// Unique identifier for a fleet containing the instance being accessed.
        public let fleetId: String?
        /// Unique identifier for an instance being accessed.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?

        public init(operatingSystem: OperatingSystem? = nil, credentials: InstanceCredentials? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil) {
            self.operatingSystem = operatingSystem
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
        }

        public init(dictionary: [String: Any]) throws {
            if let operatingSystem = dictionary["OperatingSystem"] as? String { self.operatingSystem = OperatingSystem(rawValue: operatingSystem) } else { self.operatingSystem = nil }
            if let credentials = dictionary["Credentials"] as? [String: Any] { self.credentials = try Gamelift.InstanceCredentials(dictionary: credentials) } else { self.credentials = nil }
            self.fleetId = dictionary["FleetId"] as? String
            self.instanceId = dictionary["InstanceId"] as? String
            self.ipAddress = dictionary["IpAddress"] as? String
        }
    }

    public struct StopGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the cancelled game session placement, with cancelled status and an end time stamp. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionPlacement = dictionary["GameSessionPlacement"] as? [String: Any] { self.gameSessionPlacement = try Gamelift.GameSessionPlacement(dictionary: gameSessionPlacement) } else { self.gameSessionPlacement = nil }
        }
    }

    public enum RoutingStrategyType: String, CustomStringConvertible {
        case simple = "SIMPLE"
        case terminal = "TERMINAL"
        public var description: String { return self.rawValue }
    }

    public struct CreateGameSessionQueueOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly created game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessionQueue = dictionary["GameSessionQueue"] as? [String: Any] { self.gameSessionQueue = try Gamelift.GameSessionQueue(dictionary: gameSessionQueue) } else { self.gameSessionQueue = nil }
        }
    }

    public struct CreatePlayerSessionOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly created player session record.
        public let playerSession: PlayerSession?

        public init(playerSession: PlayerSession? = nil) {
            self.playerSession = playerSession
        }

        public init(dictionary: [String: Any]) throws {
            if let playerSession = dictionary["PlayerSession"] as? [String: Any] { self.playerSession = try Gamelift.PlayerSession(dictionary: playerSession) } else { self.playerSession = nil }
        }
    }

    public struct DescribeGameSessionDetailsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing game session properties and the protection policy currently in force for each session matching the request.
        public let gameSessionDetails: [GameSessionDetail]?

        public init(nextToken: String? = nil, gameSessionDetails: [GameSessionDetail]? = nil) {
            self.nextToken = nextToken
            self.gameSessionDetails = gameSessionDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let gameSessionDetails = dictionary["GameSessionDetails"] as? [[String: Any]] {
                self.gameSessionDetails = try gameSessionDetails.map({ try GameSessionDetail(dictionary: $0) })
            } else { 
                self.gameSessionDetails = nil
            }
        }
    }

    public struct StartGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Set of information on each player to create a player session for.
        public let desiredPlayerSessions: [DesiredPlayerSession]?
        /// Unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all regions and cannot be reused unless you are resubmitting a cancelled or timed-out placement request.
        public let placementId: String
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players experience when connected to AWS regions. This information is relevant when requesting player sessions. Latency information provided for player IDs not included in DesiredPlayerSessions are ignored.
        public let playerLatencies: [PlayerLatency]?
        /// Name of the queue to use to place the new game session.
        public let gameSessionQueueName: String
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32

        public init(desiredPlayerSessions: [DesiredPlayerSession]? = nil, placementId: String, playerLatencies: [PlayerLatency]? = nil, gameSessionQueueName: String, gameProperties: [GameProperty]? = nil, gameSessionName: String? = nil, maximumPlayerSessionCount: Int32) {
            self.desiredPlayerSessions = desiredPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.gameSessionName = gameSessionName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        public init(dictionary: [String: Any]) throws {
            if let desiredPlayerSessions = dictionary["DesiredPlayerSessions"] as? [[String: Any]] {
                self.desiredPlayerSessions = try desiredPlayerSessions.map({ try DesiredPlayerSession(dictionary: $0) })
            } else { 
                self.desiredPlayerSessions = nil
            }
            guard let placementId = dictionary["PlacementId"] as? String else { throw InitializableError.missingRequiredParam("PlacementId") }
            self.placementId = placementId
            if let playerLatencies = dictionary["PlayerLatencies"] as? [[String: Any]] {
                self.playerLatencies = try playerLatencies.map({ try PlayerLatency(dictionary: $0) })
            } else { 
                self.playerLatencies = nil
            }
            guard let gameSessionQueueName = dictionary["GameSessionQueueName"] as? String else { throw InitializableError.missingRequiredParam("GameSessionQueueName") }
            self.gameSessionQueueName = gameSessionQueueName
            if let gameProperties = dictionary["GameProperties"] as? [[String: Any]] {
                self.gameProperties = try gameProperties.map({ try GameProperty(dictionary: $0) })
            } else { 
                self.gameProperties = nil
            }
            self.gameSessionName = dictionary["GameSessionName"] as? String
            guard let maximumPlayerSessionCount = dictionary["MaximumPlayerSessionCount"] as? Int32 else { throw InitializableError.missingRequiredParam("MaximumPlayerSessionCount") }
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }
    }

    public struct CreateAliasOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that describes the newly created alias record.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        public init(dictionary: [String: Any]) throws {
            if let alias = dictionary["Alias"] as? [String: Any] { self.alias = try Gamelift.Alias(dictionary: alias) } else { self.alias = nil }
        }
    }

    public struct DescribeScalingPoliciesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATEREQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETEREQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        public let statusFilter: ScalingStatusType?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to retrieve scaling policies for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: ScalingStatusType? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let statusFilter = dictionary["StatusFilter"] as? String { self.statusFilter = ScalingStatusType(rawValue: statusFilter) } else { self.statusFilter = nil }
            self.limit = dictionary["Limit"] as? Int32
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct DescribeBuildOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Set of properties describing the requested build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        public init(dictionary: [String: Any]) throws {
            if let build = dictionary["Build"] as? [String: Any] { self.build = try Gamelift.Build(dictionary: build) } else { self.build = nil }
        }
    }

    public struct UpdateFleetCapacityOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct UpdateFleetAttributesInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Policy that limits the number of game sessions an individual player can create over a span of time. 
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Human-readable description of a fleet.
        public let description: String?
        /// Unique identifier for a fleet to update attribute metadata for.
        public let fleetId: String
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, description: String? = nil, fleetId: String, name: String? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.description = description
            self.fleetId = fleetId
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        }

        public init(dictionary: [String: Any]) throws {
            if let resourceCreationLimitPolicy = dictionary["ResourceCreationLimitPolicy"] as? [String: Any] { self.resourceCreationLimitPolicy = try Gamelift.ResourceCreationLimitPolicy(dictionary: resourceCreationLimitPolicy) } else { self.resourceCreationLimitPolicy = nil }
            self.description = dictionary["Description"] as? String
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            self.name = dictionary["Name"] as? String
            if let newGameSessionProtectionPolicy = dictionary["NewGameSessionProtectionPolicy"] as? String { self.newGameSessionProtectionPolicy = ProtectionPolicy(rawValue: newGameSessionProtectionPolicy) } else { self.newGameSessionProtectionPolicy = nil }
        }
    }

    public struct DeleteGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public init(dictionary: [String: Any]) throws {
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
        }
    }

    public struct ListAliasesOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of alias records that match the list request.
        public let aliases: [Alias]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(aliases: [Alias]? = nil, nextToken: String? = nil) {
            self.aliases = aliases
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let aliases = dictionary["Aliases"] as? [[String: Any]] {
                self.aliases = try aliases.map({ try Alias(dictionary: $0) })
            } else { 
                self.aliases = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct IpPermission: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Starting value for a range of allowed port numbers.
        public let fromPort: Int32
        /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
        public let toPort: Int32
        /// Network communication protocol used by the fleet.
        public let `protocol`: IpProtocol
        /// Range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        public let ipRange: String

        public init(fromPort: Int32, toPort: Int32, protocol: IpProtocol, ipRange: String) {
            self.fromPort = fromPort
            self.toPort = toPort
            self.`protocol` = `protocol`
            self.ipRange = ipRange
        }

        public init(dictionary: [String: Any]) throws {
            guard let fromPort = dictionary["FromPort"] as? Int32 else { throw InitializableError.missingRequiredParam("FromPort") }
            self.fromPort = fromPort
            guard let toPort = dictionary["ToPort"] as? Int32 else { throw InitializableError.missingRequiredParam("ToPort") }
            self.toPort = toPort
            guard let rawProtocol = dictionary["Protocol"] as? String, let `protocol` = IpProtocol(rawValue: rawProtocol) else { throw InitializableError.missingRequiredParam("Protocol") }
            self.`protocol` = `protocol`
            guard let ipRange = dictionary["IpRange"] as? String else { throw InitializableError.missingRequiredParam("IpRange") }
            self.ipRange = ipRange
        }
    }

    public struct DescribeFleetEventsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing event log entries for the specified fleet.
        public let events: [Event]?

        public init(nextToken: String? = nil, events: [Event]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let events = dictionary["Events"] as? [[String: Any]] {
                self.events = try events.map({ try Event(dictionary: $0) })
            } else { 
                self.events = nil
            }
        }
    }

    public struct DescribeAliasOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains the requested alias.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        public init(dictionary: [String: Any]) throws {
            if let alias = dictionary["Alias"] as? [String: Any] { self.alias = try Gamelift.Alias(dictionary: alias) } else { self.alias = nil }
        }
    }

    public struct GetInstanceAccessInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet that contains the instance you want access to. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
        public let fleetId: String
        /// Unique identifier for an instance you want to get access to. You can access an instance in any status.
        public let instanceId: String

        public init(fleetId: String, instanceId: String) {
            self.fleetId = fleetId
            self.instanceId = instanceId
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            guard let instanceId = dictionary["InstanceId"] as? String else { throw InitializableError.missingRequiredParam("InstanceId") }
            self.instanceId = instanceId
        }
    }

    public enum ScalingAdjustmentType: String, CustomStringConvertible {
        case changeincapacity = "ChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRuntimeConfigurationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to get the runtime configuration for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
        }
    }

    public enum PlayerSessionCreationPolicy: String, CustomStringConvertible {
        case accept_all = "ACCEPT_ALL"
        case deny_all = "DENY_ALL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a game session placement to retrieve.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public init(dictionary: [String: Any]) throws {
            guard let placementId = dictionary["PlacementId"] as? String else { throw InitializableError.missingRequiredParam("PlacementId") }
            self.placementId = placementId
        }
    }

    public struct RoutingStrategy: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Type of routing strategy. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let `type`: RoutingStrategyType?
        /// Unique identifier for a fleet that the alias points to.
        public let fleetId: String?
        /// Message text to be used with a terminal routing strategy.
        public let message: String?

        public init(type: RoutingStrategyType? = nil, fleetId: String? = nil, message: String? = nil) {
            self.`type` = `type`
            self.fleetId = fleetId
            self.message = message
        }

        public init(dictionary: [String: Any]) throws {
            if let `type` = dictionary["Type"] as? String { self.`type` = RoutingStrategyType(rawValue: `type`) } else { self.`type` = nil }
            self.fleetId = dictionary["FleetId"] as? String
            self.message = dictionary["Message"] as? String
        }
    }

    public struct UpdateAliasInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Human-readable description of an alias.
        public let description: String?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Unique identifier for a fleet alias. Specify the alias you want to update.
        public let aliasId: String
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy?

        public init(description: String? = nil, name: String? = nil, aliasId: String, routingStrategy: RoutingStrategy? = nil) {
            self.description = description
            self.name = name
            self.aliasId = aliasId
            self.routingStrategy = routingStrategy
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["Description"] as? String
            self.name = dictionary["Name"] as? String
            guard let aliasId = dictionary["AliasId"] as? String else { throw InitializableError.missingRequiredParam("AliasId") }
            self.aliasId = aliasId
            if let routingStrategy = dictionary["RoutingStrategy"] as? [String: Any] { self.routingStrategy = try Gamelift.RoutingStrategy(dictionary: routingStrategy) } else { self.routingStrategy = nil }
        }
    }

    public struct UpdateFleetPortSettingsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public init(dictionary: [String: Any]) throws {
            self.fleetId = dictionary["FleetId"] as? String
        }
    }

    public struct UpdateRuntimeConfigurationInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Unique identifier for a fleet to update runtime configuration for.
        public let fleetId: String
        /// Instructions for launching server processes on each instance in the fleet. The runtime configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance.
        public let runtimeConfiguration: RuntimeConfiguration

        public init(fleetId: String, runtimeConfiguration: RuntimeConfiguration) {
            self.fleetId = fleetId
            self.runtimeConfiguration = runtimeConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let fleetId = dictionary["FleetId"] as? String else { throw InitializableError.missingRequiredParam("FleetId") }
            self.fleetId = fleetId
            guard let runtimeConfiguration = dictionary["RuntimeConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RuntimeConfiguration") }
            self.runtimeConfiguration = try Gamelift.RuntimeConfiguration(dictionary: runtimeConfiguration)
        }
    }

    public struct CreateGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

        public init(dictionary: [String: Any]) throws {
            if let destinations = dictionary["Destinations"] as? [[String: Any]] {
                self.destinations = try destinations.map({ try GameSessionQueueDestination(dictionary: $0) })
            } else { 
                self.destinations = nil
            }
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            self.timeoutInSeconds = dictionary["TimeoutInSeconds"] as? Int32
        }
    }

    public struct SearchGameSessionsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let gameSessions = dictionary["GameSessions"] as? [[String: Any]] {
                self.gameSessions = try gameSessions.map({ try GameSession(dictionary: $0) })
            } else { 
                self.gameSessions = nil
            }
            self.nextToken = dictionary["NextToken"] as? String
        }
    }

    public struct UpdateAliasOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Object that contains the updated alias configuration.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        public init(dictionary: [String: Any]) throws {
            if let alias = dictionary["Alias"] as? [String: Any] { self.alias = try Gamelift.Alias(dictionary: alias) } else { self.alias = nil }
        }
    }

    public struct DescribeRuntimeConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Instructions describing how server processes should be launched and maintained on each instance in the fleet.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            if let runtimeConfiguration = dictionary["RuntimeConfiguration"] as? [String: Any] { self.runtimeConfiguration = try Gamelift.RuntimeConfiguration(dictionary: runtimeConfiguration) } else { self.runtimeConfiguration = nil }
        }
    }

    public struct ListFleetsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Set of fleet IDs matching the list request. You can retrieve additional information about all returned fleets by passing this result set to a call to DescribeFleetAttributes, DescribeFleetCapacity, or DescribeFleetUtilization.
        public let fleetIds: [String]?

        public init(nextToken: String? = nil, fleetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.fleetIds = fleetIds
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.fleetIds = dictionary["FleetIds"] as? [String]
        }
    }

}