// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Budgets {

    public struct CreateNotificationResponse: AWSShape {

    }

    public enum ThresholdType: String, CustomStringConvertible, Codable {
        case percentage = "PERCENTAGE"
        case absoluteValue = "ABSOLUTE_VALUE"
        public var description: String { return self.rawValue }
    }

    public struct CreateSubscriberResponse: AWSShape {

    }

    public struct UpdateSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NewSubscriber", required: true, type: .structure), 
            AWSShapeMember(label: "OldSubscriber", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure)
        ]
        /// The accountId that is associated with the budget whose subscriber you want to update.
        public let accountId: String
        /// The updated subscriber that is associated with a budget notification.
        public let newSubscriber: Subscriber
        /// The previous subscriber that is associated with a budget notification.
        public let oldSubscriber: Subscriber
        /// The name of the budget whose subscriber you want to update.
        public let budgetName: String
        /// The notification whose subscriber you want to update.
        public let notification: Notification

        public init(accountId: String, newSubscriber: Subscriber, oldSubscriber: Subscriber, budgetName: String, notification: Notification) {
            self.accountId = accountId
            self.newSubscriber = newSubscriber
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case newSubscriber = "NewSubscriber"
            case oldSubscriber = "OldSubscriber"
            case budgetName = "BudgetName"
            case notification = "Notification"
        }
    }

    public struct UpdateNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewNotification", required: true, type: .structure), 
            AWSShapeMember(label: "OldNotification", required: true, type: .structure), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The updated notification to be associated with a budget.
        public let newNotification: Notification
        /// The previous notification that is associated with a budget.
        public let oldNotification: Notification
        /// The accountId that is associated with the budget whose notification you want to update.
        public let accountId: String
        /// The name of the budget whose notification you want to update.
        public let budgetName: String

        public init(newNotification: Notification, oldNotification: Notification, accountId: String, budgetName: String) {
            self.newNotification = newNotification
            self.oldNotification = oldNotification
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case newNotification = "NewNotification"
            case oldNotification = "OldNotification"
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure)
        ]
        /// The name of the budget that you want to subscribe to. Budget names must be unique within an account.
        public let budgetName: String
        /// The accountId that is associated with the budget that you want to create a subscriber for.
        public let accountId: String
        /// The notification that you want to create a subscriber for.
        public let notification: Notification
        /// The subscriber that you want to associate with a budget notification.
        public let subscriber: Subscriber

        public init(budgetName: String, accountId: String, notification: Notification, subscriber: Subscriber) {
            self.budgetName = budgetName
            self.accountId = accountId
            self.notification = notification
            self.subscriber = subscriber
        }

        private enum CodingKeys: String, CodingKey {
            case budgetName = "BudgetName"
            case accountId = "AccountId"
            case notification = "Notification"
            case subscriber = "Subscriber"
        }
    }

    public struct DescribeBudgetPerformanceHistoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetPerformanceHistory", required: false, type: .structure)
        ]
        public let nextToken: String?
        /// The history of how often the budget has gone into an ALARM state. For DAILY budgets, the history saves the state of the budget for the last 60 days. For MONTHLY budgets, the history saves the state of the budget for the current month plus the last 12 months. For QUARTERLY budgets, the history saves the state of the budget for the last four quarters.
        public let budgetPerformanceHistory: BudgetPerformanceHistory?

        public init(nextToken: String? = nil, budgetPerformanceHistory: BudgetPerformanceHistory? = nil) {
            self.nextToken = nextToken
            self.budgetPerformanceHistory = budgetPerformanceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case budgetPerformanceHistory = "BudgetPerformanceHistory"
        }
    }

    public struct DescribeBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The name of the budget that you want a description of.
        public let budgetName: String
        /// The accountId that is associated with the budget that you want a description of.
        public let accountId: String

        public init(budgetName: String, accountId: String) {
            self.budgetName = budgetName
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case budgetName = "BudgetName"
            case accountId = "AccountId"
        }
    }

    public struct UpdateBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NewBudget", required: true, type: .structure)
        ]
        /// The accountId that is associated with the budget that you want to update.
        public let accountId: String
        /// The budget that you want to update your budget to.
        public let newBudget: Budget

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case newBudget = "NewBudget"
        }
    }

    public enum NotificationType: String, CustomStringConvertible, Codable {
        case actual = "ACTUAL"
        case forecasted = "FORECASTED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBudgetResponse: AWSShape {

    }

    public struct CreateBudgetResponse: AWSShape {

    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct CreateNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Subscribers", required: true, type: .list)
        ]
        /// The name of the budget that you want AWS to notify you about. Budget names must be unique within an account.
        public let budgetName: String
        /// The notification that you want to create.
        public let notification: Notification
        /// The accountId that is associated with the budget that you want to create a notification for.
        public let accountId: String
        /// A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.
        public let subscribers: [Subscriber]

        public init(budgetName: String, notification: Notification, accountId: String, subscribers: [Subscriber]) {
            self.budgetName = budgetName
            self.notification = notification
            self.accountId = accountId
            self.subscribers = subscribers
        }

        private enum CodingKeys: String, CodingKey {
            case budgetName = "BudgetName"
            case notification = "Notification"
            case accountId = "AccountId"
            case subscribers = "Subscribers"
        }
    }

    public struct DescribeBudgetPerformanceHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "TimePeriod", required: false, type: .structure)
        ]
        public let maxResults: Int32?
        public let accountId: String
        public let nextToken: String?
        public let budgetName: String
        /// Retrieves how often the budget went into an ALARM state for the specified time period.
        public let timePeriod: TimePeriod?

        public init(maxResults: Int32? = nil, accountId: String, nextToken: String? = nil, budgetName: String, timePeriod: TimePeriod? = nil) {
            self.maxResults = maxResults
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.timePeriod = timePeriod
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case accountId = "AccountId"
            case nextToken = "NextToken"
            case budgetName = "BudgetName"
            case timePeriod = "TimePeriod"
        }
    }

    public enum NotificationState: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case alarm = "ALARM"
        public var description: String { return self.rawValue }
    }

    public struct Notification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationType", required: true, type: .enum), 
            AWSShapeMember(label: "ThresholdType", required: false, type: .enum), 
            AWSShapeMember(label: "NotificationState", required: false, type: .enum), 
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum)
        ]
        /// Whether the notification is for how much you have spent (ACTUAL) or for how much you're forecasted to spend (FORECASTED).
        public let notificationType: NotificationType
        /// The type of threshold for a notification. For ABSOLUTE_VALUE thresholds, AWS notifies you when you go over or are forecasted to go over your total cost threshold. For PERCENTAGE thresholds, AWS notifies you when you go over or are forecasted to go over a certain percentage of your forecasted spend. For example, if you have a budget for 200 dollars and you have a PERCENTAGE threshold of 80%, AWS notifies you when you go over 160 dollars.
        public let thresholdType: ThresholdType?
        /// Whether this notification is in alarm. If a budget notification is in the ALARM state, you have passed the set threshold for the budget.
        public let notificationState: NotificationState?
        /// The threshold that is associated with a notification. Thresholds are always a percentage.
        public let threshold: Double
        /// The comparison that is used for this notification.
        public let comparisonOperator: ComparisonOperator

        public init(notificationType: NotificationType, thresholdType: ThresholdType? = nil, notificationState: NotificationState? = nil, threshold: Double, comparisonOperator: ComparisonOperator) {
            self.notificationType = notificationType
            self.thresholdType = thresholdType
            self.notificationState = notificationState
            self.threshold = threshold
            self.comparisonOperator = comparisonOperator
        }

        private enum CodingKeys: String, CodingKey {
            case notificationType = "NotificationType"
            case thresholdType = "ThresholdType"
            case notificationState = "NotificationState"
            case threshold = "Threshold"
            case comparisonOperator = "ComparisonOperator"
        }
    }

    public struct Budget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetType", required: true, type: .enum), 
            AWSShapeMember(label: "LastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CostTypes", required: false, type: .structure), 
            AWSShapeMember(label: "TimePeriod", required: false, type: .structure), 
            AWSShapeMember(label: "CostFilters", required: false, type: .map), 
            AWSShapeMember(label: "TimeUnit", required: true, type: .enum), 
            AWSShapeMember(label: "BudgetLimit", required: false, type: .structure), 
            AWSShapeMember(label: "CalculatedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// Whether this budget tracks monetary costs, usage, RI utilization, or RI coverage.
        public let budgetType: BudgetType
        /// The last time that you updated this budget.
        public let lastUpdatedTime: TimeStamp?
        /// The types of costs that are included in this COST budget.  USAGE, RI_UTILIZATION, and RI_COVERAGE budgets do not have CostTypes.
        public let costTypes: CostTypes?
        /// The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. The end date must come before 06/15/87 00:00 UTC.  If you create your budget and don't specify a start date, AWS defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose DAILY, and didn't set a start date, AWS set your start date to 01/24/18 00:00 UTC. If you chose MONTHLY, AWS set your start date to 01/01/18 00:00 UTC. If you didn't specify an end date, AWS set your end date to 06/15/87 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API.  You can change either date with the UpdateBudget operation. After the end date, AWS deletes the budget and all associated notifications and subscribers.
        public let timePeriod: TimePeriod?
        /// The cost filters, such as service or region, that are applied to a budget. AWS Budgets supports the following services as a filter for RI budgets:   Amazon Elastic Compute Cloud - Compute   Amazon Redshift   Amazon Relational Database Service   Amazon ElastiCache   Amazon Elasticsearch Service  
        public let costFilters: [String: [String]]?
        /// The length of time until a budget resets the actual and forecasted spend. DAILY is available only for RI_UTILIZATION and RI_COVERAGE budgets.
        public let timeUnit: TimeUnit
        /// The total amount of cost, usage, RI utilization, or RI coverage that you want to track with your budget.  BudgetLimit is required for cost or usage budgets, but optional for RI utilization or coverage budgets. RI utilization or coverage budgets default to 100, which is the only valid value for RI utilization or coverage budgets.
        public let budgetLimit: Spend?
        /// The actual and forecasted cost or usage that the budget tracks.
        public let calculatedSpend: CalculatedSpend?
        /// The name of a budget. The name must be unique within accounts. The : and \ characters aren't allowed in BudgetName.
        public let budgetName: String

        public init(budgetType: BudgetType, lastUpdatedTime: TimeStamp? = nil, costTypes: CostTypes? = nil, timePeriod: TimePeriod? = nil, costFilters: [String: [String]]? = nil, timeUnit: TimeUnit, budgetLimit: Spend? = nil, calculatedSpend: CalculatedSpend? = nil, budgetName: String) {
            self.budgetType = budgetType
            self.lastUpdatedTime = lastUpdatedTime
            self.costTypes = costTypes
            self.timePeriod = timePeriod
            self.costFilters = costFilters
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.calculatedSpend = calculatedSpend
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case budgetType = "BudgetType"
            case lastUpdatedTime = "LastUpdatedTime"
            case costTypes = "CostTypes"
            case timePeriod = "TimePeriod"
            case costFilters = "CostFilters"
            case timeUnit = "TimeUnit"
            case budgetLimit = "BudgetLimit"
            case calculatedSpend = "CalculatedSpend"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budget", required: true, type: .structure), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NotificationsWithSubscribers", required: false, type: .list)
        ]
        /// The budget object that you want to create.
        public let budget: Budget
        /// The accountId that is associated with the budget.
        public let accountId: String
        /// A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your CreateBudget call, AWS creates the notifications and subscribers for you.
        public let notificationsWithSubscribers: [NotificationWithSubscribers]?

        public init(budget: Budget, accountId: String, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.budget = budget
            self.accountId = accountId
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

        private enum CodingKeys: String, CodingKey {
            case budget = "Budget"
            case accountId = "AccountId"
            case notificationsWithSubscribers = "NotificationsWithSubscribers"
        }
    }

    public struct DescribeBudgetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The accountId that is associated with the budgets that you want descriptions of.
        public let accountId: String
        /// An optional integer that represents how many entries a paginated response contains. The maximum is 100.
        public let maxResults: Int32?
        /// The pagination token that you include in your request to indicate the next set of results that you want to retrieve.
        public let nextToken: String?

        public init(accountId: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.accountId = accountId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateSubscriberResponse: AWSShape {

    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterThan = "GREATER_THAN"
        case lessThan = "LESS_THAN"
        case equalTo = "EQUAL_TO"
        public var description: String { return self.rawValue }
    }

    public struct DeleteNotificationResponse: AWSShape {

    }

    public struct DescribeSubscribersForNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The notification whose subscribers you want to list.
        public let notification: Notification
        /// The name of the budget whose subscribers you want descriptions of.
        public let budgetName: String
        /// The accountId that is associated with the budget whose subscribers you want descriptions of.
        public let accountId: String
        /// An optional integer that represents how many entries a paginated response contains. The maximum is 100.
        public let maxResults: Int32?
        /// The pagination token that you include in your request to indicate the next set of results that you want to retrieve.
        public let nextToken: String?

        public init(notification: Notification, budgetName: String, accountId: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.notification = notification
            self.budgetName = budgetName
            self.accountId = accountId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case notification = "Notification"
            case budgetName = "BudgetName"
            case accountId = "AccountId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BudgetPerformanceHistory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CostFilters", required: false, type: .map), 
            AWSShapeMember(label: "CostTypes", required: false, type: .structure), 
            AWSShapeMember(label: "BudgetedAndActualAmountsList", required: false, type: .list), 
            AWSShapeMember(label: "TimeUnit", required: false, type: .enum), 
            AWSShapeMember(label: "BudgetType", required: false, type: .enum), 
            AWSShapeMember(label: "BudgetName", required: false, type: .string)
        ]
        /// The history of the cost filters for a budget during the specified time period.
        public let costFilters: [String: [String]]?
        /// The history of the cost types for a budget during the specified time period.
        public let costTypes: CostTypes?
        /// A list of amounts of cost or usage that you created budgets for, compared to your actual costs or usage.
        public let budgetedAndActualAmountsList: [BudgetedAndActualAmounts]?
        public let timeUnit: TimeUnit?
        public let budgetType: BudgetType?
        public let budgetName: String?

        public init(costFilters: [String: [String]]? = nil, costTypes: CostTypes? = nil, budgetedAndActualAmountsList: [BudgetedAndActualAmounts]? = nil, timeUnit: TimeUnit? = nil, budgetType: BudgetType? = nil, budgetName: String? = nil) {
            self.costFilters = costFilters
            self.costTypes = costTypes
            self.budgetedAndActualAmountsList = budgetedAndActualAmountsList
            self.timeUnit = timeUnit
            self.budgetType = budgetType
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case costFilters = "CostFilters"
            case costTypes = "CostTypes"
            case budgetedAndActualAmountsList = "BudgetedAndActualAmountsList"
            case timeUnit = "TimeUnit"
            case budgetType = "BudgetType"
            case budgetName = "BudgetName"
        }
    }

    public struct CostTypes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeTax", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeUpfront", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeOtherSubscription", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeSupport", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeSubscription", required: false, type: .boolean), 
            AWSShapeMember(label: "UseBlended", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeRecurring", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeCredit", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeRefund", required: false, type: .boolean), 
            AWSShapeMember(label: "UseAmortized", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeDiscount", required: false, type: .boolean)
        ]
        /// Specifies whether a budget includes taxes. The default value is true.
        public let includeTax: Bool?
        /// Specifies whether a budget includes upfront RI costs. The default value is true.
        public let includeUpfront: Bool?
        /// Specifies whether a budget includes non-RI subscription costs. The default value is true.
        public let includeOtherSubscription: Bool?
        /// Specifies whether a budget includes support subscription fees. The default value is true.
        public let includeSupport: Bool?
        /// Specifies whether a budget includes subscriptions. The default value is true.
        public let includeSubscription: Bool?
        /// Specifies whether a budget uses a blended rate. The default value is false.
        public let useBlended: Bool?
        /// Specifies whether a budget includes recurring fees such as monthly RI fees. The default value is true.
        public let includeRecurring: Bool?
        /// Specifies whether a budget includes credits. The default value is true.
        public let includeCredit: Bool?
        /// Specifies whether a budget includes refunds. The default value is true.
        public let includeRefund: Bool?
        /// Specifies whether a budget uses the amortized rate. The default value is false.
        public let useAmortized: Bool?
        /// Specifies whether a budget includes discounts. The default value is true.
        public let includeDiscount: Bool?

        public init(includeTax: Bool? = nil, includeUpfront: Bool? = nil, includeOtherSubscription: Bool? = nil, includeSupport: Bool? = nil, includeSubscription: Bool? = nil, useBlended: Bool? = nil, includeRecurring: Bool? = nil, includeCredit: Bool? = nil, includeRefund: Bool? = nil, useAmortized: Bool? = nil, includeDiscount: Bool? = nil) {
            self.includeTax = includeTax
            self.includeUpfront = includeUpfront
            self.includeOtherSubscription = includeOtherSubscription
            self.includeSupport = includeSupport
            self.includeSubscription = includeSubscription
            self.useBlended = useBlended
            self.includeRecurring = includeRecurring
            self.includeCredit = includeCredit
            self.includeRefund = includeRefund
            self.useAmortized = useAmortized
            self.includeDiscount = includeDiscount
        }

        private enum CodingKeys: String, CodingKey {
            case includeTax = "IncludeTax"
            case includeUpfront = "IncludeUpfront"
            case includeOtherSubscription = "IncludeOtherSubscription"
            case includeSupport = "IncludeSupport"
            case includeSubscription = "IncludeSubscription"
            case useBlended = "UseBlended"
            case includeRecurring = "IncludeRecurring"
            case includeCredit = "IncludeCredit"
            case includeRefund = "IncludeRefund"
            case useAmortized = "UseAmortized"
            case includeDiscount = "IncludeDiscount"
        }
    }

    public struct BudgetedAndActualAmounts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetedAmount", required: false, type: .structure), 
            AWSShapeMember(label: "ActualAmount", required: false, type: .structure), 
            AWSShapeMember(label: "TimePeriod", required: false, type: .structure)
        ]
        /// The amount of cost or usage that you created the budget for.
        public let budgetedAmount: Spend?
        /// Your actual costs or usage for a budget period.
        public let actualAmount: Spend?
        /// The time period covered by this budget comparison.
        public let timePeriod: TimePeriod?

        public init(budgetedAmount: Spend? = nil, actualAmount: Spend? = nil, timePeriod: TimePeriod? = nil) {
            self.budgetedAmount = budgetedAmount
            self.actualAmount = actualAmount
            self.timePeriod = timePeriod
        }

        private enum CodingKeys: String, CodingKey {
            case budgetedAmount = "BudgetedAmount"
            case actualAmount = "ActualAmount"
            case timePeriod = "TimePeriod"
        }
    }

    public struct TimePeriod: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Start", required: false, type: .timestamp), 
            AWSShapeMember(label: "End", required: false, type: .timestamp)
        ]
        /// The start date for a budget. If you created your budget and didn't specify a start date, AWS defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose DAILY, and didn't set a start date, AWS set your start date to 01/24/18 00:00 UTC. If you chose MONTHLY, AWS set your start date to 01/01/18 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API. You can change your start date with the UpdateBudget operation.
        public let start: TimeStamp?
        /// The end date for a budget. If you didn't specify an end date, AWS set your end date to 06/15/87 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API. After the end date, AWS deletes the budget and all associated notifications and subscribers. You can change your end date with the UpdateBudget operation.
        public let end: TimeStamp?

        public init(start: TimeStamp? = nil, end: TimeStamp? = nil) {
            self.start = start
            self.end = end
        }

        private enum CodingKeys: String, CodingKey {
            case start = "Start"
            case end = "End"
        }
    }

    public struct DescribeNotificationsForBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// An optional integer that represents how many entries a paginated response contains. The maximum is 100.
        public let maxResults: Int32?
        /// The pagination token that you include in your request to indicate the next set of results that you want to retrieve.
        public let nextToken: String?
        /// The accountId that is associated with the budget whose notifications you want descriptions of.
        public let accountId: String
        /// The name of the budget whose notifications you want descriptions of.
        public let budgetName: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, accountId: String, budgetName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct NotificationWithSubscribers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", required: true, type: .list), 
            AWSShapeMember(label: "Notification", required: true, type: .structure)
        ]
        /// A list of subscribers who are subscribed to this notification.
        public let subscribers: [Subscriber]
        /// The notification that is associated with a budget.
        public let notification: Notification

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "Subscribers"
            case notification = "Notification"
        }
    }

    public struct UpdateBudgetResponse: AWSShape {

    }

    public struct DeleteSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget whose subscriber you want to delete.
        public let accountId: String
        /// The notification whose subscriber you want to delete.
        public let notification: Notification
        /// The subscriber that you want to delete.
        public let subscriber: Subscriber
        /// The name of the budget whose subscriber you want to delete.
        public let budgetName: String

        public init(accountId: String, notification: Notification, subscriber: Subscriber, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscriber = subscriber
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case subscriber = "Subscriber"
            case budgetName = "BudgetName"
        }
    }

    public struct DeleteBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The name of the budget that you want to delete.
        public let budgetName: String
        /// The accountId that is associated with the budget that you want to delete.
        public let accountId: String

        public init(budgetName: String, accountId: String) {
            self.budgetName = budgetName
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case budgetName = "BudgetName"
            case accountId = "AccountId"
        }
    }

    public struct DeleteNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure)
        ]
        /// The name of the budget whose notification you want to delete.
        public let budgetName: String
        /// The accountId that is associated with the budget whose notification you want to delete.
        public let accountId: String
        /// The notification that you want to delete.
        public let notification: Notification

        public init(budgetName: String, accountId: String, notification: Notification) {
            self.budgetName = budgetName
            self.accountId = accountId
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case budgetName = "BudgetName"
            case accountId = "AccountId"
            case notification = "Notification"
        }
    }

    public struct Spend: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Amount", required: true, type: .string), 
            AWSShapeMember(label: "Unit", required: true, type: .string)
        ]
        /// The cost or usage amount that is associated with a budget forecast, actual spend, or budget threshold.
        public let amount: String
        /// The unit of measurement that is used for the budget forecast, actual spend, or budget threshold, such as dollars or GB.
        public let unit: String

        public init(amount: String, unit: String) {
            self.amount = amount
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case amount = "Amount"
            case unit = "Unit"
        }
    }

    public struct DescribeBudgetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Budgets", required: false, type: .list)
        ]
        /// The pagination token in the service response that indicates the next set of results that you can retrieve.
        public let nextToken: String?
        /// A list of budgets.
        public let budgets: [Budget]?

        public init(nextToken: String? = nil, budgets: [Budget]? = nil) {
            self.nextToken = nextToken
            self.budgets = budgets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case budgets = "Budgets"
        }
    }

    public struct UpdateNotificationResponse: AWSShape {

    }

    public struct DescribeBudgetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budget", required: false, type: .structure)
        ]
        /// The description of the budget.
        public let budget: Budget?

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

        private enum CodingKeys: String, CodingKey {
            case budget = "Budget"
        }
    }

    public struct DescribeSubscribersForNotificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Subscribers", required: false, type: .list)
        ]
        /// The pagination token in the service response that indicates the next set of results that you can retrieve.
        public let nextToken: String?
        /// A list of subscribers that are associated with a notification.
        public let subscribers: [Subscriber]?

        public init(nextToken: String? = nil, subscribers: [Subscriber]? = nil) {
            self.nextToken = nextToken
            self.subscribers = subscribers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscribers = "Subscribers"
        }
    }

    public struct DeleteSubscriberResponse: AWSShape {

    }

    public struct Subscriber: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum), 
            AWSShapeMember(label: "Address", required: true, type: .string)
        ]
        /// The type of notification that AWS sends to a subscriber.
        public let subscriptionType: SubscriptionType
        /// The address that AWS sends budget notifications to, either an SNS topic or an email.
        public let address: String

        public init(subscriptionType: SubscriptionType, address: String) {
            self.subscriptionType = subscriptionType
            self.address = address
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionType = "SubscriptionType"
            case address = "Address"
        }
    }

    public struct DescribeNotificationsForBudgetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notifications", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of notifications that are associated with a budget.
        public let notifications: [Notification]?
        /// The pagination token in the service response that indicates the next set of results that you can retrieve.
        public let nextToken: String?

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case notifications = "Notifications"
            case nextToken = "NextToken"
        }
    }

    public enum BudgetType: String, CustomStringConvertible, Codable {
        case usage = "USAGE"
        case cost = "COST"
        case riUtilization = "RI_UTILIZATION"
        case riCoverage = "RI_COVERAGE"
        public var description: String { return self.rawValue }
    }

    public enum TimeUnit: String, CustomStringConvertible, Codable {
        case daily = "DAILY"
        case monthly = "MONTHLY"
        case quarterly = "QUARTERLY"
        case annually = "ANNUALLY"
        public var description: String { return self.rawValue }
    }

    public struct CalculatedSpend: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForecastedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "ActualSpend", required: true, type: .structure)
        ]
        /// The amount of cost, usage, or RI units that you are forecasted to use.
        public let forecastedSpend: Spend?
        /// The amount of cost, usage, or RI units that you have used.
        public let actualSpend: Spend

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

        private enum CodingKeys: String, CodingKey {
            case forecastedSpend = "ForecastedSpend"
            case actualSpend = "ActualSpend"
        }
    }

}