// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudDirectory {

    public struct BatchListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.nextToken = nextToken
            self.objectIdentifiers = objectIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectIdentifiers = "ObjectIdentifiers"
        }
    }

    public struct BatchDeleteObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public struct ListIncomingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure)
        ]
        /// Reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?

        public init(objectReference: ObjectReference, nextToken: String? = nil, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil) {
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case consistencyLevel = "ConsistencyLevel"
            case directoryArn = "x-amz-data-partition"
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
        }
    }

    public struct AttachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ChildReference", required: true, type: .structure)
        ]
        /// The link name with which the child object is attached to the parent.
        public let linkName: String
        /// The parent object reference.
        public let parentReference: ObjectReference
        /// Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// The child object reference to be attached to the object.
        public let childReference: ObjectReference

        public init(linkName: String, parentReference: ObjectReference, directoryArn: String, childReference: ObjectReference) {
            self.linkName = linkName
            self.parentReference = parentReference
            self.directoryArn = directoryArn
            self.childReference = childReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case parentReference = "ParentReference"
            case directoryArn = "x-amz-data-partition"
            case childReference = "ChildReference"
        }
    }

    public struct BatchListObjectParentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParentLinks", required: false, type: .list)
        ]
        public let nextToken: String?
        public let parentLinks: [ObjectIdentifierAndLinkNameTuple]?

        public init(nextToken: String? = nil, parentLinks: [ObjectIdentifierAndLinkNameTuple]? = nil) {
            self.nextToken = nextToken
            self.parentLinks = parentLinks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parentLinks = "ParentLinks"
        }
    }

    public struct BatchDetachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentReference", required: true, type: .structure), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "LinkName", required: true, type: .string)
        ]
        /// Parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?
        /// The name of the link.
        public let linkName: String

        public init(parentReference: ObjectReference, batchReferenceName: String? = nil, linkName: String) {
            self.parentReference = parentReference
            self.batchReferenceName = batchReferenceName
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case parentReference = "ParentReference"
            case batchReferenceName = "BatchReferenceName"
            case linkName = "LinkName"
        }
    }

    public enum FacetAttributeType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case binary = "BINARY"
        case boolean = "BOOLEAN"
        case number = "NUMBER"
        case datetime = "DATETIME"
        case variant = "VARIANT"
        public var description: String { return self.rawValue }
    }

    public struct AttributeKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "FacetName", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The name of the attribute.
        public let name: String
        /// The name of the facet that the attribute exists within.
        public let facetName: String
        /// The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.
        public let schemaArn: String

        public init(name: String, facetName: String, schemaArn: String) {
            self.name = name
            self.facetName = facetName
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case facetName = "FacetName"
            case schemaArn = "SchemaArn"
        }
    }

    public struct BatchCreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchAttachToIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct BatchGetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list)
        ]
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?
        /// The facets attached to the specified object.
        public let schemaFacets: [SchemaFacet]?

        public init(objectIdentifier: String? = nil, schemaFacets: [SchemaFacet]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.schemaFacets = schemaFacets
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case schemaFacets = "SchemaFacets"
        }
    }

    public enum RuleType: String, CustomStringConvertible, Codable {
        case binaryLength = "BINARY_LENGTH"
        case numberComparison = "NUMBER_COMPARISON"
        case stringFromSet = "STRING_FROM_SET"
        case stringLength = "STRING_LENGTH"
        public var description: String { return self.rawValue }
    }

    public struct ListPolicyAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, policyReference: ObjectReference, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.policyReference = policyReference
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case policyReference = "PolicyReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list), 
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The facets attached to the specified object. Although the response does not include minor version information, the most recently applied minor version of each Facet is in effect. See GetAppliedSchemaVersion for details.
        public let schemaFacets: [SchemaFacet]?
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?

        public init(schemaFacets: [SchemaFacet]? = nil, objectIdentifier: String? = nil) {
            self.schemaFacets = schemaFacets
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacets = "SchemaFacets"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct GetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token. This is for future use. Currently pagination is not supported for tagging.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// The MaxResults parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, resourceArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceArn = "ResourceArn"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchUpdateLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(attributeUpdates: [LinkAttributeUpdate], typedLinkSpecifier: TypedLinkSpecifier) {
            self.attributeUpdates = attributeUpdates
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdates = "AttributeUpdates"
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct ObjectIdentifierAndLinkNameTuple: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "LinkName", required: false, type: .string)
        ]
        /// The ID that is associated with the object.
        public let objectIdentifier: String?
        /// The name of the link between the parent and the child object.
        public let linkName: String?

        public init(objectIdentifier: String? = nil, linkName: String? = nil) {
            self.objectIdentifier = objectIdentifier
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case linkName = "LinkName"
        }
    }

    public struct AttachToIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure)
        ]
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where the object and index exist.
        public let directoryArn: String
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference

        public init(targetReference: ObjectReference, directoryArn: String, indexReference: ObjectReference) {
            self.targetReference = targetReference
            self.directoryArn = directoryArn
            self.indexReference = indexReference
        }

        private enum CodingKeys: String, CodingKey {
            case targetReference = "TargetReference"
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
        }
    }

    public struct BatchAddFacetToObjectResponse: AWSShape {

    }

    public enum RequiredAttributeBehavior: String, CustomStringConvertible, Codable {
        case requiredAlways = "REQUIRED_ALWAYS"
        case notRequired = "NOT_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct GetSchemaAsJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the schema to retrieve.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListManagedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs for all AWS managed schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the Directory. Should be unique per account, per region.
        public let name: String
        /// The Amazon Resource Name (ARN) of the published schema that will be copied into the data Directory. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// The type of attribute validation rule.
        public let `type`: RuleType?
        /// The minimum and maximum parameters that are associated with the rule.
        public let parameters: [String: String]?

        public init(type: RuleType? = nil, parameters: [String: String]? = nil) {
            self.`type` = `type`
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case parameters = "Parameters"
        }
    }

    public struct AddFacetToObjectResponse: AWSShape {

    }

    public struct ListOutgoingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list)
        ]
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// A reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?

        public init(consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, objectReference: ObjectReference, directoryArn: String, nextToken: String? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, filterAttributeRanges: [TypedLinkAttributeRange]? = nil) {
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.nextToken = nextToken
            self.filterTypedLink = filterTypedLink
            self.filterAttributeRanges = filterAttributeRanges
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "ConsistencyLevel"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
            case filterTypedLink = "FilterTypedLink"
            case filterAttributeRanges = "FilterAttributeRanges"
        }
    }

    public struct AttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct BatchListObjectParentPaths: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(objectReference: ObjectReference, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// A list of tag key-value pairs.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct ApplySchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string), 
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String?
        /// The applied schema ARN that is associated with the copied schema in the Directory. You can use this ARN to describe the schema information applied on this directory. For more information, see arns.
        public let appliedSchemaArn: String?

        public init(directoryArn: String? = nil, appliedSchemaArn: String? = nil) {
            self.directoryArn = directoryArn
            self.appliedSchemaArn = appliedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
            case appliedSchemaArn = "AppliedSchemaArn"
        }
    }

    public struct DeleteFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the facet to delete.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct BatchWriteOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure), 
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure)
        ]
        /// Creates an object.
        public let createObject: BatchCreateObject?
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObject?
        /// Updates a given object's attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributes?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicy?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObject?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed Links.
        public let attachTypedLink: BatchAttachTypedLink?
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndex?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed Links.
        public let detachTypedLink: BatchDetachTypedLink?
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndex?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicy?
        /// Creates an index object. See Indexing and search for more information.
        public let createIndex: BatchCreateIndex?
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObject?
        /// Updates a given object's attributes.
        public let updateLinkAttributes: BatchUpdateLinkAttributes?
        /// A batch operation that adds a facet to an object.
        public let addFacetToObject: BatchAddFacetToObject?
        /// A batch operation that removes a facet from an object.
        public let removeFacetFromObject: BatchRemoveFacetFromObject?

        public init(createObject: BatchCreateObject? = nil, deleteObject: BatchDeleteObject? = nil, updateObjectAttributes: BatchUpdateObjectAttributes? = nil, detachPolicy: BatchDetachPolicy? = nil, detachObject: BatchDetachObject? = nil, attachTypedLink: BatchAttachTypedLink? = nil, detachFromIndex: BatchDetachFromIndex? = nil, detachTypedLink: BatchDetachTypedLink? = nil, attachToIndex: BatchAttachToIndex? = nil, attachPolicy: BatchAttachPolicy? = nil, createIndex: BatchCreateIndex? = nil, attachObject: BatchAttachObject? = nil, updateLinkAttributes: BatchUpdateLinkAttributes? = nil, addFacetToObject: BatchAddFacetToObject? = nil, removeFacetFromObject: BatchRemoveFacetFromObject? = nil) {
            self.createObject = createObject
            self.deleteObject = deleteObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachPolicy = detachPolicy
            self.detachObject = detachObject
            self.attachTypedLink = attachTypedLink
            self.detachFromIndex = detachFromIndex
            self.detachTypedLink = detachTypedLink
            self.attachToIndex = attachToIndex
            self.attachPolicy = attachPolicy
            self.createIndex = createIndex
            self.attachObject = attachObject
            self.updateLinkAttributes = updateLinkAttributes
            self.addFacetToObject = addFacetToObject
            self.removeFacetFromObject = removeFacetFromObject
        }

        private enum CodingKeys: String, CodingKey {
            case createObject = "CreateObject"
            case deleteObject = "DeleteObject"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case detachPolicy = "DetachPolicy"
            case detachObject = "DetachObject"
            case attachTypedLink = "AttachTypedLink"
            case detachFromIndex = "DetachFromIndex"
            case detachTypedLink = "DetachTypedLink"
            case attachToIndex = "AttachToIndex"
            case attachPolicy = "AttachPolicy"
            case createIndex = "CreateIndex"
            case attachObject = "AttachObject"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case addFacetToObject = "AddFacetToObject"
            case removeFacetFromObject = "RemoveFacetFromObject"
        }
    }

    public struct UpdateTypedLinkFacetResponse: AWSShape {

    }

    public struct TypedAttributeValueRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartMode", required: true, type: .enum), 
            AWSShapeMember(label: "EndMode", required: true, type: .enum), 
            AWSShapeMember(label: "StartValue", required: false, type: .structure), 
            AWSShapeMember(label: "EndValue", required: false, type: .structure)
        ]
        /// The inclusive or exclusive range start.
        public let startMode: RangeMode
        /// The inclusive or exclusive range end.
        public let endMode: RangeMode
        /// The value to start the range at.
        public let startValue: TypedAttributeValue?
        /// The attribute value to terminate the range at.
        public let endValue: TypedAttributeValue?

        public init(startMode: RangeMode, endMode: RangeMode, startValue: TypedAttributeValue? = nil, endValue: TypedAttributeValue? = nil) {
            self.startMode = startMode
            self.endMode = endMode
            self.startValue = startValue
            self.endValue = endValue
        }

        private enum CodingKeys: String, CodingKey {
            case startMode = "StartMode"
            case endMode = "EndMode"
            case startValue = "StartValue"
            case endValue = "EndValue"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct ListTypedLinkFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetNames", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The names of typed link facets that exist within the schema.
        public let facetNames: [String]?

        public init(nextToken: String? = nil, facetNames: [String]? = nil) {
            self.nextToken = nextToken
            self.facetNames = facetNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetNames = "FacetNames"
        }
    }

    public struct CreateFacetResponse: AWSShape {

    }

    public struct BatchRemoveFacetFromObjectResponse: AWSShape {

    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of tag key value pairs that are associated with the response.
        public let tags: [Tag]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(tags: [Tag]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case nextToken = "NextToken"
        }
    }

    public struct BatchAttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct ListFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes attached to the facet.
        public let attributes: [FacetAttribute]?

        public init(nextToken: String? = nil, attributes: [FacetAttribute]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct ListObjectParentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentLinks", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Parents", required: false, type: .map)
        ]
        /// Returns a list of parent reference and LinkName Tuples.
        public let parentLinks: [ObjectIdentifierAndLinkNameTuple]?
        /// The pagination token.
        public let nextToken: String?
        /// The parent structure, which is a map with key as the ObjectIdentifier and LinkName as the value.
        public let parents: [String: String]?

        public init(parentLinks: [ObjectIdentifierAndLinkNameTuple]? = nil, nextToken: String? = nil, parents: [String: String]? = nil) {
            self.parentLinks = parentLinks
            self.nextToken = nextToken
            self.parents = parents
        }

        private enum CodingKeys: String, CodingKey {
            case parentLinks = "ParentLinks"
            case nextToken = "NextToken"
            case parents = "Parents"
        }
    }

    public struct BatchWriteOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure)
        ]
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndexResponse?
        /// Creates an object in a Directory.
        public let createObject: BatchCreateObjectResponse?
        /// Represents the output of a BatchWrite response operation.
        public let updateLinkAttributes: BatchUpdateLinkAttributesResponse?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed Links.
        public let attachTypedLink: BatchAttachTypedLinkResponse?
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObjectResponse?
        /// The result of an add facet to object batch operation.
        public let addFacetToObject: BatchAddFacetToObjectResponse?
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndexResponse?
        /// The result of a batch remove facet from object operation.
        public let removeFacetFromObject: BatchRemoveFacetFromObjectResponse?
        /// Creates an index object. See Indexing and search for more information.
        public let createIndex: BatchCreateIndexResponse?
        /// Updates a given object’s attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributesResponse?
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObjectResponse?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObjectResponse?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicyResponse?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed Links.
        public let detachTypedLink: BatchDetachTypedLinkResponse?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicyResponse?

        public init(detachFromIndex: BatchDetachFromIndexResponse? = nil, createObject: BatchCreateObjectResponse? = nil, updateLinkAttributes: BatchUpdateLinkAttributesResponse? = nil, attachTypedLink: BatchAttachTypedLinkResponse? = nil, deleteObject: BatchDeleteObjectResponse? = nil, addFacetToObject: BatchAddFacetToObjectResponse? = nil, attachToIndex: BatchAttachToIndexResponse? = nil, removeFacetFromObject: BatchRemoveFacetFromObjectResponse? = nil, createIndex: BatchCreateIndexResponse? = nil, updateObjectAttributes: BatchUpdateObjectAttributesResponse? = nil, attachObject: BatchAttachObjectResponse? = nil, detachObject: BatchDetachObjectResponse? = nil, detachPolicy: BatchDetachPolicyResponse? = nil, detachTypedLink: BatchDetachTypedLinkResponse? = nil, attachPolicy: BatchAttachPolicyResponse? = nil) {
            self.detachFromIndex = detachFromIndex
            self.createObject = createObject
            self.updateLinkAttributes = updateLinkAttributes
            self.attachTypedLink = attachTypedLink
            self.deleteObject = deleteObject
            self.addFacetToObject = addFacetToObject
            self.attachToIndex = attachToIndex
            self.removeFacetFromObject = removeFacetFromObject
            self.createIndex = createIndex
            self.updateObjectAttributes = updateObjectAttributes
            self.attachObject = attachObject
            self.detachObject = detachObject
            self.detachPolicy = detachPolicy
            self.detachTypedLink = detachTypedLink
            self.attachPolicy = attachPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case detachFromIndex = "DetachFromIndex"
            case createObject = "CreateObject"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case attachTypedLink = "AttachTypedLink"
            case deleteObject = "DeleteObject"
            case addFacetToObject = "AddFacetToObject"
            case attachToIndex = "AttachToIndex"
            case removeFacetFromObject = "RemoveFacetFromObject"
            case createIndex = "CreateIndex"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case attachObject = "AttachObject"
            case detachObject = "DetachObject"
            case detachPolicy = "DetachPolicy"
            case detachTypedLink = "DetachTypedLink"
            case attachPolicy = "AttachPolicy"
        }
    }

    public struct AttributeNameAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .structure)
        ]
        /// The attribute name of the typed link.
        public let attributeName: String
        /// The value for the typed link.
        public let value: TypedAttributeValue

        public init(attributeName: String, value: TypedAttributeValue) {
            self.attributeName = attributeName
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case value = "Value"
        }
    }

    public struct BatchReadResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch read.
        public let responses: [BatchReadOperationResponse]?

        public init(responses: [BatchReadOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct BatchDetachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct CreateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Facet", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        ///  Facet structure that is associated with the typed link facet.
        public let facet: TypedLinkFacet

        public init(schemaArn: String, facet: TypedLinkFacet) {
            self.schemaArn = schemaArn
            self.facet = facet
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case facet = "Facet"
        }
    }

    public struct ListTypedLinkFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An ordered set of attributes associate with the typed link.
        public let attributes: [TypedLinkAttributeDefinition]?
        /// The pagination token.
        public let nextToken: String?

        public init(attributes: [TypedLinkAttributeDefinition]? = nil, nextToken: String? = nil) {
            self.attributes = attributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case nextToken = "NextToken"
        }
    }

    public struct PathToObjectIdentifiers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list)
        ]
        /// The path that is used to identify the object starting from directory root.
        public let path: String?
        /// Lists ObjectIdentifiers starting from directory root to the object in the request.
        public let objectIdentifiers: [String]?

        public init(path: String? = nil, objectIdentifiers: [String]? = nil) {
            self.path = path
            self.objectIdentifiers = objectIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case objectIdentifiers = "ObjectIdentifiers"
        }
    }

    public struct BatchDetachFromIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// A reference to the index object.
        public let indexReference: ObjectReference
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct BatchListAttachedIndices: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(targetReference: ObjectReference, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.targetReference = targetReference
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case targetReference = "TargetReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListDevelopmentSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateFacetResponse: AWSShape {

    }

    public struct BatchUpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchLookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.nextToken = nextToken
            self.policyToPathList = policyToPathList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyToPathList = "PolicyToPathList"
        }
    }

    public struct GetFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet to retrieve.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct BatchCreateIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string)
        ]
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?
        /// The name of the link between the parent object and the index object.
        public let linkName: String?
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?

        public init(orderedIndexedAttributeList: [AttributeKey], isUnique: Bool, parentReference: ObjectReference? = nil, linkName: String? = nil, batchReferenceName: String? = nil) {
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.isUnique = isUnique
            self.parentReference = parentReference
            self.linkName = linkName
            self.batchReferenceName = batchReferenceName
        }

        private enum CodingKeys: String, CodingKey {
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case isUnique = "IsUnique"
            case parentReference = "ParentReference"
            case linkName = "LinkName"
            case batchReferenceName = "BatchReferenceName"
        }
    }

    public struct PolicyAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyType", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The type of policy that can be associated with PolicyAttachment.
        public let policyType: String?
        /// The ID of PolicyAttachment.
        public let policyId: String?
        /// The ObjectIdentifier that is associated with PolicyAttachment.
        public let objectIdentifier: String?

        public init(policyType: String? = nil, policyId: String? = nil, objectIdentifier: String? = nil) {
            self.policyType = policyType
            self.policyId = policyId
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case policyId = "PolicyId"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes map that is associated with the object. AttributeArn is the key; attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?

        public init(nextToken: String? = nil, attributes: [AttributeKeyAndValue]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct BatchAttachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(typedLinkFacet: TypedLinkSchemaAndFacetName, attributes: [AttributeNameAndValue], sourceObjectReference: ObjectReference, targetObjectReference: ObjectReference) {
            self.typedLinkFacet = typedLinkFacet
            self.attributes = attributes
            self.sourceObjectReference = sourceObjectReference
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkFacet = "TypedLinkFacet"
            case attributes = "Attributes"
            case sourceObjectReference = "SourceObjectReference"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct TypedLinkFacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: true, type: .enum), 
            AWSShapeMember(label: "Attribute", required: true, type: .structure)
        ]
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType
        /// The attribute to update.
        public let attribute: TypedLinkAttributeDefinition

        public init(action: UpdateActionType, attribute: TypedLinkAttributeDefinition) {
            self.action = action
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case attribute = "Attribute"
        }
    }

    public struct LinkAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeActionType", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeUpdateValue", required: false, type: .structure)
        ]
        /// A type that can be either UPDATE_OR_CREATE or DELETE.
        public let attributeActionType: UpdateActionType?
        /// The value that you want to update to.
        public let attributeUpdateValue: TypedAttributeValue?

        public init(attributeActionType: UpdateActionType? = nil, attributeUpdateValue: TypedAttributeValue? = nil) {
            self.attributeActionType = attributeActionType
            self.attributeUpdateValue = attributeUpdateValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeActionType = "AttributeActionType"
            case attributeUpdateValue = "AttributeUpdateValue"
        }
    }

    public struct GetObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// The consistency level at which to retrieve the attributes on an object.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides.
        public let directoryArn: String

        public init(objectReference: ObjectReference, attributeNames: [String], schemaFacet: SchemaFacet, consistencyLevel: ConsistencyLevel? = nil, directoryArn: String) {
            self.objectReference = objectReference
            self.attributeNames = attributeNames
            self.schemaFacet = schemaFacet
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeNames = "AttributeNames"
            case schemaFacet = "SchemaFacet"
            case consistencyLevel = "x-amz-consistency-level"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct GetTypedLinkFacetInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct UpgradePublishedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MinorVersion", required: true, type: .string), 
            AWSShapeMember(label: "DevelopmentSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string)
        ]
        /// Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.
        public let dryRun: Bool?
        /// Identifies the minor version of the published schema that will be created. This parameter is NOT optional.
        public let minorVersion: String
        /// The ARN of the development schema with the changes used for the upgrade.
        public let developmentSchemaArn: String
        /// The ARN of the published schema to be upgraded.
        public let publishedSchemaArn: String

        public init(dryRun: Bool? = nil, minorVersion: String, developmentSchemaArn: String, publishedSchemaArn: String) {
            self.dryRun = dryRun
            self.minorVersion = minorVersion
            self.developmentSchemaArn = developmentSchemaArn
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case minorVersion = "MinorVersion"
            case developmentSchemaArn = "DevelopmentSchemaArn"
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// Keys of the tag that need to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct UpdateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the updated schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct ListFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The names of facets that exist within the schema.
        public let facetNames: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(facetNames: [String]? = nil, nextToken: String? = nil) {
            self.facetNames = facetNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case facetNames = "FacetNames"
            case nextToken = "NextToken"
        }
    }

    public enum BatchReadExceptionType: String, CustomStringConvertible, Codable {
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case invalidnexttokenexception = "InvalidNextTokenException"
        case accessdeniedexception = "AccessDeniedException"
        case notnodeexception = "NotNodeException"
        case facetvalidationexception = "FacetValidationException"
        case cannotlistparentofrootexception = "CannotListParentOfRootException"
        case notindexexception = "NotIndexException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case internalserviceexception = "InternalServiceException"
        public var description: String { return self.rawValue }
    }

    public struct LookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.nextToken = nextToken
            self.policyToPathList = policyToPathList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyToPathList = "PolicyToPathList"
        }
    }

    public struct UpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the updated object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchGetObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(attributeNames: [String], objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.attributeNames = attributeNames
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct BatchAddFacetToObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list)
        ]
        /// Represents the facet being added to the object.
        public let schemaFacet: SchemaFacet
        /// A reference to the object being mutated.
        public let objectReference: ObjectReference
        /// The attributes to set on the object.
        public let objectAttributeList: [AttributeKeyAndValue]

        public init(schemaFacet: SchemaFacet, objectReference: ObjectReference, objectAttributeList: [AttributeKeyAndValue]) {
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
            self.objectAttributeList = objectAttributeList
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacet = "SchemaFacet"
            case objectReference = "ObjectReference"
            case objectAttributeList = "ObjectAttributeList"
        }
    }

    public struct CreateTypedLinkFacetResponse: AWSShape {

    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value that is associated with the tag.
        public let value: String?
        /// The key that is associated with the tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct BatchDetachTypedLinkResponse: AWSShape {

    }

    public struct BatchCreateObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .list)
        ]
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?
        /// An attribute map, which contains an attribute ARN as the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]
        /// The name of the link.
        public let linkName: String?
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?
        /// A list of FacetArns that will be associated with the object. For more information, see arns.
        public let schemaFacet: [SchemaFacet]

        public init(batchReferenceName: String? = nil, objectAttributeList: [AttributeKeyAndValue], linkName: String? = nil, parentReference: ObjectReference? = nil, schemaFacet: [SchemaFacet]) {
            self.batchReferenceName = batchReferenceName
            self.objectAttributeList = objectAttributeList
            self.linkName = linkName
            self.parentReference = parentReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case batchReferenceName = "BatchReferenceName"
            case objectAttributeList = "ObjectAttributeList"
            case linkName = "LinkName"
            case parentReference = "ParentReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct BatchListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?
        /// The pagination token.
        public let nextToken: String?

        public init(pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil, nextToken: String? = nil) {
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
            case nextToken = "NextToken"
        }
    }

    public struct EnableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the enabled directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct RemoveFacetFromObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// The ARN of the directory in which the object resides.
        public let directoryArn: String
        /// A reference to the object to remove the facet from.
        public let objectReference: ObjectReference
        /// The facet to remove. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(directoryArn: String, objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct BatchGetLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(attributeNames: [String], typedLinkSpecifier: TypedLinkSpecifier) {
            self.attributeNames = attributeNames
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct CreateDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "AppliedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "ObjectIdentifier", required: true, type: .string)
        ]
        /// The name of the Directory.
        public let name: String
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// The ARN of the published schema in the Directory. Once a published schema is copied into the directory, it has its own ARN, which is referred to applied schema ARN. For more information, see arns.
        public let appliedSchemaArn: String
        /// The root object node of the created directory.
        public let objectIdentifier: String

        public init(name: String, directoryArn: String, appliedSchemaArn: String, objectIdentifier: String) {
            self.name = name
            self.directoryArn = directoryArn
            self.appliedSchemaArn = appliedSchemaArn
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case directoryArn = "DirectoryArn"
            case appliedSchemaArn = "AppliedSchemaArn"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public enum ConsistencyLevel: String, CustomStringConvertible, Codable {
        case serializable = "SERIALIZABLE"
        case eventual = "EVENTUAL"
        public var description: String { return self.rawValue }
    }

    public struct CreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The identifier that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchLookupPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(objectReference: ObjectReference, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct AttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The attached ObjectIdentifier, which is the child ObjectIdentifier.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct BatchGetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attribute values that are associated with an object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct UpdateLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see arns or Typed Links.
        public let directoryArn: String
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]

        public init(directoryArn: String, typedLinkSpecifier: TypedLinkSpecifier, attributeUpdates: [LinkAttributeUpdate]) {
            self.directoryArn = directoryArn
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public enum UpdateActionType: String, CustomStringConvertible, Codable {
        case createOrUpdate = "CREATE_OR_UPDATE"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct TypedLinkSpecifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "IdentityAttributeValues", required: true, type: .list), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the attribute value to update.
        public let identityAttributeValues: [AttributeNameAndValue]
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(sourceObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName, identityAttributeValues: [AttributeNameAndValue], targetObjectReference: ObjectReference) {
            self.sourceObjectReference = sourceObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.identityAttributeValues = identityAttributeValues
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case sourceObjectReference = "SourceObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case identityAttributeValues = "IdentityAttributeValues"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct DetachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The link name associated with the object that needs to be detached.
        public let linkName: String
        /// The parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String

        public init(linkName: String, parentReference: ObjectReference, directoryArn: String) {
            self.linkName = linkName
            self.parentReference = parentReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case parentReference = "ParentReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ObjectAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Range", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure)
        ]
        /// The range of attribute values being selected.
        public let range: TypedAttributeValueRange?
        /// The key of the attribute that the attribute range covers.
        public let attributeKey: AttributeKey?

        public init(range: TypedAttributeValueRange? = nil, attributeKey: AttributeKey? = nil) {
            self.range = range
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case range = "Range"
            case attributeKey = "AttributeKey"
        }
    }

    public struct GetTypedLinkFacetInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeOrder", required: false, type: .list)
        ]
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed Links.
        public let identityAttributeOrder: [String]?

        public init(identityAttributeOrder: [String]? = nil) {
            self.identityAttributeOrder = identityAttributeOrder
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeOrder = "IdentityAttributeOrder"
        }
    }

    public struct BatchWriteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// A list of operations that are part of the batch.
        public let operations: [BatchWriteOperation]

        public init(directoryArn: String, operations: [BatchWriteOperation]) {
            self.directoryArn = directoryArn
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case operations = "Operations"
        }
    }

    public struct BatchListObjectParents: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        public let maxResults: Int32?
        public let nextToken: String?
        public let objectReference: ObjectReference

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
        }
    }

    public struct GetAppliedSchemaVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The ARN of the applied schema.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct CreateIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the link between the parent object and the index object.
        public let linkName: String?
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?
        /// The ARN of the directory where the index should be created.
        public let directoryArn: String

        public init(linkName: String? = nil, orderedIndexedAttributeList: [AttributeKey], isUnique: Bool, parentReference: ObjectReference? = nil, directoryArn: String) {
            self.linkName = linkName
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.isUnique = isUnique
            self.parentReference = parentReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case isUnique = "IsUnique"
            case parentReference = "ParentReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct DeleteObjectResponse: AWSShape {

    }

    public struct Facet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?
        /// The name of the Facet.
        public let name: String?

        public init(facetStyle: FacetStyle? = nil, objectType: ObjectType? = nil, name: String? = nil) {
            self.facetStyle = facetStyle
            self.objectType = objectType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case facetStyle = "FacetStyle"
            case objectType = "ObjectType"
            case name = "Name"
        }
    }

    public struct ListIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the directory that the index exists in.
        public let directoryArn: String
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// The maximum number of objects in a single page to retrieve from the index during a request. For more information, see Amazon Cloud Directory Limits.
        public let maxResults: Int32?

        public init(rangesOnIndexedValues: [ObjectAttributeRange]? = nil, consistencyLevel: ConsistencyLevel? = nil, nextToken: String? = nil, directoryArn: String, indexReference: ObjectReference, maxResults: Int32? = nil) {
            self.rangesOnIndexedValues = rangesOnIndexedValues
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case rangesOnIndexedValues = "RangesOnIndexedValues"
            case consistencyLevel = "x-amz-consistency-level"
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case maxResults = "MaxResults"
        }
    }

    public struct ListFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The name of the facet whose attributes will be retrieved.
        public let name: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The ARN of the schema where the facet resides.
        public let schemaArn: String

        public init(nextToken: String? = nil, name: String, maxResults: Int32? = nil, schemaArn: String) {
            self.nextToken = nextToken
            self.name = name
            self.maxResults = maxResults
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case name = "Name"
            case maxResults = "MaxResults"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct GetAppliedSchemaVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string)
        ]
        /// Current applied schema ARN, including the minor version in use if one was provided.
        public let appliedSchemaArn: String?

        public init(appliedSchemaArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case appliedSchemaArn = "AppliedSchemaArn"
        }
    }

    public struct DetachFromIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure)
        ]
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory the index and object exist in.
        public let directoryArn: String
        /// A reference to the index object.
        public let indexReference: ObjectReference

        public init(targetReference: ObjectReference, directoryArn: String, indexReference: ObjectReference) {
            self.targetReference = targetReference
            self.directoryArn = directoryArn
            self.indexReference = indexReference
        }

        private enum CodingKeys: String, CodingKey {
            case targetReference = "TargetReference"
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
        }
    }

    public struct GetDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Directory", required: true, type: .structure)
        ]
        /// Metadata about the directory.
        public let directory: Directory

        public init(directory: Directory) {
            self.directory = directory
        }

        private enum CodingKeys: String, CodingKey {
            case directory = "Directory"
        }
    }

    public struct DisableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the directory that has been disabled.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct DeleteDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to delete.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct CreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Children", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The children structure, which is a map with the key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?
        /// The pagination token.
        public let nextToken: String?

        public init(children: [String: String]? = nil, nextToken: String? = nil) {
            self.children = children
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case children = "Children"
            case nextToken = "NextToken"
        }
    }

    public struct PutSchemaFromJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The replacement JSON schema.
        public let document: String
        /// The ARN of the schema to update.
        public let schemaArn: String

        public init(document: String, schemaArn: String) {
            self.document = document
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct BatchDetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct DeleteSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The input ARN that is returned as part of the response. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct ListTypedLinkFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(name: String, schemaArn: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.name = name
            self.schemaArn = schemaArn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListPublishedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of published schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct BatchReadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// A list of operations that are part of the batch.
        public let operations: [BatchReadOperation]
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(directoryArn: String, operations: [BatchReadOperation], consistencyLevel: ConsistencyLevel? = nil) {
            self.directoryArn = directoryArn
            self.operations = operations
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case operations = "Operations"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct GetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct ListAppliedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of schemas that are applied to the directory.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct ListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(objectIdentifiers: [String]? = nil, nextToken: String? = nil) {
            self.objectIdentifiers = objectIdentifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifiers = "ObjectIdentifiers"
            case nextToken = "NextToken"
        }
    }

    public struct DetachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The Amazon Resource Name (ARN) of the directory where you want to detach the typed link.
        public let directoryArn: String

        public init(typedLinkSpecifier: TypedLinkSpecifier, directoryArn: String) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public enum ObjectType: String, CustomStringConvertible, Codable {
        case node = "NODE"
        case leafNode = "LEAF_NODE"
        case policy = "POLICY"
        case index = "INDEX"
        public var description: String { return self.rawValue }
    }

    public struct BatchWriteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch write.
        public let responses: [BatchWriteOperationResponse]?

        public init(responses: [BatchWriteOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct BatchListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?

        public init(nextToken: String? = nil, attachedPolicyIds: [String]? = nil) {
            self.nextToken = nextToken
            self.attachedPolicyIds = attachedPolicyIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attachedPolicyIds = "AttachedPolicyIds"
        }
    }

    public struct BatchCreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct UpgradeAppliedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string)
        ]
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?
        /// The ARN of the directory that is returned as part of the response.
        public let directoryArn: String?

        public init(upgradedSchemaArn: String? = nil, directoryArn: String? = nil) {
            self.upgradedSchemaArn = upgradedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case upgradedSchemaArn = "UpgradedSchemaArn"
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListTypedLinkFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, schemaArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
        }
    }

    public struct ListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.typedLinkSpecifiers = typedLinkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
        }
    }

    public struct AttachPolicyResponse: AWSShape {

    }

    public struct BatchDetachPolicyResponse: AWSShape {

    }

    public struct TypedLinkSchemaAndFacetName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkName", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The unique name of the typed link facet.
        public let typedLinkName: String
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String

        public init(typedLinkName: String, schemaArn: String) {
            self.typedLinkName = typedLinkName
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkName = "TypedLinkName"
            case schemaArn = "SchemaArn"
        }
    }

    public struct ListDirectoriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Directories", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Lists all directories that are associated with your account in pagination fashion.
        public let directories: [Directory]
        /// The pagination token.
        public let nextToken: String?

        public init(directories: [Directory], nextToken: String? = nil) {
            self.directories = directories
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directories = "Directories"
            case nextToken = "NextToken"
        }
    }

    public struct EnableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to enable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct UpgradePublishedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string)
        ]
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?

        public init(upgradedSchemaArn: String? = nil) {
            self.upgradedSchemaArn = upgradedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case upgradedSchemaArn = "UpgradedSchemaArn"
        }
    }

    public struct ListPublishedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// The response for ListPublishedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case schemaArn = "SchemaArn"
        }
    }

    public struct ListObjectParentPathsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object whose parent paths are listed.
        public let objectReference: ObjectReference
        /// The ARN of the directory to which the parent path applies.
        public let directoryArn: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, objectReference: ObjectReference, directoryArn: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Attributes map that is associated with the object. AttributeArn is the key, and attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?
        /// The pagination token.
        public let nextToken: String?

        public init(attributes: [AttributeKeyAndValue]? = nil, nextToken: String? = nil) {
            self.attributes = attributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case nextToken = "NextToken"
        }
    }

    public struct PublishSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the published schema. For more information, see arns.
        public let publishedSchemaArn: String?

        public init(publishedSchemaArn: String? = nil) {
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct ListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Children", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Children structure, which is a map with key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?
        /// The pagination token.
        public let nextToken: String?

        public init(children: [String: String]? = nil, nextToken: String? = nil) {
            self.children = children
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case children = "Children"
            case nextToken = "NextToken"
        }
    }

    public struct DetachPolicyResponse: AWSShape {

    }

    public struct ListManagedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.
        public let schemaArn: String?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(schemaArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?
        /// The pagination token.
        public let nextToken: String?

        public init(linkSpecifiers: [TypedLinkSpecifier]? = nil, nextToken: String? = nil) {
            self.linkSpecifiers = linkSpecifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case linkSpecifiers = "LinkSpecifiers"
            case nextToken = "NextToken"
        }
    }

    public struct BatchGetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DisableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to disable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct DeleteDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the deleted directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct FacetAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RequiredBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeReference", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeDefinition", required: false, type: .structure)
        ]
        /// The name of the facet attribute.
        public let name: String
        /// The required behavior of the FacetAttribute.
        public let requiredBehavior: RequiredAttributeBehavior?
        /// An attribute reference that is associated with the attribute. See Attribute References for more information.
        public let attributeReference: FacetAttributeReference?
        /// A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See Attribute References for more information.
        public let attributeDefinition: FacetAttributeDefinition?

        public init(name: String, requiredBehavior: RequiredAttributeBehavior? = nil, attributeReference: FacetAttributeReference? = nil, attributeDefinition: FacetAttributeDefinition? = nil) {
            self.name = name
            self.requiredBehavior = requiredBehavior
            self.attributeReference = attributeReference
            self.attributeDefinition = attributeDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case requiredBehavior = "RequiredBehavior"
            case attributeReference = "AttributeReference"
            case attributeDefinition = "AttributeDefinition"
        }
    }

    public struct ListDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, state: DirectoryState? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.state = state
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case state = "state"
            case nextToken = "NextToken"
        }
    }

    public struct BatchReadException: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// An exception message that is associated with the failure.
        public let message: String?
        /// A type of exception, such as InvalidArnException.
        public let `type`: BatchReadExceptionType?

        public init(message: String? = nil, type: BatchReadExceptionType? = nil) {
            self.message = message
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case `type` = "Type"
        }
    }

    public struct BatchListObjectChildren: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Reference of the object for which child objects are being listed.
        public let objectReference: ObjectReference
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchDetachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference

        public init(policyReference: ObjectReference, objectReference: ObjectReference) {
            self.policyReference = policyReference
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case policyReference = "PolicyReference"
            case objectReference = "ObjectReference"
        }
    }

    public struct GetFacetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Facet", required: false, type: .structure)
        ]
        /// The Facet structure that is associated with the facet.
        public let facet: Facet?

        public init(facet: Facet? = nil) {
            self.facet = facet
        }

        private enum CodingKeys: String, CodingKey {
            case facet = "Facet"
        }
    }

    public struct BatchListObjectPolicies: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct ObjectReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Selector", required: false, type: .string)
        ]
        /// A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see Access Objects. You can identify an object in one of the following ways:    $ObjectIdentifier - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An object’s identifier is immutable and no two objects will ever share the same object identifier    /some/path - Identifies the object based on path    #SomeBatchReference - Identifies the object in a batch call  
        public let selector: String?

        public init(selector: String? = nil) {
            self.selector = selector
        }

        private enum CodingKeys: String, CodingKey {
            case selector = "Selector"
        }
    }

    public struct GetSchemaAsJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The JSON representation of the schema document.
        public let document: String?
        /// The name of the retrieved schema.
        public let name: String?

        public init(document: String? = nil, name: String? = nil) {
            self.document = document
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
            case name = "Name"
        }
    }

    public struct BatchUpdateObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// Reference that identifies the object.
        public let objectReference: ObjectReference
        /// Attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]

        public init(objectReference: ObjectReference, attributeUpdates: [ObjectAttributeUpdate]) {
            self.objectReference = objectReference
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct DetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct ObjectAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeKey", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeAction", required: false, type: .structure)
        ]
        /// The key of the attribute being updated.
        public let objectAttributeKey: AttributeKey?
        /// The action to perform as part of the attribute update.
        public let objectAttributeAction: ObjectAttributeAction?

        public init(objectAttributeKey: AttributeKey? = nil, objectAttributeAction: ObjectAttributeAction? = nil) {
            self.objectAttributeKey = objectAttributeKey
            self.objectAttributeAction = objectAttributeAction
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeKey = "ObjectAttributeKey"
            case objectAttributeAction = "ObjectAttributeAction"
        }
    }

    public struct BatchUpdateLinkAttributesResponse: AWSShape {

    }

    public struct ApplySchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see arns.
        public let publishedSchemaArn: String
        /// The Amazon Resource Name (ARN) that is associated with the Directory into which the schema is copied. For more information, see arns.
        public let directoryArn: String

        public init(publishedSchemaArn: String, directoryArn: String) {
            self.publishedSchemaArn = publishedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct AttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct BatchListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, linkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.linkSpecifiers = linkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case linkSpecifiers = "LinkSpecifiers"
        }
    }

    public struct BatchReadOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulResponse", required: false, type: .structure), 
            AWSShapeMember(label: "ExceptionResponse", required: false, type: .structure)
        ]
        /// Identifies which operation in a batch has succeeded.
        public let successfulResponse: BatchReadSuccessfulResponse?
        /// Identifies which operation in a batch has failed.
        public let exceptionResponse: BatchReadException?

        public init(successfulResponse: BatchReadSuccessfulResponse? = nil, exceptionResponse: BatchReadException? = nil) {
            self.successfulResponse = successfulResponse
            self.exceptionResponse = exceptionResponse
        }

        private enum CodingKeys: String, CodingKey {
            case successfulResponse = "SuccessfulResponse"
            case exceptionResponse = "ExceptionResponse"
        }
    }

    public struct ListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.attachedPolicyIds = attachedPolicyIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attachedPolicyIds = "AttachedPolicyIds"
            case nextToken = "NextToken"
        }
    }

    public struct AttachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String

        public init(objectReference: ObjectReference, policyReference: ObjectReference, directoryArn: String) {
            self.objectReference = objectReference
            self.policyReference = policyReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchListPolicyAttachments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(nextToken: String? = nil, maxResults: Int32? = nil, policyReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case policyReference = "PolicyReference"
        }
    }

    public struct BatchRemoveFacetFromObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// A reference to the object whose facet will be removed.
        public let objectReference: ObjectReference
        /// The facet to remove from the object.
        public let schemaFacet: SchemaFacet

        public init(objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct TypedLinkAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "RequiredBehavior", required: true, type: .enum)
        ]
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?
        /// The unique name of the typed link attribute.
        public let name: String
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// Validation rules that are attached to the attribute definition.
        public let rules: [String: Rule]?
        /// The required behavior of the TypedLinkAttributeDefinition.
        public let requiredBehavior: RequiredAttributeBehavior

        public init(defaultValue: TypedAttributeValue? = nil, name: String, isImmutable: Bool? = nil, type: FacetAttributeType, rules: [String: Rule]? = nil, requiredBehavior: RequiredAttributeBehavior) {
            self.defaultValue = defaultValue
            self.name = name
            self.isImmutable = isImmutable
            self.`type` = `type`
            self.rules = rules
            self.requiredBehavior = requiredBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "DefaultValue"
            case name = "Name"
            case isImmutable = "IsImmutable"
            case `type` = "Type"
            case rules = "Rules"
            case requiredBehavior = "RequiredBehavior"
        }
    }

    public struct RemoveFacetFromObjectResponse: AWSShape {

    }

    public struct PolicyToPath: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "Policies", required: false, type: .list)
        ]
        /// The path that is referenced from the root.
        public let path: String?
        /// List of policy objects.
        public let policies: [PolicyAttachment]?

        public init(path: String? = nil, policies: [PolicyAttachment]? = nil) {
            self.path = path
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case policies = "Policies"
        }
    }

    public struct DeleteTypedLinkFacetResponse: AWSShape {

    }

    public enum FacetStyle: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct CreateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name that is associated with the schema. This is unique to each account and in each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct BatchAttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct DetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier that was detached from the object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct BatchAttachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChildReference", required: true, type: .structure), 
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The child object reference that is to be attached to the object.
        public let childReference: ObjectReference
        /// The name of the link.
        public let linkName: String
        /// The parent object reference.
        public let parentReference: ObjectReference

        public init(childReference: ObjectReference, linkName: String, parentReference: ObjectReference) {
            self.childReference = childReference
            self.linkName = linkName
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case childReference = "ChildReference"
            case linkName = "LinkName"
            case parentReference = "ParentReference"
        }
    }

    public enum DirectoryState: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct ObjectAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeUpdateValue", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeActionType", required: false, type: .enum)
        ]
        /// The value that you want to update to.
        public let objectAttributeUpdateValue: TypedAttributeValue?
        /// A type that can be either Update or Delete.
        public let objectAttributeActionType: UpdateActionType?

        public init(objectAttributeUpdateValue: TypedAttributeValue? = nil, objectAttributeActionType: UpdateActionType? = nil) {
            self.objectAttributeUpdateValue = objectAttributeUpdateValue
            self.objectAttributeActionType = objectAttributeActionType
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeUpdateValue = "ObjectAttributeUpdateValue"
            case objectAttributeActionType = "ObjectAttributeActionType"
        }
    }

    public struct ListObjectPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// Reference that identifies the object for which policies will be listed.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference, directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct PublishSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DevelopmentSchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Version", required: true, type: .string), 
            AWSShapeMember(label: "MinorVersion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see arns.
        public let developmentSchemaArn: String
        /// The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
        public let version: String
        /// The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.
        public let minorVersion: String?
        /// The new name under which the schema will be published. If this is not provided, the development schema is considered.
        public let name: String?

        public init(developmentSchemaArn: String, version: String, minorVersion: String? = nil, name: String? = nil) {
            self.developmentSchemaArn = developmentSchemaArn
            self.version = version
            self.minorVersion = minorVersion
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case developmentSchemaArn = "x-amz-data-partition"
            case version = "Version"
            case minorVersion = "MinorVersion"
            case name = "Name"
        }
    }

    public struct GetLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The consistency level at which to retrieve the attributes on a typed link.
        public let consistencyLevel: ConsistencyLevel?
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see arns or Typed Links.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, attributeNames: [String], typedLinkSpecifier: TypedLinkSpecifier, directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.attributeNames = attributeNames
            self.typedLinkSpecifier = typedLinkSpecifier
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "ConsistencyLevel"
            case attributeNames = "AttributeNames"
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct GetDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchListOutgoingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?

        public init(filterAttributeRanges: [TypedLinkAttributeRange]? = nil, maxResults: Int32? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, objectReference: ObjectReference, nextToken: String? = nil) {
            self.filterAttributeRanges = filterAttributeRanges
            self.maxResults = maxResults
            self.filterTypedLink = filterTypedLink
            self.objectReference = objectReference
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filterAttributeRanges = "FilterAttributeRanges"
            case maxResults = "MaxResults"
            case filterTypedLink = "FilterTypedLink"
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
        }
    }

    public struct AttributeKeyAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .structure), 
            AWSShapeMember(label: "Key", required: true, type: .structure)
        ]
        /// The value of the attribute.
        public let value: TypedAttributeValue
        /// The key of the attribute.
        public let key: AttributeKey

        public init(value: TypedAttributeValue, key: AttributeKey) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct AddFacetToObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// A reference to the object you are adding the specified facet to.
        public let objectReference: ObjectReference
        /// Attributes on the facet that you are adding to the object.
        public let objectAttributeList: [AttributeKeyAndValue]?
        /// Identifiers for the facet that you are adding to the object. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String

        public init(objectReference: ObjectReference, objectAttributeList: [AttributeKeyAndValue]? = nil, schemaFacet: SchemaFacet, directoryArn: String) {
            self.objectReference = objectReference
            self.objectAttributeList = objectAttributeList
            self.schemaFacet = schemaFacet
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case objectAttributeList = "ObjectAttributeList"
            case schemaFacet = "SchemaFacet"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// A reference that identifies the object.
        public let objectReference: ObjectReference

        public init(directoryArn: String, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
        }
    }

    public struct CreateObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacets", required: true, type: .list), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// A list of schema facets to be associated with the object. Do not provide minor version components. See SchemaFacet for details.
        public let schemaFacets: [SchemaFacet]
        /// The attribute map whose attribute ARN contains the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]?
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?
        /// The name of link that is used to attach this object to a parent.
        public let linkName: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory in which the object will be created. For more information, see arns.
        public let directoryArn: String

        public init(schemaFacets: [SchemaFacet], objectAttributeList: [AttributeKeyAndValue]? = nil, parentReference: ObjectReference? = nil, linkName: String? = nil, directoryArn: String) {
            self.schemaFacets = schemaFacets
            self.objectAttributeList = objectAttributeList
            self.parentReference = parentReference
            self.linkName = linkName
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacets = "SchemaFacets"
            case objectAttributeList = "ObjectAttributeList"
            case parentReference = "ParentReference"
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct FacetAttributeReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetFacetName", required: true, type: .string), 
            AWSShapeMember(label: "TargetAttributeName", required: true, type: .string)
        ]
        /// The target facet name that is associated with the facet reference. See Attribute References for more information.
        public let targetFacetName: String
        /// The target attribute name that is associated with the facet reference. See Attribute References for more information.
        public let targetAttributeName: String

        public init(targetFacetName: String, targetAttributeName: String) {
            self.targetFacetName = targetFacetName
            self.targetAttributeName = targetAttributeName
        }

        private enum CodingKeys: String, CodingKey {
            case targetFacetName = "TargetFacetName"
            case targetAttributeName = "TargetAttributeName"
        }
    }

    public enum RangeMode: String, CustomStringConvertible, Codable {
        case first = "FIRST"
        case last = "LAST"
        case lastBeforeMissingValues = "LAST_BEFORE_MISSING_VALUES"
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct LookupPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The token to request the next page of results.
        public let nextToken: String?
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil, directoryArn: String) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct TypedAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StringValue", required: false, type: .string), 
            AWSShapeMember(label: "BooleanValue", required: false, type: .boolean), 
            AWSShapeMember(label: "BinaryValue", required: false, type: .blob), 
            AWSShapeMember(label: "NumberValue", required: false, type: .string), 
            AWSShapeMember(label: "DatetimeValue", required: false, type: .timestamp)
        ]
        /// A string data value.
        public let stringValue: String?
        /// A Boolean data value.
        public let booleanValue: Bool?
        /// A binary data value.
        public let binaryValue: Data?
        /// A number data value.
        public let numberValue: String?
        /// A date and time value.
        public let datetimeValue: TimeStamp?

        public init(stringValue: String? = nil, booleanValue: Bool? = nil, binaryValue: Data? = nil, numberValue: String? = nil, datetimeValue: TimeStamp? = nil) {
            self.stringValue = stringValue
            self.booleanValue = booleanValue
            self.binaryValue = binaryValue
            self.numberValue = numberValue
            self.datetimeValue = datetimeValue
        }

        private enum CodingKeys: String, CodingKey {
            case stringValue = "StringValue"
            case booleanValue = "BooleanValue"
            case binaryValue = "BinaryValue"
            case numberValue = "NumberValue"
            case datetimeValue = "DatetimeValue"
        }
    }

    public struct BatchListObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?
        /// Reference of the object whose attributes need to be listed.
        public let objectReference: ObjectReference

        public init(maxResults: Int32? = nil, nextToken: String? = nil, facetFilter: SchemaFacet? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.facetFilter = facetFilter
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case facetFilter = "FacetFilter"
            case objectReference = "ObjectReference"
        }
    }

    public struct GetObjectInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The ARN of the directory being retrieved.
        public let directoryArn: String
        /// A reference to the object.
        public let objectReference: ObjectReference
        /// The consistency level at which to retrieve the object information.
        public let consistencyLevel: ConsistencyLevel?

        public init(directoryArn: String, objectReference: ObjectReference, consistencyLevel: ConsistencyLevel? = nil) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct BatchGetObjectInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// A reference to the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchAttachPolicyResponse: AWSShape {

    }

    public struct LinkAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeAction", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure)
        ]
        /// The action to perform as part of the attribute update.
        public let attributeAction: LinkAttributeAction?
        /// The key of the attribute being updated.
        public let attributeKey: AttributeKey?

        public init(attributeAction: LinkAttributeAction? = nil, attributeKey: AttributeKey? = nil) {
            self.attributeAction = attributeAction
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case attributeAction = "AttributeAction"
            case attributeKey = "AttributeKey"
        }
    }

    public struct BatchAttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that has been attached.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "attachedObjectIdentifier"
        }
    }

    public struct BatchDeleteObjectResponse: AWSShape {

    }

    public struct DetachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(directoryArn: String, objectReference: ObjectReference, policyReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct ListAppliedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARN of the directory you are listing.
        public let directoryArn: String
        /// The response for ListAppliedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(directoryArn: String, schemaArn: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.directoryArn = directoryArn
            self.schemaArn = schemaArn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
            case schemaArn = "SchemaArn"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListObjectChildrenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object for which child objects are being listed.
        public let objectReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(directoryArn: String, nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil) {
            self.directoryArn = directoryArn
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct BatchListIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list)
        ]
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?

        public init(indexReference: ObjectReference, nextToken: String? = nil, maxResults: Int32? = nil, rangesOnIndexedValues: [ObjectAttributeRange]? = nil) {
            self.indexReference = indexReference
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.rangesOnIndexedValues = rangesOnIndexedValues
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case rangesOnIndexedValues = "RangesOnIndexedValues"
        }
    }

    public struct DeleteSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct Directory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The date and time when the directory was created.
        public let creationDateTime: TimeStamp?
        /// The state of the directory. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?
        /// The Amazon Resource Name (ARN) that is associated with the directory. For more information, see arns.
        public let directoryArn: String?
        /// The name of the directory.
        public let name: String?

        public init(creationDateTime: TimeStamp? = nil, state: DirectoryState? = nil, directoryArn: String? = nil, name: String? = nil) {
            self.creationDateTime = creationDateTime
            self.state = state
            self.directoryArn = directoryArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case state = "State"
            case directoryArn = "DirectoryArn"
            case name = "Name"
        }
    }

    public struct CreateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct TypedLinkFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.
        public let attributes: [TypedLinkAttributeDefinition]
        /// The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See ListOutgoingTypedLinks and ListIncomingTypedLinks for details.
        public let identityAttributeOrder: [String]

        public init(name: String, attributes: [TypedLinkAttributeDefinition], identityAttributeOrder: [String]) {
            self.name = name
            self.attributes = attributes
            self.identityAttributeOrder = identityAttributeOrder
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case attributes = "Attributes"
            case identityAttributeOrder = "IdentityAttributeOrder"
        }
    }

    public struct ListObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(maxResults: Int32? = nil, directoryArn: String, objectReference: ObjectReference, nextToken: String? = nil, facetFilter: SchemaFacet? = nil, consistencyLevel: ConsistencyLevel? = nil) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.facetFilter = facetFilter
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
            case facetFilter = "FacetFilter"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct BatchReadSuccessfulResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParents", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure)
        ]
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinksResponse?
        /// The list of attributes to retrieve from the typed link.
        public let getLinkAttributes: BatchGetLinkAttributesResponse?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachmentsResponse?
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributesResponse?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildrenResponse?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPathsResponse?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPoliciesResponse?
        public let listObjectParents: BatchListObjectParentsResponse?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicyResponse?
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformationResponse?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndexResponse?
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndicesResponse?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributesResponse?

        public init(listIncomingTypedLinks: BatchListIncomingTypedLinksResponse? = nil, getLinkAttributes: BatchGetLinkAttributesResponse? = nil, listPolicyAttachments: BatchListPolicyAttachmentsResponse? = nil, listObjectAttributes: BatchListObjectAttributesResponse? = nil, listObjectChildren: BatchListObjectChildrenResponse? = nil, listObjectParentPaths: BatchListObjectParentPathsResponse? = nil, listObjectPolicies: BatchListObjectPoliciesResponse? = nil, listObjectParents: BatchListObjectParentsResponse? = nil, lookupPolicy: BatchLookupPolicyResponse? = nil, listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse? = nil, getObjectInformation: BatchGetObjectInformationResponse? = nil, listIndex: BatchListIndexResponse? = nil, listAttachedIndices: BatchListAttachedIndicesResponse? = nil, getObjectAttributes: BatchGetObjectAttributesResponse? = nil) {
            self.listIncomingTypedLinks = listIncomingTypedLinks
            self.getLinkAttributes = getLinkAttributes
            self.listPolicyAttachments = listPolicyAttachments
            self.listObjectAttributes = listObjectAttributes
            self.listObjectChildren = listObjectChildren
            self.listObjectParentPaths = listObjectParentPaths
            self.listObjectPolicies = listObjectPolicies
            self.listObjectParents = listObjectParents
            self.lookupPolicy = lookupPolicy
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.getObjectInformation = getObjectInformation
            self.listIndex = listIndex
            self.listAttachedIndices = listAttachedIndices
            self.getObjectAttributes = getObjectAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
            case getLinkAttributes = "GetLinkAttributes"
            case listPolicyAttachments = "ListPolicyAttachments"
            case listObjectAttributes = "ListObjectAttributes"
            case listObjectChildren = "ListObjectChildren"
            case listObjectParentPaths = "ListObjectParentPaths"
            case listObjectPolicies = "ListObjectPolicies"
            case listObjectParents = "ListObjectParents"
            case lookupPolicy = "LookupPolicy"
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case getObjectInformation = "GetObjectInformation"
            case listIndex = "ListIndex"
            case listAttachedIndices = "ListAttachedIndices"
            case getObjectAttributes = "GetObjectAttributes"
        }
    }

    public struct BatchDetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the detached object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "detachedObjectIdentifier"
        }
    }

    public struct ListDevelopmentSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArns", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The ARNs of retrieved development schemas.
        public let schemaArns: [String]?

        public init(nextToken: String? = nil, schemaArns: [String]? = nil) {
            self.nextToken = nextToken
            self.schemaArns = schemaArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArns = "SchemaArns"
        }
    }

    public struct UpdateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed Links.
        public let identityAttributeOrder: [String]
        /// Attributes update structure.
        public let attributeUpdates: [TypedLinkFacetAttributeUpdate]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String

        public init(name: String, identityAttributeOrder: [String], attributeUpdates: [TypedLinkFacetAttributeUpdate], schemaArn: String) {
            self.name = name
            self.identityAttributeOrder = identityAttributeOrder
            self.attributeUpdates = attributeUpdates
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case identityAttributeOrder = "IdentityAttributeOrder"
            case attributeUpdates = "AttributeUpdates"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?
        /// The pagination token.
        public let nextToken: String?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexAttachments = "IndexAttachments"
            case nextToken = "NextToken"
        }
    }

    public struct UpgradeAppliedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The revision of the published schema to upgrade the directory to.
        public let publishedSchemaArn: String
        /// The ARN for the directory to which the upgraded schema will be applied.
        public let directoryArn: String
        /// Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.
        public let dryRun: Bool?

        public init(publishedSchemaArn: String, directoryArn: String, dryRun: Bool? = nil) {
            self.publishedSchemaArn = publishedSchemaArn
            self.directoryArn = directoryArn
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
            case directoryArn = "DirectoryArn"
            case dryRun = "DryRun"
        }
    }

    public struct ListAttachedIndicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The consistency level to use for this operation.
        public let consistencyLevel: ConsistencyLevel?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference
        /// The ARN of the directory.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, nextToken: String? = nil, maxResults: Int32? = nil, targetReference: ObjectReference, directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.targetReference = targetReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case targetReference = "TargetReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListObjectParentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IncludeAllLinksToEachParent", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// When set to True, returns all ListObjectParentsResponse$ParentLinks. There could be multiple links between a parent-child pair.
        public let includeAllLinksToEachParent: Bool?
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object for which parent objects are being listed.
        public let objectReference: ObjectReference
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(maxResults: Int32? = nil, directoryArn: String, includeAllLinksToEachParent: Bool? = nil, nextToken: String? = nil, objectReference: ObjectReference, consistencyLevel: ConsistencyLevel? = nil) {
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.includeAllLinksToEachParent = includeAllLinksToEachParent
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case directoryArn = "x-amz-data-partition"
            case includeAllLinksToEachParent = "IncludeAllLinksToEachParent"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct BatchListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct ListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?
        /// The pagination token.
        public let nextToken: String?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexAttachments = "IndexAttachments"
            case nextToken = "NextToken"
        }
    }

    public enum BatchWriteExceptionType: String, CustomStringConvertible, Codable {
        case internalserviceexception = "InternalServiceException"
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case linknamealreadyinuseexception = "LinkNameAlreadyInUseException"
        case stillcontainslinksexception = "StillContainsLinksException"
        case facetvalidationexception = "FacetValidationException"
        case objectnotdetachedexception = "ObjectNotDetachedException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case accessdeniedexception = "AccessDeniedException"
        case invalidattachmentexception = "InvalidAttachmentException"
        case notindexexception = "NotIndexException"
        case notnodeexception = "NotNodeException"
        case indexedattributemissingexception = "IndexedAttributeMissingException"
        case objectalreadydetachedexception = "ObjectAlreadyDetachedException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case unsupportedindextypeexception = "UnsupportedIndexTypeException"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeUpdates", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet.
        public let name: String
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?
        /// List of attributes that need to be updated in a given schema Facet. Each attribute is followed by AttributeAction, which specifies the type of update operation to perform. 
        public let attributeUpdates: [FacetAttributeUpdate]?

        public init(schemaArn: String, name: String, objectType: ObjectType? = nil, attributeUpdates: [FacetAttributeUpdate]? = nil) {
            self.schemaArn = schemaArn
            self.name = name
            self.objectType = objectType
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case objectType = "ObjectType"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct ListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?
        /// The pagination token.
        public let nextToken: String?

        public init(pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil, nextToken: String? = nil) {
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
            case nextToken = "NextToken"
        }
    }

    public struct BatchListIncomingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?

        public init(maxResults: Int32? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, nextToken: String? = nil, objectReference: ObjectReference, filterAttributeRanges: [TypedLinkAttributeRange]? = nil) {
            self.maxResults = maxResults
            self.filterTypedLink = filterTypedLink
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.filterAttributeRanges = filterAttributeRanges
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filterTypedLink = "FilterTypedLink"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case filterAttributeRanges = "FilterAttributeRanges"
        }
    }

    public struct BatchAttachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct FacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .structure), 
            AWSShapeMember(label: "Action", required: false, type: .enum)
        ]
        /// The attribute to update.
        public let attribute: FacetAttribute?
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType?

        public init(attribute: FacetAttribute? = nil, action: UpdateActionType? = nil) {
            self.attribute = attribute
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case action = "Action"
        }
    }

    public struct FacetAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean), 
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure)
        ]
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?
        /// Validation rules attached to the attribute definition.
        public let rules: [String: Rule]?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?

        public init(isImmutable: Bool? = nil, rules: [String: Rule]? = nil, type: FacetAttributeType, defaultValue: TypedAttributeValue? = nil) {
            self.isImmutable = isImmutable
            self.rules = rules
            self.`type` = `type`
            self.defaultValue = defaultValue
        }

        private enum CodingKeys: String, CodingKey {
            case isImmutable = "IsImmutable"
            case rules = "Rules"
            case `type` = "Type"
            case defaultValue = "DefaultValue"
        }
    }

    public struct ListFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) to retrieve facet names from.
        public let schemaArn: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, schemaArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
        }
    }

    public struct PutSchemaFromJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The ARN of the schema to update.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
        }
    }

    public struct BatchListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.typedLinkSpecifiers = typedLinkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
        }
    }

    public struct UpdateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the schema.
        public let name: String
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct BatchReadOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParents", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure)
        ]
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinks?
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndices?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPolicies?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicy?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachments?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildren?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPaths?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformation?
        public let listObjectParents: BatchListObjectParents?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndex?
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributes?
        /// Retrieves attributes that are associated with a typed link.
        public let getLinkAttributes: BatchGetLinkAttributes?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributes?
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinks?

        public init(listOutgoingTypedLinks: BatchListOutgoingTypedLinks? = nil, listAttachedIndices: BatchListAttachedIndices? = nil, listObjectPolicies: BatchListObjectPolicies? = nil, lookupPolicy: BatchLookupPolicy? = nil, listPolicyAttachments: BatchListPolicyAttachments? = nil, listObjectChildren: BatchListObjectChildren? = nil, listObjectParentPaths: BatchListObjectParentPaths? = nil, getObjectInformation: BatchGetObjectInformation? = nil, listObjectParents: BatchListObjectParents? = nil, listIndex: BatchListIndex? = nil, listObjectAttributes: BatchListObjectAttributes? = nil, getLinkAttributes: BatchGetLinkAttributes? = nil, getObjectAttributes: BatchGetObjectAttributes? = nil, listIncomingTypedLinks: BatchListIncomingTypedLinks? = nil) {
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.listAttachedIndices = listAttachedIndices
            self.listObjectPolicies = listObjectPolicies
            self.lookupPolicy = lookupPolicy
            self.listPolicyAttachments = listPolicyAttachments
            self.listObjectChildren = listObjectChildren
            self.listObjectParentPaths = listObjectParentPaths
            self.getObjectInformation = getObjectInformation
            self.listObjectParents = listObjectParents
            self.listIndex = listIndex
            self.listObjectAttributes = listObjectAttributes
            self.getLinkAttributes = getLinkAttributes
            self.getObjectAttributes = getObjectAttributes
            self.listIncomingTypedLinks = listIncomingTypedLinks
        }

        private enum CodingKeys: String, CodingKey {
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case listAttachedIndices = "ListAttachedIndices"
            case listObjectPolicies = "ListObjectPolicies"
            case lookupPolicy = "LookupPolicy"
            case listPolicyAttachments = "ListPolicyAttachments"
            case listObjectChildren = "ListObjectChildren"
            case listObjectParentPaths = "ListObjectParentPaths"
            case getObjectInformation = "GetObjectInformation"
            case listObjectParents = "ListObjectParents"
            case listIndex = "ListIndex"
            case listObjectAttributes = "ListObjectAttributes"
            case getLinkAttributes = "GetLinkAttributes"
            case getObjectAttributes = "GetObjectAttributes"
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
        }
    }

    public struct UpdateLinkAttributesResponse: AWSShape {

    }

    public struct DeleteTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct IndexAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IndexedAttributes", required: false, type: .list)
        ]
        /// In response to ListIndex, the ObjectIdentifier of the object attached to the index. In response to ListAttachedIndices, the ObjectIdentifier of the index attached to the object. This field will always contain the ObjectIdentifier of the object on the opposite side of the attachment specified in the query.
        public let objectIdentifier: String?
        /// The indexed attribute values.
        public let indexedAttributes: [AttributeKeyAndValue]?

        public init(objectIdentifier: String? = nil, indexedAttributes: [AttributeKeyAndValue]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.indexedAttributes = indexedAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case indexedAttributes = "IndexedAttributes"
        }
    }

    public struct DeleteFacetResponse: AWSShape {

    }

    public struct UpdateObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference

        public init(directoryArn: String, attributeUpdates: [ObjectAttributeUpdate], objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.attributeUpdates = attributeUpdates
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case attributeUpdates = "AttributeUpdates"
            case objectReference = "ObjectReference"
        }
    }

    public struct SchemaFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "FacetName", required: false, type: .string)
        ]
        /// The ARN of the schema that contains the facet with no minor component. See arns and In-Place Schema Upgrade for a description of when to provide minor versions.
        public let schemaArn: String?
        /// The name of the facet.
        public let facetName: String?

        public init(schemaArn: String? = nil, facetName: String? = nil) {
            self.schemaArn = schemaArn
            self.facetName = facetName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case facetName = "FacetName"
        }
    }

    public struct CreateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum), 
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum)
        ]
        /// The name of the Facet, which is unique for a given schema.
        public let name: String
        /// The schema ARN in which the new Facet will be created. For more information, see arns.
        public let schemaArn: String
        /// Specifies whether a given object created from this facet is of type node, leaf node, policy or index.   Node: Can have multiple children but one parent.     Leaf node: Cannot have children but can have multiple parents.     Policy: Allows you to store a policy document and policy type. For more information, see Policies.     Index: Can be created with the Index API.  
        public let objectType: ObjectType?
        /// The attributes that are associated with the Facet.
        public let attributes: [FacetAttribute]?
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?

        public init(name: String, schemaArn: String, objectType: ObjectType? = nil, attributes: [FacetAttribute]? = nil, facetStyle: FacetStyle? = nil) {
            self.name = name
            self.schemaArn = schemaArn
            self.objectType = objectType
            self.attributes = attributes
            self.facetStyle = facetStyle
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
            case objectType = "ObjectType"
            case attributes = "Attributes"
            case facetStyle = "FacetStyle"
        }
    }

    public struct AttachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.
        public let directoryArn: String
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(directoryArn: String, typedLinkFacet: TypedLinkSchemaAndFacetName, sourceObjectReference: ObjectReference, attributes: [AttributeNameAndValue], targetObjectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.typedLinkFacet = typedLinkFacet
            self.sourceObjectReference = sourceObjectReference
            self.attributes = attributes
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case typedLinkFacet = "TypedLinkFacet"
            case sourceObjectReference = "SourceObjectReference"
            case attributes = "Attributes"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct TypedLinkAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "Range", required: true, type: .structure)
        ]
        /// The unique name of the typed link attribute.
        public let attributeName: String?
        /// The range of attribute values that are being selected.
        public let range: TypedAttributeValueRange

        public init(attributeName: String? = nil, range: TypedAttributeValueRange) {
            self.attributeName = attributeName
            self.range = range
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case range = "Range"
        }
    }

}