// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension KinesisAnalyticsV2 {

    public enum InputStartingPosition: String, CustomStringConvertible, Codable {
        case now = "NOW"
        case trimHorizon = "TRIM_HORIZON"
        case lastStoppedPoint = "LAST_STOPPED_POINT"
        public var description: String { return self.rawValue }
    }

    public struct DiscoverInputSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParsedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "RawInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "ProcessedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "InputSchema", required: false, type: .structure)
        ]
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        public let parsedInputRecords: [[String]]?
        /// The raw stream data that was sampled to infer the schema.
        public let rawInputRecords: [String]?
        /// The stream data that was modified by the processor specified in the InputProcessingConfiguration parameter.
        public let processedInputRecords: [String]?
        /// The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        public let inputSchema: SourceSchema?

        public init(parsedInputRecords: [[String]]? = nil, rawInputRecords: [String]? = nil, processedInputRecords: [String]? = nil, inputSchema: SourceSchema? = nil) {
            self.parsedInputRecords = parsedInputRecords
            self.rawInputRecords = rawInputRecords
            self.processedInputRecords = processedInputRecords
            self.inputSchema = inputSchema
        }

        private enum CodingKeys: String, CodingKey {
            case parsedInputRecords = "ParsedInputRecords"
            case rawInputRecords = "RawInputRecords"
            case processedInputRecords = "ProcessedInputRecords"
            case inputSchema = "InputSchema"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// In response to your CreateApplication request, Kinesis Data Analytics returns a response with details of the application it created.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct DeleteApplicationReferenceDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The updated version ID of the application.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct MonitoringConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "LogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "MetricsLevel", required: false, type: .enum)
        ]
        /// Describes whether to use the default CloudWatch logging configuration for an application.
        public let configurationType: ConfigurationType
        /// Describes the verbosity of the CloudWatch Logs for an application.
        public let logLevel: LogLevel?
        /// Describes the granularity of the CloudWatch Logs for an application.
        public let metricsLevel: MetricsLevel?

        public init(configurationType: ConfigurationType, logLevel: LogLevel? = nil, metricsLevel: MetricsLevel? = nil) {
            self.configurationType = configurationType
            self.logLevel = logLevel
            self.metricsLevel = metricsLevel
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "ConfigurationType"
            case logLevel = "LogLevel"
            case metricsLevel = "MetricsLevel"
        }
    }

    public struct ApplicationSnapshotConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabled", required: true, type: .boolean)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabled: Bool

        public init(snapshotsEnabled: Bool) {
            self.snapshotsEnabled = snapshotsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabled = "SnapshotsEnabled"
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct OutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchema", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LambdaOutputDescription", required: false, type: .structure)
        ]
        /// Describes the Kinesis data stream that is configured as the destination where output is written.
        public let kinesisStreamsOutputDescription: KinesisStreamsOutputDescription?
        /// The data format used for writing data to the destination.
        public let destinationSchema: DestinationSchema?
        /// Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.
        public let kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription?
        /// A unique identifier for the output configuration.
        public let outputId: String?
        /// The name of the in-application stream that is configured as output.
        public let name: String?
        /// Describes the Lambda function that is configured as the destination where output is written.
        public let lambdaOutputDescription: LambdaOutputDescription?

        public init(kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil, destinationSchema: DestinationSchema? = nil, kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil, outputId: String? = nil, name: String? = nil, lambdaOutputDescription: LambdaOutputDescription? = nil) {
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
            self.destinationSchema = destinationSchema
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
            self.outputId = outputId
            self.name = name
            self.lambdaOutputDescription = lambdaOutputDescription
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsOutputDescription = "KinesisStreamsOutputDescription"
            case destinationSchema = "DestinationSchema"
            case kinesisFirehoseOutputDescription = "KinesisFirehoseOutputDescription"
            case outputId = "OutputId"
            case name = "Name"
            case lambdaOutputDescription = "LambdaOutputDescription"
        }
    }

    public struct InputProcessingConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorDescription", required: false, type: .structure)
        ]
        /// Provides configuration information about the associated InputLambdaProcessorDescription 
        public let inputLambdaProcessorDescription: InputLambdaProcessorDescription?

        public init(inputLambdaProcessorDescription: InputLambdaProcessorDescription? = nil) {
            self.inputLambdaProcessorDescription = inputLambdaProcessorDescription
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorDescription = "InputLambdaProcessorDescription"
        }
    }

    public struct SqlApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Outputs", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSources", required: false, type: .list), 
            AWSShapeMember(label: "Inputs", required: false, type: .list)
        ]
        /// The array of Output objects describing the destination streams used by the application.
        public let outputs: [Output]?
        /// The array of ReferenceDataSource objects describing the reference data sources used by the application.
        public let referenceDataSources: [ReferenceDataSource]?
        /// The array of Input objects describing the input streams used by the application.
        public let inputs: [Input]?

        public init(outputs: [Output]? = nil, referenceDataSources: [ReferenceDataSource]? = nil, inputs: [Input]? = nil) {
            self.outputs = outputs
            self.referenceDataSources = referenceDataSources
            self.inputs = inputs
        }

        private enum CodingKeys: String, CodingKey {
            case outputs = "Outputs"
            case referenceDataSources = "ReferenceDataSources"
            case inputs = "Inputs"
        }
    }

    public struct ListApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationSummaries", required: true, type: .list)
        ]
        /// The pagination token for the next set of results, or null if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see Using the AWS Command Line Interface's Pagination Options.
        public let nextToken: String?
        /// A list of ApplicationSummary objects.
        public let applicationSummaries: [ApplicationSummary]

        public init(nextToken: String? = nil, applicationSummaries: [ApplicationSummary]) {
            self.nextToken = nextToken
            self.applicationSummaries = applicationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case applicationSummaries = "ApplicationSummaries"
        }
    }

    public struct JSONMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowPath", required: true, type: .string)
        ]
        /// The path to the top-level parent that contains the records.
        public let recordRowPath: String

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowPath = "RecordRowPath"
        }
    }

    public struct ApplicationSnapshotConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabledUpdate", required: true, type: .boolean)
        ]
        /// Describes updates to whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabledUpdate: Bool

        public init(snapshotsEnabledUpdate: Bool) {
            self.snapshotsEnabledUpdate = snapshotsEnabledUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabledUpdate = "SnapshotsEnabledUpdate"
        }
    }

    public struct CodeContentDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeSize", required: false, type: .long), 
            AWSShapeMember(label: "TextContent", required: false, type: .string), 
            AWSShapeMember(label: "CodeMD5", required: false, type: .string), 
            AWSShapeMember(label: "S3ApplicationCodeLocationDescription", required: false, type: .structure)
        ]
        /// The size in bytes of the application code. Can be used to validate zip-format code.
        public let codeSize: Int64?
        /// The text-format code
        public let textContent: String?
        /// The checksum that can be used to validate zip-format code.
        public let codeMD5: String?
        /// The S3 bucket Amazon Resource Name (ARN), file key, and object version of the application code stored in Amazon S3.
        public let s3ApplicationCodeLocationDescription: S3ApplicationCodeLocationDescription?

        public init(codeSize: Int64? = nil, textContent: String? = nil, codeMD5: String? = nil, s3ApplicationCodeLocationDescription: S3ApplicationCodeLocationDescription? = nil) {
            self.codeSize = codeSize
            self.textContent = textContent
            self.codeMD5 = codeMD5
            self.s3ApplicationCodeLocationDescription = s3ApplicationCodeLocationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case codeSize = "CodeSize"
            case textContent = "TextContent"
            case codeMD5 = "CodeMD5"
            case s3ApplicationCodeLocationDescription = "S3ApplicationCodeLocationDescription"
        }
    }

    public struct InputSchemaUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "RecordEncodingUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RecordColumnUpdates", required: false, type: .list)
        ]
        /// Specifies the format of the records on the streaming source.
        public let recordFormatUpdate: RecordFormat?
        /// Specifies the encoding of the records in the streaming source; for example, UTF-8.
        public let recordEncodingUpdate: String?
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.
        public let recordColumnUpdates: [RecordColumn]?

        public init(recordFormatUpdate: RecordFormat? = nil, recordEncodingUpdate: String? = nil, recordColumnUpdates: [RecordColumn]? = nil) {
            self.recordFormatUpdate = recordFormatUpdate
            self.recordEncodingUpdate = recordEncodingUpdate
            self.recordColumnUpdates = recordColumnUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatUpdate = "RecordFormatUpdate"
            case recordEncodingUpdate = "RecordEncodingUpdate"
            case recordColumnUpdates = "RecordColumnUpdates"
        }
    }

    public struct RunConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SqlRunConfigurations", required: false, type: .list)
        ]
        /// Describes the restore behavior of a restarting application.
        public let applicationRestoreConfiguration: ApplicationRestoreConfiguration?
        /// Describes the starting parameters for an SQL-based Kinesis Data Analytics application.
        public let sqlRunConfigurations: [SqlRunConfiguration]?

        public init(applicationRestoreConfiguration: ApplicationRestoreConfiguration? = nil, sqlRunConfigurations: [SqlRunConfiguration]? = nil) {
            self.applicationRestoreConfiguration = applicationRestoreConfiguration
            self.sqlRunConfigurations = sqlRunConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreConfiguration = "ApplicationRestoreConfiguration"
            case sqlRunConfigurations = "SqlRunConfigurations"
        }
    }

    public struct DeleteApplicationOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The current application version ID.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct KinesisStreamsInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the Kinesis data stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct DeleteApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Use the DescribeApplication operation to get this value.
        public let createTimestamp: TimeStamp
        /// The name of the application to delete.
        public let applicationName: String

        public init(createTimestamp: TimeStamp, applicationName: String) {
            self.createTimestamp = createTimestamp
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case applicationName = "ApplicationName"
        }
    }

    public struct SourceSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormat", required: true, type: .structure), 
            AWSShapeMember(label: "RecordEncoding", required: false, type: .string), 
            AWSShapeMember(label: "RecordColumns", required: true, type: .list)
        ]
        /// Specifies the format of the records on the streaming source.
        public let recordFormat: RecordFormat
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncoding: String?
        /// A list of RecordColumn objects. 
        public let recordColumns: [RecordColumn]

        public init(recordFormat: RecordFormat, recordEncoding: String? = nil, recordColumns: [RecordColumn]) {
            self.recordFormat = recordFormat
            self.recordEncoding = recordEncoding
            self.recordColumns = recordColumns
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormat = "RecordFormat"
            case recordEncoding = "RecordEncoding"
            case recordColumns = "RecordColumns"
        }
    }

    public struct KinesisStreamsOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Kinesis data stream where you want to write the output.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct OutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "NameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutputUpdate", required: false, type: .structure)
        ]
        /// Describes a Kinesis data stream as the destination for the output.
        public let kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate?
        /// Identifies the specific output configuration that you want to update.
        public let outputId: String
        /// Describes the data format when records are written to the destination. 
        public let destinationSchemaUpdate: DestinationSchema?
        /// Describes an AWS Lambda function as the destination for the output.
        public let lambdaOutputUpdate: LambdaOutputUpdate?
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        public let nameUpdate: String?
        /// Describes a Kinesis Data Firehose delivery stream as the destination for the output.
        public let kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate?

        public init(kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil, outputId: String, destinationSchemaUpdate: DestinationSchema? = nil, lambdaOutputUpdate: LambdaOutputUpdate? = nil, nameUpdate: String? = nil, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil) {
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
            self.outputId = outputId
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.lambdaOutputUpdate = lambdaOutputUpdate
            self.nameUpdate = nameUpdate
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsOutputUpdate = "KinesisStreamsOutputUpdate"
            case outputId = "OutputId"
            case destinationSchemaUpdate = "DestinationSchemaUpdate"
            case lambdaOutputUpdate = "LambdaOutputUpdate"
            case nameUpdate = "NameUpdate"
            case kinesisFirehoseOutputUpdate = "KinesisFirehoseOutputUpdate"
        }
    }

    public struct CSVMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowDelimiter", required: true, type: .string), 
            AWSShapeMember(label: "RecordColumnDelimiter", required: true, type: .string)
        ]
        /// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        public let recordRowDelimiter: String
        /// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        public let recordColumnDelimiter: String

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowDelimiter = "RecordRowDelimiter"
            case recordColumnDelimiter = "RecordColumnDelimiter"
        }
    }

    public struct DeleteApplicationResponse: AWSShape {

    }

    public struct KinesisFirehoseOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the destination delivery stream to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public enum ConfigurationType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case custom = "CUSTOM"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationCodeConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "CodeContentTypeUpdate", required: false, type: .enum)
        ]
        /// Describes updates to the code content of an application.
        public let codeContentUpdate: CodeContentUpdate?
        /// Describes updates to the code content type.
        public let codeContentTypeUpdate: CodeContentType?

        public init(codeContentUpdate: CodeContentUpdate? = nil, codeContentTypeUpdate: CodeContentType? = nil) {
            self.codeContentUpdate = codeContentUpdate
            self.codeContentTypeUpdate = codeContentTypeUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentUpdate = "CodeContentUpdate"
            case codeContentTypeUpdate = "CodeContentTypeUpdate"
        }
    }

    public struct KinesisStreamsOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the Kinesis data stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct RunConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreConfigurationDescription", required: false, type: .structure)
        ]
        /// Describes the restore behavior of a restarting application.
        public let applicationRestoreConfigurationDescription: ApplicationRestoreConfiguration?

        public init(applicationRestoreConfigurationDescription: ApplicationRestoreConfiguration? = nil) {
            self.applicationRestoreConfigurationDescription = applicationRestoreConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreConfigurationDescription = "ApplicationRestoreConfigurationDescription"
        }
    }

    public struct InputParallelismUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountUpdate", required: true, type: .integer)
        ]
        /// The number of in-application streams to create for the specified streaming source.
        public let countUpdate: Int32

        public init(countUpdate: Int32) {
            self.countUpdate = countUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case countUpdate = "CountUpdate"
        }
    }

    public enum RuntimeEnvironment: String, CustomStringConvertible, Codable {
        case sql10 = "SQL-1_0"
        case flink16 = "FLINK-1_6"
        public var description: String { return self.rawValue }
    }

    public struct RecordFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum), 
            AWSShapeMember(label: "MappingParameters", required: false, type: .structure)
        ]
        /// The type of record format.
        public let recordFormatType: RecordFormatType
        /// When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
        public let mappingParameters: MappingParameters?

        public init(recordFormatType: RecordFormatType, mappingParameters: MappingParameters? = nil) {
            self.recordFormatType = recordFormatType
            self.mappingParameters = mappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
            case mappingParameters = "MappingParameters"
        }
    }

    public struct SqlRunConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: true, type: .structure)
        ]
        /// The input source ID. You can get this ID by calling the DescribeApplication operation. 
        public let inputId: String
        /// The point at which you want the application to start processing records from the streaming source. 
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration

        public init(inputId: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.inputId = inputId
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
        }
    }

    public struct KinesisFirehoseInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct KinesisFirehoseOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?

        public init(resourceARN: String, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct KinesisStreamsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the destination Kinesis data stream to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct DescribeApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "IncludeAdditionalDetails", required: false, type: .boolean)
        ]
        /// The name of the application.
        public let applicationName: String
        /// Displays verbose information about a Kinesis Data Analytics application, including the application's job plan.
        public let includeAdditionalDetails: Bool?

        public init(applicationName: String, includeAdditionalDetails: Bool? = nil) {
            self.applicationName = applicationName
            self.includeAdditionalDetails = includeAdditionalDetails
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case includeAdditionalDetails = "IncludeAdditionalDetails"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The descriptions of the remaining CloudWatch logging options for the application.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// The version ID of the application. Kinesis Data Analytics updates the ApplicationVersionId each time you change the CloudWatch logging options.
        public let applicationVersionId: Int64?
        /// The application's Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct EnvironmentPropertyDescriptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroupDescriptions", required: false, type: .list)
        ]
        /// Describes the execution property groups.
        public let propertyGroupDescriptions: [PropertyGroup]?

        public init(propertyGroupDescriptions: [PropertyGroup]? = nil) {
            self.propertyGroupDescriptions = propertyGroupDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroupDescriptions = "PropertyGroupDescriptions"
        }
    }

    public struct CreateApplicationSnapshotResponse: AWSShape {

    }

    public struct MonitoringConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsLevel", required: false, type: .enum), 
            AWSShapeMember(label: "LogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum)
        ]
        /// Describes the granularity of the CloudWatch Logs for an application.
        public let metricsLevel: MetricsLevel?
        /// Describes the verbosity of the CloudWatch Logs for an application.
        public let logLevel: LogLevel?
        /// Describes whether to use the default CloudWatch logging configuration for an application.
        public let configurationType: ConfigurationType?

        public init(metricsLevel: MetricsLevel? = nil, logLevel: LogLevel? = nil, configurationType: ConfigurationType? = nil) {
            self.metricsLevel = metricsLevel
            self.logLevel = logLevel
            self.configurationType = configurationType
        }

        private enum CodingKeys: String, CodingKey {
            case metricsLevel = "MetricsLevel"
            case logLevel = "LogLevel"
            case configurationType = "ConfigurationType"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Describes application updates.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct ParallelismConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parallelism", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CurrentParallelism", required: false, type: .integer), 
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum), 
            AWSShapeMember(label: "ParallelismPerKPU", required: false, type: .integer)
        ]
        /// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. 
        public let parallelism: Int32?
        /// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabled: Bool?
        /// Describes the current number of parallel tasks that a Java-based Kinesis Data Analytics application can perform.
        public let currentParallelism: Int32?
        /// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. 
        public let configurationType: ConfigurationType?
        /// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
        public let parallelismPerKPU: Int32?

        public init(parallelism: Int32? = nil, autoScalingEnabled: Bool? = nil, currentParallelism: Int32? = nil, configurationType: ConfigurationType? = nil, parallelismPerKPU: Int32? = nil) {
            self.parallelism = parallelism
            self.autoScalingEnabled = autoScalingEnabled
            self.currentParallelism = currentParallelism
            self.configurationType = configurationType
            self.parallelismPerKPU = parallelismPerKPU
        }

        private enum CodingKeys: String, CodingKey {
            case parallelism = "Parallelism"
            case autoScalingEnabled = "AutoScalingEnabled"
            case currentParallelism = "CurrentParallelism"
            case configurationType = "ConfigurationType"
            case parallelismPerKPU = "ParallelismPerKPU"
        }
    }

    public struct FlinkApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MonitoringConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "JobPlanDescription", required: false, type: .string), 
            AWSShapeMember(label: "ParallelismConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "CheckpointConfigurationDescription", required: false, type: .structure)
        ]
        /// Describes configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfigurationDescription: MonitoringConfigurationDescription?
        /// The job plan for an application. For more information about the job plan, see Jobs and Scheduling in the Apache Flink Documentation. To retrieve the job plan for the application, use the DescribeApplicationRequest$IncludeAdditionalDetails parameter of the DescribeApplication operation.
        public let jobPlanDescription: String?
        /// Describes parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfigurationDescription: ParallelismConfigurationDescription?
        /// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.
        public let checkpointConfigurationDescription: CheckpointConfigurationDescription?

        public init(monitoringConfigurationDescription: MonitoringConfigurationDescription? = nil, jobPlanDescription: String? = nil, parallelismConfigurationDescription: ParallelismConfigurationDescription? = nil, checkpointConfigurationDescription: CheckpointConfigurationDescription? = nil) {
            self.monitoringConfigurationDescription = monitoringConfigurationDescription
            self.jobPlanDescription = jobPlanDescription
            self.parallelismConfigurationDescription = parallelismConfigurationDescription
            self.checkpointConfigurationDescription = checkpointConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringConfigurationDescription = "MonitoringConfigurationDescription"
            case jobPlanDescription = "JobPlanDescription"
            case parallelismConfigurationDescription = "ParallelismConfigurationDescription"
            case checkpointConfigurationDescription = "CheckpointConfigurationDescription"
        }
    }

    public enum RecordFormatType: String, CustomStringConvertible, Codable {
        case json = "JSON"
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct AddApplicationInputProcessingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: false, type: .string), 
            AWSShapeMember(label: "InputProcessingConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The input ID that is associated with the application input. This is the ID that Amazon Kinesis Data Analytics assigns to each input configuration that you add to your application.
        public let inputId: String?
        /// The description of the preprocessor that executes on records in this input before the application's code is run.
        public let inputProcessingConfigurationDescription: InputProcessingConfigurationDescription?
        /// Provides the current application version.
        public let applicationVersionId: Int64?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?

        public init(inputId: String? = nil, inputProcessingConfigurationDescription: InputProcessingConfigurationDescription? = nil, applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.inputId = inputId
            self.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case inputProcessingConfigurationDescription = "InputProcessingConfigurationDescription"
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct AddApplicationInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Input", required: true, type: .structure)
        ]
        /// The current version of your application. You can use the DescribeApplication operation to find the current application version.
        public let currentApplicationVersionId: Int64
        /// The name of your existing application to which you want to add the streaming source.
        public let applicationName: String
        /// The Input to add.
        public let input: Input

        public init(currentApplicationVersionId: Int64, applicationName: String, input: Input) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case input = "Input"
        }
    }

    public struct DeleteApplicationSnapshotResponse: AWSShape {

    }

    public struct ApplicationSnapshotConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabled", required: true, type: .boolean)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabled: Bool

        public init(snapshotsEnabled: Bool) {
            self.snapshotsEnabled = snapshotsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabled = "SnapshotsEnabled"
        }
    }

    public struct AddApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceDataSource", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The reference data source can be an object in your Amazon S3 bucket. Kinesis Data Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. 
        public let referenceDataSource: ReferenceDataSource
        /// The name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceDataSource = "ReferenceDataSource"
            case applicationName = "ApplicationName"
        }
    }

    public struct CheckpointConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinPauseBetweenCheckpointsUpdate", required: false, type: .long), 
            AWSShapeMember(label: "CheckpointingEnabledUpdate", required: false, type: .boolean), 
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "CheckpointIntervalUpdate", required: false, type: .long)
        ]
        /// Describes updates to the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
        public let minPauseBetweenCheckpointsUpdate: Int64?
        /// Describes updates to whether checkpointing is enabled for an application.
        public let checkpointingEnabledUpdate: Bool?
        /// Describes updates to whether the application uses the default checkpointing behavior of Kinesis Data Analytics.
        public let configurationTypeUpdate: ConfigurationType?
        /// Describes updates to the interval in milliseconds between checkpoint operations.
        public let checkpointIntervalUpdate: Int64?

        public init(minPauseBetweenCheckpointsUpdate: Int64? = nil, checkpointingEnabledUpdate: Bool? = nil, configurationTypeUpdate: ConfigurationType? = nil, checkpointIntervalUpdate: Int64? = nil) {
            self.minPauseBetweenCheckpointsUpdate = minPauseBetweenCheckpointsUpdate
            self.checkpointingEnabledUpdate = checkpointingEnabledUpdate
            self.configurationTypeUpdate = configurationTypeUpdate
            self.checkpointIntervalUpdate = checkpointIntervalUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case minPauseBetweenCheckpointsUpdate = "MinPauseBetweenCheckpointsUpdate"
            case checkpointingEnabledUpdate = "CheckpointingEnabledUpdate"
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
            case checkpointIntervalUpdate = "CheckpointIntervalUpdate"
        }
    }

    public struct EnvironmentPropertyUpdates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroups", required: true, type: .list)
        ]
        /// Describes updates to the execution property groups.
        public let propertyGroups: [PropertyGroup]

        public init(propertyGroups: [PropertyGroup]) {
            self.propertyGroups = propertyGroups
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroups = "PropertyGroups"
        }
    }

    public struct LambdaOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the destination AWS Lambda function.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct PropertyGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyMap", required: true, type: .map), 
            AWSShapeMember(label: "PropertyGroupId", required: true, type: .string)
        ]
        /// Describes the value of an application execution property key-value pair.
        public let propertyMap: [String: String]
        /// Describes the key of an application execution property key-value pair.
        public let propertyGroupId: String

        public init(propertyMap: [String: String], propertyGroupId: String) {
            self.propertyMap = propertyMap
            self.propertyGroupId = propertyGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case propertyMap = "PropertyMap"
            case propertyGroupId = "PropertyGroupId"
        }
    }

    public struct KinesisFirehoseInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the input delivery stream to read.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct CodeContentUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ContentLocationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ZipFileContentUpdate", required: false, type: .blob), 
            AWSShapeMember(label: "TextContentUpdate", required: false, type: .string)
        ]
        /// Describes an update to the location of code for an application.
        public let s3ContentLocationUpdate: S3ContentLocationUpdate?
        /// Describes an update to the zipped code for an application.
        public let zipFileContentUpdate: Data?
        /// Describes an update to the text code for an application.
        public let textContentUpdate: String?

        public init(s3ContentLocationUpdate: S3ContentLocationUpdate? = nil, zipFileContentUpdate: Data? = nil, textContentUpdate: String? = nil) {
            self.s3ContentLocationUpdate = s3ContentLocationUpdate
            self.zipFileContentUpdate = zipFileContentUpdate
            self.textContentUpdate = textContentUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case s3ContentLocationUpdate = "S3ContentLocationUpdate"
            case zipFileContentUpdate = "ZipFileContentUpdate"
            case textContentUpdate = "TextContentUpdate"
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "RunConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceExecutionRoleUpdate", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionUpdates", required: false, type: .list)
        ]
        /// The current application version ID. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// Describes updates to the application's starting parameters.
        public let runConfigurationUpdate: RunConfigurationUpdate?
        /// The name of the application to update.
        public let applicationName: String
        /// Describes application configuration updates.
        public let applicationConfigurationUpdate: ApplicationConfigurationUpdate?
        /// Describes updates to the service execution role.
        public let serviceExecutionRoleUpdate: String?
        /// Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use AddApplicationCloudWatchLoggingOption.
        public let cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]?

        public init(currentApplicationVersionId: Int64, runConfigurationUpdate: RunConfigurationUpdate? = nil, applicationName: String, applicationConfigurationUpdate: ApplicationConfigurationUpdate? = nil, serviceExecutionRoleUpdate: String? = nil, cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]? = nil) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.runConfigurationUpdate = runConfigurationUpdate
            self.applicationName = applicationName
            self.applicationConfigurationUpdate = applicationConfigurationUpdate
            self.serviceExecutionRoleUpdate = serviceExecutionRoleUpdate
            self.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case runConfigurationUpdate = "RunConfigurationUpdate"
            case applicationName = "ApplicationName"
            case applicationConfigurationUpdate = "ApplicationConfigurationUpdate"
            case serviceExecutionRoleUpdate = "ServiceExecutionRoleUpdate"
            case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
        }
    }

    public struct ParallelismConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "ParallelismUpdate", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingEnabledUpdate", required: false, type: .boolean), 
            AWSShapeMember(label: "ParallelismPerKPUUpdate", required: false, type: .integer)
        ]
        /// Describes updates to whether the application uses the default parallelism for the Kinesis Data Analytics service, or if a custom parallelism is used.
        public let configurationTypeUpdate: ConfigurationType?
        /// Describes updates to the initial number of parallel tasks an application can perform.
        public let parallelismUpdate: Int32?
        /// Describes updates to whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabledUpdate: Bool?
        /// Describes updates to the number of parallel tasks an application can perform per Kinesis Processing Unit (KPU) used by the application.
        public let parallelismPerKPUUpdate: Int32?

        public init(configurationTypeUpdate: ConfigurationType? = nil, parallelismUpdate: Int32? = nil, autoScalingEnabledUpdate: Bool? = nil, parallelismPerKPUUpdate: Int32? = nil) {
            self.configurationTypeUpdate = configurationTypeUpdate
            self.parallelismUpdate = parallelismUpdate
            self.autoScalingEnabledUpdate = autoScalingEnabledUpdate
            self.parallelismPerKPUUpdate = parallelismPerKPUUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
            case parallelismUpdate = "ParallelismUpdate"
            case autoScalingEnabledUpdate = "AutoScalingEnabledUpdate"
            case parallelismPerKPUUpdate = "ParallelismPerKPUUpdate"
        }
    }

    public struct ListApplicationSnapshotsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotSummaries", required: false, type: .list)
        ]
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A collection of objects containing information about the application snapshots.
        public let snapshotSummaries: [SnapshotDetails]?

        public init(nextToken: String? = nil, snapshotSummaries: [SnapshotDetails]? = nil) {
            self.nextToken = nextToken
            self.snapshotSummaries = snapshotSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case snapshotSummaries = "SnapshotSummaries"
        }
    }

    public struct ApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentPropertyUpdates", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationSnapshotConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "FlinkApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationCodeConfigurationUpdate", required: false, type: .structure)
        ]
        /// Describes updates to the environment properties for a Java-based Kinesis Data Analytics application.
        public let environmentPropertyUpdates: EnvironmentPropertyUpdates?
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfigurationUpdate: ApplicationSnapshotConfigurationUpdate?
        /// Describes updates to a Java-based Kinesis Data Analytics application's configuration.
        public let flinkApplicationConfigurationUpdate: FlinkApplicationConfigurationUpdate?
        /// Describes updates to an SQL-based Kinesis Data Analytics application's configuration.
        public let sqlApplicationConfigurationUpdate: SqlApplicationConfigurationUpdate?
        /// Describes updates to a Java-based Kinesis Data Analytics application's code configuration.
        public let applicationCodeConfigurationUpdate: ApplicationCodeConfigurationUpdate?

        public init(environmentPropertyUpdates: EnvironmentPropertyUpdates? = nil, applicationSnapshotConfigurationUpdate: ApplicationSnapshotConfigurationUpdate? = nil, flinkApplicationConfigurationUpdate: FlinkApplicationConfigurationUpdate? = nil, sqlApplicationConfigurationUpdate: SqlApplicationConfigurationUpdate? = nil, applicationCodeConfigurationUpdate: ApplicationCodeConfigurationUpdate? = nil) {
            self.environmentPropertyUpdates = environmentPropertyUpdates
            self.applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdate
            self.flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdate
            self.sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdate
            self.applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentPropertyUpdates = "EnvironmentPropertyUpdates"
            case applicationSnapshotConfigurationUpdate = "ApplicationSnapshotConfigurationUpdate"
            case flinkApplicationConfigurationUpdate = "FlinkApplicationConfigurationUpdate"
            case sqlApplicationConfigurationUpdate = "SqlApplicationConfigurationUpdate"
            case applicationCodeConfigurationUpdate = "ApplicationCodeConfigurationUpdate"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The current application version ID.
        public let applicationVersionId: Int64?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct InputProcessingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessor", required: true, type: .structure)
        ]
        /// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
        public let inputLambdaProcessor: InputLambdaProcessor

        public init(inputLambdaProcessor: InputLambdaProcessor) {
            self.inputLambdaProcessor = inputLambdaProcessor
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessor = "InputLambdaProcessor"
        }
    }

    public enum SnapshotStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case ready = "READY"
        case deleting = "DELETING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum ApplicationRestoreType: String, CustomStringConvertible, Codable {
        case skipRestoreFromSnapshot = "SKIP_RESTORE_FROM_SNAPSHOT"
        case restoreFromLatestSnapshot = "RESTORE_FROM_LATEST_SNAPSHOT"
        case restoreFromCustomSnapshot = "RESTORE_FROM_CUSTOM_SNAPSHOT"
        public var description: String { return self.rawValue }
    }

    public struct StartApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RunConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Identifies the run configuration (start parameters) of a Kinesis Data Analytics application.
        public let runConfiguration: RunConfiguration
        /// The name of the application.
        public let applicationName: String

        public init(runConfiguration: RunConfiguration, applicationName: String) {
            self.runConfiguration = runConfiguration
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case runConfiguration = "RunConfiguration"
            case applicationName = "ApplicationName"
        }
    }

    public struct SqlApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list)
        ]
        /// The array of OutputDescription objects describing the destination streams used by the application.
        public let outputDescriptions: [OutputDescription]?
        /// The array of ReferenceDataSourceDescription objects describing the reference data sources used by the application.
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?
        /// The array of InputDescription objects describing the input streams used by the application.
        public let inputDescriptions: [InputDescription]?

        public init(outputDescriptions: [OutputDescription]? = nil, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil, inputDescriptions: [InputDescription]? = nil) {
            self.outputDescriptions = outputDescriptions
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
            self.inputDescriptions = inputDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case outputDescriptions = "OutputDescriptions"
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
            case inputDescriptions = "InputDescriptions"
        }
    }

    public struct S3ContentLocationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectVersionUpdate", required: false, type: .string), 
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string), 
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string)
        ]
        /// The new version of the object containing the application code.
        public let objectVersionUpdate: String?
        /// The new file key for the object containing the application code.
        public let fileKeyUpdate: String?
        /// The new Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARNUpdate: String?

        public init(objectVersionUpdate: String? = nil, fileKeyUpdate: String? = nil, bucketARNUpdate: String? = nil) {
            self.objectVersionUpdate = objectVersionUpdate
            self.fileKeyUpdate = fileKeyUpdate
            self.bucketARNUpdate = bucketARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case objectVersionUpdate = "ObjectVersionUpdate"
            case fileKeyUpdate = "FileKeyUpdate"
            case bucketARNUpdate = "BucketARNUpdate"
        }
    }

    public struct SnapshotDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotCreationTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SnapshotStatus", required: true, type: .enum)
        ]
        /// The current application version ID when the snapshot was created.
        public let applicationVersionId: Int64
        /// The identifier for the application snapshot.
        public let snapshotName: String
        /// The timestamp of the application snapshot.
        public let snapshotCreationTimestamp: TimeStamp?
        /// The status of the application snapshot.
        public let snapshotStatus: SnapshotStatus

        public init(applicationVersionId: Int64, snapshotName: String, snapshotCreationTimestamp: TimeStamp? = nil, snapshotStatus: SnapshotStatus) {
            self.applicationVersionId = applicationVersionId
            self.snapshotName = snapshotName
            self.snapshotCreationTimestamp = snapshotCreationTimestamp
            self.snapshotStatus = snapshotStatus
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case snapshotName = "SnapshotName"
            case snapshotCreationTimestamp = "SnapshotCreationTimestamp"
            case snapshotStatus = "SnapshotStatus"
        }
    }

    public enum ApplicationStatus: String, CustomStringConvertible, Codable {
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case ready = "READY"
        case running = "RUNNING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public struct FlinkApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MonitoringConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "CheckpointConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ParallelismConfigurationUpdate", required: false, type: .structure)
        ]
        /// Describes updates to the configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfigurationUpdate: MonitoringConfigurationUpdate?
        /// Describes updates to an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.
        public let checkpointConfigurationUpdate: CheckpointConfigurationUpdate?
        /// Describes updates to the parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfigurationUpdate: ParallelismConfigurationUpdate?

        public init(monitoringConfigurationUpdate: MonitoringConfigurationUpdate? = nil, checkpointConfigurationUpdate: CheckpointConfigurationUpdate? = nil, parallelismConfigurationUpdate: ParallelismConfigurationUpdate? = nil) {
            self.monitoringConfigurationUpdate = monitoringConfigurationUpdate
            self.checkpointConfigurationUpdate = checkpointConfigurationUpdate
            self.parallelismConfigurationUpdate = parallelismConfigurationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringConfigurationUpdate = "MonitoringConfigurationUpdate"
            case checkpointConfigurationUpdate = "CheckpointConfigurationUpdate"
            case parallelismConfigurationUpdate = "ParallelismConfigurationUpdate"
        }
    }

    public struct KinesisStreamsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the input Kinesis data stream to read.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct DiscoverInputSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Configuration", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceExecutionRole", required: true, type: .string)
        ]
        /// Specify this parameter to discover a schema from data in an Amazon S3 object.
        public let s3Configuration: S3Configuration?
        /// The Amazon Resource Name (ARN) of the streaming source.
        public let resourceARN: String?
        /// The point at which you want Kinesis Data Analytics to start reading records from the specified streaming source discovery purposes.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// The InputProcessingConfiguration to use to preprocess the records before discovering the schema of the records.
        public let inputProcessingConfiguration: InputProcessingConfiguration?
        /// The ARN of the role that is used to access the streaming source.
        public let serviceExecutionRole: String

        public init(s3Configuration: S3Configuration? = nil, resourceARN: String? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputProcessingConfiguration: InputProcessingConfiguration? = nil, serviceExecutionRole: String) {
            self.s3Configuration = s3Configuration
            self.resourceARN = resourceARN
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.serviceExecutionRole = serviceExecutionRole
        }

        private enum CodingKeys: String, CodingKey {
            case s3Configuration = "S3Configuration"
            case resourceARN = "ResourceARN"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case serviceExecutionRole = "ServiceExecutionRole"
        }
    }

    public struct KinesisFirehoseOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream to write to. 
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct DestinationSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum)
        ]
        /// Specifies the format of the records on the output stream.
        public let recordFormatType: RecordFormatType

        public init(recordFormatType: RecordFormatType) {
            self.recordFormatType = recordFormatType
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
        }
    }

    public struct StopApplicationResponse: AWSShape {

    }

    public struct S3Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// The ARN of the S3 bucket that contains the data.
        public let bucketARN: String
        /// The name of the object that contains the data.
        public let fileKey: String

        public init(bucketARN: String, fileKey: String) {
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct InputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "InAppStreamNames", required: false, type: .list), 
            AWSShapeMember(label: "KinesisStreamsInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: false, type: .string)
        ]
        /// The in-application name prefix.
        public let namePrefix: String?
        /// If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. 
        public let kinesisFirehoseInputDescription: KinesisFirehoseInputDescription?
        /// The description of the preprocessor that executes on records in this input before the application's code is run. 
        public let inputProcessingConfigurationDescription: InputProcessingConfigurationDescription?
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source). 
        public let inputParallelism: InputParallelism?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. 
        public let inputSchema: SourceSchema?
        /// Returns the in-application stream names that are mapped to the stream source. 
        public let inAppStreamNames: [String]?
        /// If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). 
        public let kinesisStreamsInputDescription: KinesisStreamsInputDescription?
        /// The point at which the application is configured to read from the input stream.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. 
        public let inputId: String?

        public init(namePrefix: String? = nil, kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, inputProcessingConfigurationDescription: InputProcessingConfigurationDescription? = nil, inputParallelism: InputParallelism? = nil, inputSchema: SourceSchema? = nil, inAppStreamNames: [String]? = nil, kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputId: String? = nil) {
            self.namePrefix = namePrefix
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription
            self.inputParallelism = inputParallelism
            self.inputSchema = inputSchema
            self.inAppStreamNames = inAppStreamNames
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputId = inputId
        }

        private enum CodingKeys: String, CodingKey {
            case namePrefix = "NamePrefix"
            case kinesisFirehoseInputDescription = "KinesisFirehoseInputDescription"
            case inputProcessingConfigurationDescription = "InputProcessingConfigurationDescription"
            case inputParallelism = "InputParallelism"
            case inputSchema = "InputSchema"
            case inAppStreamNames = "InAppStreamNames"
            case kinesisStreamsInputDescription = "KinesisStreamsInputDescription"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case inputId = "InputId"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list)
        ]
        /// The application's ARN.
        public let applicationARN: String?
        /// The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the ApplicationVersionId each time you change the CloudWatch logging options. 
        public let applicationVersionId: Int64?
        /// The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?

        public init(applicationARN: String? = nil, applicationVersionId: Int64? = nil, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil) {
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case applicationARN = "ApplicationARN"
            case applicationVersionId = "ApplicationVersionId"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
        }
    }

    public struct DescribeApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The identifier of an application snapshot. You can retrieve this value using .
        public let snapshotName: String
        /// The name of an existing application.
        public let applicationName: String

        public init(snapshotName: String, applicationName: String) {
            self.snapshotName = snapshotName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotName = "SnapshotName"
            case applicationName = "ApplicationName"
        }
    }

    public struct CloudWatchLoggingOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string)
        ]
        /// The ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String

        public init(logStreamARN: String) {
            self.logStreamARN = logStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
        }
    }

    public struct InputLambdaProcessor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the AWS Lambda function that operates on records in the stream.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct S3ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKey", required: false, type: .string), 
            AWSShapeMember(label: "BucketARN", required: false, type: .string)
        ]
        /// The object key name containing the reference data.
        public let fileKey: String?
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String?

        public init(fileKey: String? = nil, bucketARN: String? = nil) {
            self.fileKey = fileKey
            self.bucketARN = bucketARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileKey = "FileKey"
            case bucketARN = "BucketARN"
        }
    }

    public struct ApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSnapshotConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationCodeConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentPropertyDescriptions", required: false, type: .structure), 
            AWSShapeMember(label: "RunConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "FlinkApplicationConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfigurationDescription", required: false, type: .structure)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfigurationDescription: ApplicationSnapshotConfigurationDescription?
        /// The details about the application code for a Java-based Kinesis Data Analytics application.
        public let applicationCodeConfigurationDescription: ApplicationCodeConfigurationDescription?
        /// Describes execution properties for a Java-based Kinesis Data Analytics application.
        public let environmentPropertyDescriptions: EnvironmentPropertyDescriptions?
        /// The details about the starting properties for a Kinesis Data Analytics application.
        public let runConfigurationDescription: RunConfigurationDescription?
        /// The details about a Java-based Kinesis Data Analytics application.
        public let flinkApplicationConfigurationDescription: FlinkApplicationConfigurationDescription?
        /// The details about inputs, outputs, and reference data sources for an SQL-based Kinesis Data Analytics application.
        public let sqlApplicationConfigurationDescription: SqlApplicationConfigurationDescription?

        public init(applicationSnapshotConfigurationDescription: ApplicationSnapshotConfigurationDescription? = nil, applicationCodeConfigurationDescription: ApplicationCodeConfigurationDescription? = nil, environmentPropertyDescriptions: EnvironmentPropertyDescriptions? = nil, runConfigurationDescription: RunConfigurationDescription? = nil, flinkApplicationConfigurationDescription: FlinkApplicationConfigurationDescription? = nil, sqlApplicationConfigurationDescription: SqlApplicationConfigurationDescription? = nil) {
            self.applicationSnapshotConfigurationDescription = applicationSnapshotConfigurationDescription
            self.applicationCodeConfigurationDescription = applicationCodeConfigurationDescription
            self.environmentPropertyDescriptions = environmentPropertyDescriptions
            self.runConfigurationDescription = runConfigurationDescription
            self.flinkApplicationConfigurationDescription = flinkApplicationConfigurationDescription
            self.sqlApplicationConfigurationDescription = sqlApplicationConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSnapshotConfigurationDescription = "ApplicationSnapshotConfigurationDescription"
            case applicationCodeConfigurationDescription = "ApplicationCodeConfigurationDescription"
            case environmentPropertyDescriptions = "EnvironmentPropertyDescriptions"
            case runConfigurationDescription = "RunConfigurationDescription"
            case flinkApplicationConfigurationDescription = "FlinkApplicationConfigurationDescription"
            case sqlApplicationConfigurationDescription = "SqlApplicationConfigurationDescription"
        }
    }

    public struct LambdaOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the destination Lambda function to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct MappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSONMappingParameters", required: false, type: .structure), 
            AWSShapeMember(label: "CSVMappingParameters", required: false, type: .structure)
        ]
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        public let jSONMappingParameters: JSONMappingParameters?
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        public let cSVMappingParameters: CSVMappingParameters?

        public init(jSONMappingParameters: JSONMappingParameters? = nil, cSVMappingParameters: CSVMappingParameters? = nil) {
            self.jSONMappingParameters = jSONMappingParameters
            self.cSVMappingParameters = cSVMappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case jSONMappingParameters = "JSONMappingParameters"
            case cSVMappingParameters = "CSVMappingParameters"
        }
    }

    public struct S3ApplicationCodeLocationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectVersion", required: false, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string)
        ]
        /// The version of the object containing the application code.
        public let objectVersion: String?
        /// The file key for the object containing the application code.
        public let fileKey: String
        /// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARN: String

        public init(objectVersion: String? = nil, fileKey: String, bucketARN: String) {
            self.objectVersion = objectVersion
            self.fileKey = fileKey
            self.bucketARN = bucketARN
        }

        private enum CodingKeys: String, CodingKey {
            case objectVersion = "ObjectVersion"
            case fileKey = "FileKey"
            case bucketARN = "BucketARN"
        }
    }

    public struct KinesisFirehoseInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String
        /// The ARN of the IAM role that Kinesis Data Analytics assumes to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?

        public init(resourceARN: String, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct S3ContentLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKey", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "ObjectVersion", required: false, type: .string)
        ]
        /// The file key for the object containing the application code.
        public let fileKey: String
        /// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARN: String
        /// The version of the object containing the application code.
        public let objectVersion: String?

        public init(fileKey: String, bucketARN: String, objectVersion: String? = nil) {
            self.fileKey = fileKey
            self.bucketARN = bucketARN
            self.objectVersion = objectVersion
        }

        private enum CodingKeys: String, CodingKey {
            case fileKey = "FileKey"
            case bucketARN = "BucketARN"
            case objectVersion = "ObjectVersion"
        }
    }

    public struct CreateApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The name of an existing application
        public let applicationName: String
        /// An identifier for the application snapshot.
        public let snapshotName: String

        public init(applicationName: String, snapshotName: String) {
            self.applicationName = applicationName
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case snapshotName = "SnapshotName"
        }
    }

    public struct ApplicationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long)
        ]
        /// The ARN of the application.
        public let applicationARN: String
        /// The name of the application.
        public let applicationName: String
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment
        /// The status of the application.
        public let applicationStatus: ApplicationStatus
        /// Provides the current application version.
        public let applicationVersionId: Int64

        public init(applicationARN: String, applicationName: String, runtimeEnvironment: RuntimeEnvironment, applicationStatus: ApplicationStatus, applicationVersionId: Int64) {
            self.applicationARN = applicationARN
            self.applicationName = applicationName
            self.runtimeEnvironment = runtimeEnvironment
            self.applicationStatus = applicationStatus
            self.applicationVersionId = applicationVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationARN = "ApplicationARN"
            case applicationName = "ApplicationName"
            case runtimeEnvironment = "RuntimeEnvironment"
            case applicationStatus = "ApplicationStatus"
            case applicationVersionId = "ApplicationVersionId"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLoggingOption", required: true, type: .structure), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Provides the Amazon CloudWatch log stream Amazon Resource Name (ARN). 
        public let cloudWatchLoggingOption: CloudWatchLoggingOption
        /// The version ID of the Kinesis Data Analytics application. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// The Kinesis Data Analytics application name.
        public let applicationName: String

        public init(cloudWatchLoggingOption: CloudWatchLoggingOption, currentApplicationVersionId: Int64, applicationName: String) {
            self.cloudWatchLoggingOption = cloudWatchLoggingOption
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLoggingOption = "CloudWatchLoggingOption"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct KinesisStreamsInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the input Kinesis data stream to read.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct InputStartingPositionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputStartingPosition", required: false, type: .enum)
        ]
        /// The starting position on the stream.    NOW - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        public let inputStartingPosition: InputStartingPosition?

        public init(inputStartingPosition: InputStartingPosition? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

        private enum CodingKeys: String, CodingKey {
            case inputStartingPosition = "InputStartingPosition"
        }
    }

    public struct EnvironmentProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroups", required: true, type: .list)
        ]
        /// Describes the execution property groups.
        public let propertyGroups: [PropertyGroup]

        public init(propertyGroups: [PropertyGroup]) {
            self.propertyGroups = propertyGroups
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroups = "PropertyGroups"
        }
    }

    public struct LambdaOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to write to the destination function.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the destination Lambda function.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSourceDescription", required: true, type: .structure), 
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchema", required: false, type: .structure)
        ]
        /// Provides the Amazon S3 bucket name, the object key name that contains the reference data. 
        public let s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription
        /// The in-application table name created by the specific reference data source configuration.
        public let tableName: String
        /// The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the CreateApplication or UpdateApplication operation.
        public let referenceId: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema?

        public init(s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, tableName: String, referenceId: String, referenceSchema: SourceSchema? = nil) {
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.tableName = tableName
            self.referenceId = referenceId
            self.referenceSchema = referenceSchema
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSourceDescription = "S3ReferenceDataSourceDescription"
            case tableName = "TableName"
            case referenceId = "ReferenceId"
            case referenceSchema = "ReferenceSchema"
        }
    }

    public struct InputLambdaProcessorUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the new AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct InputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "InputParallelismUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefixUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfigurationUpdate", required: false, type: .structure)
        ]
        /// The input ID of the application input to be updated.
        public let inputId: String
        /// Describes the parallelism updates (the number of in-application streams Kinesis Data Analytics creates for the specific streaming source).
        public let inputParallelismUpdate: InputParallelismUpdate?
        /// The name prefix for in-application streams that Kinesis Data Analytics creates for the specific streaming source.
        public let namePrefixUpdate: String?
        /// If a Kinesis Data Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN.
        public let kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate?
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        public let inputSchemaUpdate: InputSchemaUpdate?
        /// If a Kinesis data stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN).
        public let kinesisStreamsInputUpdate: KinesisStreamsInputUpdate?
        /// Describes updates to an InputProcessingConfiguration.
        public let inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate?

        public init(inputId: String, inputParallelismUpdate: InputParallelismUpdate? = nil, namePrefixUpdate: String? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate? = nil) {
            self.inputId = inputId
            self.inputParallelismUpdate = inputParallelismUpdate
            self.namePrefixUpdate = namePrefixUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.inputProcessingConfigurationUpdate = inputProcessingConfigurationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case inputParallelismUpdate = "InputParallelismUpdate"
            case namePrefixUpdate = "NamePrefixUpdate"
            case kinesisFirehoseInputUpdate = "KinesisFirehoseInputUpdate"
            case inputSchemaUpdate = "InputSchemaUpdate"
            case kinesisStreamsInputUpdate = "KinesisStreamsInputUpdate"
            case inputProcessingConfigurationUpdate = "InputProcessingConfigurationUpdate"
        }
    }

    public struct CheckpointConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum), 
            AWSShapeMember(label: "CheckpointInterval", required: false, type: .long), 
            AWSShapeMember(label: "MinPauseBetweenCheckpoints", required: false, type: .long), 
            AWSShapeMember(label: "CheckpointingEnabled", required: false, type: .boolean)
        ]
        /// Describes whether the application uses the default checkpointing behavior in Kinesis Data Analytics.
        public let configurationType: ConfigurationType?
        /// Describes the interval in milliseconds between checkpoint operations.
        public let checkpointInterval: Int64?
        /// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
        public let minPauseBetweenCheckpoints: Int64?
        /// Describes whether checkpointing is enabled for a Java-based Kinesis Data Analytics application.
        public let checkpointingEnabled: Bool?

        public init(configurationType: ConfigurationType? = nil, checkpointInterval: Int64? = nil, minPauseBetweenCheckpoints: Int64? = nil, checkpointingEnabled: Bool? = nil) {
            self.configurationType = configurationType
            self.checkpointInterval = checkpointInterval
            self.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints
            self.checkpointingEnabled = checkpointingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "ConfigurationType"
            case checkpointInterval = "CheckpointInterval"
            case minPauseBetweenCheckpoints = "MinPauseBetweenCheckpoints"
            case checkpointingEnabled = "CheckpointingEnabled"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseOutput", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutput", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutput", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchema", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Identifies an Amazon Kinesis Data Firehose delivery stream as the destination.
        public let kinesisFirehoseOutput: KinesisFirehoseOutput?
        /// Identifies an AWS Lambda function as the destination.
        public let lambdaOutput: LambdaOutput?
        /// Identifies an Amazon Kinesis data stream as the destination.
        public let kinesisStreamsOutput: KinesisStreamsOutput?
        /// Describes the data format when records are written to the destination. 
        public let destinationSchema: DestinationSchema
        /// The name of the in-application stream.
        public let name: String

        public init(kinesisFirehoseOutput: KinesisFirehoseOutput? = nil, lambdaOutput: LambdaOutput? = nil, kinesisStreamsOutput: KinesisStreamsOutput? = nil, destinationSchema: DestinationSchema, name: String) {
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
            self.lambdaOutput = lambdaOutput
            self.kinesisStreamsOutput = kinesisStreamsOutput
            self.destinationSchema = destinationSchema
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseOutput = "KinesisFirehoseOutput"
            case lambdaOutput = "LambdaOutput"
            case kinesisStreamsOutput = "KinesisStreamsOutput"
            case destinationSchema = "DestinationSchema"
            case name = "Name"
        }
    }

    public struct AddApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputProcessingConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long)
        ]
        /// The InputProcessingConfiguration to add to the application.
        public let inputProcessingConfiguration: InputProcessingConfiguration
        /// The ID of the input configuration to add the input processing configuration to. You can get a list of the input IDs for an application using the DescribeApplication operation.
        public let inputId: String
        /// The name of the application to which you want to add the input processing configuration.
        public let applicationName: String
        /// The version of the application to which you want to add the input processing configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64

        public init(inputProcessingConfiguration: InputProcessingConfiguration, inputId: String, applicationName: String, currentApplicationVersionId: Int64) {
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.inputId = inputId
            self.applicationName = applicationName
            self.currentApplicationVersionId = currentApplicationVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case inputId = "InputId"
            case applicationName = "ApplicationName"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
        }
    }

    public struct InputParallelism: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// The number of in-application streams to create.
        public let count: Int32?

        public init(count: Int32? = nil) {
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
        }
    }

    public struct Input: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsInput", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInput", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchema", required: true, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: true, type: .string), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure)
        ]
        /// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN). 
        public let kinesisStreamsInput: KinesisStreamsInput?
        /// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
        public let kinesisFirehoseInput: KinesisFirehoseInput?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        public let inputSchema: SourceSchema
        /// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. 
        public let namePrefix: String
        /// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor. 
        public let inputProcessingConfiguration: InputProcessingConfiguration?
        /// Describes the number of in-application streams to create. 
        public let inputParallelism: InputParallelism?

        public init(kinesisStreamsInput: KinesisStreamsInput? = nil, kinesisFirehoseInput: KinesisFirehoseInput? = nil, inputSchema: SourceSchema, namePrefix: String, inputProcessingConfiguration: InputProcessingConfiguration? = nil, inputParallelism: InputParallelism? = nil) {
            self.kinesisStreamsInput = kinesisStreamsInput
            self.kinesisFirehoseInput = kinesisFirehoseInput
            self.inputSchema = inputSchema
            self.namePrefix = namePrefix
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.inputParallelism = inputParallelism
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsInput = "KinesisStreamsInput"
            case kinesisFirehoseInput = "KinesisFirehoseInput"
            case inputSchema = "InputSchema"
            case namePrefix = "NamePrefix"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case inputParallelism = "InputParallelism"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the DescribeApplication operation.
        public let inputId: String
        /// The name of the application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, inputId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.inputId = inputId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case inputId = "InputId"
            case applicationName = "ApplicationName"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string)
        ]
        /// The application name.
        public let applicationName: String
        /// The version ID of the application. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// The CloudWatchLoggingOptionId of the Amazon CloudWatch logging option to delete. You can get the CloudWatchLoggingOptionId by using the DescribeApplication operation. 
        public let cloudWatchLoggingOptionId: String

        public init(applicationName: String, currentApplicationVersionId: Int64, cloudWatchLoggingOptionId: String) {
            self.applicationName = applicationName
            self.currentApplicationVersionId = currentApplicationVersionId
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct StartApplicationResponse: AWSShape {

    }

    public struct ApplicationCodeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentType", required: true, type: .enum), 
            AWSShapeMember(label: "CodeContent", required: false, type: .structure)
        ]
        /// Specifies whether the code content is in text or zip format.
        public let codeContentType: CodeContentType
        /// The location and type of the application code.
        public let codeContent: CodeContent?

        public init(codeContentType: CodeContentType, codeContent: CodeContent? = nil) {
            self.codeContentType = codeContentType
            self.codeContent = codeContent
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentType = "CodeContentType"
            case codeContent = "CodeContent"
        }
    }

    public struct RecordColumn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mapping", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SqlType", required: true, type: .string)
        ]
        /// A reference to the data element in the streaming input of the reference data source.
        public let mapping: String?
        /// The name of the column that is created in the in-application input stream or reference table.
        public let name: String
        /// The type of column created in the in-application input stream or reference table.
        public let sqlType: String

        public init(mapping: String? = nil, name: String, sqlType: String) {
            self.mapping = mapping
            self.name = name
            self.sqlType = sqlType
        }

        private enum CodingKeys: String, CodingKey {
            case mapping = "Mapping"
            case name = "Name"
            case sqlType = "SqlType"
        }
    }

    public struct CheckpointConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "CheckpointingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "MinPauseBetweenCheckpoints", required: false, type: .long), 
            AWSShapeMember(label: "CheckpointInterval", required: false, type: .long)
        ]
        /// Describes whether the application uses Amazon Kinesis Data Analytics' default checkpointing behavior. 
        public let configurationType: ConfigurationType
        /// Describes whether checkpointing is enabled for a Java-based Kinesis Data Analytics application.
        public let checkpointingEnabled: Bool?
        /// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see  Tuning Checkpointing in the Apache Flink Documentation.
        public let minPauseBetweenCheckpoints: Int64?
        /// Describes the interval in milliseconds between checkpoint operations. 
        public let checkpointInterval: Int64?

        public init(configurationType: ConfigurationType, checkpointingEnabled: Bool? = nil, minPauseBetweenCheckpoints: Int64? = nil, checkpointInterval: Int64? = nil) {
            self.configurationType = configurationType
            self.checkpointingEnabled = checkpointingEnabled
            self.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints
            self.checkpointInterval = checkpointInterval
        }

        private enum CodingKeys: String, CodingKey {
            case configurationType = "ConfigurationType"
            case checkpointingEnabled = "CheckpointingEnabled"
            case minPauseBetweenCheckpoints = "MinPauseBetweenCheckpoints"
            case checkpointInterval = "CheckpointInterval"
        }
    }

    public struct ApplicationDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceExecutionRole", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string)
        ]
        /// Specifies the IAM role that the application uses to access external resources.
        public let serviceExecutionRole: String?
        /// The description of the application.
        public let applicationDescription: String?
        /// Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.
        public let applicationVersionId: Int64
        /// The name of the application.
        public let applicationName: String
        /// Provides details about the application's SQL or Java code and starting parameters.
        public let applicationConfigurationDescription: ApplicationConfigurationDescription?
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment
        /// Describes the application Amazon CloudWatch logging options.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// The status of the application.
        public let applicationStatus: ApplicationStatus
        /// The current timestamp when the application was created.
        public let createTimestamp: TimeStamp?
        /// The current timestamp when the application was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// The ARN of the application.
        public let applicationARN: String

        public init(serviceExecutionRole: String? = nil, applicationDescription: String? = nil, applicationVersionId: Int64, applicationName: String, applicationConfigurationDescription: ApplicationConfigurationDescription? = nil, runtimeEnvironment: RuntimeEnvironment, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationStatus: ApplicationStatus, createTimestamp: TimeStamp? = nil, lastUpdateTimestamp: TimeStamp? = nil, applicationARN: String) {
            self.serviceExecutionRole = serviceExecutionRole
            self.applicationDescription = applicationDescription
            self.applicationVersionId = applicationVersionId
            self.applicationName = applicationName
            self.applicationConfigurationDescription = applicationConfigurationDescription
            self.runtimeEnvironment = runtimeEnvironment
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationStatus = applicationStatus
            self.createTimestamp = createTimestamp
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case serviceExecutionRole = "ServiceExecutionRole"
            case applicationDescription = "ApplicationDescription"
            case applicationVersionId = "ApplicationVersionId"
            case applicationName = "ApplicationName"
            case applicationConfigurationDescription = "ApplicationConfigurationDescription"
            case runtimeEnvironment = "RuntimeEnvironment"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationStatus = "ApplicationStatus"
            case createTimestamp = "CreateTimestamp"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct RunConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreConfiguration", required: false, type: .structure)
        ]
        /// Describes updates to the restore behavior of a restarting application.
        public let applicationRestoreConfiguration: ApplicationRestoreConfiguration?

        public init(applicationRestoreConfiguration: ApplicationRestoreConfiguration? = nil) {
            self.applicationRestoreConfiguration = applicationRestoreConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreConfiguration = "ApplicationRestoreConfiguration"
        }
    }

    public struct DeleteApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Kinesis Data Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        public let referenceId: String
        /// The current application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The name of an existing application.
        public let applicationName: String

        public init(referenceId: String, currentApplicationVersionId: Int64, applicationName: String) {
            self.referenceId = referenceId
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case referenceId = "ReferenceId"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct CloudWatchLoggingOptionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the CloudWatch log to receive application messages.
        public let logStreamARN: String
        /// The IAM ARN of the role to use to send application messages.   Provided for backward compatibility. Applications created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The ID of the CloudWatch logging option description.
        public let cloudWatchLoggingOptionId: String?

        public init(logStreamARN: String, roleARN: String? = nil, cloudWatchLoggingOptionId: String? = nil) {
            self.logStreamARN = logStreamARN
            self.roleARN = roleARN
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct FlinkApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CheckpointConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ParallelismConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringConfiguration", required: false, type: .structure)
        ]
        /// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see  Checkpoints for Fault Tolerance in the Apache Flink Documentation. 
        public let checkpointConfiguration: CheckpointConfiguration?
        /// Describes parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfiguration: ParallelismConfiguration?
        /// Describes configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfiguration: MonitoringConfiguration?

        public init(checkpointConfiguration: CheckpointConfiguration? = nil, parallelismConfiguration: ParallelismConfiguration? = nil, monitoringConfiguration: MonitoringConfiguration? = nil) {
            self.checkpointConfiguration = checkpointConfiguration
            self.parallelismConfiguration = parallelismConfiguration
            self.monitoringConfiguration = monitoringConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case checkpointConfiguration = "CheckpointConfiguration"
            case parallelismConfiguration = "ParallelismConfiguration"
            case monitoringConfiguration = "MonitoringConfiguration"
        }
    }

    public struct AddApplicationReferenceDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The updated application version ID. Amazon Kinesis Data Analytics increments this ID when the application is updated.
        public let applicationVersionId: Int64?
        /// Describes reference data sources configured for the application. 
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct DescribeApplicationSnapshotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDetails", required: true, type: .structure)
        ]
        /// An object containing information about the application snapshot.
        public let snapshotDetails: SnapshotDetails

        public init(snapshotDetails: SnapshotDetails) {
            self.snapshotDetails = snapshotDetails
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDetails = "SnapshotDetails"
        }
    }

    public struct SqlApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceDataSourceUpdates", required: false, type: .list), 
            AWSShapeMember(label: "InputUpdates", required: false, type: .list), 
            AWSShapeMember(label: "OutputUpdates", required: false, type: .list)
        ]
        /// The array of ReferenceDataSourceUpdate objects describing the new reference data sources used by the application.
        public let referenceDataSourceUpdates: [ReferenceDataSourceUpdate]?
        /// The array of InputUpdate objects describing the new input streams used by the application.
        public let inputUpdates: [InputUpdate]?
        /// The array of OutputUpdate objects describing the new destination streams used by the application.
        public let outputUpdates: [OutputUpdate]?

        public init(referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil, inputUpdates: [InputUpdate]? = nil, outputUpdates: [OutputUpdate]? = nil) {
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
            self.inputUpdates = inputUpdates
            self.outputUpdates = outputUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case referenceDataSourceUpdates = "ReferenceDataSourceUpdates"
            case inputUpdates = "InputUpdates"
            case outputUpdates = "OutputUpdates"
        }
    }

    public struct AddApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Output", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long)
        ]
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an AWS Lambda function), and record the formation to use when writing to the destination.
        public let output: Output
        /// The name of the application to which you want to add the output configuration.
        public let applicationName: String
        /// The version of the application to which you want to add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64

        public init(output: Output, applicationName: String, currentApplicationVersionId: Int64) {
            self.output = output
            self.applicationName = applicationName
            self.currentApplicationVersionId = currentApplicationVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case output = "Output"
            case applicationName = "ApplicationName"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
        }
    }

    public struct ApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationCodeConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationSnapshotConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "FlinkApplicationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentProperties", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfiguration", required: false, type: .structure)
        ]
        /// The code location and type parameters for a Java-based Kinesis Data Analytics application.
        public let applicationCodeConfiguration: ApplicationCodeConfiguration
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfiguration: ApplicationSnapshotConfiguration?
        /// The creation and update parameters for a Java-based Kinesis Data Analytics application.
        public let flinkApplicationConfiguration: FlinkApplicationConfiguration?
        /// Describes execution properties for a Java-based Kinesis Data Analytics application.
        public let environmentProperties: EnvironmentProperties?
        /// The creation and update parameters for an SQL-based Kinesis Data Analytics application.
        public let sqlApplicationConfiguration: SqlApplicationConfiguration?

        public init(applicationCodeConfiguration: ApplicationCodeConfiguration, applicationSnapshotConfiguration: ApplicationSnapshotConfiguration? = nil, flinkApplicationConfiguration: FlinkApplicationConfiguration? = nil, environmentProperties: EnvironmentProperties? = nil, sqlApplicationConfiguration: SqlApplicationConfiguration? = nil) {
            self.applicationCodeConfiguration = applicationCodeConfiguration
            self.applicationSnapshotConfiguration = applicationSnapshotConfiguration
            self.flinkApplicationConfiguration = flinkApplicationConfiguration
            self.environmentProperties = environmentProperties
            self.sqlApplicationConfiguration = sqlApplicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case applicationCodeConfiguration = "ApplicationCodeConfiguration"
            case applicationSnapshotConfiguration = "ApplicationSnapshotConfiguration"
            case flinkApplicationConfiguration = "FlinkApplicationConfiguration"
            case environmentProperties = "EnvironmentProperties"
            case sqlApplicationConfiguration = "SqlApplicationConfiguration"
        }
    }

    public struct ApplicationCodeConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentType", required: true, type: .enum), 
            AWSShapeMember(label: "CodeContentDescription", required: false, type: .structure)
        ]
        /// Specifies whether the code content is in text or zip format.
        public let codeContentType: CodeContentType
        /// Describes details about the location and format of the application code.
        public let codeContentDescription: CodeContentDescription?

        public init(codeContentType: CodeContentType, codeContentDescription: CodeContentDescription? = nil) {
            self.codeContentType = codeContentType
            self.codeContentDescription = codeContentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentType = "CodeContentType"
            case codeContentDescription = "CodeContentDescription"
        }
    }

    public struct ParallelismConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parallelism", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "ParallelismPerKPU", required: false, type: .integer)
        ]
        /// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration$AutoScalingEnabled is set to true.
        public let parallelism: Int32?
        /// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabled: Bool?
        /// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service.
        public let configurationType: ConfigurationType
        /// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
        public let parallelismPerKPU: Int32?

        public init(parallelism: Int32? = nil, autoScalingEnabled: Bool? = nil, configurationType: ConfigurationType, parallelismPerKPU: Int32? = nil) {
            self.parallelism = parallelism
            self.autoScalingEnabled = autoScalingEnabled
            self.configurationType = configurationType
            self.parallelismPerKPU = parallelismPerKPU
        }

        private enum CodingKeys: String, CodingKey {
            case parallelism = "Parallelism"
            case autoScalingEnabled = "AutoScalingEnabled"
            case configurationType = "ConfigurationType"
            case parallelismPerKPU = "ParallelismPerKPU"
        }
    }

    public struct AddApplicationInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// Provides the current application version.
        public let applicationVersionId: Int64?
        /// Describes the application input configuration. 
        public let inputDescriptions: [InputDescription]?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, inputDescriptions: [InputDescription]? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.inputDescriptions = inputDescriptions
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case inputDescriptions = "InputDescriptions"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct CodeContent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZipFileContent", required: false, type: .blob), 
            AWSShapeMember(label: "S3ContentLocation", required: false, type: .structure), 
            AWSShapeMember(label: "TextContent", required: false, type: .string)
        ]
        /// The zip-format code for a Java-based Kinesis Data Analytics application.
        public let zipFileContent: Data?
        /// Information about the Amazon S3 bucket containing the application code.
        public let s3ContentLocation: S3ContentLocation?
        /// The text-format code for a Java-based Kinesis Data Analytics application.
        public let textContent: String?

        public init(zipFileContent: Data? = nil, s3ContentLocation: S3ContentLocation? = nil, textContent: String? = nil) {
            self.zipFileContent = zipFileContent
            self.s3ContentLocation = s3ContentLocation
            self.textContent = textContent
        }

        private enum CodingKeys: String, CodingKey {
            case zipFileContent = "ZipFileContent"
            case s3ContentLocation = "S3ContentLocation"
            case textContent = "TextContent"
        }
    }

    public struct InputProcessingConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorUpdate", required: true, type: .structure)
        ]
        /// Provides update information for an InputLambdaProcessor.
        public let inputLambdaProcessorUpdate: InputLambdaProcessorUpdate

        public init(inputLambdaProcessorUpdate: InputLambdaProcessorUpdate) {
            self.inputLambdaProcessorUpdate = inputLambdaProcessorUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorUpdate = "InputLambdaProcessorUpdate"
        }
    }

    public struct ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableNameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ReferenceSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "S3ReferenceDataSourceUpdate", required: false, type: .structure)
        ]
        /// The in-application table name that is created by this update.
        public let tableNameUpdate: String?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream. 
        public let referenceSchemaUpdate: SourceSchema?
        /// The ID of the reference data source that is being updated. You can use the DescribeApplication operation to get this value.
        public let referenceId: String
        /// Describes the S3 bucket name, object key name, and IAM role that Kinesis Data Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        public let s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate?

        public init(tableNameUpdate: String? = nil, referenceSchemaUpdate: SourceSchema? = nil, referenceId: String, s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil) {
            self.tableNameUpdate = tableNameUpdate
            self.referenceSchemaUpdate = referenceSchemaUpdate
            self.referenceId = referenceId
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case tableNameUpdate = "TableNameUpdate"
            case referenceSchemaUpdate = "ReferenceSchemaUpdate"
            case referenceId = "ReferenceId"
            case s3ReferenceDataSourceUpdate = "S3ReferenceDataSourceUpdate"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceExecutionRole", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .list)
        ]
        /// The name of your application (for example, sample-app).
        public let applicationName: String
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment
        /// A summary description of the application.
        public let applicationDescription: String?
        /// Use this parameter to configure the application.
        public let applicationConfiguration: ApplicationConfiguration?
        /// The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
        public let serviceExecutionRole: String
        /// Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. 
        public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?

        public init(applicationName: String, runtimeEnvironment: RuntimeEnvironment, applicationDescription: String? = nil, applicationConfiguration: ApplicationConfiguration? = nil, serviceExecutionRole: String, cloudWatchLoggingOptions: [CloudWatchLoggingOption]? = nil) {
            self.applicationName = applicationName
            self.runtimeEnvironment = runtimeEnvironment
            self.applicationDescription = applicationDescription
            self.applicationConfiguration = applicationConfiguration
            self.serviceExecutionRole = serviceExecutionRole
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case runtimeEnvironment = "RuntimeEnvironment"
            case applicationDescription = "ApplicationDescription"
            case applicationConfiguration = "ApplicationConfiguration"
            case serviceExecutionRole = "ServiceExecutionRole"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        }
    }

    public struct DeleteApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotCreationTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The identifier for the snapshot delete.
        public let snapshotName: String
        /// The creation timestamp of the application snapshot to delete. You can retrieve this value using or .
        public let snapshotCreationTimestamp: TimeStamp
        /// The name of an existing application.
        public let applicationName: String

        public init(snapshotName: String, snapshotCreationTimestamp: TimeStamp, applicationName: String) {
            self.snapshotName = snapshotName
            self.snapshotCreationTimestamp = snapshotCreationTimestamp
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotName = "SnapshotName"
            case snapshotCreationTimestamp = "SnapshotCreationTimestamp"
            case applicationName = "ApplicationName"
        }
    }

    public struct StopApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the running application to stop.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public enum MetricsLevel: String, CustomStringConvertible, Codable {
        case application = "APPLICATION"
        case task = "TASK"
        case `operator` = "OPERATOR"
        case parallelism = "PARALLELISM"
        public var description: String { return self.rawValue }
    }

    public struct S3ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceRoleARN", required: false, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.   Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let referenceRoleARN: String?
        /// Amazon S3 object key name.
        public let fileKey: String

        public init(bucketARN: String, referenceRoleARN: String? = nil, fileKey: String) {
            self.bucketARN = bucketARN
            self.referenceRoleARN = referenceRoleARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case referenceRoleARN = "ReferenceRoleARN"
            case fileKey = "FileKey"
        }
    }

    public struct MonitoringConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsLevelUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "LogLevelUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum)
        ]
        /// Describes updates to the granularity of the CloudWatch Logs for an application.
        public let metricsLevelUpdate: MetricsLevel?
        /// Describes updates to the verbosity of the CloudWatch Logs for an application.
        public let logLevelUpdate: LogLevel?
        /// Describes updates to whether to use the default CloudWatch logging configuration for an application.
        public let configurationTypeUpdate: ConfigurationType?

        public init(metricsLevelUpdate: MetricsLevel? = nil, logLevelUpdate: LogLevel? = nil, configurationTypeUpdate: ConfigurationType? = nil) {
            self.metricsLevelUpdate = metricsLevelUpdate
            self.logLevelUpdate = logLevelUpdate
            self.configurationTypeUpdate = configurationTypeUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case metricsLevelUpdate = "MetricsLevelUpdate"
            case logLevelUpdate = "LogLevelUpdate"
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
        }
    }

    public struct DeleteApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the AddApplicationOutput operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        public let outputId: String
        /// The application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The application name.
        public let applicationName: String

        public init(outputId: String, currentApplicationVersionId: Int64, applicationName: String) {
            self.outputId = outputId
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case outputId = "OutputId"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct ListApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results. For more information about pagination, see Using the AWS Command Line Interface's Pagination Options.
        public let nextToken: String?
        /// The maximum number of applications to list.
        public let limit: Int32?

        public init(nextToken: String? = nil, limit: Int32? = nil) {
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct ApplicationRestoreConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationRestoreType", required: true, type: .enum)
        ]
        /// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
        public let snapshotName: String?
        /// Specifies how the application should be restored.
        public let applicationRestoreType: ApplicationRestoreType

        public init(snapshotName: String? = nil, applicationRestoreType: ApplicationRestoreType) {
            self.snapshotName = snapshotName
            self.applicationRestoreType = applicationRestoreType
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotName = "SnapshotName"
            case applicationRestoreType = "ApplicationRestoreType"
        }
    }

    public struct AddApplicationOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string), 
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list)
        ]
        /// The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        public let outputDescriptions: [OutputDescription]?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil, outputDescriptions: [OutputDescription]? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
            self.outputDescriptions = outputDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
            case outputDescriptions = "OutputDescriptions"
        }
    }

    public struct S3ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string), 
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string)
        ]
        /// The object key name.
        public let fileKeyUpdate: String?
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARNUpdate: String?

        public init(fileKeyUpdate: String? = nil, bucketARNUpdate: String? = nil) {
            self.fileKeyUpdate = fileKeyUpdate
            self.bucketARNUpdate = bucketARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case fileKeyUpdate = "FileKeyUpdate"
            case bucketARNUpdate = "BucketARNUpdate"
        }
    }

    public struct ListApplicationSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of application snapshots to list.
        public let limit: Int32?
        /// The name of an existing application.
        public let applicationName: String
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from. 
        public let nextToken: String?

        public init(limit: Int32? = nil, applicationName: String, nextToken: String? = nil) {
            self.limit = limit
            self.applicationName = applicationName
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case applicationName = "ApplicationName"
            case nextToken = "NextToken"
        }
    }

    public enum LogLevel: String, CustomStringConvertible, Codable {
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case debug = "DEBUG"
        public var description: String { return self.rawValue }
    }

    public enum CodeContentType: String, CustomStringConvertible, Codable {
        case plaintext = "PLAINTEXT"
        case zipfile = "ZIPFILE"
        public var description: String { return self.rawValue }
    }

    public struct InputLambdaProcessorDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// The ARN of the AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARN: String
        /// The ARN of the IAM role that is used to access the AWS Lambda function.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?

        public init(resourceARN: String, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct CloudWatchLoggingOptionUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string), 
            AWSShapeMember(label: "LogStreamARNUpdate", required: false, type: .string)
        ]
        /// The ID of the CloudWatch logging option to update
        public let cloudWatchLoggingOptionId: String
        /// The Amazon Resource Name (ARN) of the CloudWatch log to receive application messages.
        public let logStreamARNUpdate: String?

        public init(cloudWatchLoggingOptionId: String, logStreamARNUpdate: String? = nil) {
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.logStreamARNUpdate = logStreamARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case logStreamARNUpdate = "LogStreamARNUpdate"
        }
    }

    public struct ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchema", required: true, type: .structure), 
            AWSShapeMember(label: "S3ReferenceDataSource", required: false, type: .structure)
        ]
        /// The name of the in-application table to create.
        public let tableName: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema
        /// Identifies the S3 bucket and object that contains the reference data. A Kinesis Data Analytics application loads reference data only once. If the data changes, you call the UpdateApplication operation to trigger reloading of data into your application. 
        public let s3ReferenceDataSource: S3ReferenceDataSource?

        public init(tableName: String, referenceSchema: SourceSchema, s3ReferenceDataSource: S3ReferenceDataSource? = nil) {
            self.tableName = tableName
            self.referenceSchema = referenceSchema
            self.s3ReferenceDataSource = s3ReferenceDataSource
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case referenceSchema = "ReferenceSchema"
            case s3ReferenceDataSource = "S3ReferenceDataSource"
        }
    }

}