// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cur {

    public enum ReportFormat: String, CustomStringConvertible {
        case textorcsv = "textORcsv"
        public var description: String { return self.rawValue }
    }

    public enum AdditionalArtifact: String, CustomStringConvertible {
        case redshift = "REDSHIFT"
        case quicksight = "QUICKSIGHT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReportDefinitionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nextToken: String?
        public let reportDefinitions: [ReportDefinition]?

        public init(nextToken: String? = nil, reportDefinitions: [ReportDefinition]? = nil) {
            self.nextToken = nextToken
            self.reportDefinitions = reportDefinitions
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            if let reportDefinitions = dictionary["ReportDefinitions"] as? [[String: Any]] {
                self.reportDefinitions = try reportDefinitions.map({ try ReportDefinition(dictionary: $0) })
            } else { 
                self.reportDefinitions = nil
            }
        }
    }

    public enum CompressionFormat: String, CustomStringConvertible {
        case zip = "ZIP"
        case gzip = "GZIP"
        public var description: String { return self.rawValue }
    }

    public struct DeleteReportDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let responseMessage: String?

        public init(responseMessage: String? = nil) {
            self.responseMessage = responseMessage
        }

        public init(dictionary: [String: Any]) throws {
            self.responseMessage = dictionary["ResponseMessage"] as? String
        }
    }

    public struct PutReportDefinitionResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ReportDefinition: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let timeUnit: TimeUnit
        public let format: ReportFormat
        public let compression: CompressionFormat
        public let reportName: String
        public let s3Region: AWSRegion
        public let additionalArtifacts: [AdditionalArtifact]?
        public let additionalSchemaElements: [SchemaElement]
        public let s3Bucket: String
        public let s3Prefix: String

        public init(timeUnit: TimeUnit, format: ReportFormat, compression: CompressionFormat, reportName: String, s3Region: AWSRegion, additionalArtifacts: [AdditionalArtifact]? = nil, additionalSchemaElements: [SchemaElement], s3Bucket: String, s3Prefix: String) {
            self.timeUnit = timeUnit
            self.format = format
            self.compression = compression
            self.reportName = reportName
            self.s3Region = s3Region
            self.additionalArtifacts = additionalArtifacts
            self.additionalSchemaElements = additionalSchemaElements
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        public init(dictionary: [String: Any]) throws {
            guard let rawTimeUnit = dictionary["TimeUnit"] as? String, let timeUnit = TimeUnit(rawValue: rawTimeUnit) else { throw InitializableError.missingRequiredParam("TimeUnit") }
            self.timeUnit = timeUnit
            guard let rawFormat = dictionary["Format"] as? String, let format = ReportFormat(rawValue: rawFormat) else { throw InitializableError.missingRequiredParam("Format") }
            self.format = format
            guard let rawCompression = dictionary["Compression"] as? String, let compression = CompressionFormat(rawValue: rawCompression) else { throw InitializableError.missingRequiredParam("Compression") }
            self.compression = compression
            guard let reportName = dictionary["ReportName"] as? String else { throw InitializableError.missingRequiredParam("ReportName") }
            self.reportName = reportName
            guard let rawS3Region = dictionary["S3Region"] as? String, let s3Region = AWSRegion(rawValue: rawS3Region) else { throw InitializableError.missingRequiredParam("S3Region") }
            self.s3Region = s3Region
            if let additionalArtifacts = dictionary["AdditionalArtifacts"] as? [String] { self.additionalArtifacts = additionalArtifacts.flatMap({ AdditionalArtifact(rawValue: $0)}) } else { self.additionalArtifacts = nil }
            guard let additionalSchemaElements = dictionary["AdditionalSchemaElements"] as? [String] else { throw InitializableError.missingRequiredParam("AdditionalSchemaElements") }
            self.additionalSchemaElements = additionalSchemaElements.flatMap({ SchemaElement(rawValue: $0)})
            guard let s3Bucket = dictionary["S3Bucket"] as? String else { throw InitializableError.missingRequiredParam("S3Bucket") }
            self.s3Bucket = s3Bucket
            guard let s3Prefix = dictionary["S3Prefix"] as? String else { throw InitializableError.missingRequiredParam("S3Prefix") }
            self.s3Prefix = s3Prefix
        }
    }

    public enum AWSRegion: String, CustomStringConvertible {
        case us_east_1 = "us-east-1"
        case us_west_1 = "us-west-1"
        case us_west_2 = "us-west-2"
        case eu_central_1 = "eu-central-1"
        case eu_west_1 = "eu-west-1"
        case ap_southeast_1 = "ap-southeast-1"
        case ap_southeast_2 = "ap-southeast-2"
        case ap_northeast_1 = "ap-northeast-1"
        public var description: String { return self.rawValue }
    }

    public struct PutReportDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let reportDefinition: ReportDefinition

        public init(reportDefinition: ReportDefinition) {
            self.reportDefinition = reportDefinition
        }

        public init(dictionary: [String: Any]) throws {
            guard let reportDefinition = dictionary["ReportDefinition"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ReportDefinition") }
            self.reportDefinition = try Cur.ReportDefinition(dictionary: reportDefinition)
        }
    }

    public enum TimeUnit: String, CustomStringConvertible {
        case hourly = "HOURLY"
        case daily = "DAILY"
        public var description: String { return self.rawValue }
    }

    public enum SchemaElement: String, CustomStringConvertible {
        case resources = "RESOURCES"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReportDefinitionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["NextToken"] as? String
            self.maxResults = dictionary["MaxResults"] as? Int32
        }
    }

    public struct DeleteReportDefinitionRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public let reportName: String?

        public init(reportName: String? = nil) {
            self.reportName = reportName
        }

        public init(dictionary: [String: Any]) throws {
            self.reportName = dictionary["ReportName"] as? String
        }
    }

}